
sounsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800100  00800100  00000a9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000944  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048a  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c7  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000027fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_3>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	ac 32       	cpi	r26, 0x2C	; 44
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 a0 02 	call	0x540	; 0x540 <main>
  b6:	0c 94 12 05 	jmp	0xa24	; 0xa24 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <initDistanceSensor>:
void initDistanceSensor(void){
	//initialize ultrasonic sensor
	
	//setup the DDR register and the pin change mask
	
	DDRB |= (1<<TRIGG0);
  be:	22 9a       	sbi	0x04, 2	; 4
	DDRB &= ~(1<<ECHO0);
  c0:	23 98       	cbi	0x04, 3	; 4
	DDRB |= (1<<TRIGG1);
  c2:	24 9a       	sbi	0x04, 4	; 4
	DDRB &= ~(1<<ECHO1);
  c4:	25 98       	cbi	0x04, 5	; 4

	PCMSK0 |= (1<<ECHO0) | (1<<ECHO1);;
  c6:	eb e6       	ldi	r30, 0x6B	; 107
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 62       	ori	r24, 0x28	; 40
  ce:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE0);
  d0:	e8 e6       	ldi	r30, 0x68	; 104
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24

	

	sei();//opposite of cli();
  da:	78 94       	sei

	//Timer
	TCCR1B |= (1<<CS11)|(1<<CS10);//counter 1 in register TCNT1  - 4 uS/c clk/64 prescaler
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <sendTriggPulse>:
}

void sendTriggPulse(int device){
	TCNT1 = 0;
  e8:	e4 e8       	ldi	r30, 0x84	; 132
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	11 82       	std	Z+1, r1	; 0x01
  ee:	10 82       	st	Z, r1
	int pulseStartTimeC = TCNT1;
  f0:	20 81       	ld	r18, Z
  f2:	31 81       	ldd	r19, Z+1	; 0x01
	PORTB |= (1<<device);
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <sendTriggPulse+0x18>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	8a 95       	dec	r24
 102:	e2 f7       	brpl	.-8      	; 0xfc <sendTriggPulse+0x14>
 104:	94 2b       	or	r25, r20
 106:	95 b9       	out	0x05, r25	; 5
	
	while (TCNT1 < pulseStartTimeC + triggPulsLengthC);//wait the right amount of time
 108:	2e 5f       	subi	r18, 0xFE	; 254
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	82 17       	cp	r24, r18
 112:	93 07       	cpc	r25, r19
 114:	d8 f3       	brcs	.-10     	; 0x10c <sendTriggPulse+0x24>
	
	PORTB &= ~(1<<device);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	40 95       	com	r20
 11a:	48 23       	and	r20, r24
 11c:	45 b9       	out	0x05, r20	; 5
 11e:	08 95       	ret

00000120 <angleCalculator>:
}

void angleCalculator(void){
 120:	8f 92       	push	r8
 122:	9f 92       	push	r9
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
	if (echoDistance[0] <= 20 && echoDistance[1] >= echoDistance[0])
 130:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <echoDistance>
 134:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <echoDistance+0x1>
 138:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <echoDistance+0x2>
 13c:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <echoDistance+0x3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 ea       	ldi	r20, 0xA0	; 160
 146:	51 e4       	ldi	r21, 0x41	; 65
 148:	c7 01       	movw	r24, r14
 14a:	b6 01       	movw	r22, r12
 14c:	0e 94 44 03 	call	0x688	; 0x688 <__cmpsf2>
 150:	18 16       	cp	r1, r24
 152:	0c f4       	brge	.+2      	; 0x156 <angleCalculator+0x36>
 154:	4b c0       	rjmp	.+150    	; 0x1ec <angleCalculator+0xcc>
 156:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <echoDistance+0x4>
 15a:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <echoDistance+0x5>
 15e:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <echoDistance+0x6>
 162:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <echoDistance+0x7>
 166:	a5 01       	movw	r20, r10
 168:	94 01       	movw	r18, r8
 16a:	c7 01       	movw	r24, r14
 16c:	b6 01       	movw	r22, r12
 16e:	0e 94 44 03 	call	0x688	; 0x688 <__cmpsf2>
 172:	18 16       	cp	r1, r24
 174:	dc f1       	brlt	.+118    	; 0x1ec <angleCalculator+0xcc>
		{

			length = (echoDistance[1] - echoDistance[0]);
 176:	a7 01       	movw	r20, r14
 178:	96 01       	movw	r18, r12
 17a:	c5 01       	movw	r24, r10
 17c:	b4 01       	movw	r22, r8
 17e:	0e 94 a8 02 	call	0x550	; 0x550 <__subsf3>
 182:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <length>
 186:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <length+0x1>
 18a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <length+0x2>
 18e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <length+0x3>
			differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
 192:	23 e3       	ldi	r18, 0x33	; 51
 194:	33 e3       	ldi	r19, 0x33	; 51
 196:	43 ed       	ldi	r20, 0xD3	; 211
 198:	50 e4       	ldi	r21, 0x40	; 64
 19a:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 19e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <differenceLength>
 1a2:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <differenceLength+0x1>
 1a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <differenceLength+0x2>
 1aa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <differenceLength+0x3>
			angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
 1ae:	0e 94 15 03 	call	0x62a	; 0x62a <atan>
 1b2:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <angleradian>
 1b6:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <angleradian+0x1>
 1ba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <angleradian+0x2>
 1be:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <angleradian+0x3>
			angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	44 e3       	ldi	r20, 0x34	; 52
 1c8:	53 e4       	ldi	r21, 0x43	; 67
 1ca:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
 1ce:	23 ec       	ldi	r18, 0xC3	; 195
 1d0:	35 ef       	ldi	r19, 0xF5	; 245
 1d2:	48 e4       	ldi	r20, 0x48	; 72
 1d4:	50 e4       	ldi	r21, 0x40	; 64
 1d6:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 1da:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <angledegree>
 1de:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <angledegree+0x1>
 1e2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angledegree+0x2>
 1e6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angledegree+0x3>
 1ea:	55 c0       	rjmp	.+170    	; 0x296 <angleCalculator+0x176>
		}
		else if (echoDistance[1] <= 20 && echoDistance[0] >= echoDistance[1])
 1ec:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <echoDistance+0x4>
 1f0:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <echoDistance+0x5>
 1f4:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <echoDistance+0x6>
 1f8:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <echoDistance+0x7>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 ea       	ldi	r20, 0xA0	; 160
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	c5 01       	movw	r24, r10
 206:	b4 01       	movw	r22, r8
 208:	0e 94 44 03 	call	0x688	; 0x688 <__cmpsf2>
 20c:	18 16       	cp	r1, r24
 20e:	0c f4       	brge	.+2      	; 0x212 <angleCalculator+0xf2>
 210:	42 c0       	rjmp	.+132    	; 0x296 <angleCalculator+0x176>
 212:	a5 01       	movw	r20, r10
 214:	94 01       	movw	r18, r8
 216:	c7 01       	movw	r24, r14
 218:	b6 01       	movw	r22, r12
 21a:	0e 94 94 04 	call	0x928	; 0x928 <__gesf2>
 21e:	88 23       	and	r24, r24
 220:	d4 f1       	brlt	.+116    	; 0x296 <angleCalculator+0x176>
		{

			length = (echoDistance[0] - echoDistance[1]);
 222:	a5 01       	movw	r20, r10
 224:	94 01       	movw	r18, r8
 226:	c7 01       	movw	r24, r14
 228:	b6 01       	movw	r22, r12
 22a:	0e 94 a8 02 	call	0x550	; 0x550 <__subsf3>
 22e:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <length>
 232:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <length+0x1>
 236:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <length+0x2>
 23a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <length+0x3>
			differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
 23e:	23 e3       	ldi	r18, 0x33	; 51
 240:	33 e3       	ldi	r19, 0x33	; 51
 242:	43 ed       	ldi	r20, 0xD3	; 211
 244:	50 e4       	ldi	r21, 0x40	; 64
 246:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 24a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <differenceLength>
 24e:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <differenceLength+0x1>
 252:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <differenceLength+0x2>
 256:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <differenceLength+0x3>
			angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
 25a:	0e 94 15 03 	call	0x62a	; 0x62a <atan>
 25e:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <angleradian>
 262:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <angleradian+0x1>
 266:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <angleradian+0x2>
 26a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <angleradian+0x3>
			angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	44 e3       	ldi	r20, 0x34	; 52
 274:	53 e4       	ldi	r21, 0x43	; 67
 276:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
 27a:	23 ec       	ldi	r18, 0xC3	; 195
 27c:	35 ef       	ldi	r19, 0xF5	; 245
 27e:	48 e4       	ldi	r20, 0x48	; 72
 280:	50 e4       	ldi	r21, 0x40	; 64
 282:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 286:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <angledegree>
 28a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <angledegree+0x1>
 28e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angledegree+0x2>
 292:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angledegree+0x3>
		}
		else{

		}
}
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	cf 90       	pop	r12
 29e:	bf 90       	pop	r11
 2a0:	af 90       	pop	r10
 2a2:	9f 90       	pop	r9
 2a4:	8f 90       	pop	r8
 2a6:	08 95       	ret

000002a8 <__vector_3>:

int runcount2 = 0;
int runcount1 = 0;
ISR(PCINT0_vect){//PD
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	//check which device it is and keep that device for the falling edge
	static int prevDevice;
	static int device;
	device = PINB;
 2d2:	83 b1       	in	r24, 0x03	; 3
	device &= ~(1<<PORTB7);
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	8f 77       	andi	r24, 0x7F	; 127
 2d8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <device.1735+0x1>
 2dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <device.1735>
	
	if (device == 0)
 2e0:	89 2b       	or	r24, r25
 2e2:	41 f4       	brne	.+16     	; 0x2f4 <__vector_3+0x4c>
	{
		device = prevDevice;//save the current device
 2e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <device.1735+0x1>
 2f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <device.1735>
	}
	
	switch(device){
 2f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <device.1735>
 2f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <device.1735+0x1>
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	91 05       	cpc	r25, r1
 300:	09 f4       	brne	.+2      	; 0x304 <__vector_3+0x5c>
 302:	73 c0       	rjmp	.+230    	; 0x3ea <__vector_3+0x142>
 304:	1c f4       	brge	.+6      	; 0x30c <__vector_3+0x64>
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	49 f0       	breq	.+18     	; 0x31c <__vector_3+0x74>
 30a:	d7 c0       	rjmp	.+430    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 30c:	88 30       	cpi	r24, 0x08	; 8
 30e:	91 05       	cpc	r25, r1
 310:	29 f0       	breq	.+10     	; 0x31c <__vector_3+0x74>
 312:	80 32       	cpi	r24, 0x20	; 32
 314:	91 05       	cpc	r25, r1
 316:	09 f4       	brne	.+2      	; 0x31a <__vector_3+0x72>
 318:	68 c0       	rjmp	.+208    	; 0x3ea <__vector_3+0x142>
 31a:	cf c0       	rjmp	.+414    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case (1<<ECHO0):
		case 0:
		//if device is device 0 or if the pin ECHO0 gave a high
		if (runcount2 == 0)
 31c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <runcount2>
 320:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <runcount2+0x1>
 324:	23 2b       	or	r18, r19
 326:	c1 f4       	brne	.+48     	; 0x358 <__vector_3+0xb0>
		{
			prevDevice = 0;
 328:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 32c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			TCNT1 = 0;
 330:	e4 e8       	ldi	r30, 0x84	; 132
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	11 82       	std	Z+1, r1	; 0x01
 336:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
 338:	80 81       	ld	r24, Z
 33a:	91 81       	ldd	r25, Z+1	; 0x01
 33c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <risingEdgeTimeC+0x1>
 340:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <risingEdgeTimeC>
			
			runcount2++;
 344:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <runcount2>
 348:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <runcount2+0x1>
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <runcount2+0x1>
 352:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <runcount2>
 356:	b1 c0       	rjmp	.+354    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		}
		else
		{
			prevDevice = -1;
 358:	2f ef       	ldi	r18, 0xFF	; 255
 35a:	3f ef       	ldi	r19, 0xFF	; 255
 35c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 360:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
			fallingEdgeTimeC = TCNT1;
 364:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 368:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 36c:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <fallingEdgeTimeC+0x1>
 370:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <fallingEdgeTimeC>
			
			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
 374:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <risingEdgeTimeC>
 378:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <risingEdgeTimeC+0x1>
 37c:	62 1b       	sub	r22, r18
 37e:	73 0b       	sbc	r23, r19
 380:	8b 01       	movw	r16, r22
 382:	07 2e       	mov	r0, r23
 384:	00 0c       	add	r0, r0
 386:	22 0b       	sbc	r18, r18
 388:	33 0b       	sbc	r19, r19
 38a:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <echoHighLevelTimeC>
 38e:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <echoHighLevelTimeC+0x1>
 392:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <echoHighLevelTimeC+0x2>
 396:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <echoHighLevelTimeuS+0x1>
 3a6:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal0;// in cm
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	ec 01       	movw	r28, r24
 3b4:	c0 5e       	subi	r28, 0xE0	; 224
 3b6:	de 4f       	sbci	r29, 0xFE	; 254
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 bb 03 	call	0x776	; 0x776 <__floatunsisf>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	48 e6       	ldi	r20, 0x68	; 104
 3c6:	52 e4       	ldi	r21, 0x42	; 66
 3c8:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 3cc:	26 e6       	ldi	r18, 0x66	; 102
 3ce:	36 e6       	ldi	r19, 0x66	; 102
 3d0:	46 ee       	ldi	r20, 0xE6	; 230
 3d2:	5f e3       	ldi	r21, 0x3F	; 63
 3d4:	0e 94 a9 02 	call	0x552	; 0x552 <__addsf3>
 3d8:	68 83       	st	Y, r22
 3da:	79 83       	std	Y+1, r23	; 0x01
 3dc:	8a 83       	std	Y+2, r24	; 0x02
 3de:	9b 83       	std	Y+3, r25	; 0x03
			
			runcount2 = 0;
 3e0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <runcount2+0x1>
 3e4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <runcount2>
 3e8:	68 c0       	rjmp	.+208    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		break;
		
//use for multiple sound sensors
		case (1 << ECHO1):
		case 1:
		if (runcount1 == 0)
 3ea:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <runcount1>
 3ee:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <runcount1+0x1>
 3f2:	23 2b       	or	r18, r19
 3f4:	d1 f4       	brne	.+52     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			prevDevice = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			TCNT1 = 0;
 402:	e4 e8       	ldi	r30, 0x84	; 132
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	11 82       	std	Z+1, r1	; 0x01
 408:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
 40a:	80 81       	ld	r24, Z
 40c:	91 81       	ldd	r25, Z+1	; 0x01
 40e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <risingEdgeTimeC+0x1>
 412:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <risingEdgeTimeC>

			runcount1++;
 416:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <runcount1>
 41a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <runcount1+0x1>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <runcount1+0x1>
 424:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <runcount1>
 428:	48 c0       	rjmp	.+144    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		}
		else
		{
			prevDevice = -2;
 42a:	2e ef       	ldi	r18, 0xFE	; 254
 42c:	3f ef       	ldi	r19, 0xFF	; 255
 42e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 432:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
			fallingEdgeTimeC = TCNT1;
 436:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 43a:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 43e:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <fallingEdgeTimeC+0x1>
 442:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <fallingEdgeTimeC>

			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
 446:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <risingEdgeTimeC>
 44a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <risingEdgeTimeC+0x1>
 44e:	62 1b       	sub	r22, r18
 450:	73 0b       	sbc	r23, r19
 452:	8b 01       	movw	r16, r22
 454:	07 2e       	mov	r0, r23
 456:	00 0c       	add	r0, r0
 458:	22 0b       	sbc	r18, r18
 45a:	33 0b       	sbc	r19, r19
 45c:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <echoHighLevelTimeC>
 460:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <echoHighLevelTimeC+0x1>
 464:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <echoHighLevelTimeC+0x2>
 468:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <echoHighLevelTimeuS+0x1>
 478:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal1;// in cm
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	ec 01       	movw	r28, r24
 486:	c0 5e       	subi	r28, 0xE0	; 224
 488:	de 4f       	sbci	r29, 0xFE	; 254
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 bb 03 	call	0x776	; 0x776 <__floatunsisf>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	48 e6       	ldi	r20, 0x68	; 104
 498:	52 e4       	ldi	r21, 0x42	; 66
 49a:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3>
 49e:	26 e6       	ldi	r18, 0x66	; 102
 4a0:	36 e6       	ldi	r19, 0x66	; 102
 4a2:	46 ee       	ldi	r20, 0xE6	; 230
 4a4:	5f e3       	ldi	r21, 0x3F	; 63
 4a6:	0e 94 a9 02 	call	0x552	; 0x552 <__addsf3>
 4aa:	68 83       	st	Y, r22
 4ac:	79 83       	std	Y+1, r23	; 0x01
 4ae:	8a 83       	std	Y+2, r24	; 0x02
 4b0:	9b 83       	std	Y+3, r25	; 0x03

			runcount1 = 0;
 4b2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <runcount1+0x1>
 4b6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <runcount1>
		}
		break;
	}
}
 4ba:	ff 91       	pop	r31
 4bc:	ef 91       	pop	r30
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <soundEchoCycle>:

//put this cycle in an ISR
int i = 0;
void soundEchoCycle(void){
	//add here the code for the cycle it needs to perform to trigger all the sound sensors
	if (TCNT1 >= cycleLengthC && i == 0){
 4e4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 4e8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 4ec:	88 39       	cpi	r24, 0x98	; 152
 4ee:	9a 43       	sbci	r25, 0x3A	; 58
 4f0:	88 f0       	brcs	.+34     	; 0x514 <soundEchoCycle+0x30>
 4f2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 4f6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i+0x1>
 4fa:	89 2b       	or	r24, r25
 4fc:	59 f4       	brne	.+22     	; 0x514 <soundEchoCycle+0x30>
		sendTriggPulse(TRIGG1);
 4fe:	84 e0       	ldi	r24, 0x04	; 4
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 74 00 	call	0xe8	; 0xe8 <sendTriggPulse>
		i = 1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
 50e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
 512:	08 95       	ret
	}
	else if(TCNT1 >= cycleLengthC && i == 1){
 514:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 518:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 51c:	88 39       	cpi	r24, 0x98	; 152
 51e:	9a 43       	sbci	r25, 0x3A	; 58
 520:	70 f0       	brcs	.+28     	; 0x53e <soundEchoCycle+0x5a>
 522:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 526:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i+0x1>
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	41 f4       	brne	.+16     	; 0x53e <soundEchoCycle+0x5a>
		sendTriggPulse(TRIGG0);
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 74 00 	call	0xe8	; 0xe8 <sendTriggPulse>
		i = 0;
 536:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i+0x1>
 53a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i>
 53e:	08 95       	ret

00000540 <main>:
int main(void)
{
	//initialize button
	//DDRB &= ~(1<<PORTB7);

	initDistanceSensor();//the default pins are setup in soundsensor.h
 540:	0e 94 5f 00 	call	0xbe	; 0xbe <initDistanceSensor>
	sei();//opposite of cli();
 544:	78 94       	sei
	while (1)
	{
		soundEchoCycle();
 546:	0e 94 72 02 	call	0x4e4	; 0x4e4 <soundEchoCycle>
		//the variable with distance info echoDistance[deviceNum] for example echoDistance[0];
		
		angleCalculator();
 54a:	0e 94 90 00 	call	0x120	; 0x120 <angleCalculator>
 54e:	fb cf       	rjmp	.-10     	; 0x546 <main+0x6>

00000550 <__subsf3>:
 550:	50 58       	subi	r21, 0x80	; 128

00000552 <__addsf3>:
 552:	bb 27       	eor	r27, r27
 554:	aa 27       	eor	r26, r26
 556:	0e 94 c0 02 	call	0x580	; 0x580 <__addsf3x>
 55a:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
 55e:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
 562:	38 f0       	brcs	.+14     	; 0x572 <__addsf3+0x20>
 564:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
 568:	20 f0       	brcs	.+8      	; 0x572 <__addsf3+0x20>
 56a:	39 f4       	brne	.+14     	; 0x57a <__addsf3+0x28>
 56c:	9f 3f       	cpi	r25, 0xFF	; 255
 56e:	19 f4       	brne	.+6      	; 0x576 <__addsf3+0x24>
 570:	26 f4       	brtc	.+8      	; 0x57a <__addsf3+0x28>
 572:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_nan>
 576:	0e f4       	brtc	.+2      	; 0x57a <__addsf3+0x28>
 578:	e0 95       	com	r30
 57a:	e7 fb       	bst	r30, 7
 57c:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_inf>

00000580 <__addsf3x>:
 580:	e9 2f       	mov	r30, r25
 582:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
 586:	58 f3       	brcs	.-42     	; 0x55e <__addsf3+0xc>
 588:	ba 17       	cp	r27, r26
 58a:	62 07       	cpc	r22, r18
 58c:	73 07       	cpc	r23, r19
 58e:	84 07       	cpc	r24, r20
 590:	95 07       	cpc	r25, r21
 592:	20 f0       	brcs	.+8      	; 0x59c <__addsf3x+0x1c>
 594:	79 f4       	brne	.+30     	; 0x5b4 <__addsf3x+0x34>
 596:	a6 f5       	brtc	.+104    	; 0x600 <__addsf3x+0x80>
 598:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_zero>
 59c:	0e f4       	brtc	.+2      	; 0x5a0 <__addsf3x+0x20>
 59e:	e0 95       	com	r30
 5a0:	0b 2e       	mov	r0, r27
 5a2:	ba 2f       	mov	r27, r26
 5a4:	a0 2d       	mov	r26, r0
 5a6:	0b 01       	movw	r0, r22
 5a8:	b9 01       	movw	r22, r18
 5aa:	90 01       	movw	r18, r0
 5ac:	0c 01       	movw	r0, r24
 5ae:	ca 01       	movw	r24, r20
 5b0:	a0 01       	movw	r20, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	ff 27       	eor	r31, r31
 5b6:	59 1b       	sub	r21, r25
 5b8:	99 f0       	breq	.+38     	; 0x5e0 <__addsf3x+0x60>
 5ba:	59 3f       	cpi	r21, 0xF9	; 249
 5bc:	50 f4       	brcc	.+20     	; 0x5d2 <__addsf3x+0x52>
 5be:	50 3e       	cpi	r21, 0xE0	; 224
 5c0:	68 f1       	brcs	.+90     	; 0x61c <__addsf3x+0x9c>
 5c2:	1a 16       	cp	r1, r26
 5c4:	f0 40       	sbci	r31, 0x00	; 0
 5c6:	a2 2f       	mov	r26, r18
 5c8:	23 2f       	mov	r18, r19
 5ca:	34 2f       	mov	r19, r20
 5cc:	44 27       	eor	r20, r20
 5ce:	58 5f       	subi	r21, 0xF8	; 248
 5d0:	f3 cf       	rjmp	.-26     	; 0x5b8 <__addsf3x+0x38>
 5d2:	46 95       	lsr	r20
 5d4:	37 95       	ror	r19
 5d6:	27 95       	ror	r18
 5d8:	a7 95       	ror	r26
 5da:	f0 40       	sbci	r31, 0x00	; 0
 5dc:	53 95       	inc	r21
 5de:	c9 f7       	brne	.-14     	; 0x5d2 <__addsf3x+0x52>
 5e0:	7e f4       	brtc	.+30     	; 0x600 <__addsf3x+0x80>
 5e2:	1f 16       	cp	r1, r31
 5e4:	ba 0b       	sbc	r27, r26
 5e6:	62 0b       	sbc	r22, r18
 5e8:	73 0b       	sbc	r23, r19
 5ea:	84 0b       	sbc	r24, r20
 5ec:	ba f0       	brmi	.+46     	; 0x61c <__addsf3x+0x9c>
 5ee:	91 50       	subi	r25, 0x01	; 1
 5f0:	a1 f0       	breq	.+40     	; 0x61a <__addsf3x+0x9a>
 5f2:	ff 0f       	add	r31, r31
 5f4:	bb 1f       	adc	r27, r27
 5f6:	66 1f       	adc	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	c2 f7       	brpl	.-16     	; 0x5ee <__addsf3x+0x6e>
 5fe:	0e c0       	rjmp	.+28     	; 0x61c <__addsf3x+0x9c>
 600:	ba 0f       	add	r27, r26
 602:	62 1f       	adc	r22, r18
 604:	73 1f       	adc	r23, r19
 606:	84 1f       	adc	r24, r20
 608:	48 f4       	brcc	.+18     	; 0x61c <__addsf3x+0x9c>
 60a:	87 95       	ror	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b7 95       	ror	r27
 612:	f7 95       	ror	r31
 614:	9e 3f       	cpi	r25, 0xFE	; 254
 616:	08 f0       	brcs	.+2      	; 0x61a <__addsf3x+0x9a>
 618:	b0 cf       	rjmp	.-160    	; 0x57a <__addsf3+0x28>
 61a:	93 95       	inc	r25
 61c:	88 0f       	add	r24, r24
 61e:	08 f0       	brcs	.+2      	; 0x622 <__addsf3x+0xa2>
 620:	99 27       	eor	r25, r25
 622:	ee 0f       	add	r30, r30
 624:	97 95       	ror	r25
 626:	87 95       	ror	r24
 628:	08 95       	ret

0000062a <atan>:
 62a:	df 93       	push	r29
 62c:	dd 27       	eor	r29, r29
 62e:	b9 2f       	mov	r27, r25
 630:	bf 77       	andi	r27, 0x7F	; 127
 632:	40 e8       	ldi	r20, 0x80	; 128
 634:	5f e3       	ldi	r21, 0x3F	; 63
 636:	16 16       	cp	r1, r22
 638:	17 06       	cpc	r1, r23
 63a:	48 07       	cpc	r20, r24
 63c:	5b 07       	cpc	r21, r27
 63e:	18 f4       	brcc	.+6      	; 0x646 <atan+0x1c>
 640:	d9 2f       	mov	r29, r25
 642:	0e 94 99 04 	call	0x932	; 0x932 <inverse>
 646:	9f 93       	push	r25
 648:	8f 93       	push	r24
 64a:	7f 93       	push	r23
 64c:	6f 93       	push	r22
 64e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <square>
 652:	e8 e6       	ldi	r30, 0x68	; 104
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_powser>
 65a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_round>
 65e:	2f 91       	pop	r18
 660:	3f 91       	pop	r19
 662:	4f 91       	pop	r20
 664:	5f 91       	pop	r21
 666:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3x>
 66a:	dd 23       	and	r29, r29
 66c:	51 f0       	breq	.+20     	; 0x682 <atan+0x58>
 66e:	90 58       	subi	r25, 0x80	; 128
 670:	a2 ea       	ldi	r26, 0xA2	; 162
 672:	2a ed       	ldi	r18, 0xDA	; 218
 674:	3f e0       	ldi	r19, 0x0F	; 15
 676:	49 ec       	ldi	r20, 0xC9	; 201
 678:	5f e3       	ldi	r21, 0x3F	; 63
 67a:	d0 78       	andi	r29, 0x80	; 128
 67c:	5d 27       	eor	r21, r29
 67e:	0e 94 c0 02 	call	0x580	; 0x580 <__addsf3x>
 682:	df 91       	pop	r29
 684:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>

00000688 <__cmpsf2>:
 688:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__fp_cmp>
 68c:	08 f4       	brcc	.+2      	; 0x690 <__cmpsf2+0x8>
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	08 95       	ret

00000692 <__divsf3>:
 692:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__divsf3x>
 696:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
 69a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
 69e:	58 f0       	brcs	.+22     	; 0x6b6 <__divsf3+0x24>
 6a0:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
 6a4:	40 f0       	brcs	.+16     	; 0x6b6 <__divsf3+0x24>
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <__divsf3+0x20>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	29 f0       	breq	.+10     	; 0x6b6 <__divsf3+0x24>
 6ac:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_inf>
 6b0:	51 11       	cpse	r21, r1
 6b2:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 6b6:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_nan>

000006ba <__divsf3x>:
 6ba:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
 6be:	68 f3       	brcs	.-38     	; 0x69a <__divsf3+0x8>

000006c0 <__divsf3_pse>:
 6c0:	99 23       	and	r25, r25
 6c2:	b1 f3       	breq	.-20     	; 0x6b0 <__divsf3+0x1e>
 6c4:	55 23       	and	r21, r21
 6c6:	91 f3       	breq	.-28     	; 0x6ac <__divsf3+0x1a>
 6c8:	95 1b       	sub	r25, r21
 6ca:	55 0b       	sbc	r21, r21
 6cc:	bb 27       	eor	r27, r27
 6ce:	aa 27       	eor	r26, r26
 6d0:	62 17       	cp	r22, r18
 6d2:	73 07       	cpc	r23, r19
 6d4:	84 07       	cpc	r24, r20
 6d6:	38 f0       	brcs	.+14     	; 0x6e6 <__divsf3_pse+0x26>
 6d8:	9f 5f       	subi	r25, 0xFF	; 255
 6da:	5f 4f       	sbci	r21, 0xFF	; 255
 6dc:	22 0f       	add	r18, r18
 6de:	33 1f       	adc	r19, r19
 6e0:	44 1f       	adc	r20, r20
 6e2:	aa 1f       	adc	r26, r26
 6e4:	a9 f3       	breq	.-22     	; 0x6d0 <__divsf3_pse+0x10>
 6e6:	35 d0       	rcall	.+106    	; 0x752 <__divsf3_pse+0x92>
 6e8:	0e 2e       	mov	r0, r30
 6ea:	3a f0       	brmi	.+14     	; 0x6fa <__divsf3_pse+0x3a>
 6ec:	e0 e8       	ldi	r30, 0x80	; 128
 6ee:	32 d0       	rcall	.+100    	; 0x754 <__divsf3_pse+0x94>
 6f0:	91 50       	subi	r25, 0x01	; 1
 6f2:	50 40       	sbci	r21, 0x00	; 0
 6f4:	e6 95       	lsr	r30
 6f6:	00 1c       	adc	r0, r0
 6f8:	ca f7       	brpl	.-14     	; 0x6ec <__divsf3_pse+0x2c>
 6fa:	2b d0       	rcall	.+86     	; 0x752 <__divsf3_pse+0x92>
 6fc:	fe 2f       	mov	r31, r30
 6fe:	29 d0       	rcall	.+82     	; 0x752 <__divsf3_pse+0x92>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	bb 1f       	adc	r27, r27
 708:	26 17       	cp	r18, r22
 70a:	37 07       	cpc	r19, r23
 70c:	48 07       	cpc	r20, r24
 70e:	ab 07       	cpc	r26, r27
 710:	b0 e8       	ldi	r27, 0x80	; 128
 712:	09 f0       	breq	.+2      	; 0x716 <__divsf3_pse+0x56>
 714:	bb 0b       	sbc	r27, r27
 716:	80 2d       	mov	r24, r0
 718:	bf 01       	movw	r22, r30
 71a:	ff 27       	eor	r31, r31
 71c:	93 58       	subi	r25, 0x83	; 131
 71e:	5f 4f       	sbci	r21, 0xFF	; 255
 720:	3a f0       	brmi	.+14     	; 0x730 <__divsf3_pse+0x70>
 722:	9e 3f       	cpi	r25, 0xFE	; 254
 724:	51 05       	cpc	r21, r1
 726:	78 f0       	brcs	.+30     	; 0x746 <__divsf3_pse+0x86>
 728:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_inf>
 72c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 730:	5f 3f       	cpi	r21, 0xFF	; 255
 732:	e4 f3       	brlt	.-8      	; 0x72c <__divsf3_pse+0x6c>
 734:	98 3e       	cpi	r25, 0xE8	; 232
 736:	d4 f3       	brlt	.-12     	; 0x72c <__divsf3_pse+0x6c>
 738:	86 95       	lsr	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f7 95       	ror	r31
 742:	9f 5f       	subi	r25, 0xFF	; 255
 744:	c9 f7       	brne	.-14     	; 0x738 <__divsf3_pse+0x78>
 746:	88 0f       	add	r24, r24
 748:	91 1d       	adc	r25, r1
 74a:	96 95       	lsr	r25
 74c:	87 95       	ror	r24
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret
 752:	e1 e0       	ldi	r30, 0x01	; 1
 754:	66 0f       	add	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	bb 1f       	adc	r27, r27
 75c:	62 17       	cp	r22, r18
 75e:	73 07       	cpc	r23, r19
 760:	84 07       	cpc	r24, r20
 762:	ba 07       	cpc	r27, r26
 764:	20 f0       	brcs	.+8      	; 0x76e <__divsf3_pse+0xae>
 766:	62 1b       	sub	r22, r18
 768:	73 0b       	sbc	r23, r19
 76a:	84 0b       	sbc	r24, r20
 76c:	ba 0b       	sbc	r27, r26
 76e:	ee 1f       	adc	r30, r30
 770:	88 f7       	brcc	.-30     	; 0x754 <__divsf3_pse+0x94>
 772:	e0 95       	com	r30
 774:	08 95       	ret

00000776 <__floatunsisf>:
 776:	e8 94       	clt
 778:	09 c0       	rjmp	.+18     	; 0x78c <__floatsisf+0x12>

0000077a <__floatsisf>:
 77a:	97 fb       	bst	r25, 7
 77c:	3e f4       	brtc	.+14     	; 0x78c <__floatsisf+0x12>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	99 23       	and	r25, r25
 78e:	a9 f0       	breq	.+42     	; 0x7ba <__floatsisf+0x40>
 790:	f9 2f       	mov	r31, r25
 792:	96 e9       	ldi	r25, 0x96	; 150
 794:	bb 27       	eor	r27, r27
 796:	93 95       	inc	r25
 798:	f6 95       	lsr	r31
 79a:	87 95       	ror	r24
 79c:	77 95       	ror	r23
 79e:	67 95       	ror	r22
 7a0:	b7 95       	ror	r27
 7a2:	f1 11       	cpse	r31, r1
 7a4:	f8 cf       	rjmp	.-16     	; 0x796 <__floatsisf+0x1c>
 7a6:	fa f4       	brpl	.+62     	; 0x7e6 <__floatsisf+0x6c>
 7a8:	bb 0f       	add	r27, r27
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <__floatsisf+0x36>
 7ac:	60 ff       	sbrs	r22, 0
 7ae:	1b c0       	rjmp	.+54     	; 0x7e6 <__floatsisf+0x6c>
 7b0:	6f 5f       	subi	r22, 0xFF	; 255
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	16 c0       	rjmp	.+44     	; 0x7e6 <__floatsisf+0x6c>
 7ba:	88 23       	and	r24, r24
 7bc:	11 f0       	breq	.+4      	; 0x7c2 <__floatsisf+0x48>
 7be:	96 e9       	ldi	r25, 0x96	; 150
 7c0:	11 c0       	rjmp	.+34     	; 0x7e4 <__floatsisf+0x6a>
 7c2:	77 23       	and	r23, r23
 7c4:	21 f0       	breq	.+8      	; 0x7ce <__floatsisf+0x54>
 7c6:	9e e8       	ldi	r25, 0x8E	; 142
 7c8:	87 2f       	mov	r24, r23
 7ca:	76 2f       	mov	r23, r22
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <__floatsisf+0x5e>
 7ce:	66 23       	and	r22, r22
 7d0:	71 f0       	breq	.+28     	; 0x7ee <__floatsisf+0x74>
 7d2:	96 e8       	ldi	r25, 0x86	; 134
 7d4:	86 2f       	mov	r24, r22
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	2a f0       	brmi	.+10     	; 0x7e6 <__floatsisf+0x6c>
 7dc:	9a 95       	dec	r25
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	da f7       	brpl	.-10     	; 0x7dc <__floatsisf+0x62>
 7e6:	88 0f       	add	r24, r24
 7e8:	96 95       	lsr	r25
 7ea:	87 95       	ror	r24
 7ec:	97 f9       	bld	r25, 7
 7ee:	08 95       	ret

000007f0 <__fp_cmp>:
 7f0:	99 0f       	add	r25, r25
 7f2:	00 08       	sbc	r0, r0
 7f4:	55 0f       	add	r21, r21
 7f6:	aa 0b       	sbc	r26, r26
 7f8:	e0 e8       	ldi	r30, 0x80	; 128
 7fa:	fe ef       	ldi	r31, 0xFE	; 254
 7fc:	16 16       	cp	r1, r22
 7fe:	17 06       	cpc	r1, r23
 800:	e8 07       	cpc	r30, r24
 802:	f9 07       	cpc	r31, r25
 804:	c0 f0       	brcs	.+48     	; 0x836 <__fp_cmp+0x46>
 806:	12 16       	cp	r1, r18
 808:	13 06       	cpc	r1, r19
 80a:	e4 07       	cpc	r30, r20
 80c:	f5 07       	cpc	r31, r21
 80e:	98 f0       	brcs	.+38     	; 0x836 <__fp_cmp+0x46>
 810:	62 1b       	sub	r22, r18
 812:	73 0b       	sbc	r23, r19
 814:	84 0b       	sbc	r24, r20
 816:	95 0b       	sbc	r25, r21
 818:	39 f4       	brne	.+14     	; 0x828 <__fp_cmp+0x38>
 81a:	0a 26       	eor	r0, r26
 81c:	61 f0       	breq	.+24     	; 0x836 <__fp_cmp+0x46>
 81e:	23 2b       	or	r18, r19
 820:	24 2b       	or	r18, r20
 822:	25 2b       	or	r18, r21
 824:	21 f4       	brne	.+8      	; 0x82e <__fp_cmp+0x3e>
 826:	08 95       	ret
 828:	0a 26       	eor	r0, r26
 82a:	09 f4       	brne	.+2      	; 0x82e <__fp_cmp+0x3e>
 82c:	a1 40       	sbci	r26, 0x01	; 1
 82e:	a6 95       	lsr	r26
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	81 1d       	adc	r24, r1
 834:	81 1d       	adc	r24, r1
 836:	08 95       	ret

00000838 <__fp_inf>:
 838:	97 f9       	bld	r25, 7
 83a:	9f 67       	ori	r25, 0x7F	; 127
 83c:	80 e8       	ldi	r24, 0x80	; 128
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	08 95       	ret

00000844 <__fp_nan>:
 844:	9f ef       	ldi	r25, 0xFF	; 255
 846:	80 ec       	ldi	r24, 0xC0	; 192
 848:	08 95       	ret

0000084a <__fp_powser>:
 84a:	df 93       	push	r29
 84c:	cf 93       	push	r28
 84e:	1f 93       	push	r17
 850:	0f 93       	push	r16
 852:	ff 92       	push	r15
 854:	ef 92       	push	r14
 856:	df 92       	push	r13
 858:	7b 01       	movw	r14, r22
 85a:	8c 01       	movw	r16, r24
 85c:	68 94       	set
 85e:	06 c0       	rjmp	.+12     	; 0x86c <__fp_powser+0x22>
 860:	da 2e       	mov	r13, r26
 862:	ef 01       	movw	r28, r30
 864:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3x>
 868:	fe 01       	movw	r30, r28
 86a:	e8 94       	clt
 86c:	a5 91       	lpm	r26, Z+
 86e:	25 91       	lpm	r18, Z+
 870:	35 91       	lpm	r19, Z+
 872:	45 91       	lpm	r20, Z+
 874:	55 91       	lpm	r21, Z+
 876:	a6 f3       	brts	.-24     	; 0x860 <__fp_powser+0x16>
 878:	ef 01       	movw	r28, r30
 87a:	0e 94 c0 02 	call	0x580	; 0x580 <__addsf3x>
 87e:	fe 01       	movw	r30, r28
 880:	97 01       	movw	r18, r14
 882:	a8 01       	movw	r20, r16
 884:	da 94       	dec	r13
 886:	69 f7       	brne	.-38     	; 0x862 <__fp_powser+0x18>
 888:	df 90       	pop	r13
 88a:	ef 90       	pop	r14
 88c:	ff 90       	pop	r15
 88e:	0f 91       	pop	r16
 890:	1f 91       	pop	r17
 892:	cf 91       	pop	r28
 894:	df 91       	pop	r29
 896:	08 95       	ret

00000898 <__fp_pscA>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	18 06       	cpc	r1, r24
 8a2:	09 06       	cpc	r0, r25
 8a4:	08 95       	ret

000008a6 <__fp_pscB>:
 8a6:	00 24       	eor	r0, r0
 8a8:	0a 94       	dec	r0
 8aa:	12 16       	cp	r1, r18
 8ac:	13 06       	cpc	r1, r19
 8ae:	14 06       	cpc	r1, r20
 8b0:	05 06       	cpc	r0, r21
 8b2:	08 95       	ret

000008b4 <__fp_round>:
 8b4:	09 2e       	mov	r0, r25
 8b6:	03 94       	inc	r0
 8b8:	00 0c       	add	r0, r0
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0xc>
 8bc:	88 23       	and	r24, r24
 8be:	52 f0       	brmi	.+20     	; 0x8d4 <__fp_round+0x20>
 8c0:	bb 0f       	add	r27, r27
 8c2:	40 f4       	brcc	.+16     	; 0x8d4 <__fp_round+0x20>
 8c4:	bf 2b       	or	r27, r31
 8c6:	11 f4       	brne	.+4      	; 0x8cc <__fp_round+0x18>
 8c8:	60 ff       	sbrs	r22, 0
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__fp_round+0x20>
 8cc:	6f 5f       	subi	r22, 0xFF	; 255
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	08 95       	ret

000008d6 <__fp_split3>:
 8d6:	57 fd       	sbrc	r21, 7
 8d8:	90 58       	subi	r25, 0x80	; 128
 8da:	44 0f       	add	r20, r20
 8dc:	55 1f       	adc	r21, r21
 8de:	59 f0       	breq	.+22     	; 0x8f6 <__fp_splitA+0x10>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	71 f0       	breq	.+28     	; 0x900 <__stack+0x1>
 8e4:	47 95       	ror	r20

000008e6 <__fp_splitA>:
 8e6:	88 0f       	add	r24, r24
 8e8:	97 fb       	bst	r25, 7
 8ea:	99 1f       	adc	r25, r25
 8ec:	61 f0       	breq	.+24     	; 0x906 <__stack+0x7>
 8ee:	9f 3f       	cpi	r25, 0xFF	; 255
 8f0:	79 f0       	breq	.+30     	; 0x910 <__stack+0x11>
 8f2:	87 95       	ror	r24
 8f4:	08 95       	ret
 8f6:	12 16       	cp	r1, r18
 8f8:	13 06       	cpc	r1, r19
 8fa:	14 06       	cpc	r1, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	f2 cf       	rjmp	.-28     	; 0x8e4 <__fp_split3+0xe>
 900:	46 95       	lsr	r20
 902:	f1 df       	rcall	.-30     	; 0x8e6 <__fp_splitA>
 904:	08 c0       	rjmp	.+16     	; 0x916 <__stack+0x17>
 906:	16 16       	cp	r1, r22
 908:	17 06       	cpc	r1, r23
 90a:	18 06       	cpc	r1, r24
 90c:	99 1f       	adc	r25, r25
 90e:	f1 cf       	rjmp	.-30     	; 0x8f2 <__fp_splitA+0xc>
 910:	86 95       	lsr	r24
 912:	71 05       	cpc	r23, r1
 914:	61 05       	cpc	r22, r1
 916:	08 94       	sec
 918:	08 95       	ret

0000091a <__fp_zero>:
 91a:	e8 94       	clt

0000091c <__fp_szero>:
 91c:	bb 27       	eor	r27, r27
 91e:	66 27       	eor	r22, r22
 920:	77 27       	eor	r23, r23
 922:	cb 01       	movw	r24, r22
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__gesf2>:
 928:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__fp_cmp>
 92c:	08 f4       	brcc	.+2      	; 0x930 <__gesf2+0x8>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	08 95       	ret

00000932 <inverse>:
 932:	9b 01       	movw	r18, r22
 934:	ac 01       	movw	r20, r24
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	80 e8       	ldi	r24, 0x80	; 128
 93c:	9f e3       	ldi	r25, 0x3F	; 63
 93e:	0c 94 49 03 	jmp	0x692	; 0x692 <__divsf3>

00000942 <__mulsf3>:
 942:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3x>
 946:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
 94a:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
 94e:	38 f0       	brcs	.+14     	; 0x95e <__mulsf3+0x1c>
 950:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
 954:	20 f0       	brcs	.+8      	; 0x95e <__mulsf3+0x1c>
 956:	95 23       	and	r25, r21
 958:	11 f0       	breq	.+4      	; 0x95e <__mulsf3+0x1c>
 95a:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_inf>
 95e:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_nan>
 962:	11 24       	eor	r1, r1
 964:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>

00000968 <__mulsf3x>:
 968:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
 96c:	70 f3       	brcs	.-36     	; 0x94a <__mulsf3+0x8>

0000096e <__mulsf3_pse>:
 96e:	95 9f       	mul	r25, r21
 970:	c1 f3       	breq	.-16     	; 0x962 <__mulsf3+0x20>
 972:	95 0f       	add	r25, r21
 974:	50 e0       	ldi	r21, 0x00	; 0
 976:	55 1f       	adc	r21, r21
 978:	62 9f       	mul	r22, r18
 97a:	f0 01       	movw	r30, r0
 97c:	72 9f       	mul	r23, r18
 97e:	bb 27       	eor	r27, r27
 980:	f0 0d       	add	r31, r0
 982:	b1 1d       	adc	r27, r1
 984:	63 9f       	mul	r22, r19
 986:	aa 27       	eor	r26, r26
 988:	f0 0d       	add	r31, r0
 98a:	b1 1d       	adc	r27, r1
 98c:	aa 1f       	adc	r26, r26
 98e:	64 9f       	mul	r22, r20
 990:	66 27       	eor	r22, r22
 992:	b0 0d       	add	r27, r0
 994:	a1 1d       	adc	r26, r1
 996:	66 1f       	adc	r22, r22
 998:	82 9f       	mul	r24, r18
 99a:	22 27       	eor	r18, r18
 99c:	b0 0d       	add	r27, r0
 99e:	a1 1d       	adc	r26, r1
 9a0:	62 1f       	adc	r22, r18
 9a2:	73 9f       	mul	r23, r19
 9a4:	b0 0d       	add	r27, r0
 9a6:	a1 1d       	adc	r26, r1
 9a8:	62 1f       	adc	r22, r18
 9aa:	83 9f       	mul	r24, r19
 9ac:	a0 0d       	add	r26, r0
 9ae:	61 1d       	adc	r22, r1
 9b0:	22 1f       	adc	r18, r18
 9b2:	74 9f       	mul	r23, r20
 9b4:	33 27       	eor	r19, r19
 9b6:	a0 0d       	add	r26, r0
 9b8:	61 1d       	adc	r22, r1
 9ba:	23 1f       	adc	r18, r19
 9bc:	84 9f       	mul	r24, r20
 9be:	60 0d       	add	r22, r0
 9c0:	21 1d       	adc	r18, r1
 9c2:	82 2f       	mov	r24, r18
 9c4:	76 2f       	mov	r23, r22
 9c6:	6a 2f       	mov	r22, r26
 9c8:	11 24       	eor	r1, r1
 9ca:	9f 57       	subi	r25, 0x7F	; 127
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	9a f0       	brmi	.+38     	; 0x9f6 <__mulsf3_pse+0x88>
 9d0:	f1 f0       	breq	.+60     	; 0xa0e <__mulsf3_pse+0xa0>
 9d2:	88 23       	and	r24, r24
 9d4:	4a f0       	brmi	.+18     	; 0x9e8 <__mulsf3_pse+0x7a>
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	bb 1f       	adc	r27, r27
 9dc:	66 1f       	adc	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	91 50       	subi	r25, 0x01	; 1
 9e4:	50 40       	sbci	r21, 0x00	; 0
 9e6:	a9 f7       	brne	.-22     	; 0x9d2 <__mulsf3_pse+0x64>
 9e8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ea:	51 05       	cpc	r21, r1
 9ec:	80 f0       	brcs	.+32     	; 0xa0e <__mulsf3_pse+0xa0>
 9ee:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_inf>
 9f2:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 9f6:	5f 3f       	cpi	r21, 0xFF	; 255
 9f8:	e4 f3       	brlt	.-8      	; 0x9f2 <__mulsf3_pse+0x84>
 9fa:	98 3e       	cpi	r25, 0xE8	; 232
 9fc:	d4 f3       	brlt	.-12     	; 0x9f2 <__mulsf3_pse+0x84>
 9fe:	86 95       	lsr	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	b7 95       	ror	r27
 a06:	f7 95       	ror	r31
 a08:	e7 95       	ror	r30
 a0a:	9f 5f       	subi	r25, 0xFF	; 255
 a0c:	c1 f7       	brne	.-16     	; 0x9fe <__mulsf3_pse+0x90>
 a0e:	fe 2b       	or	r31, r30
 a10:	88 0f       	add	r24, r24
 a12:	91 1d       	adc	r25, r1
 a14:	96 95       	lsr	r25
 a16:	87 95       	ror	r24
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret

00000a1c <square>:
 a1c:	9b 01       	movw	r18, r22
 a1e:	ac 01       	movw	r20, r24
 a20:	0c 94 a1 04 	jmp	0x942	; 0x942 <__mulsf3>

00000a24 <_exit>:
 a24:	f8 94       	cli

00000a26 <__stop_program>:
 a26:	ff cf       	rjmp	.-2      	; 0xa26 <__stop_program>


RobotCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025e  00800100  00004b72  00004c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fe  0080035e  0080035e  00004e64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004e64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000021b0  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000492dc  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003213  00000000  00000000  00050360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d314  00000000  00000000  00053573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000c7e0  00000000  00000000  00060888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011047  00000000  00000000  0006d068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004ed34  00000000  00000000  0007e0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002138  00000000  00000000  000ccde3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__ctors_end>
       4:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
       8:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
       c:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_3>
      10:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      14:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_5>
      18:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      1c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      20:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      24:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      28:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      2c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      30:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      34:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      38:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      3c:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__vector_15>
      40:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      44:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      48:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      4c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      50:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      54:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      58:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      5c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      60:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      64:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	bf 00       	.word	0x00bf	; ????
      98:	03 02       	muls	r16, r19
      9a:	03 04       	cpc	r0, r3
      9c:	03 05       	cpc	r16, r3
      9e:	04 06       	cpc	r0, r20
      a0:	0a 00       	.word	0x000a	; ????
      a2:	fe 07       	cpc	r31, r30
      a4:	fe 07       	cpc	r31, r30
      a6:	00 01       	movw	r0, r0
      a8:	42 02       	muls	r20, r18
      aa:	88 07       	cpc	r24, r24
      ac:	c4 20       	and	r12, r4
      ae:	05 00       	.word	0x0005	; ????
      b0:	62 07       	cpc	r22, r18
      b2:	21 07       	cpc	r18, r17
      b4:	39 43       	sbci	r19, 0x39	; 57
      b6:	c7 a0       	ldd	r12, Z+39	; 0x27
      b8:	04 22       	and	r0, r20
      ba:	07 9b       	sbis	0x00, 7	; 0
      bc:	52 47       	sbci	r21, 0x72	; 114
      be:	62 09       	sbc	r22, r2
      c0:	23 0e       	add	r2, r19
      c2:	3d 42       	sbci	r19, 0x2D	; 45
      c4:	4f 29       	or	r20, r15
      c6:	49 06       	cpc	r4, r25
      c8:	a5 32       	cpi	r26, 0x25	; 37
      ca:	28 a5       	ldd	r18, Y+40	; 0x28
      cc:	24 01       	movw	r4, r8
      ce:	24 0c       	add	r2, r4
      d0:	3d 42       	sbci	r19, 0x2D	; 45
      d2:	57 b6       	in	r5, 0x37	; 55
      d4:	d4 b6       	in	r13, 0x34	; 52
      d6:	24 d9       	rcall	.-3512   	; 0xfffff320 <__eeprom_end+0xff7ef320>
      d8:	22 00       	.word	0x0022	; ????
      da:	25 0c       	add	r2, r5
      dc:	3d 42       	sbci	r19, 0x2D	; 45
      de:	4f a4       	ldd	r4, Y+47	; 0x2f
      e0:	74 ab       	std	Z+52, r23	; 0x34
      e2:	b4 48       	sbci	r27, 0x84	; 132
      e4:	09 00       	.word	0x0009	; ????
      e6:	26 0d       	add	r18, r6
      e8:	3d 42       	sbci	r19, 0x2D	; 45
      ea:	4f 96       	adiw	r24, 0x1f	; 31
      ec:	44 49       	sbci	r20, 0x94	; 148
      ee:	56 49       	sbci	r21, 0x96	; 150
      f0:	a4 48       	sbci	r26, 0x84	; 132
      f2:	09 27       	eor	r16, r25
      f4:	06 19       	sub	r16, r6
      f6:	53 c7       	rjmp	.+3750   	; 0xf9e <sendTriggPulse+0x24>
      f8:	00 28       	or	r0, r0
      fa:	08 bb       	out	0x18, r16	; 24
      fc:	42 57       	subi	r20, 0x72	; 114
      fe:	52 aa       	std	Z+50, r5	; 0x32
     100:	15 29       	or	r17, r5
     102:	09 bb       	out	0x19, r16	; 25
     104:	42 47       	sbci	r20, 0x72	; 114
     106:	56 aa       	std	Z+54, r5	; 0x36
     108:	94 00       	.word	0x0094	; ????
     10a:	2a 0a       	sbc	r2, r26
     10c:	2d 46       	sbci	r18, 0x6D	; 109
     10e:	47 96       	adiw	r24, 0x17	; 23
     110:	54 06       	cpc	r5, r20
     112:	a5 2d       	mov	r26, r5
     114:	2b 0a       	sbc	r2, r27
     116:	2d 46       	sbci	r18, 0x6D	; 109
     118:	57 18       	sub	r5, r7
     11a:	0d 52       	subi	r16, 0x2D	; 45
     11c:	18 01       	movw	r2, r16
     11e:	2c 07       	cpc	r18, r28
     120:	9b 3e       	cpi	r25, 0xEB	; 235
     122:	8f 52       	subi	r24, 0x2F	; 47
     124:	02 2d       	mov	r16, r2
     126:	06 0d       	add	r16, r6
     128:	4e c7       	rjmp	.+3740   	; 0xfc6 <angleCalculator+0x14>
     12a:	20 2e       	mov	r2, r16
     12c:	08 9b       	sbis	0x01, 0	; 1
     12e:	3e 4f       	sbci	r19, 0xFE	; 254
     130:	b2 24       	eor	r11, r2
     132:	00 2f       	mov	r16, r16
     134:	08 3d       	cpi	r16, 0xD8	; 216
     136:	42 67       	ori	r20, 0x72	; 114
     138:	ad 63       	ori	r26, 0x3D	; 61
     13a:	08 30       	cpi	r16, 0x08	; 8
     13c:	0b 3d       	cpi	r16, 0xDB	; 219
     13e:	42 57       	subi	r20, 0x72	; 114
     140:	96 d4       	rcall	.+2348   	; 0xa6e <__stack+0x16f>
     142:	6c 49       	sbci	r22, 0x9C	; 156
     144:	2d 02       	muls	r18, r29
     146:	31 0a       	sbc	r3, r17
     148:	3d 42       	sbci	r19, 0x2D	; 45
     14a:	57 26       	eor	r5, r23
     14c:	25 61       	ori	r18, 0x15	; 21
     14e:	d3 20       	and	r13, r3
     150:	32 0c       	add	r3, r2
     152:	3d 42       	sbci	r19, 0x2D	; 45
     154:	cf 92       	push	r12
     156:	85 91       	lpm	r24, Z+
     158:	94 85       	ldd	r25, Z+12	; 0x0c
     15a:	83 00       	.word	0x0083	; ????
     15c:	33 0c       	add	r3, r3
     15e:	3d 42       	sbci	r19, 0x2D	; 45
     160:	c7 20       	and	r12, r7
     162:	66 99       	sbic	0x0c, 6	; 12
     164:	aa 25       	eor	r26, r10
     166:	0b 00       	.word	0x000b	; ????
     168:	34 0c       	add	r3, r4
     16a:	3d 42       	sbci	r19, 0x2D	; 45
     16c:	5f 26       	eor	r5, r31
     16e:	25 a5       	ldd	r18, Z+45	; 0x2d
     170:	64 d0       	rcall	.+200    	; 0x23a <__trampolines_end+0x1a4>
     172:	c2 04       	cpc	r12, r2
     174:	35 0b       	sbc	r19, r21
     176:	3d 42       	sbci	r19, 0x2D	; 45
     178:	c7 31       	cpi	r28, 0x17	; 23
     17a:	31 85       	ldd	r19, Z+9	; 0x09
     17c:	5a b2       	in	r5, 0x1a	; 26
     17e:	00 36       	cpi	r16, 0x60	; 96
     180:	0c 3d       	cpi	r16, 0xDC	; 220
     182:	42 97       	sbiw	r24, 0x12	; 18
     184:	94 85       	ldd	r25, Z+12	; 0x0c
     186:	89 49       	sbci	r24, 0x99	; 153
     188:	4b 16       	cp	r4, r27
     18a:	00 37       	cpi	r16, 0x70	; 112
     18c:	0b 3d       	cpi	r16, 0xDB	; 219
     18e:	42 c7       	rjmp	.+3716   	; 0x1014 <angleCalculator+0x62>
     190:	20 66       	ori	r18, 0x60	; 96
     192:	61 56       	subi	r22, 0x61	; 97
     194:	cc 00       	.word	0x00cc	; ????
     196:	38 0c       	add	r3, r8
     198:	3d 42       	sbci	r19, 0x2D	; 45
     19a:	cf 92       	push	r12
     19c:	69 c9       	rjmp	.-3374   	; 0xfffff470 <__eeprom_end+0xff7ef470>
     19e:	92 69       	ori	r25, 0x92	; 146
     1a0:	c9 02       	muls	r28, r25
     1a2:	39 0c       	add	r3, r9
     1a4:	3d 42       	sbci	r19, 0x2D	; 45
     1a6:	cf 92       	push	r12
     1a8:	49 8a       	std	Y+17, r4	; 0x11
     1aa:	12 66       	ori	r17, 0x62	; 98
     1ac:	91 04       	cpc	r9, r1
     1ae:	3a 0a       	sbc	r3, r26
     1b0:	bb 3e       	cpi	r27, 0xEB	; 235
     1b2:	4f b2       	in	r4, 0x1f	; 31
     1b4:	a4 c9       	rjmp	.-3256   	; 0xfffff4fe <__eeprom_end+0xff7ef4fe>
     1b6:	92 00       	.word	0x0092	; ????
     1b8:	3b 09       	sbc	r19, r11
     1ba:	bb 3e       	cpi	r27, 0xEB	; 235
     1bc:	4f b2       	in	r4, 0x1f	; 31
     1be:	a4 4a       	sbci	r26, 0xA4	; 164
     1c0:	09 3c       	cpi	r16, 0xC9	; 201
     1c2:	08 bc       	out	0x28, r0	; 40
     1c4:	42 5f       	subi	r20, 0xF2	; 242
     1c6:	d4 d8       	rcall	.-3672   	; 0xfffff370 <__eeprom_end+0xff7ef370>
     1c8:	00 3d       	cpi	r16, 0xD0	; 208
     1ca:	08 1d       	adc	r16, r8
     1cc:	4a c7       	rjmp	.+3732   	; 0x1062 <angleCalculator+0xb0>
     1ce:	a0 0e       	add	r10, r16
     1d0:	02 3e       	cpi	r16, 0xE2	; 226
     1d2:	08 bc       	out	0x28, r0	; 40
     1d4:	42 47       	sbci	r20, 0x72	; 114
     1d6:	d8 d4       	rcall	.+2480   	; 0xb88 <__stack+0x289>
     1d8:	06 3f       	cpi	r16, 0xF6	; 246
     1da:	0a 3d       	cpi	r16, 0xDA	; 218
     1dc:	42 cf       	rjmp	.-380    	; 0x62 <__SREG__+0x23>
     1de:	92 35       	cpi	r25, 0x52	; 82
     1e0:	e6 50       	subi	r30, 0x06	; 6
     1e2:	04 40       	sbci	r16, 0x04	; 4
     1e4:	0c 3d       	cpi	r16, 0xDC	; 220
     1e6:	42 cf       	rjmp	.-380    	; 0x6c <__SREG__+0x2d>
     1e8:	92 49       	sbci	r25, 0x92	; 146
     1ea:	4b 62       	ori	r20, 0x2B	; 43
     1ec:	49 17       	cp	r20, r25
     1ee:	00 41       	sbci	r16, 0x10	; 16
     1f0:	0c 3d       	cpi	r16, 0xDC	; 220
     1f2:	42 57       	subi	r20, 0x72	; 114
     1f4:	96 d4       	rcall	.+2348   	; 0xb22 <__stack+0x223>
     1f6:	b4 61       	ori	r27, 0x14	; 20
     1f8:	c8 b4       	in	r12, 0x28	; 40
     1fa:	00 42       	sbci	r16, 0x20	; 32
     1fc:	0d 3d       	cpi	r16, 0xDD	; 221
     1fe:	42 c7       	rjmp	.+3716   	; 0x1084 <angleCalculator+0xd2>
     200:	10 55       	subi	r17, 0x50	; 80
     202:	a2 64       	ori	r26, 0x42	; 66
     204:	aa 44       	sbci	r26, 0x4A	; 74
     206:	83 02       	muls	r24, r19
     208:	43 0a       	sbc	r4, r19
     20a:	3d 42       	sbci	r19, 0x2D	; 45
     20c:	cf 92       	push	r12
     20e:	89 6d       	ori	r24, 0xD9	; 217
     210:	c9 02       	muls	r28, r25
     212:	44 0f       	add	r20, r20
     214:	3d 42       	sbci	r19, 0x2D	; 45
     216:	c7 10       	cpse	r12, r7
     218:	55 a2       	std	Z+37, r5	; 0x25
     21a:	24 4a       	sbci	r18, 0xA4	; 164
     21c:	a2 24       	eor	r10, r2
     21e:	1a 14       	cp	r1, r10
     220:	00 45       	sbci	r16, 0x50	; 80
     222:	0b 3d       	cpi	r16, 0xDB	; 219
     224:	42 c7       	rjmp	.+3716   	; 0x10aa <angleCalculator+0xf8>
     226:	31 1c       	adc	r3, r1
     228:	92 30       	cpi	r25, 0x02	; 2
     22a:	1c 04       	cpc	r1, r12
     22c:	46 0a       	sbc	r4, r22
     22e:	3d 42       	sbci	r19, 0x2D	; 45
     230:	c7 31       	cpi	r28, 0x17	; 23
     232:	1c 92       	st	X, r1
     234:	b0 08       	sbc	r11, r0
     236:	47 0b       	sbc	r20, r23
     238:	3d 42       	sbci	r19, 0x2D	; 45
     23a:	cf 92       	push	r12
     23c:	89 a5       	ldd	r24, Y+41	; 0x29
     23e:	2d 59       	subi	r18, 0x9D	; 157
     240:	00 48       	sbci	r16, 0x80	; 128
     242:	0a 3d       	cpi	r16, 0xDA	; 218
     244:	42 47       	sbci	r20, 0x72	; 114
     246:	66 1b       	sub	r22, r22
     248:	86 cc       	rjmp	.-1780   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     24a:	16 49       	sbci	r17, 0x96	; 150
     24c:	08 bb       	out	0x18, r16	; 24
     24e:	42 c7       	rjmp	.+3716   	; 0x10d4 <angleCalculator+0x122>
     250:	12 75       	andi	r17, 0x52	; 82
     252:	19 4a       	sbci	r17, 0xA9	; 169
     254:	0a 3d       	cpi	r16, 0xDA	; 218
     256:	42 d7       	rcall	.+3716   	; 0x10dc <angleCalculator+0x12a>
     258:	16 b6       	in	r1, 0x36	; 54
     25a:	44 91       	lpm	r20, Z
     25c:	04 4b       	sbci	r16, 0xB4	; 180
     25e:	0d 3d       	cpi	r16, 0xDD	; 221
     260:	42 47       	sbci	r20, 0x72	; 114
     262:	26 25       	eor	r18, r6
     264:	25 2d       	mov	r18, r5
     266:	89 2a       	or	r8, r25
     268:	59 00       	.word	0x0059	; ????
     26a:	4c 08       	sbc	r4, r12
     26c:	3d 42       	sbci	r19, 0x2D	; 45
     26e:	47 d8       	rcall	.-3954   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
     270:	e3 20       	and	r14, r3
     272:	4d 0b       	sbc	r20, r29
     274:	3d 42       	sbci	r19, 0x2D	; 45
     276:	47 a6       	std	Z+47, r4	; 0x2f
     278:	2d 4b       	sbci	r18, 0xBD	; 189
     27a:	a2 d9       	rcall	.-3260   	; 0xfffff5c0 <__eeprom_end+0xff7ef5c0>
     27c:	02 4e       	sbci	r16, 0xE2	; 226
     27e:	0c 3d       	cpi	r16, 0xDC	; 220
     280:	42 47       	sbci	r20, 0x72	; 114
     282:	a6 4d       	sbci	r26, 0xD6	; 214
     284:	4a 22       	and	r4, r26
     286:	6d 5a       	subi	r22, 0xAD	; 173
     288:	00 4f       	sbci	r16, 0xF0	; 240
     28a:	0a 3d       	cpi	r16, 0xDA	; 218
     28c:	42 cf       	rjmp	.-380    	; 0x112 <__trampolines_end+0x7c>
     28e:	92 79       	andi	r25, 0x92	; 146
     290:	4b 16       	cp	r4, r27
     292:	00 50       	subi	r16, 0x00	; 0
     294:	0c 3d       	cpi	r16, 0xDC	; 220
     296:	42 c7       	rjmp	.+3716   	; 0x111c <angleCalculator+0x16a>
     298:	90 64       	ori	r25, 0x40	; 64
     29a:	da a0       	ldd	r13, Y+34	; 0x22
     29c:	84 45       	sbci	r24, 0x54	; 84
     29e:	00 51       	subi	r16, 0x10	; 16
     2a0:	0a 45       	sbci	r16, 0x5A	; 90
     2a2:	3e cf       	rjmp	.-388    	; 0x120 <__trampolines_end+0x8a>
     2a4:	92 79       	andi	r25, 0x92	; 146
     2a6:	a9 ac       	ldd	r10, Y+57	; 0x39
     2a8:	01 52       	subi	r16, 0x21	; 33
     2aa:	0d 3d       	cpi	r16, 0xDD	; 221
     2ac:	42 c7       	rjmp	.+3716   	; 0x1132 <angleCalculator+0x180>
     2ae:	90 64       	ori	r25, 0x40	; 64
     2b0:	da a0       	ldd	r13, Y+34	; 0x22
     2b2:	94 2a       	or	r9, r20
     2b4:	59 00       	.word	0x0059	; ????
     2b6:	53 0b       	sbc	r21, r19
     2b8:	3d 42       	sbci	r19, 0x2D	; 45
     2ba:	cf 92       	push	r12
     2bc:	a9 ab       	std	Y+49, r26	; 0x31
     2be:	96 2c       	mov	r9, r6
     2c0:	00 54       	subi	r16, 0x40	; 64
     2c2:	09 3d       	cpi	r16, 0xD9	; 217
     2c4:	42 c7       	rjmp	.+3716   	; 0x114a <angleCalculator+0x198>
     2c6:	20 85       	ldd	r18, Z+8	; 0x08
     2c8:	3d 01       	movw	r6, r26
     2ca:	55 09       	sbc	r21, r5
     2cc:	3d 42       	sbci	r19, 0x2D	; 45
     2ce:	47 e6       	ldi	r20, 0x67	; 103
     2d0:	5b b2       	in	r5, 0x1b	; 27
     2d2:	00 56       	subi	r16, 0x60	; 96
     2d4:	0d 3d       	cpi	r16, 0xDD	; 221
     2d6:	42 47       	sbci	r20, 0x72	; 114
     2d8:	66 4b       	sbci	r22, 0xB6	; 182
     2da:	4a 49       	sbci	r20, 0x9A	; 154
     2dc:	94 64       	ori	r25, 0x44	; 68
     2de:	11 00       	.word	0x0011	; ????
     2e0:	57 0a       	sbc	r5, r23
     2e2:	3d 42       	sbci	r19, 0x2D	; 45
     2e4:	47 e6       	ldi	r20, 0x67	; 103
     2e6:	92 28       	or	r9, r2
     2e8:	c9 2d       	mov	r28, r9
     2ea:	58 0b       	sbc	r21, r24
     2ec:	3d 42       	sbci	r19, 0x2D	; 45
     2ee:	47 a6       	std	Z+47, r4	; 0x2f
     2f0:	25 b5       	in	r18, 0x25	; 37
     2f2:	4a 4d       	sbci	r20, 0xDA	; 218
     2f4:	0b 59       	subi	r16, 0x9B	; 155
     2f6:	0a 3d       	cpi	r16, 0xDA	; 218
     2f8:	42 47       	sbci	r20, 0x72	; 114
     2fa:	a6 25       	eor	r26, r6
     2fc:	b5 b0       	in	r11, 0x05	; 5
     2fe:	09 5a       	subi	r16, 0xA9	; 169
     300:	0a 3d       	cpi	r16, 0xDA	; 218
     302:	42 c7       	rjmp	.+3716   	; 0x1188 <__vector_3+0x26>
     304:	20 66       	ori	r18, 0x60	; 96
     306:	1d 07       	cpc	r17, r29
     308:	01 5b       	subi	r16, 0xB1	; 177
     30a:	08 bb       	out	0x18, r16	; 24
     30c:	42 c7       	rjmp	.+3716   	; 0x1192 <__vector_3+0x30>
     30e:	10 75       	andi	r17, 0x50	; 80
     310:	1a 5c       	subi	r17, 0xCA	; 202
     312:	08 3d       	cpi	r16, 0xD8	; 216
     314:	42 47       	sbci	r20, 0x72	; 114
     316:	98 76       	andi	r25, 0x68	; 104
     318:	0c 5d       	subi	r16, 0xDC	; 220
     31a:	08 bb       	out	0x18, r16	; 24
     31c:	42 c7       	rjmp	.+3716   	; 0x11a2 <__vector_3+0x40>
     31e:	d4 69       	ori	r29, 0x94	; 148
     320:	08 5e       	subi	r16, 0xE8	; 232
     322:	08 1d       	adc	r16, r8
     324:	52 57       	subi	r21, 0x72	; 114
     326:	96 d4       	rcall	.+2348   	; 0xc54 <__stack+0x355>
     328:	02 5f       	subi	r16, 0xF2	; 242
     32a:	06 0d       	add	r16, r6
     32c:	3e c7       	rjmp	.+3708   	; 0x11aa <__vector_3+0x48>
     32e:	20 60       	ori	r18, 0x00	; 0
     330:	06 12       	cpse	r0, r22
     332:	5b 47       	sbci	r21, 0x7B	; 123
     334:	14 61       	ori	r17, 0x14	; 20
     336:	0a 2d       	mov	r16, r10
     338:	42 cf       	rjmp	.-380    	; 0x1be <__trampolines_end+0x128>
     33a:	9a 0c       	add	r9, r10
     33c:	5a 32       	cpi	r21, 0x2A	; 42
     33e:	04 62       	ori	r16, 0x24	; 36
     340:	0b 3d       	cpi	r16, 0xDB	; 219
     342:	42 47       	sbci	r20, 0x72	; 114
     344:	58 31       	cpi	r21, 0x18	; 24
     346:	69 93       	st	Y+, r22
     348:	a2 00       	.word	0x00a2	; ????
     34a:	63 0a       	sbc	r6, r19
     34c:	2d 42       	sbci	r18, 0x2D	; 45
     34e:	cf 92       	push	r12
     350:	89 59       	subi	r24, 0x99	; 153
     352:	b2 00       	.word	0x00b2	; ????
     354:	64 0a       	sbc	r6, r20
     356:	3d 42       	sbci	r19, 0x2D	; 45
     358:	67 c5       	rjmp	.+2766   	; 0xe28 <__stack+0x529>
     35a:	b4 49       	sbci	r27, 0x94	; 148
     35c:	8a 12       	cpse	r8, r26
     35e:	65 0a       	sbc	r6, r21
     360:	2d 42       	sbci	r18, 0x2D	; 45
     362:	cf 92       	push	r12
     364:	0d 43       	sbci	r16, 0x3D	; 61
     366:	ba 00       	.word	0x00ba	; ????
     368:	66 0b       	sbc	r22, r22
     36a:	3d 42       	sbci	r19, 0x2D	; 45
     36c:	97 54       	subi	r25, 0x47	; 71
     36e:	c9 86       	std	Y+9, r12	; 0x09
     370:	28 ac       	ldd	r2, Y+56	; 0x38
     372:	01 67       	ori	r16, 0x71	; 113
     374:	0c 3d       	cpi	r16, 0xDC	; 220
     376:	3a cf       	rjmp	.-396    	; 0x1ec <__trampolines_end+0x156>
     378:	a0 69       	ori	r26, 0x90	; 144
     37a:	c9 10       	cpse	r12, r9
     37c:	6a c9       	rjmp	.-3372   	; 0xfffff652 <__eeprom_end+0xff7ef652>
     37e:	02 68       	ori	r16, 0x82	; 130
     380:	0a 3d       	cpi	r16, 0xDA	; 218
     382:	42 47       	sbci	r20, 0x72	; 114
     384:	58 31       	cpi	r21, 0x18	; 24
     386:	69 b6       	in	r6, 0x39	; 57
     388:	00 69       	ori	r16, 0x90	; 144
     38a:	08 bb       	out	0x18, r16	; 24
     38c:	42 4f       	sbci	r20, 0xF2	; 242
     38e:	28 b5       	in	r18, 0x28	; 40
     390:	0c 6a       	ori	r16, 0xAC	; 172
     392:	0b cc       	rjmp	.-2026   	; 0xfffffbaa <__eeprom_end+0xff7efbaa>
     394:	3a 5f       	subi	r19, 0xFA	; 250
     396:	ac d5       	rcall	.+2904   	; 0xef0 <__stack+0x5f1>
     398:	24 29       	or	r18, r4
     39a:	51 00       	.word	0x0051	; ????
     39c:	6b 0b       	sbc	r22, r27
     39e:	3d 42       	sbci	r19, 0x2D	; 45
     3a0:	47 58       	subi	r20, 0x87	; 135
     3a2:	93 92       	.word	0x9293	; ????
     3a4:	a9 92       	st	Y+, r10
     3a6:	05 6c       	ori	r16, 0xC5	; 197
     3a8:	08 bb       	out	0x18, r16	; 24
     3aa:	42 87       	std	Z+10, r20	; 0x0a
     3ac:	d4 cb       	rjmp	.-2136   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3ae:	00 6d       	ori	r16, 0xD0	; 208
     3b0:	0b 2d       	mov	r16, r11
     3b2:	42 87       	std	Z+10, r20	; 0x0a
     3b4:	d2 a2       	std	Z+34, r13	; 0x22
     3b6:	24 4a       	sbci	r18, 0xA4	; 164
     3b8:	a2 05       	cpc	r26, r2
     3ba:	6e 09       	sbc	r22, r14
     3bc:	2d 42       	sbci	r18, 0x2D	; 45
     3be:	47 62       	ori	r20, 0x27	; 39
     3c0:	d2 6c       	ori	r29, 0xC2	; 194
     3c2:	01 6f       	ori	r16, 0xF1	; 241
     3c4:	09 2d       	mov	r16, r9
     3c6:	42 cf       	rjmp	.-380    	; 0x24c <__trampolines_end+0x1b6>
     3c8:	92 d9       	rcall	.-3292   	; 0xfffff6ee <__eeprom_end+0xff7ef6ee>
     3ca:	92 05       	cpc	r25, r2
     3cc:	70 0c       	add	r7, r0
     3ce:	3d 3a       	cpi	r19, 0xAD	; 173
     3d0:	47 62       	ori	r20, 0x27	; 39
     3d2:	d2 26       	eor	r13, r18
     3d4:	45 09       	sbc	r20, r5
     3d6:	43 00       	.word	0x0043	; ????
     3d8:	71 0a       	sbc	r7, r17
     3da:	3d 3a       	cpi	r19, 0xAD	; 173
     3dc:	8f 69       	ori	r24, 0x9F	; 159
     3de:	93 14       	cp	r9, r3
     3e0:	25 2c       	mov	r2, r5
     3e2:	72 09       	sbc	r23, r2
     3e4:	2d 42       	sbci	r18, 0x2D	; 45
     3e6:	47 62       	ori	r20, 0x27	; 39
     3e8:	12 8b       	std	Z+18, r17	; 0x12
     3ea:	00 73       	andi	r16, 0x30	; 48
     3ec:	09 2d       	mov	r16, r9
     3ee:	42 cf       	rjmp	.-380    	; 0x274 <__trampolines_end+0x1de>
     3f0:	92 1e       	adc	r9, r18
     3f2:	14 00       	.word	0x0014	; ????
     3f4:	74 0c       	add	r7, r4
     3f6:	3d 42       	sbci	r19, 0x2D	; 45
     3f8:	4f 98       	cbi	0x09, 7	; 9
     3fa:	0d 51       	subi	r16, 0x1D	; 29
     3fc:	58 8a       	std	Y+16, r5	; 0x10
     3fe:	14 00       	.word	0x0014	; ????
     400:	75 09       	sbc	r23, r5
     402:	2d 42       	sbci	r18, 0x2D	; 45
     404:	47 e6       	ldi	r20, 0x67	; 103
     406:	a4 28       	or	r10, r4
     408:	01 76       	andi	r16, 0x61	; 97
     40a:	0b 2d       	mov	r16, r11
     40c:	42 47       	sbci	r20, 0x72	; 114
     40e:	a6 25       	eor	r26, r6
     410:	a5 24       	eor	r10, r5
     412:	8b 00       	.word	0x008b	; ????
     414:	77 0a       	sbc	r7, r23
     416:	2d 42       	sbci	r18, 0x2D	; 45
     418:	47 66       	ori	r20, 0x67	; 103
     41a:	49 94       	.word	0x9449	; ????
     41c:	2e 00       	.word	0x002e	; ????
     41e:	78 0a       	sbc	r7, r24
     420:	2d 42       	sbci	r18, 0x2D	; 45
     422:	47 96       	adiw	r24, 0x17	; 23
     424:	d4 2a       	or	r13, r20
     426:	b5 00       	.word	0x00b5	; ????
     428:	79 0c       	add	r7, r9
     42a:	3d 3a       	cpi	r19, 0xAD	; 173
     42c:	47 66       	ori	r20, 0x67	; 103
     42e:	52 94       	swap	r5
     430:	50 4b       	sbci	r21, 0xB0	; 176
     432:	16 00       	.word	0x0016	; ????
     434:	7a 09       	sbc	r23, r10
     436:	2d 42       	sbci	r18, 0x2D	; 45
     438:	c7 a0       	ldd	r12, Z+39	; 0x27
     43a:	b5 0d       	add	r27, r5
     43c:	02 7b       	andi	r16, 0xB2	; 178
     43e:	0a bc       	out	0x2a, r0	; 42
     440:	42 97       	sbiw	r24, 0x12	; 18
     442:	12 26       	eor	r1, r18
     444:	62 14       	cp	r6, r2
     446:	0a 7c       	andi	r16, 0xCA	; 202
     448:	06 39       	cpi	r16, 0x96	; 150
     44a:	43 c7       	rjmp	.+3718   	; 0x12d2 <__vector_3+0x170>
     44c:	21 7d       	andi	r18, 0xD1	; 209
     44e:	0b bc       	out	0x2b, r0	; 43
     450:	42 87       	std	Z+10, r20	; 0x0a
     452:	18 85       	ldd	r17, Y+8	; 0x08
     454:	4a 98       	cbi	0x09, 2	; 9
     456:	48 00       	.word	0x0048	; ????
     458:	7e 09       	sbc	r23, r14
     45a:	1d 52       	subi	r17, 0x2D	; 45
     45c:	4f a4       	ldd	r4, Y+47	; 0x2f
     45e:	24 52       	subi	r18, 0x24	; 36
     460:	02 a0       	ldd	r0, Z+34	; 0x22
     462:	05 00       	.word	0x0005	; ????
     464:	62 07       	cpc	r22, r18
     466:	a1 07       	cpc	r26, r17
     468:	39 43       	sbci	r19, 0x39	; 57
     46a:	47 32       	cpi	r20, 0x27	; 39
     46c:	08 a2       	std	Y+32, r0	; 0x20
     46e:	0e 3d       	cpi	r16, 0xDE	; 222
     470:	3e 57       	subi	r19, 0x7E	; 126
     472:	36 28       	or	r3, r6
     474:	51 12       	cpse	r5, r17
     476:	25 d9       	rcall	.-3510   	; 0xfffff6c2 <__eeprom_end+0xff7ef6c2>
     478:	10 45       	sbci	r17, 0x50	; 80
     47a:	00 a3       	std	Z+32, r16	; 0x20
     47c:	0c 3d       	cpi	r16, 0xDC	; 220
     47e:	42 97       	sbiw	r24, 0x12	; 18
     480:	54 c9       	rjmp	.-3416   	; 0xfffff72a <__eeprom_end+0xff7ef72a>
     482:	b6 30       	cpi	r27, 0x06	; 6
     484:	52 14       	cp	r5, r2
     486:	00 a4       	ldd	r0, Z+40	; 0x28
     488:	0b 2d       	mov	r16, r11
     48a:	42 47       	sbci	r20, 0x72	; 114
     48c:	96 4c       	sbci	r25, 0xC6	; 198
     48e:	49 b4       	in	r4, 0x29	; 41
     490:	64 01       	movw	r12, r8
     492:	a5 0d       	add	r26, r5
     494:	45 3e       	cpi	r20, 0xE5	; 229
     496:	47 a6       	std	Z+47, r4	; 0x2f
     498:	25 b5       	in	r18, 0x25	; 37
     49a:	68 90       	.word	0x9068	; ????
     49c:	c2 12       	cpse	r12, r18
     49e:	00 a6       	std	Z+40, r0	; 0x28
     4a0:	06 39       	cpi	r16, 0x96	; 150
     4a2:	43 c7       	rjmp	.+3718   	; 0x132a <__vector_3+0x1c8>
     4a4:	32 a7       	std	Z+42, r19	; 0x2a
     4a6:	0b 45       	sbci	r16, 0x5B	; 91
     4a8:	3e cf       	rjmp	.-388    	; 0x326 <__trampolines_end+0x290>
     4aa:	12 4e       	sbci	r17, 0xE2	; 226
     4ac:	9d c6       	rjmp	.+3386   	; 0x11e8 <__vector_3+0x86>
     4ae:	64 01       	movw	r12, r8
     4b0:	a8 06       	cpc	r10, r24
     4b2:	8b 5e       	subi	r24, 0xEB	; 235
     4b4:	47 12       	cpse	r4, r23
     4b6:	a9 0d       	add	r26, r9
     4b8:	3d 42       	sbci	r19, 0x2D	; 45
     4ba:	cf 92       	push	r12
     4bc:	29 c9       	rjmp	.-3502   	; 0xfffff710 <__eeprom_end+0xff7ef710>
     4be:	a4 24       	eor	r10, r4
     4c0:	5a b2       	in	r5, 0x1a	; 26
     4c2:	00 aa       	std	Z+48, r0	; 0x30
     4c4:	0a b4       	in	r0, 0x2a	; 42
     4c6:	46 cf       	rjmp	.-372    	; 0x354 <__trampolines_end+0x2be>
     4c8:	10 29       	or	r17, r0
     4ca:	4a 71       	andi	r20, 0x1A	; 26
     4cc:	08 ab       	std	Y+48, r16	; 0x30
     4ce:	0c 2e       	mov	r0, r28
     4d0:	42 57       	subi	r20, 0x72	; 114
     4d2:	25 4a       	sbci	r18, 0xA5	; 165
     4d4:	a2 2c       	mov	r10, r2
     4d6:	ca a2       	std	Y+34, r12	; 0x22
     4d8:	00 ac       	ldd	r0, Z+56	; 0x38
     4da:	07 94       	ror	r0
     4dc:	4a c7       	rjmp	.+3732   	; 0x1372 <__vector_3+0x210>
     4de:	90 05       	cpc	r25, r0
     4e0:	ad 06       	cpc	r10, r29
     4e2:	8c 4e       	sbci	r24, 0xEC	; 236
     4e4:	c7 10       	cpse	r12, r7
     4e6:	ae 0c       	add	r10, r14
     4e8:	3d 42       	sbci	r19, 0x2D	; 45
     4ea:	cf 92       	push	r12
     4ec:	0d c9       	rjmp	.-3558   	; 0xfffff708 <__eeprom_end+0xff7ef708>
     4ee:	34 69       	ori	r19, 0x94	; 148
     4f0:	c9 02       	muls	r28, r25
     4f2:	af 06       	cpc	r10, r31
     4f4:	0d 5e       	subi	r16, 0xED	; 237
     4f6:	c7 20       	and	r12, r7
     4f8:	b0 07       	cpc	r27, r16
     4fa:	9b 52       	subi	r25, 0x2B	; 43
     4fc:	4f 17       	cp	r20, r31
     4fe:	00 b1       	in	r16, 0x00	; 0
     500:	0b 35       	cpi	r16, 0x5B	; 91
     502:	42 57       	subi	r20, 0x72	; 114
     504:	18 0d       	add	r17, r8
     506:	52 18       	sub	r5, r2
     508:	0d 02       	muls	r16, r29
     50a:	b2 09       	sbc	r27, r2
     50c:	ac 4e       	sbci	r26, 0xEC	; 236
     50e:	8f 12       	cpse	r8, r31
     510:	35 0d       	add	r19, r5
     512:	01 b3       	in	r16, 0x11	; 17
     514:	09 ac       	ldd	r0, Y+57	; 0x39
     516:	4e c7       	rjmp	.+3740   	; 0x13b4 <__vector_3+0x252>
     518:	98 88       	ldd	r9, Y+16	; 0x10
     51a:	43 02       	muls	r20, r19
     51c:	b4 06       	cpc	r11, r20
     51e:	12 5b       	subi	r17, 0xB2	; 178
     520:	8f 02       	muls	r24, r31
     522:	b5 0a       	sbc	r11, r21
     524:	35 3e       	cpi	r19, 0xE5	; 229
     526:	47 66       	ori	r20, 0x67	; 103
     528:	9b 14       	cp	r9, r11
     52a:	25 04       	cpc	r2, r5
     52c:	b6 0f       	add	r27, r22
     52e:	3d 42       	sbci	r19, 0x2D	; 45
     530:	cf 30       	cpi	r28, 0x0F	; 15
     532:	24 43       	sbci	r18, 0x34	; 52
     534:	92 28       	or	r9, r2
     536:	51 12       	cpse	r5, r17
     538:	25 51       	subi	r18, 0x15	; 21
     53a:	12 b7       	in	r17, 0x32	; 50
     53c:	06 09       	sbc	r16, r6
     53e:	4f 47       	sbci	r20, 0x7F	; 127
     540:	00 b8       	out	0x00, r0	; 0
     542:	06 12       	cpse	r0, r22
     544:	3b 8f       	std	Y+27, r19	; 0x1b
     546:	02 b9       	out	0x02, r16	; 2
     548:	08 ab       	std	Y+48, r16	; 0x30
     54a:	4e 4f       	sbci	r20, 0xFE	; 254
     54c:	22 55       	subi	r18, 0x52	; 82
     54e:	06 ba       	out	0x16, r0	; 22
     550:	0a b4       	in	r0, 0x2a	; 42
     552:	46 8f       	std	Z+30, r20	; 0x1e
     554:	12 49       	sbci	r17, 0x92	; 146
     556:	89 3a       	cpi	r24, 0xA9	; 169
     558:	04 bb       	out	0x14, r16	; 20
     55a:	0d 2e       	mov	r0, r29
     55c:	42 47       	sbci	r20, 0x72	; 114
     55e:	94 45       	sbci	r25, 0x54	; 84
     560:	59 94       	.word	0x9459	; ????
     562:	44 49       	sbci	r20, 0x94	; 148
     564:	14 01       	movw	r2, r8
     566:	bc 0d       	add	r27, r12
     568:	4e 3e       	cpi	r20, 0xEE	; 238
     56a:	4f a8       	ldd	r4, Y+55	; 0x37
     56c:	16 a7       	std	Z+46, r17	; 0x2e
     56e:	50 4b       	sbci	r21, 0xB0	; 176
     570:	a2 21       	and	r26, r2
     572:	0d bd       	out	0x2d, r16	; 45
     574:	0c 4e       	sbci	r16, 0xEC	; 236
     576:	3e 4f       	sbci	r19, 0xFE	; 254
     578:	a8 16       	cp	r10, r24
     57a:	97 30       	cpi	r25, 0x07	; 7
     57c:	49 c3       	rjmp	.+1682   	; 0xc10 <__stack+0x311>
     57e:	70 be       	out	0x30, r7	; 48
     580:	0e 4d       	sbci	r16, 0xDE	; 222
     582:	3e 87       	std	Y+14, r19	; 0x0e
     584:	9a a5       	ldd	r25, Y+42	; 0x2a
     586:	91 94       	neg	r9
     588:	49 49       	sbci	r20, 0x99	; 153
     58a:	32 84       	ldd	r3, Z+10	; 0x0a
     58c:	01 bf       	out	0x31, r16	; 49
     58e:	0a 3d       	cpi	r16, 0xDA	; 218
     590:	42 57       	subi	r20, 0x72	; 114
     592:	0e 85       	ldd	r16, Y+14	; 0x0e
     594:	59 cb       	rjmp	.-2382   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     596:	02 c0       	rjmp	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     598:	0c 45       	sbci	r16, 0x5C	; 92
     59a:	42 4f       	sbci	r20, 0xF2	; 242
     59c:	9a 2d       	mov	r25, r10
     59e:	99 36       	cpi	r25, 0x69	; 105
     5a0:	0c 99       	sbic	0x01, 4	; 1
     5a2:	16 c1       	rjmp	.+556    	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     5a4:	0c 45       	sbci	r16, 0x5C	; 92
     5a6:	42 5f       	subi	r20, 0xF2	; 242
     5a8:	6d c9       	rjmp	.-3366   	; 0xfffff884 <__eeprom_end+0xff7ef884>
     5aa:	b4 61       	ori	r27, 0x14	; 20
     5ac:	c8 b4       	in	r12, 0x28	; 40
     5ae:	00 c2       	rjmp	.+1024   	; 0x9b0 <__stack+0xb1>
     5b0:	0d 45       	sbci	r16, 0x5D	; 93
     5b2:	42 57       	subi	r20, 0x72	; 114
     5b4:	96 44       	sbci	r25, 0x46	; 70
     5b6:	4b a6       	std	Y+43, r4	; 0x2b
     5b8:	0d 43       	sbci	r16, 0x3D	; 61
     5ba:	a6 05       	cpc	r26, r6
     5bc:	c3 0d       	add	r28, r3
     5be:	45 42       	sbci	r20, 0x25	; 37
     5c0:	4f a4       	ldd	r4, Y+47	; 0x2f
     5c2:	48 4b       	sbci	r20, 0xB8	; 184
     5c4:	a6 0d       	add	r26, r6
     5c6:	43 a6       	std	Z+43, r4	; 0x2b
     5c8:	05 c4       	rjmp	.+2058   	; 0xdd4 <__stack+0x4d5>
     5ca:	0c 45       	sbci	r16, 0x5C	; 92
     5cc:	42 4f       	sbci	r20, 0xF2	; 242
     5ce:	1d 58       	subi	r17, 0x8D	; 141
     5d0:	32 6d       	ori	r19, 0xD2	; 210
     5d2:	18 32       	cpi	r17, 0x28	; 40
     5d4:	2d c5       	rjmp	.+2650   	; 0x1030 <angleCalculator+0x7e>
     5d6:	0d 45       	sbci	r16, 0x5D	; 93
     5d8:	42 57       	subi	r20, 0x72	; 114
     5da:	96 44       	sbci	r25, 0x46	; 70
     5dc:	4b a6       	std	Y+43, r4	; 0x2b
     5de:	0d 43       	sbci	r16, 0x3D	; 61
     5e0:	a6 05       	cpc	r26, r6
     5e2:	c6 0c       	add	r12, r6
     5e4:	3e 42       	sbci	r19, 0x2E	; 46
     5e6:	d7 90       	elpm	r13, Z+
     5e8:	94 9a       	sbi	0x12, 4	; 18
     5ea:	86 21       	and	r24, r6
     5ec:	6a 1a       	sub	r6, r26
     5ee:	c7 0b       	sbc	r28, r23
     5f0:	4d 3a       	cpi	r20, 0xAD	; 173
     5f2:	cf 92       	push	r12
     5f4:	89 6d       	ori	r24, 0xD9	; 217
     5f6:	c9 56       	subi	r28, 0x69	; 105
     5f8:	03 c8       	rjmp	.-4090   	; 0xfffff600 <__eeprom_end+0xff7ef600>
     5fa:	0c 45       	sbci	r16, 0x5C	; 92
     5fc:	42 4f       	sbci	r20, 0xF2	; 242
     5fe:	36 8c       	ldd	r3, Z+30	; 0x1e
     600:	e1 90       	ld	r14, Z+
     602:	84 e1       	ldi	r24, 0x14	; 20
     604:	20 c9       	rjmp	.-3520   	; 0xfffff846 <__eeprom_end+0xff7ef846>
     606:	0c 45       	sbci	r16, 0x5C	; 92
     608:	42 5f       	subi	r20, 0xF2	; 242
     60a:	32 8c       	ldd	r3, Z+26	; 0x1a
     60c:	e1 90       	ld	r14, Z+
     60e:	84 e1       	ldi	r24, 0x14	; 20
     610:	20 ca       	rjmp	.-3008   	; 0xfffffa52 <__eeprom_end+0xff7efa52>
     612:	0c 45       	sbci	r16, 0x5C	; 92
     614:	42 57       	subi	r20, 0x72	; 114
     616:	34 8c       	ldd	r3, Z+28	; 0x1c
     618:	e1 90       	ld	r14, Z+
     61a:	84 e1       	ldi	r24, 0x14	; 20
     61c:	20 cb       	rjmp	.-2496   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
     61e:	0c 45       	sbci	r16, 0x5C	; 92
     620:	42 4f       	sbci	r20, 0xF2	; 242
     622:	65 18       	sub	r6, r5
     624:	c3 21       	and	r28, r3
     626:	09 c3       	rjmp	.+1554   	; 0xc3a <__stack+0x33b>
     628:	41 cc       	rjmp	.-1918   	; 0xfffffeac <__eeprom_end+0xff7efeac>
     62a:	0a c3       	rjmp	.+1556   	; 0xc40 <__stack+0x341>
     62c:	42 47       	sbci	r20, 0x72	; 114
     62e:	96 2c       	mov	r9, r6
     630:	51 cb       	rjmp	.-2398   	; 0xfffffcd4 <__eeprom_end+0xff7efcd4>
     632:	00 cd       	rjmp	.-1536   	; 0x34 <__FUSE_REGION_LENGTH__+0x31>
     634:	0a c3       	rjmp	.+1556   	; 0xc4a <__stack+0x34b>
     636:	42 57       	subi	r20, 0x72	; 114
     638:	92 2c       	mov	r9, r2
     63a:	51 cb       	rjmp	.-2398   	; 0xfffffcde <__eeprom_end+0xff7efcde>
     63c:	00 ce       	rjmp	.-1024   	; 0x23e <__trampolines_end+0x1a8>
     63e:	0a c3       	rjmp	.+1556   	; 0xc54 <__stack+0x355>
     640:	42 4f       	sbci	r20, 0xF2	; 242
     642:	65 48       	sbci	r22, 0x85	; 133
     644:	a2 96       	adiw	r28, 0x22	; 34
     646:	01 cf       	rjmp	.-510    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     648:	0a c3       	rjmp	.+1556   	; 0xc5e <__stack+0x35f>
     64a:	42 47       	sbci	r20, 0x72	; 114
     64c:	92 2d       	mov	r25, r2
     64e:	51 cb       	rjmp	.-2398   	; 0xfffffcf2 <__eeprom_end+0xff7efcf2>
     650:	00 d0       	rcall	.+0      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     652:	0e 3d       	cpi	r16, 0xDE	; 222
     654:	42 c7       	rjmp	.+3716   	; 0x14da <setup_display+0x24>
     656:	10 55       	subi	r17, 0x50	; 80
     658:	a2 21       	and	r26, r2
     65a:	29 25       	eor	r18, r9
     65c:	d1 a0       	ldd	r13, Z+33	; 0x21
     65e:	00 d1       	rcall	.+512    	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     660:	0c 45       	sbci	r16, 0x5C	; 92
     662:	42 57       	subi	r20, 0x72	; 114
     664:	d2 6d       	ori	r29, 0xD2	; 210
     666:	52 12       	cpse	r5, r18
     668:	69 d3       	rcall	.+1746   	; 0xd3c <__stack+0x43d>
     66a:	02 d2       	rcall	.+1028   	; 0xa70 <__stack+0x171>
     66c:	0b 45       	sbci	r16, 0x5B	; 91
     66e:	42 4f       	sbci	r20, 0xF2	; 242
     670:	9a 2d       	mov	r25, r10
     672:	99 5b       	subi	r25, 0xB9	; 185
     674:	b2 00       	.word	0x00b2	; ????
     676:	d3 0a       	sbc	r13, r19
     678:	45 42       	sbci	r20, 0x25	; 37
     67a:	5f 6d       	ori	r21, 0xDF	; 223
     67c:	c9 dc       	rcall	.-1646   	; 0x10 <__FUSE_REGION_LENGTH__+0xd>
     67e:	92 05       	cpc	r25, r2
     680:	d4 0c       	add	r13, r4
     682:	45 42       	sbci	r20, 0x25	; 37
     684:	57 96       	adiw	r26, 0x17	; 23
     686:	44 4b       	sbci	r20, 0xB4	; 180
     688:	e6 96       	adiw	r28, 0x36	; 54
     68a:	2c 00       	.word	0x002c	; ????
     68c:	d5 0b       	sbc	r29, r21
     68e:	45 42       	sbci	r20, 0x25	; 37
     690:	57 d2       	rcall	.+1198   	; 0xb40 <__stack+0x241>
     692:	b4 64       	ori	r27, 0x44	; 68
     694:	6e c9       	rjmp	.-3364   	; 0xfffff972 <__eeprom_end+0xff7ef972>
     696:	02 d6       	rcall	.+3076   	; 0x129c <__vector_3+0x13a>
     698:	0b 45       	sbci	r16, 0x5B	; 91
     69a:	42 4f       	sbci	r20, 0xF2	; 242
     69c:	1d 58       	subi	r17, 0x8D	; 141
     69e:	32 b7       	in	r19, 0x32	; 50
     6a0:	64 01       	movw	r12, r8
     6a2:	d7 0a       	sbc	r13, r23
     6a4:	2d 42       	sbci	r18, 0x2D	; 45
     6a6:	47 96       	adiw	r24, 0x17	; 23
     6a8:	d4 2a       	or	r13, r20
     6aa:	b5 00       	.word	0x00b5	; ????
     6ac:	d8 0c       	add	r13, r8
     6ae:	3d 42       	sbci	r19, 0x2D	; 45
     6b0:	cf 12       	cpse	r12, r31
     6b2:	5d 92       	st	X+, r5
     6b4:	69 4a       	sbci	r22, 0xA9	; 169
     6b6:	16 00       	.word	0x0016	; ????
     6b8:	d9 0a       	sbc	r13, r25
     6ba:	45 42       	sbci	r20, 0x25	; 37
     6bc:	4f 1a       	sub	r4, r31
     6be:	65 de       	rcall	.-822    	; 0x38a <__trampolines_end+0x2f4>
     6c0:	92 05       	cpc	r25, r2
     6c2:	da 0a       	sbc	r13, r26
     6c4:	45 42       	sbci	r20, 0x25	; 37
     6c6:	5f 29       	or	r21, r15
     6c8:	f3 96       	adiw	r30, 0x33	; 51
     6ca:	2c 00       	.word	0x002c	; ????
     6cc:	db 0b       	sbc	r29, r27
     6ce:	45 42       	sbci	r20, 0x25	; 37
     6d0:	57 96       	adiw	r26, 0x17	; 23
     6d2:	c4 99       	sbic	0x18, 4	; 24
     6d4:	5b b2       	in	r5, 0x1b	; 27
     6d6:	00 dc       	rcall	.-2048   	; 0xfffffed8 <__eeprom_end+0xff7efed8>
     6d8:	0a 45       	sbci	r16, 0x5A	; 90
     6da:	42 4f       	sbci	r20, 0xF2	; 242
     6dc:	39 f3       	breq	.-50     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     6de:	96 2c       	mov	r9, r6
     6e0:	00 dd       	rcall	.-1536   	; 0xe2 <__trampolines_end+0x4c>
     6e2:	0b 45       	sbci	r16, 0x5B	; 91
     6e4:	42 5f       	subi	r20, 0xF2	; 242
     6e6:	29 d3       	rcall	.+1618   	; 0xd3a <__stack+0x43b>
     6e8:	92 5a       	subi	r25, 0xA2	; 162
     6ea:	58 02       	muls	r21, r24
     6ec:	de 0c       	add	r13, r14
     6ee:	3d 42       	sbci	r19, 0x2D	; 45
     6f0:	47 38       	cpi	r20, 0x87	; 135
     6f2:	24 d9       	rcall	.-3512   	; 0xfffff93c <__eeprom_end+0xff7ef93c>
     6f4:	a0 84       	ldd	r10, Z+8	; 0x08
     6f6:	45 00       	.word	0x0045	; ????
     6f8:	df 0d       	add	r29, r15
     6fa:	3d 42       	sbci	r19, 0x2D	; 45
     6fc:	cf 92       	push	r12
     6fe:	49 49       	sbci	r20, 0x99	; 153
     700:	a9 92       	st	Y+, r10
     702:	29 0a       	sbc	r2, r25
     704:	00 e0       	ldi	r16, 0x00	; 0
     706:	0c 45       	sbci	r16, 0x5C	; 92
     708:	42 4f       	sbci	r20, 0xF2	; 242
     70a:	9a 23       	and	r25, r26
     70c:	6b 32       	cpi	r22, 0x2B	; 43
     70e:	68 c9       	rjmp	.-3376   	; 0xfffff9e0 <__eeprom_end+0xff7ef9e0>
     710:	10 e1       	ldi	r17, 0x10	; 16
     712:	0c 45       	sbci	r16, 0x5C	; 92
     714:	42 5f       	subi	r20, 0xF2	; 242
     716:	1d 59       	subi	r17, 0x9D	; 157
     718:	93 41       	sbci	r25, 0x13	; 19
     71a:	4b 86       	std	Y+11, r4	; 0x0b
     71c:	00 e2       	ldi	r16, 0x20	; 32
     71e:	0d 45       	sbci	r16, 0x5D	; 93
     720:	42 57       	subi	r20, 0x72	; 114
     722:	96 e4       	ldi	r25, 0x46	; 70
     724:	c0 9a       	sbi	0x18, 0	; 24
     726:	0c 5a       	subi	r16, 0xAC	; 172
     728:	32 04       	cpc	r3, r2
     72a:	e3 0d       	add	r30, r3
     72c:	45 42       	sbci	r20, 0x25	; 37
     72e:	57 d2       	rcall	.+1198   	; 0xbde <__stack+0x2df>
     730:	0e ac       	ldd	r0, Y+62	; 0x3e
     732:	c9 a0       	ldd	r12, Y+33	; 0x21
     734:	25 43       	sbci	r18, 0x35	; 53
     736:	00 e4       	ldi	r16, 0x40	; 64
     738:	0c 3d       	cpi	r16, 0xDC	; 220
     73a:	42 4f       	sbci	r20, 0xF2	; 242
     73c:	1d 58       	subi	r17, 0x8D	; 141
     73e:	93 41       	sbci	r25, 0x13	; 19
     740:	4b 86       	std	Y+11, r4	; 0x0b
     742:	00 e5       	ldi	r16, 0x50	; 80
     744:	0d 45       	sbci	r16, 0x5D	; 93
     746:	42 57       	subi	r20, 0x72	; 114
     748:	96 64       	ori	r25, 0x46	; 70
     74a:	d9 9a       	sbi	0x1b, 1	; 27
     74c:	0c 5a       	subi	r16, 0xAC	; 172
     74e:	32 04       	cpc	r3, r2
     750:	e6 0c       	add	r14, r6
     752:	2e 42       	sbci	r18, 0x2E	; 46
     754:	cf 10       	cpse	r12, r15
     756:	26 c9       	rjmp	.-3508   	; 0xfffff9a4 <__eeprom_end+0xff7ef9a4>
     758:	30 65       	ori	r19, 0x50	; 80
     75a:	83 00       	.word	0x0083	; ????
     75c:	e7 0b       	sbc	r30, r23
     75e:	3d 3a       	cpi	r19, 0xAD	; 173
     760:	cf 92       	push	r12
     762:	89 59       	subi	r24, 0x99	; 153
     764:	b2 d5       	rcall	.+2916   	; 0x12ca <__vector_3+0x168>
     766:	00 e8       	ldi	r16, 0x80	; 128
     768:	0c 45       	sbci	r16, 0x5C	; 92
     76a:	42 4f       	sbci	r20, 0xF2	; 242
     76c:	9a 23       	and	r25, r26
     76e:	4b 36       	cpi	r20, 0x6B	; 107
     770:	0c e9       	ldi	r16, 0x9C	; 156
     772:	02 e9       	ldi	r16, 0x92	; 146
     774:	0c 45       	sbci	r16, 0x5C	; 92
     776:	42 5f       	subi	r20, 0xF2	; 242
     778:	1d 59       	subi	r17, 0x9D	; 157
     77a:	b2 61       	ori	r27, 0x12	; 18
     77c:	48 17       	cp	r20, r24
     77e:	00 ea       	ldi	r16, 0xA0	; 160
     780:	0d 45       	sbci	r16, 0x5D	; 93
     782:	42 57       	subi	r20, 0x72	; 114
     784:	96 e4       	ldi	r25, 0x46	; 70
     786:	c0 92 0d 43 	sts	0x430D, r12	; 0x80430d <__bss_end+0x3ab1>
     78a:	ba 00       	.word	0x00ba	; ????
     78c:	eb 0c       	add	r14, r11
     78e:	3d 42       	sbci	r19, 0x2D	; 45
     790:	4f 1d       	adc	r20, r15
     792:	58 b2       	in	r5, 0x18	; 24
     794:	61 48       	sbci	r22, 0x81	; 129
     796:	17 00       	.word	0x0017	; ????
     798:	ec 09       	sbc	r30, r12
     79a:	c3 42       	sbci	r28, 0x23	; 35
     79c:	47 16       	cp	r4, r23
     79e:	4a 2d       	mov	r20, r10
     7a0:	03 ed       	ldi	r16, 0xD3	; 211
     7a2:	08 c3       	rjmp	.+1552   	; 0xdb4 <__stack+0x4b5>
     7a4:	42 4f       	sbci	r20, 0xF2	; 242
     7a6:	55 6a       	ori	r21, 0xA5	; 165
     7a8:	19 ee       	ldi	r17, 0xE9	; 233
     7aa:	08 c3       	rjmp	.+1552   	; 0xdbc <__stack+0x4bd>
     7ac:	42 4f       	sbci	r20, 0xF2	; 242
     7ae:	9b d4       	rcall	.+2358   	; 0x10e6 <angleCalculator+0x134>
     7b0:	32 ef       	ldi	r19, 0xF2	; 242
     7b2:	09 bb       	out	0x19, r16	; 25
     7b4:	42 47       	sbci	r20, 0x72	; 114
     7b6:	92 49       	sbci	r25, 0x92	; 146
     7b8:	2d 03       	fmul	r18, r21
     7ba:	f0 0b       	sbc	r31, r16
     7bc:	3d 42       	sbci	r19, 0x2D	; 45
     7be:	87 2a       	or	r8, r23
     7c0:	2d 99       	sbic	0x05, 5	; 5
     7c2:	2d 59       	subi	r18, 0x9D	; 157
     7c4:	00 f1       	brcs	.+64     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7c6:	0b 45       	sbci	r16, 0x5B	; 91
     7c8:	42 57       	subi	r20, 0x72	; 114
     7ca:	d2 9c       	mul	r13, r2
     7cc:	98 34       	cpi	r25, 0x48	; 72
     7ce:	5b 00       	.word	0x005b	; ????
     7d0:	f2 0c       	add	r15, r2
     7d2:	45 42       	sbci	r20, 0x25	; 37
     7d4:	4f 9a       	sbi	0x09, 7	; 9
     7d6:	23 4b       	sbci	r18, 0xB3	; 179
     7d8:	66 4b       	sbci	r22, 0xB6	; 182
     7da:	16 00       	.word	0x0016	; ????
     7dc:	f3 0b       	sbc	r31, r19
     7de:	45 42       	sbci	r20, 0x25	; 37
     7e0:	5f 1d       	adc	r21, r15
     7e2:	59 32       	cpi	r21, 0x29	; 41
     7e4:	5b b2       	in	r5, 0x1b	; 27
     7e6:	00 f4       	brcc	.+0      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7e8:	0c 45       	sbci	r16, 0x5C	; 92
     7ea:	42 57       	subi	r20, 0x72	; 114
     7ec:	96 e4       	ldi	r25, 0x46	; 70
     7ee:	c0 92 d9 92 	sts	0x92D9, r12	; 0x8092d9 <__bss_end+0x8a7d>
     7f2:	05 f5       	brhc	.+64     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     7f4:	0c 45       	sbci	r16, 0x5C	; 92
     7f6:	42 57       	subi	r20, 0x72	; 114
     7f8:	d2 0e       	add	r13, r18
     7fa:	2c 99       	sbic	0x05, 4	; 5
     7fc:	2d 59       	subi	r18, 0x9D	; 157
     7fe:	00 f6       	brcc	.-128    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     800:	0b 3d       	cpi	r16, 0xDB	; 219
     802:	42 4f       	sbci	r20, 0xF2	; 242
     804:	1d 58       	subi	r17, 0x8D	; 141
     806:	32 5b       	subi	r19, 0xB2	; 178
     808:	b2 00       	.word	0x00b2	; ????
     80a:	f7 0a       	sbc	r15, r23
     80c:	2d 46       	sbci	r18, 0x6D	; 109
     80e:	57 0e       	add	r5, r23
     810:	0c 3a       	cpi	r16, 0xAC	; 172
     812:	10 01       	movw	r2, r0
     814:	f8 0b       	sbc	r31, r24
     816:	2d 42       	sbci	r18, 0x2D	; 45
     818:	cf 20       	and	r12, r15
     81a:	2d c9       	rjmp	.-3494   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
     81c:	34 28       	or	r3, r4
     81e:	00 f9       	bld	r16, 0
     820:	0b 45       	sbci	r16, 0x5B	; 91
     822:	42 4f       	sbci	r20, 0xF2	; 242
     824:	9a 03       	fmulsu	r17, r18
     826:	99 93       	st	Y+, r25
     828:	a2 04       	cpc	r10, r2
     82a:	fa 0a       	sbc	r15, r26
     82c:	45 42       	sbci	r20, 0x25	; 37
     82e:	5f 1d       	adc	r21, r15
     830:	c8 9c       	mul	r12, r8
     832:	14 25       	eor	r17, r4
     834:	fb 0b       	sbc	r31, r27
     836:	45 42       	sbci	r20, 0x25	; 37
     838:	57 96       	adiw	r26, 0x17	; 23
     83a:	c4 99       	sbic	0x18, 4	; 24
     83c:	93 a2       	std	Z+35, r9	; 0x23
     83e:	04 fc       	sbrc	r0, 4
     840:	0a 3d       	cpi	r16, 0xDA	; 218
     842:	42 4f       	sbci	r20, 0xF2	; 242
     844:	39 73       	andi	r19, 0x39	; 57
     846:	52 94       	swap	r5
     848:	00 fd       	sbrc	r16, 0
     84a:	0d 4d       	sbci	r16, 0xDD	; 221
     84c:	3a 5f       	subi	r19, 0xFA	; 250
     84e:	29 33       	cpi	r18, 0x39	; 57
     850:	29 4a       	sbci	r18, 0xA9	; 169
     852:	a8 25       	eor	r26, r8
     854:	0b 00       	.word	0x000b	; ????
     856:	fe 0c       	add	r15, r14
     858:	45 3a       	cpi	r20, 0xA5	; 165
     85a:	47 38       	cpi	r20, 0x87	; 135
     85c:	24 99       	sbic	0x04, 4	; 4
     85e:	6d 50       	subi	r22, 0x0D	; 13
     860:	c2 10       	cpse	r12, r2
     862:	ff 0d       	add	r31, r15
     864:	4d 3a       	cpi	r20, 0xAD	; 173
     866:	4f 39       	cpi	r20, 0x9F	; 159
     868:	33 29       	or	r19, r3
     86a:	4a a8       	ldd	r4, Y+50	; 0x32
     86c:	25 0b       	sbc	r18, r21
     86e:	00 00       	nop
     870:	00 00       	nop
     872:	04 ff       	sbrs	r16, 4
     874:	ff 00       	.word	0x00ff	; ????
	...

00000877 <u8g2_font_5x7_tf>:
     877:	bf 00 02 02 03 03 03 04 04 05 07 00 ff 06 ff 06     ................
     887:	00 01 12 02 2f 06 70 20 05 00 bd 01 21 06 b1 b1     ..../.p ....!...
     897:	19 29 22 07 5b b7 49 56 00 23 0a 2d b1 ab 86 aa     .)".[.IV.#.-....
     8a7:	86 aa 00 24 0a 2d b1 5b 35 d8 20 a5 05 25 09 34     ...$.-.[5. ..%.4
     8b7:	b1 c9 20 f6 06 01 26 09 2c b1 8b 29 56 31 05 27     .. ...&.,..)V1.'
     8c7:	05 99 b7 19 28 07 72 b1 53 cd 00 29 08 72 b1 89     ....(.r.S..).r..
     8d7:	a9 52 00 2a 07 6b b1 49 d5 6a 2b 0a 2d b1 cd 28     .R.*.k.I.j+.-..(
     8e7:	0e 99 51 04 2c 07 5b af 53 25 00 2d 06 0c b5 19     ..Q.,.[.S%.-....
     8f7:	01 2e 06 52 b1 19 01 2f 07 24 b3 07 b1 0d 30 08     ...R.../.$....0.
     907:	73 b1 ab 5c 15 00 31 07 73 b1 4b b2 35 32 0a 34     s..\..1.s.K.52.4
     917:	b1 53 31 83 58 8e 00 33 0b 34 b1 19 19 24 8d 64     .S1.X..3.4...$.d
     927:	52 00 34 0a 34 b1 8d aa 1a 31 83 04 35 0a 34 b1     R.4.4....1..5.4.
     937:	19 1a 6c 24 93 02 36 0a 34 b1 53 19 ac 28 93 02     ..l$..6.4.S..(..
     947:	37 0b 34 b1 19 19 c4 0c 62 06 11 38 0a 34 b1 53     7.4.....b..8.4.S
     957:	31 a9 28 93 02 39 0a 34 b1 53 51 a6 0d 92 02 3a     1.(..9.4.SQ....:
     967:	07 6a b1 19 71 04 3b 08 33 af b3 91 2a 01 3c 08     .j..q.;.3...*.<.
     977:	6b b1 4d 35 c8 20 3d 08 1c b3 19 19 8d 00 3e 09     k.M5. =.......>.
     987:	6b b1 c9 20 83 54 02 3f 09 73 b1 6b a6 0c 13 00     k.. .T.?.s.k....
     997:	40 09 34 b1 53 51 dd 48 01 41 09 34 b1 53 51 8e     @.4.SQ.H.A.4.SQ.
     9a7:	29 03 42 0a 34 b1 59 71 a4 28 47 02 43 0b 34 b1     ).B.4.Yq.(G.C.4.
     9b7:	53 51 83 0c 62 52 00 44 09 34 b1 59 d1 39 12 00     SQ..bR.D.4.Y.9..
     9c7:	45 0b 34 b1 19 1a ac 0c 32 18 01 46 0b 34 b1 19     E.4.....2..F.4..
     9d7:	1a ac 0c 32 c8 00 47 0a 34 b1 53 51 83 34 d3 00     ...2..G.4.SQ.4..
     9e7:	48 08 34 b1 89 72 4c 33 49 07 73 b1 59 b1 35 4a     H.4..rL3I.s.Y.5J
     9f7:	0b 34 b1 07 19 64 90 81 4c 0a 4b 0a 34 b1 89 2a     .4...d..L.K.4..*
     a07:	49 99 ca 00 4c 0c 34 b1 c9 20 83 0c 32 c8 60 04     I...L.4.. ..2.`.
     a17:	4d 09 34 b1 89 e3 88 66 00 4e 08 34 b1 89 6b a9     M.4....f.N.4..k.
     a27:	33 4f 09 34 b1 53 d1 99 14 00 50 0a 34 b1 59 51     3O.4.S....P.4.YQ
     a37:	8e 94 41 06 51 0a 3c af 53 d1 5c 49 a3 00 52 09     ..A.Q.<.S.\I..R.
     a47:	34 b1 59 51 8e d4 0c 53 0a 34 b1 53 31 65 54 26     4.YQ...S.4.S1eT&
     a57:	05 54 07 73 b1 59 b1 0b 55 08 34 b1 89 9e 49 01     .T.s.Y..U.4...I.
     a67:	56 09 34 b1 89 ce 24 15 00 57 09 34 b1 89 e6 38     V.4...$..W.4...8
     a77:	62 00 58 0a 34 b1 89 32 49 15 65 00 59 08 73 b1     b.X.4..2I.e.Y.s.
     a87:	49 56 59 01 5a 0a 34 b1 19 19 c4 36 18 01 5b 07     IVY.Z.4....6..[.
     a97:	73 b1 19 b1 39 5c 09 24 b3 c9 28 a3 8c 02 5d 07     s...9\.$..(...].
     aa7:	73 b1 99 cd 11 5e 05 53 b9 6b 5f 06 0c b1 19 01     s....^.S.k_.....
     ab7:	60 06 52 b9 89 01 61 08 24 b1 1b 51 a9 02 62 0b     `.R...a.$..Q..b.
     ac7:	34 b1 c9 20 83 15 e5 48 00 63 07 23 b1 9b 19 08     4.. ...H.c.#....
     ad7:	64 0a 34 b1 07 19 a4 11 65 1a 65 09 24 b1 53 69     d.4.....e.e.$.Si
     ae7:	64 a0 00 66 09 34 b1 ad ca 99 41 04 67 09 2c af     d..f.4....A.g.,.
     af7:	1b 31 a9 8c 06 68 0a 34 b1 c9 20 83 15 cd 00 69     .1...h.4.. ....i
     b07:	08 73 b1 cb 48 56 03 6a 09 7b af cd b0 54 15 00     .s..HV.j.{...T..
     b17:	6b 0b 34 b1 c9 20 83 94 64 2a 03 6c 07 73 b1 91     k.4.. ..d*.l.s..
     b27:	5d 03 6d 08 24 b1 49 69 48 19 6e 07 24 b1 59 d1     ].m.$.IiH.n.$.Y.
     b37:	0c 6f 08 24 b1 53 51 26 05 70 09 2c af 59 51 8e     .o.$.SQ&.p.,.YQ.
     b47:	94 01 71 09 2c af 1b 51 a6 0d 02 72 08 24 b1 59     ..q.,..Q...r.$.Y
     b57:	51 83 0c 73 08 24 b1 1b 1a 0d 05 74 0a 34 b1 cb     Q..s.$.....t.4..
     b67:	20 ce 0c 32 12 75 07 24 b1 89 66 1a 76 07 63 b1      ..2.u.$..f.v.c.
     b77:	49 56 05 77 07 24 b1 89 72 1c 78 08 24 b1 89 49     IV.w.$..r.x.$..I
     b87:	aa 18 79 09 2c af 89 32 95 25 00 7a 08 24 b1 19     ..y.,..2.%.z.$..
     b97:	b1 1c 01 7b 08 73 b1 4d 49 d6 20 7c 05 b1 b1 39     ...{.s.MI. |...9
     ba7:	7d 0a 73 b1 c9 20 aa 98 22 00 7e 07 14 b9 4b 2a     }.s.. ..".~...K*
     bb7:	01 a0 05 00 bd 01 a1 06 b1 b1 49 23 a2 09 34 af     ..........I#..4.
     bc7:	8d 23 35 67 02 a3 08 2c b1 55 71 56 02 a4 0b 2d     .#5g...,.UqV...-
     bd7:	b1 c9 20 cd 14 57 06 01 a5 09 73 b1 49 aa 5a 31     .. ..W....s.I.Z1
     be7:	01 a6 06 a9 b1 51 02 a7 08 7b af 9b aa 92 0b a8     .....Q...{......
     bf7:	06 4b bb 49 01 a9 0d 3d af 5b 19 a8 34 55 d2 20     .K.I...=.[..4U. 
     c07:	2d 00 aa 06 1b b7 5b 49 ab 07 1d b3 8b b2 01 ac     -.....[I........
     c17:	07 14 b3 19 19 04 ad 05 4b b5 19 ae 0c 3d af 5b     ........K....=.[
     c27:	19 8c 34 a7 06 69 01 af 06 0c bb 19 01 b0 06 5b     ..4..i.........[
     c37:	b7 eb 02 b1 0b 35 b1 cd 28 0e 99 51 1c 02 b2 06     .....5..(..Q....
     c47:	62 b5 51 06 b3 06 62 b5 19 69 b4 06 52 b9 53 00     b.Q...b..i..R.S.
     c57:	b5 08 2c af 89 e6 48 19 b6 08 34 b1 1b 6a f5 03     ..,...H...4..j..
     c67:	b7 06 52 b5 19 01 b8 06 52 af 53 00 b9 07 63 b5     ..R.....R.S...c.
     c77:	4b 32 0d ba 06 1b b7 eb 02 bb 08 1d b3 89 a5 4c     K2.............L
     c87:	00 bc 0c 3c af c9 20 83 0c 62 54 1b 04 bd 0d 3c     ...<.. ..bT....<
     c97:	af c9 20 83 0c 92 06 31 03 01 be 0b 3c af 91 1a     .. ....1....<...
     ca7:	44 15 d5 06 01 bf 09 73 b1 cb 30 c5 54 01 c0 09     D......s..0.T...
     cb7:	34 b1 53 51 8e 29 03 c1 09 34 b1 53 51 8e 29 03     4.SQ.)...4.SQ.).
     cc7:	c2 09 34 b1 53 51 8e 29 03 c3 09 34 b1 53 51 8e     ..4.SQ.)...4.SQ.
     cd7:	29 03 c4 0a 34 b1 89 49 c5 31 65 00 c5 09 34 b1     )...4..I.1e...4.
     ce7:	93 2a 8e 29 03 c6 09 34 b1 1b a9 1a aa 25 c7 0b     .*.)...4.....%..
     cf7:	3c af 53 51 83 0c 62 92 11 c8 0b 34 b1 19 1a ac     <.SQ..b....4....
     d07:	0c 32 18 01 c9 0b 34 b1 19 1a ac 0c 32 18 01 ca     .2....4.....2...
     d17:	0b 34 b1 19 1a ac 0c 32 18 01 cb 0b 34 b1 19 1a     .4.....2....4...
     d27:	ac 0c 32 18 01 cc 07 73 b1 59 b1 35 cd 07 73 b1     ..2....s.Y.5..s.
     d37:	59 b1 35 ce 07 73 b1 59 b1 35 cf 07 73 b1 59 b1     Y.5..s.Y.5..s.Y.
     d47:	35 d0 09 34 b1 99 69 75 8d 04 d1 08 34 b1 49 73     5..4..iu....4.Is
     d57:	a9 33 d2 09 34 b1 53 d1 99 14 00 d3 09 34 b1 53     .3..4.S......4.S
     d67:	d1 99 14 00 d4 09 34 b1 53 d1 99 14 00 d5 09 34     ......4.S......4
     d77:	b1 53 d1 99 14 00 d6 0a 34 b1 89 49 45 33 29 00     .S......4..IE3).
     d87:	d7 08 24 b1 89 49 aa 18 d8 09 34 b1 1b e9 48 47     ..$..I....4...HG
     d97:	02 d9 08 34 b1 89 9e 49 01 da 08 34 b1 89 9e 49     ...4...I...4...I
     da7:	01 db 08 34 b1 89 9e 49 01 dc 0a 34 b1 89 19 45     ...4...I...4...E
     db7:	33 29 00 dd 08 73 b1 49 56 59 01 de 0b 34 b1 c9     3)...s.IVY...4..
     dc7:	60 c5 91 32 c8 00 df 09 34 b1 53 51 95 56 02 e0     `..2....4.SQ.V..
     dd7:	0a 34 b1 cb 28 8e a8 54 01 e1 09 34 b1 ad c1 88     .4..(..T...4....
     de7:	4a 15 e2 09 34 b1 ad d2 88 4a 15 e3 0a 34 b1 4b     J...4....J...4.K
     df7:	2a 8e a8 54 01 e4 09 34 b1 ab e1 88 4a 15 e5 09     *..T...4....J...
     e07:	34 b1 93 72 44 a5 0a e6 08 24 b1 1b 69 c5 01 e7     4..rD....$..i...
     e17:	08 6b af 9b 19 a8 04 e8 0b 34 b1 cb 28 aa 34 32     .k.......4..(.42
     e27:	50 00 e9 0a 34 b1 ad 81 4a 23 03 05 ea 0b 34 b1     P...4...J#....4.
     e37:	8b 29 aa 34 32 50 00 eb 0b 34 b1 49 99 50 69 64     .).42P...4.I.Pid
     e47:	a0 00 ec 08 73 b1 c9 20 c9 6a ed 07 73 b1 2b 65     ....s.. .j..s.+e
     e57:	35 ee 07 73 b1 ab 66 35 ef 08 73 b1 49 19 c8 6a     5..s..f5..s.I..j
     e67:	f0 0a 34 b1 cb c8 8a 32 29 00 f1 09 34 b1 4b 2a     ..4....2)...4.K*
     e77:	ad 68 06 f2 0a 34 b1 cb 28 aa 28 93 02 f3 0a 34     .h...4..(.(....4
     e87:	b1 ad 81 8a 32 29 00 f4 0a 34 b1 d3 84 8a 32 29     ....2)...4....2)
     e97:	00 f5 0a 34 b1 4b 2a aa 28 93 02 f6 0a 34 b1 ab     ...4.K*.(....4..
     ea7:	a1 8a 32 29 00 f7 09 2c b1 d3 70 64 a8 00 f8 09     ..2)...,..pd....
     eb7:	24 b1 1b 69 a4 91 00 f9 09 34 b1 cb a8 34 d3 00     $..i.....4...4..
     ec7:	fa 07 34 b1 6d 9a 69 fb 08 34 b1 d3 30 9a 69 fc     ..4.m.i..4..0.i.
     ed7:	09 34 b1 ab 51 34 d3 00 fd 09 3c af 6d ca 54 96     .4..Q4....<.m.T.
     ee7:	00 fe 0a 34 af c9 60 45 39 52 06 ff 0a 3c af ab     ...4..`E9R...<..
     ef7:	51 94 a9 2c 01 00 00 00 04 ff ff 00 00              Q..,.........

00000f04 <__ctors_end>:
     f04:	11 24       	eor	r1, r1
     f06:	1f be       	out	0x3f, r1	; 63
     f08:	cf ef       	ldi	r28, 0xFF	; 255
     f0a:	d8 e0       	ldi	r29, 0x08	; 8
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	cd bf       	out	0x3d, r28	; 61

00000f10 <__do_copy_data>:
     f10:	13 e0       	ldi	r17, 0x03	; 3
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b1 e0       	ldi	r27, 0x01	; 1
     f16:	e2 e7       	ldi	r30, 0x72	; 114
     f18:	fb e4       	ldi	r31, 0x4B	; 75
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <__do_copy_data+0x10>
     f1c:	05 90       	lpm	r0, Z+
     f1e:	0d 92       	st	X+, r0
     f20:	ae 35       	cpi	r26, 0x5E	; 94
     f22:	b1 07       	cpc	r27, r17
     f24:	d9 f7       	brne	.-10     	; 0xf1c <__do_copy_data+0xc>

00000f26 <__do_clear_bss>:
     f26:	28 e0       	ldi	r18, 0x08	; 8
     f28:	ae e5       	ldi	r26, 0x5E	; 94
     f2a:	b3 e0       	ldi	r27, 0x03	; 3
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <.do_clear_bss_start>

00000f2e <.do_clear_bss_loop>:
     f2e:	1d 92       	st	X+, r1

00000f30 <.do_clear_bss_start>:
     f30:	ac 35       	cpi	r26, 0x5C	; 92
     f32:	b2 07       	cpc	r27, r18
     f34:	e1 f7       	brne	.-8      	; 0xf2e <.do_clear_bss_loop>
     f36:	0e 94 ac 0a 	call	0x1558	; 0x1558 <main>
     f3a:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <_exit>

00000f3e <__bad_interrupt>:
     f3e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f42 <initDistanceSensor>:
int *pDistance;
int *pAngle_tmp;

void initDistanceSensor(int *pDist, int *pAngle){
	//initialize ultrasonic sensor
	pDistance = pDist;
     f42:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <pDistance+0x1>
     f46:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <pDistance>
	pAngle_tmp = pAngle;
     f4a:	70 93 99 07 	sts	0x0799, r23	; 0x800799 <pAngle_tmp+0x1>
     f4e:	60 93 98 07 	sts	0x0798, r22	; 0x800798 <pAngle_tmp>
	//setup the DDR register and the pin change mask
	
	DDRB |= (1<<TRIGG0);
     f52:	22 9a       	sbi	0x04, 2	; 4
	DDRB &= ~(1<<ECHO0);
     f54:	23 98       	cbi	0x04, 3	; 4
	DDRB |= (1<<TRIGG1);
     f56:	24 9a       	sbi	0x04, 4	; 4
	DDRB &= ~(1<<ECHO1);
     f58:	25 98       	cbi	0x04, 5	; 4

	PCMSK0 |= (1<<ECHO0) | (1<<ECHO1);;
     f5a:	eb e6       	ldi	r30, 0x6B	; 107
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 62       	ori	r24, 0x28	; 40
     f62:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE0);
     f64:	e8 e6       	ldi	r30, 0x68	; 104
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24

	//Timer
	TCCR1B |= (1<<CS11)|(1<<CS10);//counter 1 in register TCNT1  - 4 uS/c clk/64 prescaler
     f6e:	e1 e8       	ldi	r30, 0x81	; 129
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	83 60       	ori	r24, 0x03	; 3
     f76:	80 83       	st	Z, r24
     f78:	08 95       	ret

00000f7a <sendTriggPulse>:
}

void sendTriggPulse(int device){
	TCNT1 = 0;
     f7a:	e4 e8       	ldi	r30, 0x84	; 132
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	11 82       	std	Z+1, r1	; 0x01
     f80:	10 82       	st	Z, r1
	int pulseStartTimeC = TCNT1;
     f82:	20 81       	ld	r18, Z
     f84:	31 81       	ldd	r19, Z+1	; 0x01
	PORTB |= (1<<device);
     f86:	95 b1       	in	r25, 0x05	; 5
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <sendTriggPulse+0x18>
     f8e:	44 0f       	add	r20, r20
     f90:	55 1f       	adc	r21, r21
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <sendTriggPulse+0x14>
     f96:	94 2b       	or	r25, r20
     f98:	95 b9       	out	0x05, r25	; 5
	
	while (TCNT1 < pulseStartTimeC + triggPulsLengthC);//wait the right amount of time
     f9a:	2e 5f       	subi	r18, 0xFE	; 254
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	82 17       	cp	r24, r18
     fa4:	93 07       	cpc	r25, r19
     fa6:	d8 f3       	brcs	.-10     	; 0xf9e <sendTriggPulse+0x24>
	
	PORTB &= ~(1<<device);
     fa8:	85 b1       	in	r24, 0x05	; 5
     faa:	40 95       	com	r20
     fac:	48 23       	and	r20, r24
     fae:	45 b9       	out	0x05, r20	; 5
     fb0:	08 95       	ret

00000fb2 <angleCalculator>:
}

void angleCalculator(void){
     fb2:	8f 92       	push	r8
     fb4:	9f 92       	push	r9
     fb6:	af 92       	push	r10
     fb8:	bf 92       	push	r11
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
	if (echoDistance[0] <= 20 && echoDistance[1] >= echoDistance[0])
     fc6:	c0 90 a6 07 	lds	r12, 0x07A6	; 0x8007a6 <echoDistance>
     fca:	d0 90 a7 07 	lds	r13, 0x07A7	; 0x8007a7 <echoDistance+0x1>
     fce:	e0 90 a8 07 	lds	r14, 0x07A8	; 0x8007a8 <echoDistance+0x2>
     fd2:	f0 90 a9 07 	lds	r15, 0x07A9	; 0x8007a9 <echoDistance+0x3>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 ea       	ldi	r20, 0xA0	; 160
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	0e 94 32 23 	call	0x4664	; 0x4664 <__cmpsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	0c f4       	brge	.+2      	; 0xfec <angleCalculator+0x3a>
     fea:	4b c0       	rjmp	.+150    	; 0x1082 <angleCalculator+0xd0>
     fec:	80 90 aa 07 	lds	r8, 0x07AA	; 0x8007aa <echoDistance+0x4>
     ff0:	90 90 ab 07 	lds	r9, 0x07AB	; 0x8007ab <echoDistance+0x5>
     ff4:	a0 90 ac 07 	lds	r10, 0x07AC	; 0x8007ac <echoDistance+0x6>
     ff8:	b0 90 ad 07 	lds	r11, 0x07AD	; 0x8007ad <echoDistance+0x7>
     ffc:	a5 01       	movw	r20, r10
     ffe:	94 01       	movw	r18, r8
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	0e 94 32 23 	call	0x4664	; 0x4664 <__cmpsf2>
    1008:	18 16       	cp	r1, r24
    100a:	dc f1       	brlt	.+118    	; 0x1082 <angleCalculator+0xd0>
	{

		length = (echoDistance[1] - echoDistance[0]);
    100c:	a7 01       	movw	r20, r14
    100e:	96 01       	movw	r18, r12
    1010:	c5 01       	movw	r24, r10
    1012:	b4 01       	movw	r22, r8
    1014:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    1018:	60 93 9a 07 	sts	0x079A, r22	; 0x80079a <length>
    101c:	70 93 9b 07 	sts	0x079B, r23	; 0x80079b <length+0x1>
    1020:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <length+0x2>
    1024:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <length+0x3>
		differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
    1028:	23 e3       	ldi	r18, 0x33	; 51
    102a:	33 e3       	ldi	r19, 0x33	; 51
    102c:	43 ed       	ldi	r20, 0xD3	; 211
    102e:	50 e4       	ldi	r21, 0x40	; 64
    1030:	0e 94 37 23 	call	0x466e	; 0x466e <__divsf3>
    1034:	60 93 a2 07 	sts	0x07A2, r22	; 0x8007a2 <differenceLength>
    1038:	70 93 a3 07 	sts	0x07A3, r23	; 0x8007a3 <differenceLength+0x1>
    103c:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <differenceLength+0x2>
    1040:	90 93 a5 07 	sts	0x07A5, r25	; 0x8007a5 <differenceLength+0x3>
		angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
    1044:	0e 94 03 23 	call	0x4606	; 0x4606 <atan>
    1048:	60 93 9e 07 	sts	0x079E, r22	; 0x80079e <angleradian>
    104c:	70 93 9f 07 	sts	0x079F, r23	; 0x80079f <angleradian+0x1>
    1050:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <angleradian+0x2>
    1054:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <angleradian+0x3>
		angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	44 e3       	ldi	r20, 0x34	; 52
    105e:	53 e4       	ldi	r21, 0x43	; 67
    1060:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1064:	23 ec       	ldi	r18, 0xC3	; 195
    1066:	35 ef       	ldi	r19, 0xF5	; 245
    1068:	48 e4       	ldi	r20, 0x48	; 72
    106a:	50 e4       	ldi	r21, 0x40	; 64
    106c:	0e 94 37 23 	call	0x466e	; 0x466e <__divsf3>
    1070:	60 93 94 07 	sts	0x0794, r22	; 0x800794 <angledegree>
    1074:	70 93 95 07 	sts	0x0795, r23	; 0x800795 <angledegree+0x1>
    1078:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <angledegree+0x2>
    107c:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <angledegree+0x3>
    1080:	55 c0       	rjmp	.+170    	; 0x112c <angleCalculator+0x17a>
	}
	else if (echoDistance[1] <= 20 && echoDistance[0] >= echoDistance[1])
    1082:	80 90 aa 07 	lds	r8, 0x07AA	; 0x8007aa <echoDistance+0x4>
    1086:	90 90 ab 07 	lds	r9, 0x07AB	; 0x8007ab <echoDistance+0x5>
    108a:	a0 90 ac 07 	lds	r10, 0x07AC	; 0x8007ac <echoDistance+0x6>
    108e:	b0 90 ad 07 	lds	r11, 0x07AD	; 0x8007ad <echoDistance+0x7>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 ea       	ldi	r20, 0xA0	; 160
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	c5 01       	movw	r24, r10
    109c:	b4 01       	movw	r22, r8
    109e:	0e 94 32 23 	call	0x4664	; 0x4664 <__cmpsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	0c f4       	brge	.+2      	; 0x10a8 <angleCalculator+0xf6>
    10a6:	42 c0       	rjmp	.+132    	; 0x112c <angleCalculator+0x17a>
    10a8:	a5 01       	movw	r20, r10
    10aa:	94 01       	movw	r18, r8
    10ac:	c7 01       	movw	r24, r14
    10ae:	b6 01       	movw	r22, r12
    10b0:	0e 94 b8 24 	call	0x4970	; 0x4970 <__gesf2>
    10b4:	88 23       	and	r24, r24
    10b6:	d4 f1       	brlt	.+116    	; 0x112c <angleCalculator+0x17a>
	{

		length = (echoDistance[0] - echoDistance[1]);
    10b8:	a5 01       	movw	r20, r10
    10ba:	94 01       	movw	r18, r8
    10bc:	c7 01       	movw	r24, r14
    10be:	b6 01       	movw	r22, r12
    10c0:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    10c4:	60 93 9a 07 	sts	0x079A, r22	; 0x80079a <length>
    10c8:	70 93 9b 07 	sts	0x079B, r23	; 0x80079b <length+0x1>
    10cc:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <length+0x2>
    10d0:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <length+0x3>
		differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
    10d4:	23 e3       	ldi	r18, 0x33	; 51
    10d6:	33 e3       	ldi	r19, 0x33	; 51
    10d8:	43 ed       	ldi	r20, 0xD3	; 211
    10da:	50 e4       	ldi	r21, 0x40	; 64
    10dc:	0e 94 37 23 	call	0x466e	; 0x466e <__divsf3>
    10e0:	60 93 a2 07 	sts	0x07A2, r22	; 0x8007a2 <differenceLength>
    10e4:	70 93 a3 07 	sts	0x07A3, r23	; 0x8007a3 <differenceLength+0x1>
    10e8:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <differenceLength+0x2>
    10ec:	90 93 a5 07 	sts	0x07A5, r25	; 0x8007a5 <differenceLength+0x3>
		angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
    10f0:	0e 94 03 23 	call	0x4606	; 0x4606 <atan>
    10f4:	60 93 9e 07 	sts	0x079E, r22	; 0x80079e <angleradian>
    10f8:	70 93 9f 07 	sts	0x079F, r23	; 0x80079f <angleradian+0x1>
    10fc:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <angleradian+0x2>
    1100:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <angleradian+0x3>
		angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	44 e3       	ldi	r20, 0x34	; 52
    110a:	53 e4       	ldi	r21, 0x43	; 67
    110c:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1110:	23 ec       	ldi	r18, 0xC3	; 195
    1112:	35 ef       	ldi	r19, 0xF5	; 245
    1114:	48 e4       	ldi	r20, 0x48	; 72
    1116:	50 e4       	ldi	r21, 0x40	; 64
    1118:	0e 94 37 23 	call	0x466e	; 0x466e <__divsf3>
    111c:	60 93 94 07 	sts	0x0794, r22	; 0x800794 <angledegree>
    1120:	70 93 95 07 	sts	0x0795, r23	; 0x800795 <angledegree+0x1>
    1124:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <angledegree+0x2>
    1128:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <angledegree+0x3>
	}
	else{

	}
	*pAngle_tmp = (int) angledegree;
    112c:	c0 91 98 07 	lds	r28, 0x0798	; 0x800798 <pAngle_tmp>
    1130:	d0 91 99 07 	lds	r29, 0x0799	; 0x800799 <pAngle_tmp+0x1>
    1134:	60 91 94 07 	lds	r22, 0x0794	; 0x800794 <angledegree>
    1138:	70 91 95 07 	lds	r23, 0x0795	; 0x800795 <angledegree+0x1>
    113c:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <angledegree+0x2>
    1140:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <angledegree+0x3>
    1144:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    1148:	79 83       	std	Y+1, r23	; 0x01
    114a:	68 83       	st	Y, r22
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	08 95       	ret

00001162 <__vector_3>:


ISR(PCINT0_vect){//PD
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
	static int runcount2 = 0;
	static int runcount1 = 0;
	//check which device it is and keep that device for the falling edge
	static int prevDevice;
	static int device;
	device = PINB;
    118c:	83 b1       	in	r24, 0x03	; 3
	device &= ~(1<<PORTB7);
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <device.1739+0x1>
    1196:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <device.1739>
	
	if (device == 0)
    119a:	89 2b       	or	r24, r25
    119c:	41 f4       	brne	.+16     	; 0x11ae <__vector_3+0x4c>
	{
		device = prevDevice;//save the current device
    119e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <prevDevice.1738>
    11a2:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <prevDevice.1738+0x1>
    11a6:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <device.1739+0x1>
    11aa:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <device.1739>
	}
	
	switch(device){
    11ae:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <device.1739>
    11b2:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <device.1739+0x1>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <__vector_3+0x5c>
    11bc:	73 c0       	rjmp	.+230    	; 0x12a4 <__vector_3+0x142>
    11be:	1c f4       	brge	.+6      	; 0x11c6 <__vector_3+0x64>
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	49 f0       	breq	.+18     	; 0x11d6 <__vector_3+0x74>
    11c4:	d7 c0       	rjmp	.+430    	; 0x1374 <__vector_3+0x212>
    11c6:	88 30       	cpi	r24, 0x08	; 8
    11c8:	91 05       	cpc	r25, r1
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <__vector_3+0x74>
    11cc:	80 32       	cpi	r24, 0x20	; 32
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__vector_3+0x72>
    11d2:	68 c0       	rjmp	.+208    	; 0x12a4 <__vector_3+0x142>
    11d4:	cf c0       	rjmp	.+414    	; 0x1374 <__vector_3+0x212>
		case (1<<ECHO0):
		case 0:
		//if device is device 0 or if the pin ECHO0 gave a high
		if (runcount2 == 0)
    11d6:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <runcount2.1736>
    11da:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <runcount2.1736+0x1>
    11de:	23 2b       	or	r18, r19
    11e0:	c1 f4       	brne	.+48     	; 0x1212 <__vector_3+0xb0>
		{
			prevDevice = 0;
    11e2:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <prevDevice.1738+0x1>
    11e6:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <prevDevice.1738>
			TCNT1 = 0;
    11ea:	e4 e8       	ldi	r30, 0x84	; 132
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	11 82       	std	Z+1, r1	; 0x01
    11f0:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <risingEdgeTimeC+0x1>
    11fa:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <risingEdgeTimeC>
			
			runcount2++;
    11fe:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <runcount2.1736>
    1202:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <runcount2.1736+0x1>
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <runcount2.1736+0x1>
    120c:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <runcount2.1736>
    1210:	b1 c0       	rjmp	.+354    	; 0x1374 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -1;
    1212:	2f ef       	ldi	r18, 0xFF	; 255
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	30 93 63 03 	sts	0x0363, r19	; 0x800363 <prevDevice.1738+0x1>
    121a:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    121e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1222:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1226:	70 93 6d 03 	sts	0x036D, r23	; 0x80036d <fallingEdgeTimeC+0x1>
    122a:	60 93 6c 03 	sts	0x036C, r22	; 0x80036c <fallingEdgeTimeC>
			
			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    122e:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <risingEdgeTimeC>
    1232:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <risingEdgeTimeC+0x1>
    1236:	62 1b       	sub	r22, r18
    1238:	73 0b       	sbc	r23, r19
    123a:	8b 01       	movw	r16, r22
    123c:	07 2e       	mov	r0, r23
    123e:	00 0c       	add	r0, r0
    1240:	22 0b       	sbc	r18, r18
    1242:	33 0b       	sbc	r19, r19
    1244:	00 93 68 03 	sts	0x0368, r16	; 0x800368 <echoHighLevelTimeC>
    1248:	10 93 69 03 	sts	0x0369, r17	; 0x800369 <echoHighLevelTimeC+0x1>
    124c:	20 93 6a 03 	sts	0x036A, r18	; 0x80036a <echoHighLevelTimeC+0x2>
    1250:	30 93 6b 03 	sts	0x036B, r19	; 0x80036b <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <echoHighLevelTimeuS+0x1>
    1260:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal0;// in cm
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	ec 01       	movw	r28, r24
    126e:	ca 55       	subi	r28, 0x5A	; 90
    1270:	d8 4f       	sbci	r29, 0xF8	; 248
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 df 23 	call	0x47be	; 0x47be <__floatunsisf>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	48 e6       	ldi	r20, 0x68	; 104
    1280:	52 e4       	ldi	r21, 0x42	; 66
    1282:	0e 94 37 23 	call	0x466e	; 0x466e <__divsf3>
    1286:	26 e6       	ldi	r18, 0x66	; 102
    1288:	36 e6       	ldi	r19, 0x66	; 102
    128a:	46 ee       	ldi	r20, 0xE6	; 230
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1292:	68 83       	st	Y, r22
    1294:	79 83       	std	Y+1, r23	; 0x01
    1296:	8a 83       	std	Y+2, r24	; 0x02
    1298:	9b 83       	std	Y+3, r25	; 0x03
			
			runcount2 = 0;
    129a:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <runcount2.1736+0x1>
    129e:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <runcount2.1736>
    12a2:	68 c0       	rjmp	.+208    	; 0x1374 <__vector_3+0x212>
		break;
		
		//use for multiple sound sensors
		case (1 << ECHO1):
		case 1:
		if (runcount1 == 0)
    12a4:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__data_end>
    12a8:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__data_end+0x1>
    12ac:	23 2b       	or	r18, r19
    12ae:	d1 f4       	brne	.+52     	; 0x12e4 <__vector_3+0x182>
		{
			prevDevice = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <prevDevice.1738+0x1>
    12b8:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <prevDevice.1738>
			TCNT1 = 0;
    12bc:	e4 e8       	ldi	r30, 0x84	; 132
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	11 82       	std	Z+1, r1	; 0x01
    12c2:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <risingEdgeTimeC+0x1>
    12cc:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <risingEdgeTimeC>

			runcount1++;
    12d0:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <__data_end>
    12d4:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <__data_end+0x1>
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <__data_end+0x1>
    12de:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <__data_end>
    12e2:	48 c0       	rjmp	.+144    	; 0x1374 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -2;
    12e4:	2e ef       	ldi	r18, 0xFE	; 254
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	30 93 63 03 	sts	0x0363, r19	; 0x800363 <prevDevice.1738+0x1>
    12ec:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    12f0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12f4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12f8:	70 93 6d 03 	sts	0x036D, r23	; 0x80036d <fallingEdgeTimeC+0x1>
    12fc:	60 93 6c 03 	sts	0x036C, r22	; 0x80036c <fallingEdgeTimeC>

			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    1300:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <risingEdgeTimeC>
    1304:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <risingEdgeTimeC+0x1>
    1308:	62 1b       	sub	r22, r18
    130a:	73 0b       	sbc	r23, r19
    130c:	8b 01       	movw	r16, r22
    130e:	07 2e       	mov	r0, r23
    1310:	00 0c       	add	r0, r0
    1312:	22 0b       	sbc	r18, r18
    1314:	33 0b       	sbc	r19, r19
    1316:	00 93 68 03 	sts	0x0368, r16	; 0x800368 <echoHighLevelTimeC>
    131a:	10 93 69 03 	sts	0x0369, r17	; 0x800369 <echoHighLevelTimeC+0x1>
    131e:	20 93 6a 03 	sts	0x036A, r18	; 0x80036a <echoHighLevelTimeC+0x2>
    1322:	30 93 6b 03 	sts	0x036B, r19	; 0x80036b <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <echoHighLevelTimeuS+0x1>
    1332:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal1;// in cm
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	ec 01       	movw	r28, r24
    1340:	ca 55       	subi	r28, 0x5A	; 90
    1342:	d8 4f       	sbci	r29, 0xF8	; 248
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 df 23 	call	0x47be	; 0x47be <__floatunsisf>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	48 e6       	ldi	r20, 0x68	; 104
    1352:	52 e4       	ldi	r21, 0x42	; 66
    1354:	0e 94 37 23 	call	0x466e	; 0x466e <__divsf3>
    1358:	26 e6       	ldi	r18, 0x66	; 102
    135a:	36 e6       	ldi	r19, 0x66	; 102
    135c:	46 ee       	ldi	r20, 0xE6	; 230
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1364:	68 83       	st	Y, r22
    1366:	79 83       	std	Y+1, r23	; 0x01
    1368:	8a 83       	std	Y+2, r24	; 0x02
    136a:	9b 83       	std	Y+3, r25	; 0x03

			runcount1 = 0;
    136c:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <__data_end+0x1>
    1370:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <__data_end>
		}
		break;
	}
	*pDistance = (int) echoDistance[0];
    1374:	c0 91 92 07 	lds	r28, 0x0792	; 0x800792 <pDistance>
    1378:	d0 91 93 07 	lds	r29, 0x0793	; 0x800793 <pDistance+0x1>
    137c:	06 ea       	ldi	r16, 0xA6	; 166
    137e:	17 e0       	ldi	r17, 0x07	; 7
    1380:	f8 01       	movw	r30, r16
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    138e:	79 83       	std	Y+1, r23	; 0x01
    1390:	68 83       	st	Y, r22
	*pDistance += (int) echoDistance[1];
    1392:	c0 91 92 07 	lds	r28, 0x0792	; 0x800792 <pDistance>
    1396:	d0 91 93 07 	lds	r29, 0x0793	; 0x800793 <pDistance+0x1>
    139a:	f8 01       	movw	r30, r16
    139c:	64 81       	ldd	r22, Z+4	; 0x04
    139e:	75 81       	ldd	r23, Z+5	; 0x05
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	97 81       	ldd	r25, Z+7	; 0x07
    13a4:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    13a8:	28 81       	ld	r18, Y
    13aa:	39 81       	ldd	r19, Y+1	; 0x01
    13ac:	62 0f       	add	r22, r18
    13ae:	73 1f       	adc	r23, r19
    13b0:	79 83       	std	Y+1, r23	; 0x01
    13b2:	68 83       	st	Y, r22
	*pDistance /= 2;
    13b4:	e0 91 92 07 	lds	r30, 0x0792	; 0x800792 <pDistance>
    13b8:	f0 91 93 07 	lds	r31, 0x0793	; 0x800793 <pDistance+0x1>
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	99 23       	and	r25, r25
    13c2:	0c f4       	brge	.+2      	; 0x13c6 <__vector_3+0x264>
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	95 95       	asr	r25
    13c8:	87 95       	ror	r24
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
}
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_5>:
#include "avr/io.h"
#include "screencontroller.h"
#include "USART_RS232_H_file.h"

ISR(PCINT2_vect)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	2a 97       	sbiw	r28, 0x0a	; 10
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	cd bf       	out	0x3d, r28	; 61
	if( !(PIND & (1<<PCINT16) )){
    1428:	48 99       	sbic	0x09, 0	; 9
    142a:	09 c0       	rjmp	.+18     	; 0x143e <__vector_5+0x46>
	char receivedStr[BL_BUFFERSIZE];
	USART_ReceiveString(receivedStr);
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	0e 94 be 21 	call	0x437c	; 0x437c <USART_ReceiveString>
	USART_BluetoothChanger(receivedStr);
    1434:	ce 01       	movw	r24, r28
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	0e 94 e6 21 	call	0x43cc	; 0x43cc <USART_BluetoothChanger>
    143c:	23 c0       	rjmp	.+70     	; 0x1484 <__vector_5+0x8c>
	}else{
		if ( (BUTTON_PIN & (1<<DOWN)) == 0 )
    143e:	4c 99       	sbic	0x09, 4	; 9
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <__vector_5+0x58>
		keyPressed = DOWN;
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <keyPressed+0x1>
    144a:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <keyPressed>
    144e:	1a c0       	rjmp	.+52     	; 0x1484 <__vector_5+0x8c>
		else
		if ( (BUTTON_PIN & (1<<UP)) == 0 )
    1450:	4d 99       	sbic	0x09, 5	; 9
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <__vector_5+0x6a>
		keyPressed = UP;
    1454:	85 e0       	ldi	r24, 0x05	; 5
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <keyPressed+0x1>
    145c:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <keyPressed>
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <__vector_5+0x8c>
		else
		if ( (BUTTON_PIN & (1<<BACK)) == 0 )
    1462:	4e 99       	sbic	0x09, 6	; 9
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <__vector_5+0x7c>
		keyPressed = BACK;
    1466:	86 e0       	ldi	r24, 0x06	; 6
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <keyPressed+0x1>
    146e:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <keyPressed>
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <__vector_5+0x8c>
		else
		if ( (BUTTON_PIN & (1<<SELECT)) == 0 )
    1474:	4f 99       	sbic	0x09, 7	; 9
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <__vector_5+0x8c>
		keyPressed = SELECT;
    1478:	87 e0       	ldi	r24, 0x07	; 7
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <keyPressed+0x1>
    1480:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <keyPressed>
	}
    1484:	2a 96       	adiw	r28, 0x0a	; 10
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <setup_display>:
int8_t *main_currentPage = 0;

unsigned int Time_ms = 0;//accuracy is fluctuating
unsigned int Time_min = 0;//accurate

void setup_display(void){
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
	//screen initialization
	main_currentPage = u8g2_setup(Settings, &speed, &direction, &distance, &angle_deg); //save the address of the currentPage
    14ba:	08 e7       	ldi	r16, 0x78	; 120
    14bc:	13 e0       	ldi	r17, 0x03	; 3
    14be:	2a e0       	ldi	r18, 0x0A	; 10
    14c0:	31 e0       	ldi	r19, 0x01	; 1
    14c2:	4c e0       	ldi	r20, 0x0C	; 12
    14c4:	51 e0       	ldi	r21, 0x01	; 1
    14c6:	6e e0       	ldi	r22, 0x0E	; 14
    14c8:	71 e0       	ldi	r23, 0x01	; 1
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 be 0a 	call	0x157c	; 0x157c <u8g2_setup>
    14d2:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <main_currentPage+0x1>
    14d6:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <main_currentPage>
	sys_init();
    14da:	0e 94 27 0b 	call	0x164e	; 0x164e <sys_init>
	but_init();
    14de:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <but_init>
	timeInit(&Time_min, &Time_ms);
    14e2:	64 e7       	ldi	r22, 0x74	; 116
    14e4:	73 e0       	ldi	r23, 0x03	; 3
    14e6:	82 e7       	ldi	r24, 0x72	; 114
    14e8:	93 e0       	ldi	r25, 0x03	; 3
    14ea:	0e 94 2d 0b 	call	0x165a	; 0x165a <timeInit>
	ADCinit();
    14ee:	0e 94 20 0c 	call	0x1840	; 0x1840 <ADCinit>
}
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <soundEchoCycle>:

void soundEchoCycle(void){
	
	static int count = 0;
	//add here the code for the cycle it needs to perform to trigger all the sound sensors
	if (TCNT1 >= cycleLengthC && count == 0){
    14f8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14fc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1500:	88 39       	cpi	r24, 0x98	; 152
    1502:	9a 43       	sbci	r25, 0x3A	; 58
    1504:	88 f0       	brcs	.+34     	; 0x1528 <soundEchoCycle+0x30>
    1506:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <count.8814>
    150a:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <count.8814+0x1>
    150e:	89 2b       	or	r24, r25
    1510:	59 f4       	brne	.+22     	; 0x1528 <soundEchoCycle+0x30>
		sendTriggPulse(TRIGG1);
    1512:	84 e0       	ldi	r24, 0x04	; 4
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 bd 07 	call	0xf7a	; 0xf7a <sendTriggPulse>
		count = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <count.8814+0x1>
    1522:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <count.8814>
    1526:	15 c0       	rjmp	.+42     	; 0x1552 <soundEchoCycle+0x5a>
	}
	else if(TCNT1 >= cycleLengthC && count == 1){
    1528:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    152c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1530:	88 39       	cpi	r24, 0x98	; 152
    1532:	9a 43       	sbci	r25, 0x3A	; 58
    1534:	70 f0       	brcs	.+28     	; 0x1552 <soundEchoCycle+0x5a>
    1536:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <count.8814>
    153a:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <count.8814+0x1>
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	41 f4       	brne	.+16     	; 0x1552 <soundEchoCycle+0x5a>
		sendTriggPulse(TRIGG0);
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 bd 07 	call	0xf7a	; 0xf7a <sendTriggPulse>
		count = 0;
    154a:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <count.8814+0x1>
    154e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <count.8814>
	}
	angleCalculator();
    1552:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <angleCalculator>
    1556:	08 95       	ret

00001558 <main>:
	ADCinit();
}

int main()
{
	initBluetooth(Settings);
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	0e 94 99 21 	call	0x4332	; 0x4332 <initBluetooth>
		
		
	setup_display();
    1560:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <setup_display>
	
	initDistanceSensor(&distance, &angle_deg);//the default pins are setup in soundsensor.h
    1564:	68 e7       	ldi	r22, 0x78	; 120
    1566:	73 e0       	ldi	r23, 0x03	; 3
    1568:	8a e0       	ldi	r24, 0x0A	; 10
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	0e 94 a1 07 	call	0xf42	; 0xf42 <initDistanceSensor>
	
	sei();
    1570:	78 94       	sei


	while(1){
		screenRoutine();//function for updating the display.
    1572:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <screenRoutine>
		
		
		soundEchoCycle();
    1576:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <soundEchoCycle>
    157a:	fb cf       	rjmp	.-10     	; 0x1572 <main+0x1a>

0000157c <u8g2_setup>:
unsigned int *pTime_min;

#define Time_cal 305 //ms calibration

int8_t * u8g2_setup(int pSettings[settings], int *pSpeed, int *pDirection, int *pDistance, int *pangdeg)
{
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
	settingVal = &pSettings[0];
    1580:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <settingVal+0x1>
    1584:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <settingVal>
	angleHold = pangdeg;
    1588:	10 93 5a 08 	sts	0x085A, r17	; 0x80085a <angleHold+0x1>
    158c:	00 93 59 08 	sts	0x0859, r16	; 0x800859 <angleHold>
	speedHold = pSpeed;
    1590:	70 93 c3 07 	sts	0x07C3, r23	; 0x8007c3 <speedHold+0x1>
    1594:	60 93 c2 07 	sts	0x07C2, r22	; 0x8007c2 <speedHold>
	directionHold = pDirection;
    1598:	50 93 47 08 	sts	0x0847, r21	; 0x800847 <directionHold+0x1>
    159c:	40 93 46 08 	sts	0x0846, r20	; 0x800846 <directionHold>
	distanceHold = pDistance;
    15a0:	30 93 43 08 	sts	0x0843, r19	; 0x800843 <distanceHold+0x1>
    15a4:	20 93 42 08 	sts	0x0842, r18	; 0x800842 <distanceHold>
	
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    15a8:	23 e5       	ldi	r18, 0x53	; 83
    15aa:	3e e1       	ldi	r19, 0x1E	; 30
    15ac:	48 e1       	ldi	r20, 0x18	; 24
    15ae:	5e e1       	ldi	r21, 0x1E	; 30
    15b0:	63 e6       	ldi	r22, 0x63	; 99
    15b2:	72 e0       	ldi	r23, 0x02	; 2
    15b4:	82 ed       	ldi	r24, 0xD2	; 210
    15b6:	97 e0       	ldi	r25, 0x07	; 7
    15b8:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    15bc:	88 e7       	ldi	r24, 0x78	; 120
    15be:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    15c2:	82 ed       	ldi	r24, 0xD2	; 210
    15c4:	97 e0       	ldi	r25, 0x07	; 7
    15c6:	0e 94 50 20 	call	0x40a0	; 0x40a0 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	82 ed       	ldi	r24, 0xD2	; 210
    15ce:	97 e0       	ldi	r25, 0x07	; 7
    15d0:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <u8x8_SetPowerSave>
	
	screenDiv = screenDiv / screenDivholder;//for better resolution
    15d4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <screenDivholder>
    15d8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <screenDivholder+0x1>
    15dc:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <screenDivholder+0x2>
    15e0:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <screenDivholder+0x3>
    15e4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    15e8:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    15ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    15f0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    15f4:	0e 94 37 23 	call	0x466e	; 0x466e <__divsf3>
    15f8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <screenDiv>
    15fc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <screenDiv+0x1>
    1600:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <screenDiv+0x2>
    1604:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <screenDiv+0x3>

	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);
    1608:	66 e9       	ldi	r22, 0x96	; 150
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	82 ed       	ldi	r24, 0xD2	; 210
    160e:	97 e0       	ldi	r25, 0x07	; 7
    1610:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <u8g2_SetFont>
	textHeight = u8g2_GetMaxCharHeight(&u8g2);
    1614:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <u8g2+0x50>
    1618:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <textHeight>
	maxCharWidth = u8g2_GetMaxCharWidth(&u8g2);
    161c:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <u8g2+0x4f>
    1620:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <maxCharWidth>
	
	u8g2_SetFontDirection(&u8g2, 0);//0: 0deg 1:90deg 2: 180deg 3: 270deg
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	82 ed       	ldi	r24, 0xD2	; 210
    1628:	97 e0       	ldi	r25, 0x07	; 7
    162a:	0e 94 06 1c 	call	0x380c	; 0x380c <u8g2_SetFontDirection>
	
	selections[MENUPAGE] = menuChoices;
    162e:	ea e4       	ldi	r30, 0x4A	; 74
    1630:	f8 e0       	ldi	r31, 0x08	; 8
    1632:	84 e0       	ldi	r24, 0x04	; 4
    1634:	81 83       	std	Z+1, r24	; 0x01
	selections[SETTINGPAGE] = settings;
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	85 83       	std	Z+5, r24	; 0x05
	selectionsVis[MENUPAGE] = menuChoicesVis;
    163a:	e8 e3       	ldi	r30, 0x38	; 56
    163c:	f8 e0       	ldi	r31, 0x08	; 8
    163e:	93 e0       	ldi	r25, 0x03	; 3
    1640:	91 83       	std	Z+1, r25	; 0x01
	selectionsVis[SETTINGPAGE] = settingsVis;
    1642:	85 83       	std	Z+5, r24	; 0x05
	return &currentPage;
}
    1644:	8f e8       	ldi	r24, 0x8F	; 143
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <sys_init>:

void sys_init(void)
{
	#if defined(__AVR__)
	/* select minimal prescaler (max system speed) */
	CLKPR = 0x80;
    164e:	e1 e6       	ldi	r30, 0x61	; 97
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 e8       	ldi	r24, 0x80	; 128
    1654:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1656:	10 82       	st	Z, r1
    1658:	08 95       	ret

0000165a <timeInit>:
}

//Time________________________________________________________________________________________________________________________________________________

void timeInit(unsigned int *ptime_min, unsigned int *ptime_ms){
	pTime_min = ptime_min;
    165a:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pTime_min+0x1>
    165e:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pTime_min>
	pTime_ms = ptime_ms;
    1662:	70 93 d1 07 	sts	0x07D1, r23	; 0x8007d1 <pTime_ms+0x1>
    1666:	60 93 d0 07 	sts	0x07D0, r22	; 0x8007d0 <pTime_ms>
	TCCR0B |= (1<<CS00) | (1<<CS01);
    166a:	85 b5       	in	r24, 0x25	; 37
    166c:	83 60       	ori	r24, 0x03	; 3
    166e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0B);
    1670:	ee e6       	ldi	r30, 0x6E	; 110
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	84 60       	ori	r24, 0x04	; 4
    1678:	80 83       	st	Z, r24
	OCR0B = 250;//to attain roughly 1 ms for every overflow. this roughness gets calibrated further in the code.
    167a:	8a ef       	ldi	r24, 0xFA	; 250
    167c:	88 bd       	out	0x28, r24	; 40
    167e:	08 95       	ret

00001680 <__vector_15>:
}



ISR(TIMER0_COMPB_vect){
    1680:	1f 92       	push	r1
    1682:	0f 92       	push	r0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	0f 92       	push	r0
    1688:	11 24       	eor	r1, r1
    168a:	2f 93       	push	r18
    168c:	3f 93       	push	r19
    168e:	4f 93       	push	r20
    1690:	5f 93       	push	r21
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
	//this routine updates the time variables.
	static int rCount = 0;
	
	if (_Time_ms >= 60000){
    169a:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_Time_ms>
    169e:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <_Time_ms+0x1>
    16a2:	80 36       	cpi	r24, 0x60	; 96
    16a4:	2a ee       	ldi	r18, 0xEA	; 234
    16a6:	92 07       	cpc	r25, r18
    16a8:	b8 f0       	brcs	.+46     	; 0x16d8 <__vector_15+0x58>
		_Time_ms = Time_cal-117;//Formula for the minutes. pTime_ms = (Time_cal-c): c = 0.615384615*Time_cal
    16aa:	8c eb       	ldi	r24, 0xBC	; 188
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <_Time_ms+0x1>
    16b2:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <_Time_ms>
		_Time_min++;
    16b6:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <_Time_min>
    16ba:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <_Time_min+0x1>
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <_Time_min+0x1>
    16c4:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <_Time_min>
		rCount = 0;
    16c8:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <rCount.9238+0x1>
    16cc:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <rCount.9238>
		reDrawRequiredTime = 1; //update the screen so the overlay shows the right minutes.
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <reDrawRequiredTime>
    16d6:	18 c0       	rjmp	.+48     	; 0x1708 <__vector_15+0x88>
	}else if (rCount++ >= 13000)
    16d8:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <rCount.9238>
    16dc:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <rCount.9238+0x1>
    16e0:	a9 01       	movw	r20, r18
    16e2:	4f 5f       	subi	r20, 0xFF	; 255
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	50 93 8a 03 	sts	0x038A, r21	; 0x80038a <rCount.9238+0x1>
    16ea:	40 93 89 03 	sts	0x0389, r20	; 0x800389 <rCount.9238>
    16ee:	28 3c       	cpi	r18, 0xC8	; 200
    16f0:	32 43       	sbci	r19, 0x32	; 50
    16f2:	54 f0       	brlt	.+20     	; 0x1708 <__vector_15+0x88>
	{
		_Time_ms = _Time_ms + Time_cal;
    16f4:	8f 5c       	subi	r24, 0xCF	; 207
    16f6:	9e 4f       	sbci	r25, 0xFE	; 254
    16f8:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <_Time_ms+0x1>
    16fc:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <_Time_ms>
		rCount = 0;
    1700:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <rCount.9238+0x1>
    1704:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <rCount.9238>
	}

	_Time_ms++;
    1708:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_Time_ms>
    170c:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <_Time_ms+0x1>
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <_Time_ms+0x1>
    1716:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <_Time_ms>
	
	*pTime_ms = _Time_ms;
    171a:	e0 91 d0 07 	lds	r30, 0x07D0	; 0x8007d0 <pTime_ms>
    171e:	f0 91 d1 07 	lds	r31, 0x07D1	; 0x8007d1 <pTime_ms+0x1>
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
	*pTime_min = _Time_min;
    1726:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pTime_min>
    172a:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pTime_min+0x1>
    172e:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <_Time_min>
    1732:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <_Time_min+0x1>
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	80 83       	st	Z, r24
}
    173a:	ff 91       	pop	r31
    173c:	ef 91       	pop	r30
    173e:	9f 91       	pop	r25
    1740:	8f 91       	pop	r24
    1742:	5f 91       	pop	r21
    1744:	4f 91       	pop	r20
    1746:	3f 91       	pop	r19
    1748:	2f 91       	pop	r18
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <getTimeToChar>:

void getTimeToChar(char *s, int TemplateOption){
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	00 d0       	rcall	.+0      	; 0x1762 <getTimeToChar+0xe>
    1762:	1f 92       	push	r1
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	8c 01       	movw	r16, r24
    176a:	7b 01       	movw	r14, r22
	//pTime_min and pTime_ms are global variables.
	strcpy(s, ""); // empty string s
    176c:	fc 01       	movw	r30, r24
    176e:	10 82       	st	Z, r1
	char Buff[3] = {0, 0, 0};
    1770:	19 82       	std	Y+1, r1	; 0x01
    1772:	1a 82       	std	Y+2, r1	; 0x02
    1774:	1b 82       	std	Y+3, r1	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1776:	4a e0       	ldi	r20, 0x0A	; 10
    1778:	be 01       	movw	r22, r28
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <_Time_min>
    1782:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <_Time_min+0x1>
    1786:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	
	itoa(_Time_min, Buff, 10);
	
	if(_Time_min < 10){
    178a:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <_Time_min>
    178e:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <_Time_min+0x1>
    1792:	0a 97       	sbiw	r24, 0x0a	; 10
    1794:	48 f4       	brcc	.+18     	; 0x17a8 <getTimeToChar+0x54>
		strcat(s, "0");
    1796:	f8 01       	movw	r30, r16
    1798:	01 90       	ld	r0, Z+
    179a:	00 20       	and	r0, r0
    179c:	e9 f7       	brne	.-6      	; 0x1798 <getTimeToChar+0x44>
    179e:	31 97       	sbiw	r30, 0x01	; 1
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
	}
	strcat(s, Buff);
    17a8:	be 01       	movw	r22, r28
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	c8 01       	movw	r24, r16
    17b0:	0e 94 6e 25 	call	0x4adc	; 0x4adc <strcat>
    17b4:	20 91 48 08 	lds	r18, 0x0848	; 0x800848 <_Time_ms>
    17b8:	30 91 49 08 	lds	r19, 0x0849	; 0x800849 <_Time_ms+0x1>
    17bc:	36 95       	lsr	r19
    17be:	27 95       	ror	r18
    17c0:	36 95       	lsr	r19
    17c2:	27 95       	ror	r18
    17c4:	36 95       	lsr	r19
    17c6:	27 95       	ror	r18
    17c8:	a5 ec       	ldi	r26, 0xC5	; 197
    17ca:	b0 e2       	ldi	r27, 0x20	; 32
    17cc:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__umulhisi3>
    17d0:	4a e0       	ldi	r20, 0x0A	; 10
    17d2:	be 01       	movw	r22, r28
    17d4:	6f 5f       	subi	r22, 0xFF	; 255
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	92 95       	swap	r25
    17da:	82 95       	swap	r24
    17dc:	8f 70       	andi	r24, 0x0F	; 15
    17de:	89 27       	eor	r24, r25
    17e0:	9f 70       	andi	r25, 0x0F	; 15
    17e2:	89 27       	eor	r24, r25
    17e4:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	
	itoa((_Time_ms/1000), Buff, 10);
	strcat(s, ":");
    17e8:	f8 01       	movw	r30, r16
    17ea:	01 90       	ld	r0, Z+
    17ec:	00 20       	and	r0, r0
    17ee:	e9 f7       	brne	.-6      	; 0x17ea <getTimeToChar+0x96>
    17f0:	31 97       	sbiw	r30, 0x01	; 1
    17f2:	8a e3       	ldi	r24, 0x3A	; 58
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
	
	switch (TemplateOption){
    17fa:	ea 94       	dec	r14
    17fc:	ef 28       	or	r14, r15
    17fe:	b1 f4       	brne	.+44     	; 0x182c <getTimeToChar+0xd8>
		//only have the minutes:> 00:
		break;
		
		case 1:
		//include minutes and seconds:> 00:00
		if(_Time_ms/1000 < 10){
    1800:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_Time_ms>
    1804:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <_Time_ms+0x1>
    1808:	80 31       	cpi	r24, 0x10	; 16
    180a:	97 42       	sbci	r25, 0x27	; 39
    180c:	48 f4       	brcc	.+18     	; 0x1820 <getTimeToChar+0xcc>
			strcat(s, "0");
    180e:	f8 01       	movw	r30, r16
    1810:	01 90       	ld	r0, Z+
    1812:	00 20       	and	r0, r0
    1814:	e9 f7       	brne	.-6      	; 0x1810 <getTimeToChar+0xbc>
    1816:	31 97       	sbiw	r30, 0x01	; 1
    1818:	80 e3       	ldi	r24, 0x30	; 48
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
		}
		strcat(s, Buff);
    1820:	be 01       	movw	r22, r28
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	c8 01       	movw	r24, r16
    1828:	0e 94 6e 25 	call	0x4adc	; 0x4adc <strcat>
		break;
	}
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	08 95       	ret

00001840 <ADCinit>:


//Battery_____________________________________________________________________________________________________________________________________________
void ADCinit(void){
	ADMUX |= (1<<REFS0) | (1<<MUX1);
    1840:	ec e7       	ldi	r30, 0x7C	; 124
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	82 64       	ori	r24, 0x42	; 66
    1848:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    184a:	ea e7       	ldi	r30, 0x7A	; 122
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	87 6e       	ori	r24, 0xE7	; 231
    1852:	80 83       	st	Z, r24
    1854:	08 95       	ret

00001856 <updateBatterySens>:
	
}

int updateBatterySens(){
	static int ADCval = 0;
	ADCval = ADC;
    1856:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    185a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	//mimicking a battery voltage by a pot meter.

	return ADCval;
}
    185e:	08 95       	ret

00001860 <choiceAdder>:
		u8g2_SendBuffer(&u8g2);
		reDrawRequiredTime = 0;
	}
}

void choiceAdder(int8_t addValue){ //change the selection in the menu
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
	currentChoice[currentPage] += addValue;
    1864:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <currentPage>
    1868:	02 2e       	mov	r0, r18
    186a:	00 0c       	add	r0, r0
    186c:	33 0b       	sbc	r19, r19
    186e:	f9 01       	movw	r30, r18
    1870:	ef 54       	subi	r30, 0x4F	; 79
    1872:	f8 4f       	sbci	r31, 0xF8	; 248
    1874:	90 81       	ld	r25, Z
    1876:	98 0f       	add	r25, r24
    1878:	90 83       	st	Z, r25
	
	if(selectEnable == 1){
    187a:	40 91 5b 08 	lds	r20, 0x085B	; 0x80085b <selectEnable>
    187e:	44 23       	and	r20, r20
    1880:	09 f4       	brne	.+2      	; 0x1884 <choiceAdder+0x24>
    1882:	5a c0       	rjmp	.+180    	; 0x1938 <choiceAdder+0xd8>
		if (currentChoice[currentPage] > selections[currentPage]-1)
    1884:	f9 01       	movw	r30, r18
    1886:	e6 5b       	subi	r30, 0xB6	; 182
    1888:	f7 4f       	sbci	r31, 0xF7	; 247
    188a:	e0 81       	ld	r30, Z
    188c:	4e 2f       	mov	r20, r30
    188e:	0e 2e       	mov	r0, r30
    1890:	00 0c       	add	r0, r0
    1892:	55 0b       	sbc	r21, r21
    1894:	41 50       	subi	r20, 0x01	; 1
    1896:	51 09       	sbc	r21, r1
    1898:	69 2f       	mov	r22, r25
    189a:	09 2e       	mov	r0, r25
    189c:	00 0c       	add	r0, r0
    189e:	77 0b       	sbc	r23, r23
    18a0:	46 17       	cp	r20, r22
    18a2:	57 07       	cpc	r21, r23
    18a4:	4c f4       	brge	.+18     	; 0x18b8 <choiceAdder+0x58>
		{
			currentChoice[currentPage] = 0;
    18a6:	f9 01       	movw	r30, r18
    18a8:	ef 54       	subi	r30, 0x4F	; 79
    18aa:	f8 4f       	sbci	r31, 0xF8	; 248
    18ac:	10 82       	st	Z, r1
			Scroll[currentPage] = 0;
    18ae:	f9 01       	movw	r30, r18
    18b0:	ea 53       	subi	r30, 0x3A	; 58
    18b2:	f8 4f       	sbci	r31, 0xF8	; 248
    18b4:	10 82       	st	Z, r1
    18b6:	11 c0       	rjmp	.+34     	; 0x18da <choiceAdder+0x7a>
		}
		if (currentChoice[currentPage] < 0)
    18b8:	99 23       	and	r25, r25
    18ba:	7c f4       	brge	.+30     	; 0x18da <choiceAdder+0x7a>
		{
			currentChoice[currentPage] = selections[currentPage]-1;
    18bc:	d9 01       	movw	r26, r18
    18be:	af 54       	subi	r26, 0x4F	; 79
    18c0:	b8 4f       	sbci	r27, 0xF8	; 248
    18c2:	9f ef       	ldi	r25, 0xFF	; 255
    18c4:	9e 0f       	add	r25, r30
    18c6:	9c 93       	st	X, r25
			Scroll[currentPage] = selectionsVis[currentPage] - selections[currentPage];
    18c8:	d9 01       	movw	r26, r18
    18ca:	aa 53       	subi	r26, 0x3A	; 58
    18cc:	b8 4f       	sbci	r27, 0xF8	; 248
    18ce:	e9 01       	movw	r28, r18
    18d0:	c8 5c       	subi	r28, 0xC8	; 200
    18d2:	d7 4f       	sbci	r29, 0xF7	; 247
    18d4:	98 81       	ld	r25, Y
    18d6:	9e 1b       	sub	r25, r30
    18d8:	9c 93       	st	X, r25
		}
		if(currentChoice[currentPage] >= selectionsVis[currentPage] - Scroll[currentPage]){
    18da:	f9 01       	movw	r30, r18
    18dc:	ef 54       	subi	r30, 0x4F	; 79
    18de:	f8 4f       	sbci	r31, 0xF8	; 248
    18e0:	60 81       	ld	r22, Z
    18e2:	06 2e       	mov	r0, r22
    18e4:	00 0c       	add	r0, r0
    18e6:	77 0b       	sbc	r23, r23
    18e8:	f9 01       	movw	r30, r18
    18ea:	ea 53       	subi	r30, 0x3A	; 58
    18ec:	f8 4f       	sbci	r31, 0xF8	; 248
    18ee:	90 81       	ld	r25, Z
    18f0:	f9 01       	movw	r30, r18
    18f2:	e8 5c       	subi	r30, 0xC8	; 200
    18f4:	f7 4f       	sbci	r31, 0xF7	; 247
    18f6:	40 81       	ld	r20, Z
    18f8:	04 2e       	mov	r0, r20
    18fa:	00 0c       	add	r0, r0
    18fc:	55 0b       	sbc	r21, r21
    18fe:	49 1b       	sub	r20, r25
    1900:	51 09       	sbc	r21, r1
    1902:	97 fd       	sbrc	r25, 7
    1904:	53 95       	inc	r21
    1906:	64 17       	cp	r22, r20
    1908:	75 07       	cpc	r23, r21
    190a:	2c f0       	brlt	.+10     	; 0x1916 <choiceAdder+0xb6>
			Scroll[currentPage] += -addValue;
    190c:	f9 01       	movw	r30, r18
    190e:	ea 53       	subi	r30, 0x3A	; 58
    1910:	f8 4f       	sbci	r31, 0xF8	; 248
    1912:	98 1b       	sub	r25, r24
    1914:	90 83       	st	Z, r25
		}
		if (currentChoice[currentPage] < -Scroll[currentPage]){
    1916:	f9 01       	movw	r30, r18
    1918:	ea 53       	subi	r30, 0x3A	; 58
    191a:	f8 4f       	sbci	r31, 0xF8	; 248
    191c:	90 81       	ld	r25, Z
    191e:	e9 2f       	mov	r30, r25
    1920:	ff 27       	eor	r31, r31
    1922:	e1 95       	neg	r30
    1924:	0c f4       	brge	.+2      	; 0x1928 <choiceAdder+0xc8>
    1926:	f0 95       	com	r31
    1928:	6e 17       	cp	r22, r30
    192a:	7f 07       	cpc	r23, r31
    192c:	2c f4       	brge	.+10     	; 0x1938 <choiceAdder+0xd8>
			Scroll[currentPage] += -addValue;
    192e:	f9 01       	movw	r30, r18
    1930:	ea 53       	subi	r30, 0x3A	; 58
    1932:	f8 4f       	sbci	r31, 0xF8	; 248
    1934:	98 1b       	sub	r25, r24
    1936:	90 83       	st	Z, r25
		}
	}
}
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	08 95       	ret

0000193e <pageHistory>:
int8_t pageHistory(_Bool GetPrevpage, int pageNum){
	#define historyBuff 4
	static short history[historyBuff];//initialize first page in case you don't use the start up screen.
	static short i = -1;
	
	if (!GetPrevpage)
    193e:	81 11       	cpse	r24, r1
    1940:	15 c0       	rjmp	.+42     	; 0x196c <pageHistory+0x2e>
	{
		if (i < historyBuff-1){
    1942:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9267>
    1946:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9267+0x1>
    194a:	83 30       	cpi	r24, 0x03	; 3
    194c:	91 05       	cpc	r25, r1
    194e:	44 f5       	brge	.+80     	; 0x19a0 <pageHistory+0x62>
			history[++i] = pageNum;
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9267+0x1>
    1956:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9267>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	fc 01       	movw	r30, r24
    1960:	ef 57       	subi	r30, 0x7F	; 127
    1962:	fc 4f       	sbci	r31, 0xFC	; 252
    1964:	71 83       	std	Z+1, r23	; 0x01
    1966:	60 83       	st	Z, r22
		}
		return -1;
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	08 95       	ret
		}else{
		
		if (i <= 0)
    196c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9267>
    1970:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9267+0x1>
    1974:	18 16       	cp	r1, r24
    1976:	19 06       	cpc	r1, r25
    1978:	3c f0       	brlt	.+14     	; 0x1988 <pageHistory+0x4a>
		{
			return history[i];
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	fc 01       	movw	r30, r24
    1980:	ef 57       	subi	r30, 0x7F	; 127
    1982:	fc 4f       	sbci	r31, 0xFC	; 252
    1984:	80 81       	ld	r24, Z
    1986:	08 95       	ret
			}else{
			return history[--i];
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9267+0x1>
    198e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9267>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	fc 01       	movw	r30, r24
    1998:	ef 57       	subi	r30, 0x7F	; 127
    199a:	fc 4f       	sbci	r31, 0xFC	; 252
    199c:	80 81       	ld	r24, Z
    199e:	08 95       	ret
	if (!GetPrevpage)
	{
		if (i < historyBuff-1){
			history[++i] = pageNum;
		}
		return -1;
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
			return history[i];
			}else{
			return history[--i];
		}
	}
}
    19a2:	08 95       	ret

000019a4 <pageSel>:
}

void pageSel(void){
	//code for managing the pageNumbers
	#define firstPage 2
	if (selectEnable){
    19a4:	80 91 5b 08 	lds	r24, 0x085B	; 0x80085b <selectEnable>
    19a8:	88 23       	and	r24, r24
    19aa:	f9 f0       	breq	.+62     	; 0x19ea <pageSel+0x46>
		if (currentPage == MENUPAGE){
    19ac:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <currentPage>
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	31 f4       	brne	.+12     	; 0x19c0 <pageSel+0x1c>
			currentPage = currentChoice[MENUPAGE] + firstPage; //increment with two because the menu choice pages start at 2
    19b4:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <currentChoice+0x1>
    19b8:	8e 5f       	subi	r24, 0xFE	; 254
    19ba:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <currentPage>
    19be:	0d c0       	rjmp	.+26     	; 0x19da <pageSel+0x36>
			}else if(currentPage == 0){
    19c0:	81 11       	cpse	r24, r1
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <pageSel+0x28>
			currentPage = MENUPAGE;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <currentPage>
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <pageSel+0x36>
			}else{
			if(currentPage == 5){
    19cc:	85 30       	cpi	r24, 0x05	; 5
    19ce:	29 f4       	brne	.+10     	; 0x19da <pageSel+0x36>
				currentPage = currentChoice[5]+ 1 + 5;
    19d0:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <currentChoice+0x5>
    19d4:	8a 5f       	subi	r24, 0xFA	; 250
    19d6:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <currentPage>
			}
			
		}
		pageHistory(0, currentPage);//update page history
    19da:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <currentPage>
    19de:	06 2e       	mov	r0, r22
    19e0:	00 0c       	add	r0, r0
    19e2:	77 0b       	sbc	r23, r23
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	0e 94 9f 0c 	call	0x193e	; 0x193e <pageHistory>
    19ea:	08 95       	ret

000019ec <but_init>:

//the routine that gets run when the pin change interrupt gets triggered on portD for the enabled pins


void but_init(void){
	BUTTON_REG &= ~((1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK));     // set pinD 4 5 6 and 7 as an input
    19ec:	8a b1       	in	r24, 0x0a	; 10
    19ee:	8f 70       	andi	r24, 0x0F	; 15
    19f0:	8a b9       	out	0x0a, r24	; 10
	// is now an input
	BUTTON_PORT |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);    // turn On the Pull-up on all those pins
    19f2:	8b b1       	in	r24, 0x0b	; 11
    19f4:	80 6f       	ori	r24, 0xF0	; 240
    19f6:	8b b9       	out	0x0b, r24	; 11
	// is now an input with pull-up enabled

	if (BUTTON_PORT == PORTB){
    19f8:	9b b1       	in	r25, 0x0b	; 11
    19fa:	85 b1       	in	r24, 0x05	; 5
    19fc:	98 13       	cpse	r25, r24
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <but_init+0x2a>
		//interrupt setup
		PCICR |= (1<<PCIE0);
    1a00:	e8 e6       	ldi	r30, 0x68	; 104
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	80 83       	st	Z, r24
		PCMSK0 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1a0a:	eb e6       	ldi	r30, 0x6B	; 107
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 6f       	ori	r24, 0xF0	; 240
    1a12:	80 83       	st	Z, r24
    1a14:	1d c0       	rjmp	.+58     	; 0x1a50 <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTC){
    1a16:	9b b1       	in	r25, 0x0b	; 11
    1a18:	88 b1       	in	r24, 0x08	; 8
    1a1a:	98 13       	cpse	r25, r24
    1a1c:	0b c0       	rjmp	.+22     	; 0x1a34 <but_init+0x48>
		//interrupt setup
		PCICR |= (1<<PCIE1);
    1a1e:	e8 e6       	ldi	r30, 0x68	; 104
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	82 60       	ori	r24, 0x02	; 2
    1a26:	80 83       	st	Z, r24
		PCMSK1 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1a28:	ec e6       	ldi	r30, 0x6C	; 108
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 6f       	ori	r24, 0xF0	; 240
    1a30:	80 83       	st	Z, r24
    1a32:	0e c0       	rjmp	.+28     	; 0x1a50 <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTD){
    1a34:	9b b1       	in	r25, 0x0b	; 11
    1a36:	8b b1       	in	r24, 0x0b	; 11
    1a38:	98 13       	cpse	r25, r24
    1a3a:	0a c0       	rjmp	.+20     	; 0x1a50 <but_init+0x64>
		//interrupt setup
		PCICR |= (1<<PCIE2);
    1a3c:	e8 e6       	ldi	r30, 0x68	; 104
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	84 60       	ori	r24, 0x04	; 4
    1a44:	80 83       	st	Z, r24
		PCMSK2 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1a46:	ed e6       	ldi	r30, 0x6D	; 109
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 6f       	ori	r24, 0xF0	; 240
    1a4e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a50:	2f ef       	ldi	r18, 0xFF	; 255
    1a52:	83 ec       	ldi	r24, 0xC3	; 195
    1a54:	99 e0       	ldi	r25, 0x09	; 9
    1a56:	21 50       	subi	r18, 0x01	; 1
    1a58:	80 40       	sbci	r24, 0x00	; 0
    1a5a:	90 40       	sbci	r25, 0x00	; 0
    1a5c:	e1 f7       	brne	.-8      	; 0x1a56 <but_init+0x6a>
    1a5e:	00 c0       	rjmp	.+0      	; 0x1a60 <but_init+0x74>
    1a60:	00 00       	nop
    1a62:	08 95       	ret

00001a64 <updateButtons>:

	_delay_ms(200);//to prevent accidental interrupt triggering/ dirty fix
}

void updateButtons(void){
	switch (keyPressed)
    1a64:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <keyPressed>
    1a68:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <keyPressed+0x1>
    1a6c:	85 30       	cpi	r24, 0x05	; 5
    1a6e:	91 05       	cpc	r25, r1
    1a70:	19 f1       	breq	.+70     	; 0x1ab8 <updateButtons+0x54>
    1a72:	1c f4       	brge	.+6      	; 0x1a7a <updateButtons+0x16>
    1a74:	04 97       	sbiw	r24, 0x04	; 4
    1a76:	59 f1       	breq	.+86     	; 0x1ace <updateButtons+0x6a>
    1a78:	08 95       	ret
    1a7a:	86 30       	cpi	r24, 0x06	; 6
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <updateButtons+0x22>
    1a80:	07 97       	sbiw	r24, 0x07	; 7
    1a82:	81 f0       	breq	.+32     	; 0x1aa4 <updateButtons+0x40>
    1a84:	08 95       	ret
	{
		case BACK:
		currentPage = pageHistory(1, 0);
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 9f 0c 	call	0x193e	; 0x193e <pageHistory>
    1a90:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <currentPage>
		reDrawRequired = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;//reset key pressed
    1a9a:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <keyPressed+0x1>
    1a9e:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <keyPressed>
		break;
    1aa2:	08 95       	ret
		
		case SELECT:
		pageSel();
    1aa4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <pageSel>
		reDrawRequired = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    1aae:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <keyPressed+0x1>
    1ab2:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <keyPressed>
		break;
    1ab6:	08 95       	ret
		
		case UP:
		choiceAdder(-1);
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	0e 94 30 0c 	call	0x1860	; 0x1860 <choiceAdder>
		reDrawRequired = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    1ac4:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <keyPressed+0x1>
    1ac8:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <keyPressed>
		break;
    1acc:	08 95       	ret
		
		case DOWN:
		choiceAdder(+1);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	0e 94 30 0c 	call	0x1860	; 0x1860 <choiceAdder>
		reDrawRequired = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    1ada:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <keyPressed+0x1>
    1ade:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <keyPressed>
    1ae2:	08 95       	ret

00001ae4 <MenuStyle0>:
}


//pages_______________________________________________________________________________________________________________________________________________

void MenuStyle0(void){
    1ae4:	2f 92       	push	r2
    1ae6:	3f 92       	push	r3
    1ae8:	4f 92       	push	r4
    1aea:	5f 92       	push	r5
    1aec:	6f 92       	push	r6
    1aee:	7f 92       	push	r7
    1af0:	8f 92       	push	r8
    1af2:	9f 92       	push	r9
    1af4:	af 92       	push	r10
    1af6:	bf 92       	push	r11
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	0f 93       	push	r16
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <MenuStyle0+0x22>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <MenuStyle0+0x24>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	//int yStat = (y+(height/2)+3);
	selectEnable = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <selectEnable>
    1b12:	0f 2e       	mov	r0, r31
    1b14:	f5 e2       	ldi	r31, 0x25	; 37
    1b16:	cf 2e       	mov	r12, r31
    1b18:	f1 e0       	ldi	r31, 0x01	; 1
    1b1a:	df 2e       	mov	r13, r31
    1b1c:	f0 2d       	mov	r31, r0
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1b1e:	1c 82       	std	Y+4, r1	; 0x04
    1b20:	1b 82       	std	Y+3, r1	; 0x03
		if(i == currentChoice[currentPage]){
    1b22:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <currentPage>
    1b26:	0e 2e       	mov	r0, r30
    1b28:	00 0c       	add	r0, r0
    1b2a:	ff 0b       	sbc	r31, r31
    1b2c:	ef 54       	subi	r30, 0x4F	; 79
    1b2e:	f8 4f       	sbci	r31, 0xF8	; 248
    1b30:	80 81       	ld	r24, Z
    1b32:	08 2e       	mov	r0, r24
    1b34:	00 0c       	add	r0, r0
    1b36:	99 0b       	sbc	r25, r25
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	82 17       	cp	r24, r18
    1b3e:	93 07       	cpc	r25, r19
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <MenuStyle0+0x60>
    1b42:	9d c0       	rjmp	.+314    	; 0x1c7e <MenuStyle0+0x19a>
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
			height = screenDiv - Margin;
    1b44:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1b48:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1b4c:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1b50:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			
			x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1b54:	b9 01       	movw	r22, r18
    1b56:	33 0f       	add	r19, r19
    1b58:	88 0b       	sbc	r24, r24
    1b5a:	99 0b       	sbc	r25, r25
    1b5c:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1b60:	a3 01       	movw	r20, r6
    1b62:	92 01       	movw	r18, r4
    1b64:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e1       	ldi	r20, 0x10	; 16
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1b74:	4b 01       	movw	r8, r22
    1b76:	5c 01       	movw	r10, r24
    1b78:	60 91 c7 07 	lds	r22, 0x07C7	; 0x8007c7 <Scroll+0x1>
    1b7c:	06 2e       	mov	r0, r22
    1b7e:	00 0c       	add	r0, r0
    1b80:	77 0b       	sbc	r23, r23
    1b82:	88 0b       	sbc	r24, r24
    1b84:	99 0b       	sbc	r25, r25
    1b86:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1b8a:	a3 01       	movw	r20, r6
    1b8c:	92 01       	movw	r18, r4
    1b8e:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1b92:	9b 01       	movw	r18, r22
    1b94:	ac 01       	movw	r20, r24
    1b96:	c5 01       	movw	r24, r10
    1b98:	b4 01       	movw	r22, r8
    1b9a:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1b9e:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    1ba2:	4b 01       	movw	r8, r22
    1ba4:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    1ba6:	69 30       	cpi	r22, 0x09	; 9
    1ba8:	71 05       	cpc	r23, r1
    1baa:	0c f4       	brge	.+2      	; 0x1bae <MenuStyle0+0xca>
    1bac:	d6 c0       	rjmp	.+428    	; 0x1d5a <MenuStyle0+0x276>
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
		if(i == currentChoice[currentPage]){
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
    1bae:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <currentFrame>
    1bb2:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <currentFrame+0x1>
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	00 24       	eor	r0, r0
    1bbc:	36 95       	lsr	r19
    1bbe:	27 95       	ror	r18
    1bc0:	07 94       	ror	r0
    1bc2:	36 95       	lsr	r19
    1bc4:	27 95       	ror	r18
    1bc6:	07 94       	ror	r0
    1bc8:	32 2f       	mov	r19, r18
    1bca:	20 2d       	mov	r18, r0
    1bcc:	ab ea       	ldi	r26, 0xAB	; 171
    1bce:	ba ea       	ldi	r27, 0xAA	; 170
    1bd0:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__umulhisi3>
    1bd4:	96 95       	lsr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	1c 01       	movw	r2, r24
    1bda:	ef e3       	ldi	r30, 0x3F	; 63
    1bdc:	2e 0e       	add	r2, r30
    1bde:	31 1c       	adc	r3, r1
			height = screenDiv - Margin;
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	50 e4       	ldi	r21, 0x40	; 64
    1be8:	c3 01       	movw	r24, r6
    1bea:	b2 01       	movw	r22, r4
    1bec:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    1bf0:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    1bf4:	56 2e       	mov	r5, r22
    1bf6:	47 2e       	mov	r4, r23
			
			x = (screenWidth/2) - width / 2;
    1bf8:	31 01       	movw	r6, r2
    1bfa:	33 20       	and	r3, r3
    1bfc:	1c f4       	brge	.+6      	; 0x1c04 <MenuStyle0+0x120>
    1bfe:	ff ef       	ldi	r31, 0xFF	; 255
    1c00:	6f 1a       	sub	r6, r31
    1c02:	7f 0a       	sbc	r7, r31
    1c04:	75 94       	asr	r7
    1c06:	67 94       	ror	r6
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	82 ed       	ldi	r24, 0xD2	; 210
    1c0c:	97 e0       	ldi	r25, 0x07	; 7
    1c0e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    1c12:	20 e4       	ldi	r18, 0x40	; 64
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	26 19       	sub	r18, r6
    1c18:	37 09       	sbc	r19, r7
    1c1a:	3a 83       	std	Y+2, r19	; 0x02
    1c1c:	29 83       	std	Y+1, r18	; 0x01
    1c1e:	0f 2e       	mov	r0, r31
    1c20:	f3 e0       	ldi	r31, 0x03	; 3
    1c22:	ef 2e       	mov	r14, r31
    1c24:	f0 2d       	mov	r31, r0
    1c26:	05 2d       	mov	r16, r5
    1c28:	22 2d       	mov	r18, r2
    1c2a:	48 2d       	mov	r20, r8
    1c2c:	69 81       	ldd	r22, Y+1	; 0x01
    1c2e:	82 ed       	ldi	r24, 0xD2	; 210
    1c30:	97 e0       	ldi	r25, 0x07	; 7
    1c32:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	82 ed       	ldi	r24, 0xD2	; 210
    1c3a:	97 e0       	ldi	r25, 0x07	; 7
    1c3c:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2 , y+(height/2)+3, menuStrings[i]);
    1c40:	45 2d       	mov	r20, r5
    1c42:	54 2d       	mov	r21, r4
    1c44:	55 23       	and	r21, r21
    1c46:	14 f4       	brge	.+4      	; 0x1c4c <MenuStyle0+0x168>
    1c48:	4f 5f       	subi	r20, 0xFF	; 255
    1c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4c:	55 95       	asr	r21
    1c4e:	47 95       	ror	r20
    1c50:	4d 5f       	subi	r20, 0xFD	; 253
    1c52:	74 2e       	mov	r7, r20
    1c54:	78 0c       	add	r7, r8
    1c56:	39 81       	ldd	r19, Y+1	; 0x01
    1c58:	63 0e       	add	r6, r19
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	40 80       	ld	r4, Z
    1c5e:	51 80       	ldd	r5, Z+1	; 0x01
    1c60:	b2 01       	movw	r22, r4
    1c62:	82 ed       	ldi	r24, 0xD2	; 210
    1c64:	97 e0       	ldi	r25, 0x07	; 7
    1c66:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    1c6a:	86 95       	lsr	r24
    1c6c:	66 2d       	mov	r22, r6
    1c6e:	68 1b       	sub	r22, r24
    1c70:	92 01       	movw	r18, r4
    1c72:	47 2d       	mov	r20, r7
    1c74:	82 ed       	ldi	r24, 0xD2	; 210
    1c76:	97 e0       	ldi	r25, 0x07	; 7
    1c78:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
    1c7c:	6e c0       	rjmp	.+220    	; 0x1d5a <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    1c7e:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1c82:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1c86:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1c8a:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	b9 01       	movw	r22, r18
    1c94:	33 0f       	add	r19, r19
    1c96:	88 0b       	sbc	r24, r24
    1c98:	99 0b       	sbc	r25, r25
    1c9a:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1c9e:	a3 01       	movw	r20, r6
    1ca0:	92 01       	movw	r18, r4
    1ca2:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e1       	ldi	r20, 0x10	; 16
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1cb2:	4b 01       	movw	r8, r22
    1cb4:	5c 01       	movw	r10, r24
    1cb6:	60 91 c7 07 	lds	r22, 0x07C7	; 0x8007c7 <Scroll+0x1>
    1cba:	06 2e       	mov	r0, r22
    1cbc:	00 0c       	add	r0, r0
    1cbe:	77 0b       	sbc	r23, r23
    1cc0:	88 0b       	sbc	r24, r24
    1cc2:	99 0b       	sbc	r25, r25
    1cc4:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1cc8:	a3 01       	movw	r20, r6
    1cca:	92 01       	movw	r18, r4
    1ccc:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1cd0:	9b 01       	movw	r18, r22
    1cd2:	ac 01       	movw	r20, r24
    1cd4:	c5 01       	movw	r24, r10
    1cd6:	b4 01       	movw	r22, r8
    1cd8:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1cdc:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    1ce0:	4b 01       	movw	r8, r22
    1ce2:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    1ce4:	69 30       	cpi	r22, 0x09	; 9
    1ce6:	71 05       	cpc	r23, r1
    1ce8:	c4 f1       	brlt	.+112    	; 0x1d5a <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e4       	ldi	r21, 0x40	; 64
    1cf2:	c3 01       	movw	r24, r6
    1cf4:	b2 01       	movw	r22, r4
    1cf6:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    1cfa:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    1cfe:	76 2e       	mov	r7, r22
    1d00:	67 2e       	mov	r6, r23
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				//u8g2_SetDefaultForegroundColor(&u8g2);
				u8g2_SetDrawColor(&u8g2, 1);
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	82 ed       	ldi	r24, 0xD2	; 210
    1d06:	97 e0       	ldi	r25, 0x07	; 7
    1d08:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    1d0c:	0f 2e       	mov	r0, r31
    1d0e:	f3 e0       	ldi	r31, 0x03	; 3
    1d10:	ef 2e       	mov	r14, r31
    1d12:	f0 2d       	mov	r31, r0
    1d14:	07 2d       	mov	r16, r7
    1d16:	20 e4       	ldi	r18, 0x40	; 64
    1d18:	48 2d       	mov	r20, r8
    1d1a:	60 e2       	ldi	r22, 0x20	; 32
    1d1c:	82 ed       	ldi	r24, 0xD2	; 210
    1d1e:	97 e0       	ldi	r25, 0x07	; 7
    1d20:	0e 94 65 15 	call	0x2aca	; 0x2aca <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+(height/2)+3, menuStrings[i]);
    1d24:	87 2d       	mov	r24, r7
    1d26:	96 2d       	mov	r25, r6
    1d28:	99 23       	and	r25, r25
    1d2a:	0c f4       	brge	.+2      	; 0x1d2e <MenuStyle0+0x24a>
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	95 95       	asr	r25
    1d30:	87 95       	ror	r24
    1d32:	8d 5f       	subi	r24, 0xFD	; 253
    1d34:	78 2e       	mov	r7, r24
    1d36:	78 0c       	add	r7, r8
    1d38:	f6 01       	movw	r30, r12
    1d3a:	40 80       	ld	r4, Z
    1d3c:	51 80       	ldd	r5, Z+1	; 0x01
    1d3e:	b2 01       	movw	r22, r4
    1d40:	82 ed       	ldi	r24, 0xD2	; 210
    1d42:	97 e0       	ldi	r25, 0x07	; 7
    1d44:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    1d48:	86 95       	lsr	r24
    1d4a:	60 e4       	ldi	r22, 0x40	; 64
    1d4c:	68 1b       	sub	r22, r24
    1d4e:	92 01       	movw	r18, r4
    1d50:	47 2d       	mov	r20, r7
    1d52:	82 ed       	ldi	r24, 0xD2	; 210
    1d54:	97 e0       	ldi	r25, 0x07	; 7
    1d56:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	3c 83       	std	Y+4, r19	; 0x04
    1d64:	2b 83       	std	Y+3, r18	; 0x03
    1d66:	32 e0       	ldi	r19, 0x02	; 2
    1d68:	c3 0e       	add	r12, r19
    1d6a:	d1 1c       	adc	r13, r1
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	05 97       	sbiw	r24, 0x05	; 5
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <MenuStyle0+0x292>
    1d74:	d6 ce       	rjmp	.-596    	; 0x1b22 <MenuStyle0+0x3e>
			}
		}
	}
	
	//stop drawing when the animation is done
	if (currentFrame++ >= framesNum)
    1d76:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <currentFrame>
    1d7a:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <currentFrame+0x1>
    1d7e:	82 30       	cpi	r24, 0x02	; 2
    1d80:	91 05       	cpc	r25, r1
    1d82:	30 f4       	brcc	.+12     	; 0x1d90 <MenuStyle0+0x2ac>
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <currentFrame+0x1>
    1d8a:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <currentFrame>
    1d8e:	06 c0       	rjmp	.+12     	; 0x1d9c <MenuStyle0+0x2b8>
	{
		currentFrame = 0;
    1d90:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <currentFrame+0x1>
    1d94:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <currentFrame>
		reDrawRequired = 0;
    1d98:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
	}
	

}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	0f 91       	pop	r16
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	bf 90       	pop	r11
    1db2:	af 90       	pop	r10
    1db4:	9f 90       	pop	r9
    1db6:	8f 90       	pop	r8
    1db8:	7f 90       	pop	r7
    1dba:	6f 90       	pop	r6
    1dbc:	5f 90       	pop	r5
    1dbe:	4f 90       	pop	r4
    1dc0:	3f 90       	pop	r3
    1dc2:	2f 90       	pop	r2
    1dc4:	08 95       	ret

00001dc6 <MenuStyle1>:

void MenuStyle1(void){
    1dc6:	2f 92       	push	r2
    1dc8:	3f 92       	push	r3
    1dca:	4f 92       	push	r4
    1dcc:	5f 92       	push	r5
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <MenuStyle1+0x24>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <MenuStyle1+0x26>
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <MenuStyle1+0x28>
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <selectEnable>
	int width = screenWidth;
	int height = screenDiv;
    1df8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    1dfc:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    1e00:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    1e04:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    1e08:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
	
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
    1e0c:	4b 01       	movw	r8, r22
    1e0e:	77 23       	and	r23, r23
    1e10:	1c f4       	brge	.+6      	; 0x1e18 <MenuStyle1+0x52>
    1e12:	2f ef       	ldi	r18, 0xFF	; 255
    1e14:	82 1a       	sub	r8, r18
    1e16:	92 0a       	sbc	r9, r18
    1e18:	95 94       	asr	r9
    1e1a:	87 94       	ror	r8
    1e1c:	33 e0       	ldi	r19, 0x03	; 3
    1e1e:	83 0e       	add	r8, r19
    1e20:	91 1c       	adc	r9, r1
	height = height - Margin;
    1e22:	1b 01       	movw	r2, r22
    1e24:	e2 e0       	ldi	r30, 0x02	; 2
    1e26:	2e 1a       	sub	r2, r30
    1e28:	31 08       	sbc	r3, r1
    1e2a:	0f 2e       	mov	r0, r31
    1e2c:	f5 e2       	ldi	r31, 0x25	; 37
    1e2e:	cf 2e       	mov	r12, r31
    1e30:	f1 e0       	ldi	r31, 0x01	; 1
    1e32:	df 2e       	mov	r13, r31
    1e34:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1e36:	1e 82       	std	Y+6, r1	; 0x06
    1e38:	1d 82       	std	Y+5, r1	; 0x05
				u8g2_SetDrawColor(&u8g2, 0);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1e3a:	0f 2e       	mov	r0, r31
    1e3c:	f6 ec       	ldi	r31, 0xC6	; 198
    1e3e:	af 2e       	mov	r10, r31
    1e40:	f7 e0       	ldi	r31, 0x07	; 7
    1e42:	bf 2e       	mov	r11, r31
    1e44:	f0 2d       	mov	r31, r0
			}*/
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1e46:	10 e4       	ldi	r17, 0x40	; 64
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
		if(currentChoice[currentPage] == i){
    1e48:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <currentPage>
    1e4c:	0e 2e       	mov	r0, r30
    1e4e:	00 0c       	add	r0, r0
    1e50:	ff 0b       	sbc	r31, r31
    1e52:	ef 54       	subi	r30, 0x4F	; 79
    1e54:	f8 4f       	sbci	r31, 0xF8	; 248
    1e56:	80 81       	ld	r24, Z
    1e58:	08 2e       	mov	r0, r24
    1e5a:	00 0c       	add	r0, r0
    1e5c:	99 0b       	sbc	r25, r25
    1e5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e60:	3e 81       	ldd	r19, Y+6	; 0x06
    1e62:	82 17       	cp	r24, r18
    1e64:	93 07       	cpc	r25, r19
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <MenuStyle1+0xa4>
    1e68:	62 c0       	rjmp	.+196    	; 0x1f2e <MenuStyle1+0x168>
			//x and the y of the boxes
			//width = screenWidth;
			//height = screenDiv - Margin;
			
			// 				x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1e6a:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1e6e:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1e72:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1e76:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	33 0f       	add	r19, r19
    1e7e:	88 0b       	sbc	r24, r24
    1e80:	99 0b       	sbc	r25, r25
    1e82:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1e86:	a3 01       	movw	r20, r6
    1e88:	92 01       	movw	r18, r4
    1e8a:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e1       	ldi	r20, 0x10	; 16
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1e9a:	69 83       	std	Y+1, r22	; 0x01
    1e9c:	7a 83       	std	Y+2, r23	; 0x02
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
    1ea0:	9c 83       	std	Y+4, r25	; 0x04
    1ea2:	f5 01       	movw	r30, r10
    1ea4:	61 81       	ldd	r22, Z+1	; 0x01
    1ea6:	06 2e       	mov	r0, r22
    1ea8:	00 0c       	add	r0, r0
    1eaa:	77 0b       	sbc	r23, r23
    1eac:	88 0b       	sbc	r24, r24
    1eae:	99 0b       	sbc	r25, r25
    1eb0:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1eb4:	a3 01       	movw	r20, r6
    1eb6:	92 01       	movw	r18, r4
    1eb8:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	69 81       	ldd	r22, Y+1	; 0x01
    1ec2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1ecc:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    1ed0:	2b 01       	movw	r4, r22
    1ed2:	3c 01       	movw	r6, r24
			/*	if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			
			if (y >= TopMargin)
    1ed4:	69 30       	cpi	r22, 0x09	; 9
    1ed6:	71 05       	cpc	r23, r1
    1ed8:	0c f4       	brge	.+2      	; 0x1edc <MenuStyle1+0x116>
    1eda:	86 c0       	rjmp	.+268    	; 0x1fe8 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	82 ed       	ldi	r24, 0xD2	; 210
    1ee0:	97 e0       	ldi	r25, 0x07	; 7
    1ee2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    1ee6:	0f 2e       	mov	r0, r31
    1ee8:	f3 e0       	ldi	r31, 0x03	; 3
    1eea:	ef 2e       	mov	r14, r31
    1eec:	f0 2d       	mov	r31, r0
    1eee:	02 2d       	mov	r16, r2
    1ef0:	20 e8       	ldi	r18, 0x80	; 128
    1ef2:	44 2d       	mov	r20, r4
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	82 ed       	ldi	r24, 0xD2	; 210
    1ef8:	97 e0       	ldi	r25, 0x07	; 7
    1efa:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	82 ed       	ldi	r24, 0xD2	; 210
    1f02:	97 e0       	ldi	r25, 0x07	; 7
    1f04:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1f08:	48 0c       	add	r4, r8
    1f0a:	f6 01       	movw	r30, r12
    1f0c:	60 80       	ld	r6, Z
    1f0e:	71 80       	ldd	r7, Z+1	; 0x01
    1f10:	b3 01       	movw	r22, r6
    1f12:	82 ed       	ldi	r24, 0xD2	; 210
    1f14:	97 e0       	ldi	r25, 0x07	; 7
    1f16:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    1f1a:	86 95       	lsr	r24
    1f1c:	61 2f       	mov	r22, r17
    1f1e:	68 1b       	sub	r22, r24
    1f20:	93 01       	movw	r18, r6
    1f22:	44 2d       	mov	r20, r4
    1f24:	82 ed       	ldi	r24, 0xD2	; 210
    1f26:	97 e0       	ldi	r25, 0x07	; 7
    1f28:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
    1f2c:	5d c0       	rjmp	.+186    	; 0x1fe8 <MenuStyle1+0x222>
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1f2e:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1f32:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1f36:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1f3a:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    1f3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f40:	3e 81       	ldd	r19, Y+6	; 0x06
    1f42:	b9 01       	movw	r22, r18
    1f44:	33 0f       	add	r19, r19
    1f46:	88 0b       	sbc	r24, r24
    1f48:	99 0b       	sbc	r25, r25
    1f4a:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1f4e:	a3 01       	movw	r20, r6
    1f50:	92 01       	movw	r18, r4
    1f52:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e1       	ldi	r20, 0x10	; 16
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1f62:	69 83       	std	Y+1, r22	; 0x01
    1f64:	7a 83       	std	Y+2, r23	; 0x02
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	9c 83       	std	Y+4, r25	; 0x04
    1f6a:	f5 01       	movw	r30, r10
    1f6c:	61 81       	ldd	r22, Z+1	; 0x01
    1f6e:	06 2e       	mov	r0, r22
    1f70:	00 0c       	add	r0, r0
    1f72:	77 0b       	sbc	r23, r23
    1f74:	88 0b       	sbc	r24, r24
    1f76:	99 0b       	sbc	r25, r25
    1f78:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__floatsisf>
    1f7c:	a3 01       	movw	r20, r6
    1f7e:	92 01       	movw	r18, r4
    1f80:	0e 94 c5 24 	call	0x498a	; 0x498a <__mulsf3>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	69 81       	ldd	r22, Y+1	; 0x01
    1f8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1f94:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    1f98:	2b 01       	movw	r4, r22
    1f9a:	3c 01       	movw	r6, r24
			/*
			if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			if (y >= TopMargin)
    1f9c:	69 30       	cpi	r22, 0x09	; 9
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	1c f1       	brlt	.+70     	; 0x1fe8 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	82 ed       	ldi	r24, 0xD2	; 210
    1fa6:	97 e0       	ldi	r25, 0x07	; 7
    1fa8:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    1fac:	0f 2e       	mov	r0, r31
    1fae:	f3 e0       	ldi	r31, 0x03	; 3
    1fb0:	ef 2e       	mov	r14, r31
    1fb2:	f0 2d       	mov	r31, r0
    1fb4:	02 2d       	mov	r16, r2
    1fb6:	20 e8       	ldi	r18, 0x80	; 128
    1fb8:	44 2d       	mov	r20, r4
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	82 ed       	ldi	r24, 0xD2	; 210
    1fbe:	97 e0       	ldi	r25, 0x07	; 7
    1fc0:	0e 94 65 15 	call	0x2aca	; 0x2aca <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1fc4:	48 0c       	add	r4, r8
    1fc6:	f6 01       	movw	r30, r12
    1fc8:	60 80       	ld	r6, Z
    1fca:	71 80       	ldd	r7, Z+1	; 0x01
    1fcc:	b3 01       	movw	r22, r6
    1fce:	82 ed       	ldi	r24, 0xD2	; 210
    1fd0:	97 e0       	ldi	r25, 0x07	; 7
    1fd2:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    1fd6:	86 95       	lsr	r24
    1fd8:	61 2f       	mov	r22, r17
    1fda:	68 1b       	sub	r22, r24
    1fdc:	93 01       	movw	r18, r6
    1fde:	44 2d       	mov	r20, r4
    1fe0:	82 ed       	ldi	r24, 0xD2	; 210
    1fe2:	97 e0       	ldi	r25, 0x07	; 7
    1fe4:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1fe8:	2d 81       	ldd	r18, Y+5	; 0x05
    1fea:	3e 81       	ldd	r19, Y+6	; 0x06
    1fec:	2f 5f       	subi	r18, 0xFF	; 255
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	3e 83       	std	Y+6, r19	; 0x06
    1ff2:	2d 83       	std	Y+5, r18	; 0x05
    1ff4:	32 e0       	ldi	r19, 0x02	; 2
    1ff6:	c3 0e       	add	r12, r19
    1ff8:	d1 1c       	adc	r13, r1
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffe:	05 97       	sbiw	r24, 0x05	; 5
    2000:	09 f0       	breq	.+2      	; 0x2004 <MenuStyle1+0x23e>
    2002:	22 cf       	rjmp	.-444    	; 0x1e48 <MenuStyle1+0x82>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
		}
	}
	reDrawRequired = 0;
    2004:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    2008:	26 96       	adiw	r28, 0x06	; 6
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ef 90       	pop	r14
    201e:	df 90       	pop	r13
    2020:	cf 90       	pop	r12
    2022:	bf 90       	pop	r11
    2024:	af 90       	pop	r10
    2026:	9f 90       	pop	r9
    2028:	8f 90       	pop	r8
    202a:	7f 90       	pop	r7
    202c:	6f 90       	pop	r6
    202e:	5f 90       	pop	r5
    2030:	4f 90       	pop	r4
    2032:	3f 90       	pop	r3
    2034:	2f 90       	pop	r2
    2036:	08 95       	ret

00002038 <StartPage>:

void StartPage(void){
    2038:	ef 92       	push	r14
    203a:	ff 92       	push	r15
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	28 97       	sbiw	r28, 0x08	; 8
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <selectEnable>
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
    2058:	88 e0       	ldi	r24, 0x08	; 8
    205a:	ee e2       	ldi	r30, 0x2E	; 46
    205c:	f1 e0       	ldi	r31, 0x01	; 1
    205e:	de 01       	movw	r26, r28
    2060:	11 96       	adiw	r26, 0x01	; 1
    2062:	01 90       	ld	r0, Z+
    2064:	0d 92       	st	X+, r0
    2066:	8a 95       	dec	r24
    2068:	e1 f7       	brne	.-8      	; 0x2062 <StartPage+0x2a>
    206a:	ce 01       	movw	r24, r28
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	7c 01       	movw	r14, r24
    2070:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i = 0; i < lineNum; i++)
	{
		u8g2_DrawStr(&u8g2, 0, textHeight * (i + 1), text[i]);
    2072:	f7 01       	movw	r30, r14
    2074:	21 91       	ld	r18, Z+
    2076:	31 91       	ld	r19, Z+
    2078:	7f 01       	movw	r14, r30
    207a:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    207e:	14 9f       	mul	r17, r20
    2080:	40 2d       	mov	r20, r0
    2082:	11 24       	eor	r1, r1
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	82 ed       	ldi	r24, 0xD2	; 210
    2088:	97 e0       	ldi	r25, 0x07	; 7
    208a:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
    208e:	1f 5f       	subi	r17, 0xFF	; 255
void StartPage(void){
	selectEnable = 1;
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
	
	for (int i = 0; i < lineNum; i++)
    2090:	15 30       	cpi	r17, 0x05	; 5
    2092:	79 f7       	brne	.-34     	; 0x2072 <StartPage+0x3a>
	char *text2[2] = {
		"Press \"Select\"",
		" to continue!"
	};
	
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[0]) / 2, realScreenHeight-textHeight, text2[0]);
    2094:	10 e4       	ldi	r17, 0x40	; 64
    2096:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <textHeight>
    209a:	f1 2e       	mov	r15, r17
    209c:	f8 1a       	sub	r15, r24
    209e:	60 e4       	ldi	r22, 0x40	; 64
    20a0:	71 e0       	ldi	r23, 0x01	; 1
    20a2:	82 ed       	ldi	r24, 0xD2	; 210
    20a4:	97 e0       	ldi	r25, 0x07	; 7
    20a6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    20aa:	86 95       	lsr	r24
    20ac:	61 2f       	mov	r22, r17
    20ae:	68 1b       	sub	r22, r24
    20b0:	20 e4       	ldi	r18, 0x40	; 64
    20b2:	31 e0       	ldi	r19, 0x01	; 1
    20b4:	4f 2d       	mov	r20, r15
    20b6:	82 ed       	ldi	r24, 0xD2	; 210
    20b8:	97 e0       	ldi	r25, 0x07	; 7
    20ba:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[1]) / 2, realScreenHeight, text2[1]);
    20be:	6f e4       	ldi	r22, 0x4F	; 79
    20c0:	71 e0       	ldi	r23, 0x01	; 1
    20c2:	82 ed       	ldi	r24, 0xD2	; 210
    20c4:	97 e0       	ldi	r25, 0x07	; 7
    20c6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    20ca:	86 95       	lsr	r24
    20cc:	61 2f       	mov	r22, r17
    20ce:	68 1b       	sub	r22, r24
    20d0:	2f e4       	ldi	r18, 0x4F	; 79
    20d2:	31 e0       	ldi	r19, 0x01	; 1
    20d4:	40 e4       	ldi	r20, 0x40	; 64
    20d6:	82 ed       	ldi	r24, 0xD2	; 210
    20d8:	97 e0       	ldi	r25, 0x07	; 7
    20da:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	reDrawRequired = 0;
    20de:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    20e2:	28 96       	adiw	r28, 0x08	; 8
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	08 95       	ret

000020fa <nopage>:

void nopage(void){
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, "No content yet!");
    20fa:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    20fe:	47 5f       	subi	r20, 0xF7	; 247
    2100:	21 ea       	ldi	r18, 0xA1	; 161
    2102:	31 e0       	ldi	r19, 0x01	; 1
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	82 ed       	ldi	r24, 0xD2	; 210
    2108:	97 e0       	ldi	r25, 0x07	; 7
    210a:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	selectEnable = 0;
    210e:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <selectEnable>
	reDrawRequired = 0;
    2112:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    2116:	08 95       	ret

00002118 <ScreenOverlay>:
}


void ScreenOverlay(void){
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	28 97       	sbiw	r28, 0x08	; 8
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
	int y2 = height2/2;
	
	int width3 = width1/3 - 2;
	int height3 = height1 - 4;
	
	u8g2_DrawFrame(&u8g2, x1, y1, width1, height1);
    2134:	08 e0       	ldi	r16, 0x08	; 8
    2136:	2f e0       	ldi	r18, 0x0F	; 15
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	69 e3       	ldi	r22, 0x39	; 57
    213c:	82 ed       	ldi	r24, 0xD2	; 210
    213e:	97 e0       	ldi	r25, 0x07	; 7
    2140:	0e 94 af 14 	call	0x295e	; 0x295e <u8g2_DrawFrame>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
    2144:	04 e0       	ldi	r16, 0x04	; 4
    2146:	23 e0       	ldi	r18, 0x03	; 3
    2148:	42 e0       	ldi	r20, 0x02	; 2
    214a:	67 e4       	ldi	r22, 0x47	; 71
    214c:	82 ed       	ldi	r24, 0xD2	; 210
    214e:	97 e0       	ldi	r25, 0x07	; 7
    2150:	0e 94 af 14 	call	0x295e	; 0x295e <u8g2_DrawFrame>
	
	unsigned int ADCval = updateBatterySens();
    2154:	0e 94 2b 0c 	call	0x1856	; 0x1856 <updateBatterySens>
	if (ADCval<=256){
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	21 e0       	ldi	r18, 0x01	; 1
    215c:	92 07       	cpc	r25, r18
    215e:	68 f4       	brcc	.+26     	; 0x217a <ScreenOverlay+0x62>
		batteryBars = 0;
    2160:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <batteryBars+0x1>
    2164:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <batteryBars>
    2168:	3d c0       	rjmp	.+122    	; 0x21e4 <ScreenOverlay+0xcc>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    216a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <batteryBars>
    216e:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <batteryBars+0x1>
    2172:	18 16       	cp	r1, r24
    2174:	19 06       	cpc	r1, r25
    2176:	04 f1       	brlt	.+64     	; 0x21b8 <ScreenOverlay+0xa0>
    2178:	35 c0       	rjmp	.+106    	; 0x21e4 <ScreenOverlay+0xcc>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
	
	unsigned int ADCval = updateBatterySens();
	if (ADCval<=256){
		batteryBars = 0;
		}else if (ADCval <= 512){
    217a:	81 30       	cpi	r24, 0x01	; 1
    217c:	22 e0       	ldi	r18, 0x02	; 2
    217e:	92 07       	cpc	r25, r18
    2180:	38 f4       	brcc	.+14     	; 0x2190 <ScreenOverlay+0x78>
		batteryBars = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <batteryBars+0x1>
    218a:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <batteryBars>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <ScreenOverlay+0xa0>
		}else if (ADCval <= 786){
    2190:	83 31       	cpi	r24, 0x13	; 19
    2192:	23 e0       	ldi	r18, 0x03	; 3
    2194:	92 07       	cpc	r25, r18
    2196:	38 f4       	brcc	.+14     	; 0x21a6 <ScreenOverlay+0x8e>
		batteryBars = 2;
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <batteryBars+0x1>
    21a0:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <batteryBars>
    21a4:	09 c0       	rjmp	.+18     	; 0x21b8 <ScreenOverlay+0xa0>
		}else if (ADCval <= 1024){
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	94 40       	sbci	r25, 0x04	; 4
    21aa:	f8 f6       	brcc	.-66     	; 0x216a <ScreenOverlay+0x52>
		batteryBars = 3;
    21ac:	83 e0       	ldi	r24, 0x03	; 3
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <batteryBars+0x1>
    21b4:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <batteryBars>
	selectEnable = 0;
	reDrawRequired = 0;
}


void ScreenOverlay(void){
    21b8:	1b e3       	ldi	r17, 0x3B	; 59
    21ba:	e1 2c       	mov	r14, r1
    21bc:	f1 2c       	mov	r15, r1
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
	{
		u8g2_DrawBox(&u8g2, x1 + 2 + (width3+1) * i, y1 + 2, width3, height3);
    21be:	04 e0       	ldi	r16, 0x04	; 4
    21c0:	23 e0       	ldi	r18, 0x03	; 3
    21c2:	42 e0       	ldi	r20, 0x02	; 2
    21c4:	61 2f       	mov	r22, r17
    21c6:	82 ed       	ldi	r24, 0xD2	; 210
    21c8:	97 e0       	ldi	r25, 0x07	; 7
    21ca:	0e 94 87 14 	call	0x290e	; 0x290e <u8g2_DrawBox>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	e8 1a       	sub	r14, r24
    21d2:	f8 0a       	sbc	r15, r24
    21d4:	1c 5f       	subi	r17, 0xFC	; 252
    21d6:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <batteryBars>
    21da:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <batteryBars+0x1>
    21de:	e8 16       	cp	r14, r24
    21e0:	f9 06       	cpc	r15, r25
    21e2:	6c f3       	brlt	.-38     	; 0x21be <ScreenOverlay+0xa6>
	}
	
	
	
	//Mode:
	char modeTxt[7] = "Mode: ";
    21e4:	87 e0       	ldi	r24, 0x07	; 7
    21e6:	e1 eb       	ldi	r30, 0xB1	; 177
    21e8:	f1 e0       	ldi	r31, 0x01	; 1
    21ea:	de 01       	movw	r26, r28
    21ec:	11 96       	adiw	r26, 0x01	; 1
    21ee:	01 90       	ld	r0, Z+
    21f0:	0d 92       	st	X+, r0
    21f2:	8a 95       	dec	r24
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <ScreenOverlay+0xd6>
	char modeTxthold[1];
	itoa(*(settingVal+0), modeTxthold, 10);
    21f6:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <settingVal>
    21fa:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <settingVal+0x1>
    21fe:	4a e0       	ldi	r20, 0x0A	; 10
    2200:	be 01       	movw	r22, r28
    2202:	68 5f       	subi	r22, 0xF8	; 248
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	strcat(modeTxt, modeTxthold);
    220e:	be 01       	movw	r22, r28
    2210:	68 5f       	subi	r22, 0xF8	; 248
    2212:	7f 4f       	sbci	r23, 0xFF	; 255
    2214:	ce 01       	movw	r24, r28
    2216:	01 96       	adiw	r24, 0x01	; 1
    2218:	0e 94 6e 25 	call	0x4adc	; 0x4adc <strcat>
	
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    221c:	67 e7       	ldi	r22, 0x77	; 119
    221e:	78 e0       	ldi	r23, 0x08	; 8
    2220:	82 ed       	ldi	r24, 0xD2	; 210
    2222:	97 e0       	ldi	r25, 0x07	; 7
    2224:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, screenWidth - u8g2_GetStrWidth(&u8g2, modeTxt), textHeight-3, modeTxt);
    2228:	10 91 37 08 	lds	r17, 0x0837	; 0x800837 <textHeight>
    222c:	13 50       	subi	r17, 0x03	; 3
    222e:	be 01       	movw	r22, r28
    2230:	6f 5f       	subi	r22, 0xFF	; 255
    2232:	7f 4f       	sbci	r23, 0xFF	; 255
    2234:	82 ed       	ldi	r24, 0xD2	; 210
    2236:	97 e0       	ldi	r25, 0x07	; 7
    2238:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    223c:	60 e8       	ldi	r22, 0x80	; 128
    223e:	68 1b       	sub	r22, r24
    2240:	9e 01       	movw	r18, r28
    2242:	2f 5f       	subi	r18, 0xFF	; 255
    2244:	3f 4f       	sbci	r19, 0xFF	; 255
    2246:	41 2f       	mov	r20, r17
    2248:	82 ed       	ldi	r24, 0xD2	; 210
    224a:	97 e0       	ldi	r25, 0x07	; 7
    224c:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	
	
	//Time
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    2250:	67 e7       	ldi	r22, 0x77	; 119
    2252:	78 e0       	ldi	r23, 0x08	; 8
    2254:	82 ed       	ldi	r24, 0xD2	; 210
    2256:	97 e0       	ldi	r25, 0x07	; 7
    2258:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <u8g2_SetFont>
	static char timeTxt[7] = {0,0,0,0,0,0,0};
	getTimeToChar(timeTxt, 0);
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	8a e7       	ldi	r24, 0x7A	; 122
    2262:	93 e0       	ldi	r25, 0x03	; 3
    2264:	0e 94 aa 0b 	call	0x1754	; 0x1754 <getTimeToChar>
	
	u8g2_DrawStr(&u8g2, 0, textHeight-3, timeTxt);
    2268:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    226c:	43 50       	subi	r20, 0x03	; 3
    226e:	2a e7       	ldi	r18, 0x7A	; 122
    2270:	33 e0       	ldi	r19, 0x03	; 3
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	82 ed       	ldi	r24, 0xD2	; 210
    2276:	97 e0       	ldi	r25, 0x07	; 7
    2278:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	
	
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);//reset font to the main font.
    227c:	66 e9       	ldi	r22, 0x96	; 150
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	82 ed       	ldi	r24, 0xD2	; 210
    2282:	97 e0       	ldi	r25, 0x07	; 7
    2284:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <u8g2_SetFont>
}
    2288:	28 96       	adiw	r28, 0x08	; 8
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	08 95       	ret

000022a2 <Page_2>:

void Page_2(void){
    22a2:	7f 92       	push	r7
    22a4:	8f 92       	push	r8
    22a6:	9f 92       	push	r9
    22a8:	af 92       	push	r10
    22aa:	bf 92       	push	r11
    22ac:	cf 92       	push	r12
    22ae:	df 92       	push	r13
    22b0:	ef 92       	push	r14
    22b2:	ff 92       	push	r15
    22b4:	0f 93       	push	r16
    22b6:	1f 93       	push	r17
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	a8 97       	sbiw	r28, 0x28	; 40
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
	#define Lines 4
	#define digAmount 8
	
	#define startLine_Data 3
	selectEnable = 0;
    22cc:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <selectEnable>
		"Direction:> ",
		"Distance:> ",
		"runTime:> "
	};
	
	int maxPrefixWidth = u8g2_GetStrWidth(&u8g2, text2[1]);
    22d0:	68 eb       	ldi	r22, 0xB8	; 184
    22d2:	71 e0       	ldi	r23, 0x01	; 1
    22d4:	82 ed       	ldi	r24, 0xD2	; 210
    22d6:	97 e0       	ldi	r25, 0x07	; 7
    22d8:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    22dc:	78 2e       	mov	r7, r24
	//placeholders for the data
	char d1[digAmount];
	char d2[digAmount];
	char d3[digAmount];
	char d4[digAmount];
	char *Data[Lines] = { d1, d2, d3, d4};
    22de:	be 01       	movw	r22, r28
    22e0:	6f 5f       	subi	r22, 0xFF	; 255
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	7a a3       	std	Y+34, r23	; 0x22
    22e6:	69 a3       	std	Y+33, r22	; 0x21
    22e8:	6e 01       	movw	r12, r28
    22ea:	89 e0       	ldi	r24, 0x09	; 9
    22ec:	c8 0e       	add	r12, r24
    22ee:	d1 1c       	adc	r13, r1
    22f0:	dc a2       	std	Y+36, r13	; 0x24
    22f2:	cb a2       	std	Y+35, r12	; 0x23
    22f4:	7e 01       	movw	r14, r28
    22f6:	e1 e1       	ldi	r30, 0x11	; 17
    22f8:	ee 0e       	add	r14, r30
    22fa:	f1 1c       	adc	r15, r1
    22fc:	fe a2       	std	Y+38, r15	; 0x26
    22fe:	ed a2       	std	Y+37, r14	; 0x25
    2300:	8e 01       	movw	r16, r28
    2302:	07 5e       	subi	r16, 0xE7	; 231
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	18 a7       	std	Y+40, r17	; 0x28
    2308:	0f a3       	std	Y+39, r16	; 0x27
		
	itoa(*speedHold, Data[0], 10);
    230a:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <speedHold>
    230e:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <speedHold+0x1>
    2312:	4a e0       	ldi	r20, 0x0A	; 10
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	itoa(*directionHold, Data[1], 10);
    231c:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <directionHold>
    2320:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <directionHold+0x1>
    2324:	4a e0       	ldi	r20, 0x0A	; 10
    2326:	b6 01       	movw	r22, r12
    2328:	80 81       	ld	r24, Z
    232a:	91 81       	ldd	r25, Z+1	; 0x01
    232c:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	itoa(*distanceHold, Data[2], 10);
    2330:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <distanceHold>
    2334:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <distanceHold+0x1>
    2338:	4a e0       	ldi	r20, 0x0A	; 10
    233a:	b7 01       	movw	r22, r14
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	
	//little bit of code to make a typical digital watch look for the time String
	getTimeToChar(Data[3], 1);
    2344:	61 e0       	ldi	r22, 0x01	; 1
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	c8 01       	movw	r24, r16
    234a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <getTimeToChar>
	
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    234e:	e0 91 b2 07 	lds	r30, 0x07B2	; 0x8007b2 <currentChoice+0x1>
    2352:	ee 0f       	add	r30, r30
    2354:	ff 0b       	sbc	r31, r31
    2356:	eb 5d       	subi	r30, 0xDB	; 219
    2358:	fe 4f       	sbci	r31, 0xFE	; 254
    235a:	20 81       	ld	r18, Z
    235c:	31 81       	ldd	r19, Z+1	; 0x01
    235e:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    2362:	47 5f       	subi	r20, 0xF7	; 247
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	82 ed       	ldi	r24, 0xD2	; 210
    2368:	97 e0       	ldi	r25, 0x07	; 7
    236a:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
    236e:	5e 01       	movw	r10, r28
    2370:	f1 e2       	ldi	r31, 0x21	; 33
    2372:	af 0e       	add	r10, r31
    2374:	b1 1c       	adc	r11, r1
    2376:	0f 2e       	mov	r0, r31
    2378:	fb e5       	ldi	r31, 0x5B	; 91
    237a:	cf 2e       	mov	r12, r31
    237c:	f2 e0       	ldi	r31, 0x02	; 2
    237e:	df 2e       	mov	r13, r31
    2380:	f0 2d       	mov	r31, r0
    2382:	0f 2e       	mov	r0, r31
    2384:	f3 e5       	ldi	r31, 0x53	; 83
    2386:	ef 2e       	mov	r14, r31
    2388:	f2 e0       	ldi	r31, 0x02	; 2
    238a:	ff 2e       	mov	r15, r31
    238c:	f0 2d       	mov	r31, r0
    238e:	13 e0       	ldi	r17, 0x03	; 3

	for (int i = 0; i < Lines; i++)
	{
		int dataWidth = u8g2_GetStrWidth(&u8g2, Data[i]);
    2390:	f5 01       	movw	r30, r10
    2392:	81 90       	ld	r8, Z+
    2394:	91 90       	ld	r9, Z+
    2396:	5f 01       	movw	r10, r30
    2398:	b4 01       	movw	r22, r8
    239a:	82 ed       	ldi	r24, 0xD2	; 210
    239c:	97 e0       	ldi	r25, 0x07	; 7
    239e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    23a2:	08 2f       	mov	r16, r24
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
    23a4:	f6 01       	movw	r30, r12
    23a6:	21 91       	ld	r18, Z+
    23a8:	31 91       	ld	r19, Z+
    23aa:	6f 01       	movw	r12, r30
    23ac:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    23b0:	14 9f       	mul	r17, r20
    23b2:	40 2d       	mov	r20, r0
    23b4:	11 24       	eor	r1, r1
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	82 ed       	ldi	r24, 0xD2	; 210
    23ba:	97 e0       	ldi	r25, 0x07	; 7
    23bc:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
    23c0:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    23c4:	14 9f       	mul	r17, r20
    23c6:	40 2d       	mov	r20, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	94 01       	movw	r18, r8
    23cc:	67 2d       	mov	r22, r7
    23ce:	82 ed       	ldi	r24, 0xD2	; 210
    23d0:	97 e0       	ldi	r25, 0x07	; 7
    23d2:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
    23d6:	f7 01       	movw	r30, r14
    23d8:	21 91       	ld	r18, Z+
    23da:	31 91       	ld	r19, Z+
    23dc:	7f 01       	movw	r14, r30
    23de:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    23e2:	14 9f       	mul	r17, r20
    23e4:	40 2d       	mov	r20, r0
    23e6:	11 24       	eor	r1, r1
    23e8:	60 91 b0 07 	lds	r22, 0x07B0	; 0x8007b0 <maxCharWidth>
    23ec:	66 95       	lsr	r22
    23ee:	67 0d       	add	r22, r7
    23f0:	60 0f       	add	r22, r16
    23f2:	82 ed       	ldi	r24, 0xD2	; 210
    23f4:	97 e0       	ldi	r25, 0x07	; 7
    23f6:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
    23fa:	1f 5f       	subi	r17, 0xFF	; 255
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);

	for (int i = 0; i < Lines; i++)
    23fc:	17 30       	cpi	r17, 0x07	; 7
    23fe:	41 f6       	brne	.-112    	; 0x2390 <Page_2+0xee>
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
	}
	
	reDrawRequired = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    2406:	a8 96       	adiw	r28, 0x28	; 40
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
    241a:	ff 90       	pop	r15
    241c:	ef 90       	pop	r14
    241e:	df 90       	pop	r13
    2420:	cf 90       	pop	r12
    2422:	bf 90       	pop	r11
    2424:	af 90       	pop	r10
    2426:	9f 90       	pop	r9
    2428:	8f 90       	pop	r8
    242a:	7f 90       	pop	r7
    242c:	08 95       	ret

0000242e <Page_3>:

void Page_3(void){
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	28 97       	sbiw	r28, 0x08	; 8
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 0;
    2442:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <selectEnable>
	
	char angleHolder[8];
	
	itoa(*angleHold, angleHolder, 10);
    2446:	e0 91 59 08 	lds	r30, 0x0859	; 0x800859 <angleHold>
    244a:	f0 91 5a 08 	lds	r31, 0x085A	; 0x80085a <angleHold+0x1>
    244e:	4a e0       	ldi	r20, 0x0A	; 10
    2450:	be 01       	movw	r22, r28
    2452:	6f 5f       	subi	r22, 0xFF	; 255
    2454:	7f 4f       	sbci	r23, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);//the titles needs to be the same as the titles of the choices in the menu
    245e:	e0 91 b2 07 	lds	r30, 0x07B2	; 0x8007b2 <currentChoice+0x1>
    2462:	ee 0f       	add	r30, r30
    2464:	ff 0b       	sbc	r31, r31
    2466:	eb 5d       	subi	r30, 0xDB	; 219
    2468:	fe 4f       	sbci	r31, 0xFE	; 254
    246a:	20 81       	ld	r18, Z
    246c:	31 81       	ldd	r19, Z+1	; 0x01
    246e:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    2472:	47 5f       	subi	r20, 0xF7	; 247
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	82 ed       	ldi	r24, 0xD2	; 210
    2478:	97 e0       	ldi	r25, 0x07	; 7
    247a:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, textHeight*2 + TopMargin, angleHolder);
    247e:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    2482:	44 0f       	add	r20, r20
    2484:	47 5f       	subi	r20, 0xF7	; 247
    2486:	9e 01       	movw	r18, r28
    2488:	2f 5f       	subi	r18, 0xFF	; 255
    248a:	3f 4f       	sbci	r19, 0xFF	; 255
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	82 ed       	ldi	r24, 0xD2	; 210
    2490:	97 e0       	ldi	r25, 0x07	; 7
    2492:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
	reDrawRequired = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    249c:	28 96       	adiw	r28, 0x08	; 8
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <Page_4>:

void Page_4(void){
	selectEnable = 0;
    24ae:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    24b2:	e0 91 b2 07 	lds	r30, 0x07B2	; 0x8007b2 <currentChoice+0x1>
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 0b       	sbc	r31, r31
    24ba:	eb 5d       	subi	r30, 0xDB	; 219
    24bc:	fe 4f       	sbci	r31, 0xFE	; 254
    24be:	20 81       	ld	r18, Z
    24c0:	31 81       	ldd	r19, Z+1	; 0x01
    24c2:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <textHeight>
    24c6:	47 5f       	subi	r20, 0xF7	; 247
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	82 ed       	ldi	r24, 0xD2	; 210
    24cc:	97 e0       	ldi	r25, 0x07	; 7
    24ce:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>

	reDrawRequired = 0;
    24d2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    24d6:	08 95       	ret

000024d8 <Page_5>:
}

void Page_5(void){//settings
    24d8:	2f 92       	push	r2
    24da:	3f 92       	push	r3
    24dc:	4f 92       	push	r4
    24de:	5f 92       	push	r5
    24e0:	6f 92       	push	r6
    24e2:	7f 92       	push	r7
    24e4:	8f 92       	push	r8
    24e6:	9f 92       	push	r9
    24e8:	af 92       	push	r10
    24ea:	bf 92       	push	r11
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <Page_5+0x26>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <Page_5+0x28>
    2500:	1f 92       	push	r1
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <selectEnable>
	#define selector "-> "
	

	int height = screenDiv;
	
	int x = selectorWidth;
    250c:	10 91 b0 07 	lds	r17, 0x07B0	; 0x8007b0 <maxCharWidth>
    2510:	81 2f       	mov	r24, r17
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 01       	movw	r18, r24
    2516:	22 0f       	add	r18, r18
    2518:	33 1f       	adc	r19, r19
    251a:	12 2f       	mov	r17, r18
    251c:	18 0f       	add	r17, r24
	int y;
	int yStat = (height/2)+3;
    251e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    2522:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    2526:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    252a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    252e:	0e 94 a9 23 	call	0x4752	; 0x4752 <__fixsfsi>
    2532:	3b 01       	movw	r6, r22
    2534:	77 23       	and	r23, r23
    2536:	1c f4       	brge	.+6      	; 0x253e <Page_5+0x66>
    2538:	2f ef       	ldi	r18, 0xFF	; 255
    253a:	62 1a       	sub	r6, r18
    253c:	72 0a       	sbc	r7, r18
    253e:	75 94       	asr	r7
    2540:	67 94       	ror	r6
    2542:	83 e0       	ldi	r24, 0x03	; 3
    2544:	68 0e       	add	r6, r24
    2546:	71 1c       	adc	r7, r1
	height = height - Margin;
	_Bool highlightChoice = 0;
	
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
    2548:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <currentPage>
    254c:	8a ef       	ldi	r24, 0xFA	; 250
    254e:	8e 0f       	add	r24, r30
    2550:	85 30       	cpi	r24, 0x05	; 5
    2552:	30 f5       	brcc	.+76     	; 0x25a0 <Page_5+0xc8>
		selectEnable = 0;
    2554:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <selectEnable>
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
    2558:	a0 91 b6 07 	lds	r26, 0x07B6	; 0x8007b6 <currentChoice+0x5>
    255c:	aa 0f       	add	r26, r26
    255e:	bb 0b       	sbc	r27, r27
    2560:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <settingVal>
    2564:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <settingVal+0x1>
    2568:	a8 0f       	add	r26, r24
    256a:	b9 1f       	adc	r27, r25
    256c:	0e 2e       	mov	r0, r30
    256e:	00 0c       	add	r0, r0
    2570:	ff 0b       	sbc	r31, r31
    2572:	ef 54       	subi	r30, 0x4F	; 79
    2574:	f8 4f       	sbci	r31, 0xF8	; 248
    2576:	20 81       	ld	r18, Z
    2578:	8d 91       	ld	r24, X+
    257a:	9c 91       	ld	r25, X
    257c:	11 97       	sbiw	r26, 0x01	; 1
    257e:	82 1b       	sub	r24, r18
    2580:	91 09       	sbc	r25, r1
    2582:	27 fd       	sbrc	r18, 7
    2584:	93 95       	inc	r25
    2586:	8d 93       	st	X+, r24
    2588:	9c 93       	st	X, r25
		currentChoice[currentPage] = 0;
    258a:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <currentPage>
    258e:	0e 2e       	mov	r0, r30
    2590:	00 0c       	add	r0, r0
    2592:	ff 0b       	sbc	r31, r31
    2594:	ef 54       	subi	r30, 0x4F	; 79
    2596:	f8 4f       	sbci	r31, 0xF8	; 248
    2598:	10 82       	st	Z, r1
		highlightChoice = 1;
    259a:	e1 e0       	ldi	r30, 0x01	; 1
    259c:	ed 83       	std	Y+5, r30	; 0x05
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <Page_5+0xca>
	
	int x = selectorWidth;
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	_Bool highlightChoice = 0;
    25a0:	1d 82       	std	Y+5, r1	; 0x05
    25a2:	0f 2e       	mov	r0, r31
    25a4:	fb e1       	ldi	r31, 0x1B	; 27
    25a6:	af 2e       	mov	r10, r31
    25a8:	f1 e0       	ldi	r31, 0x01	; 1
    25aa:	bf 2e       	mov	r11, r31
    25ac:	f0 2d       	mov	r31, r0
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
		selectEnable = 0;
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
    25ae:	81 2c       	mov	r8, r1
    25b0:	91 2c       	mov	r9, r1
	}
	
	for (int i = 0; i < settings; i++){
    25b2:	c1 2c       	mov	r12, r1
    25b4:	d1 2c       	mov	r13, r1
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;

		if(currentChoice[5] == i){
    25b6:	0f 2e       	mov	r0, r31
    25b8:	f1 eb       	ldi	r31, 0xB1	; 177
    25ba:	4f 2e       	mov	r4, r31
    25bc:	f7 e0       	ldi	r31, 0x07	; 7
    25be:	5f 2e       	mov	r5, r31
    25c0:	f0 2d       	mov	r31, r0
			u8g2_SetDrawColor(&u8g2, 1);
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
			if(highlightChoice){
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    25c2:	0f 2e       	mov	r0, r31
    25c4:	fe ef       	ldi	r31, 0xFE	; 254
    25c6:	3f 2e       	mov	r3, r31
    25c8:	f0 2d       	mov	r31, r0
    25ca:	31 0e       	add	r3, r17
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;
    25cc:	20 91 37 08 	lds	r18, 0x0837	; 0x800837 <textHeight>
    25d0:	2c 9d       	mul	r18, r12
    25d2:	c0 01       	movw	r24, r0
    25d4:	2d 9d       	mul	r18, r13
    25d6:	90 0d       	add	r25, r0
    25d8:	11 24       	eor	r1, r1
    25da:	7c 01       	movw	r14, r24
    25dc:	f9 e0       	ldi	r31, 0x09	; 9
    25de:	ef 0e       	add	r14, r31
    25e0:	f1 1c       	adc	r15, r1

		if(currentChoice[5] == i){
    25e2:	f2 01       	movw	r30, r4
    25e4:	85 81       	ldd	r24, Z+5	; 0x05
    25e6:	08 2e       	mov	r0, r24
    25e8:	00 0c       	add	r0, r0
    25ea:	99 0b       	sbc	r25, r25
    25ec:	8c 15       	cp	r24, r12
    25ee:	9d 05       	cpc	r25, r13
    25f0:	09 f0       	breq	.+2      	; 0x25f4 <Page_5+0x11c>
    25f2:	6c c0       	rjmp	.+216    	; 0x26cc <Page_5+0x1f4>
			
			u8g2_SetDrawColor(&u8g2, 1);
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	82 ed       	ldi	r24, 0xD2	; 210
    25f8:	97 e0       	ldi	r25, 0x07	; 7
    25fa:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
    25fe:	2e 2c       	mov	r2, r14
    2600:	26 0c       	add	r2, r6
    2602:	25 ec       	ldi	r18, 0xC5	; 197
    2604:	31 e0       	ldi	r19, 0x01	; 1
    2606:	42 2d       	mov	r20, r2
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	82 ed       	ldi	r24, 0xD2	; 210
    260c:	97 e0       	ldi	r25, 0x07	; 7
    260e:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
			if(highlightChoice){
    2612:	fd 81       	ldd	r31, Y+5	; 0x05
    2614:	ff 23       	and	r31, r31
    2616:	89 f1       	breq	.+98     	; 0x267a <Page_5+0x1a2>
				u8g2_SetDrawColor(&u8g2, 1);
    2618:	61 e0       	ldi	r22, 0x01	; 1
    261a:	82 ed       	ldi	r24, 0xD2	; 210
    261c:	97 e0       	ldi	r25, 0x07	; 7
    261e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    2622:	00 91 37 08 	lds	r16, 0x0837	; 0x800837 <textHeight>
    2626:	0f 5f       	subi	r16, 0xFF	; 255
    2628:	f5 01       	movw	r30, r10
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 ed       	ldi	r24, 0xD2	; 210
    2630:	97 e0       	ldi	r25, 0x07	; 7
    2632:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    2636:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <textHeight>
    263a:	42 2d       	mov	r20, r2
    263c:	49 1b       	sub	r20, r25
    263e:	4f 5f       	subi	r20, 0xFF	; 255
    2640:	68 94       	set
    2642:	ee 24       	eor	r14, r14
    2644:	e1 f8       	bld	r14, 1
    2646:	28 2f       	mov	r18, r24
    2648:	63 2d       	mov	r22, r3
    264a:	82 ed       	ldi	r24, 0xD2	; 210
    264c:	97 e0       	ldi	r25, 0x07	; 7
    264e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <u8g2_DrawRBox>
				u8g2_SetDrawColor(&u8g2, 0);
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	82 ed       	ldi	r24, 0xD2	; 210
    2656:	97 e0       	ldi	r25, 0x07	; 7
    2658:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    265c:	f5 01       	movw	r30, r10
    265e:	20 81       	ld	r18, Z
    2660:	31 81       	ldd	r19, Z+1	; 0x01
    2662:	42 2d       	mov	r20, r2
    2664:	61 2f       	mov	r22, r17
    2666:	82 ed       	ldi	r24, 0xD2	; 210
    2668:	97 e0       	ldi	r25, 0x07	; 7
    266a:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
				u8g2_SetDrawColor(&u8g2, 1);
    266e:	61 e0       	ldi	r22, 0x01	; 1
    2670:	82 ed       	ldi	r24, 0xD2	; 210
    2672:	97 e0       	ldi	r25, 0x07	; 7
    2674:	0e 94 a8 1c 	call	0x3950	; 0x3950 <u8g2_SetDrawColor>
    2678:	09 c0       	rjmp	.+18     	; 0x268c <Page_5+0x1b4>
				}else{
				
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    267a:	f5 01       	movw	r30, r10
    267c:	20 81       	ld	r18, Z
    267e:	31 81       	ldd	r19, Z+1	; 0x01
    2680:	42 2d       	mov	r20, r2
    2682:	61 2f       	mov	r22, r17
    2684:	82 ed       	ldi	r24, 0xD2	; 210
    2686:	97 e0       	ldi	r25, 0x07	; 7
    2688:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
			}
			
			
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    268c:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <settingVal>
    2690:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <settingVal+0x1>
    2694:	e8 0d       	add	r30, r8
    2696:	f9 1d       	adc	r31, r9
    2698:	4a e0       	ldi	r20, 0x0A	; 10
    269a:	be 01       	movw	r22, r28
    269c:	6f 5f       	subi	r22, 0xFF	; 255
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    26a8:	f5 01       	movw	r30, r10
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 ed       	ldi	r24, 0xD2	; 210
    26b0:	97 e0       	ldi	r25, 0x07	; 7
    26b2:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    26b6:	68 2f       	mov	r22, r24
    26b8:	61 0f       	add	r22, r17
    26ba:	9e 01       	movw	r18, r28
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	42 2d       	mov	r20, r2
    26c2:	82 ed       	ldi	r24, 0xD2	; 210
    26c4:	97 e0       	ldi	r25, 0x07	; 7
    26c6:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
    26ca:	2a c0       	rjmp	.+84     	; 0x2720 <Page_5+0x248>
			}else{
			u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    26cc:	0e 2d       	mov	r16, r14
    26ce:	06 0d       	add	r16, r6
    26d0:	f5 01       	movw	r30, r10
    26d2:	20 81       	ld	r18, Z
    26d4:	31 81       	ldd	r19, Z+1	; 0x01
    26d6:	40 2f       	mov	r20, r16
    26d8:	61 2f       	mov	r22, r17
    26da:	82 ed       	ldi	r24, 0xD2	; 210
    26dc:	97 e0       	ldi	r25, 0x07	; 7
    26de:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    26e2:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <settingVal>
    26e6:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <settingVal+0x1>
    26ea:	e8 0d       	add	r30, r8
    26ec:	f9 1d       	adc	r31, r9
    26ee:	4a e0       	ldi	r20, 0x0A	; 10
    26f0:	be 01       	movw	r22, r28
    26f2:	6f 5f       	subi	r22, 0xFF	; 255
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    26fe:	f5 01       	movw	r30, r10
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 ed       	ldi	r24, 0xD2	; 210
    2706:	97 e0       	ldi	r25, 0x07	; 7
    2708:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <u8g2_GetStrWidth>
    270c:	61 2f       	mov	r22, r17
    270e:	68 0f       	add	r22, r24
    2710:	9e 01       	movw	r18, r28
    2712:	2f 5f       	subi	r18, 0xFF	; 255
    2714:	3f 4f       	sbci	r19, 0xFF	; 255
    2716:	40 2f       	mov	r20, r16
    2718:	82 ed       	ldi	r24, 0xD2	; 210
    271a:	97 e0       	ldi	r25, 0x07	; 7
    271c:	0e 94 96 1b 	call	0x372c	; 0x372c <u8g2_DrawStr>
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
    2720:	ff ef       	ldi	r31, 0xFF	; 255
    2722:	cf 1a       	sub	r12, r31
    2724:	df 0a       	sbc	r13, r31
    2726:	22 e0       	ldi	r18, 0x02	; 2
    2728:	82 0e       	add	r8, r18
    272a:	91 1c       	adc	r9, r1
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	a8 0e       	add	r10, r24
    2730:	b1 1c       	adc	r11, r1
    2732:	e5 e0       	ldi	r30, 0x05	; 5
    2734:	ce 16       	cp	r12, r30
    2736:	d1 04       	cpc	r13, r1
    2738:	09 f0       	breq	.+2      	; 0x273c <Page_5+0x264>
    273a:	48 cf       	rjmp	.-368    	; 0x25cc <Page_5+0xf4>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
		}
	}


	reDrawRequired = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	ff 90       	pop	r15
    2756:	ef 90       	pop	r14
    2758:	df 90       	pop	r13
    275a:	cf 90       	pop	r12
    275c:	bf 90       	pop	r11
    275e:	af 90       	pop	r10
    2760:	9f 90       	pop	r9
    2762:	8f 90       	pop	r8
    2764:	7f 90       	pop	r7
    2766:	6f 90       	pop	r6
    2768:	5f 90       	pop	r5
    276a:	4f 90       	pop	r4
    276c:	3f 90       	pop	r3
    276e:	2f 90       	pop	r2
    2770:	08 95       	ret

00002772 <draw>:
		}
	}
}

void draw(void){
	switch(currentPage){
    2772:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <currentPage>
    2776:	82 30       	cpi	r24, 0x02	; 2
    2778:	e9 f0       	breq	.+58     	; 0x27b4 <draw+0x42>
    277a:	2c f4       	brge	.+10     	; 0x2786 <draw+0x14>
    277c:	88 23       	and	r24, r24
    277e:	41 f0       	breq	.+16     	; 0x2790 <draw+0x1e>
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	49 f0       	breq	.+18     	; 0x2796 <draw+0x24>
    2784:	26 c0       	rjmp	.+76     	; 0x27d2 <draw+0x60>
    2786:	83 30       	cpi	r24, 0x03	; 3
    2788:	d1 f0       	breq	.+52     	; 0x27be <draw+0x4c>
    278a:	84 30       	cpi	r24, 0x04	; 4
    278c:	e9 f0       	breq	.+58     	; 0x27c8 <draw+0x56>
    278e:	21 c0       	rjmp	.+66     	; 0x27d2 <draw+0x60>
		case 0:// page 0 start
		StartPage();
    2790:	0e 94 1c 10 	call	0x2038	; 0x2038 <StartPage>
		break;//end page0
    2794:	08 95       	ret
		
		case 1://page 1 menu
		ScreenOverlay();//remove this if you don't want the overlay
    2796:	0e 94 8c 10 	call	0x2118	; 0x2118 <ScreenOverlay>
		
		switch (MenuAnim)//for switching between menu animations
    279a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MenuAnim>
    279e:	88 23       	and	r24, r24
    27a0:	19 f0       	breq	.+6      	; 0x27a8 <draw+0x36>
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	21 f0       	breq	.+8      	; 0x27ae <draw+0x3c>
    27a6:	08 95       	ret
		{
			case 0://animation 0
			MenuStyle0();
    27a8:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <MenuStyle0>
			break;//end animation 0
    27ac:	08 95       	ret
			
			case 1://animation 1
			MenuStyle1();
    27ae:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <MenuStyle1>
			break;//end animation 1
    27b2:	08 95       	ret
		}
		break;//end page 1
		
		case 2:
		ScreenOverlay();
    27b4:	0e 94 8c 10 	call	0x2118	; 0x2118 <ScreenOverlay>
		Page_2();
    27b8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <Page_2>
		break;
    27bc:	08 95       	ret

		case 3:
		ScreenOverlay();
    27be:	0e 94 8c 10 	call	0x2118	; 0x2118 <ScreenOverlay>
		Page_3();
    27c2:	0e 94 17 12 	call	0x242e	; 0x242e <Page_3>
		break;
    27c6:	08 95       	ret
		
		case 4:
		ScreenOverlay();
    27c8:	0e 94 8c 10 	call	0x2118	; 0x2118 <ScreenOverlay>
		Page_4();
    27cc:	0e 94 57 12 	call	0x24ae	; 0x24ae <Page_4>
		break;
    27d0:	08 95       	ret
		
		default:
		if (currentPage >= SETTINGPAGE && currentPage <= SETTINGPAGE + settings){
    27d2:	85 50       	subi	r24, 0x05	; 5
    27d4:	86 30       	cpi	r24, 0x06	; 6
    27d6:	28 f4       	brcc	.+10     	; 0x27e2 <draw+0x70>
			ScreenOverlay();
    27d8:	0e 94 8c 10 	call	0x2118	; 0x2118 <ScreenOverlay>
			Page_5();
    27dc:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <Page_5>
    27e0:	08 95       	ret
			}else{
			nopage();
    27e2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <nopage>
    27e6:	08 95       	ret

000027e8 <screenRoutine>:

	return ADCval;
}
//--------------------------------------
void screenRoutine(void){
	updateButtons();
    27e8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <updateButtons>
	updateBatterySens();
    27ec:	0e 94 2b 0c 	call	0x1856	; 0x1856 <updateBatterySens>
	if (reDrawRequired || reDrawRequiredTime)
    27f0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <reDrawRequired>
    27f4:	81 11       	cpse	r24, r1
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <screenRoutine+0x18>
    27f8:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <reDrawRequiredTime>
    27fc:	88 23       	and	r24, r24
    27fe:	79 f0       	breq	.+30     	; 0x281e <screenRoutine+0x36>
	{
		reDrawRequired = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		u8g2_ClearBuffer(&u8g2);
    2806:	82 ed       	ldi	r24, 0xD2	; 210
    2808:	97 e0       	ldi	r25, 0x07	; 7
    280a:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <u8g2_ClearBuffer>
		draw();
    280e:	0e 94 b9 13 	call	0x2772	; 0x2772 <draw>
		u8g2_SendBuffer(&u8g2);
    2812:	82 ed       	ldi	r24, 0xD2	; 210
    2814:	97 e0       	ldi	r25, 0x07	; 7
    2816:	0e 94 42 16 	call	0x2c84	; 0x2c84 <u8g2_SendBuffer>
		reDrawRequiredTime = 0;
    281a:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <reDrawRequiredTime>
    281e:	08 95       	ret

00002820 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2820:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2824:	88 e4       	ldi	r24, 0x48	; 72
    2826:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    282a:	08 95       	ret

0000282c <i2c_start_wait>:
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	ec eb       	ldi	r30, 0xBC	; 188
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	44 ea       	ldi	r20, 0xA4	; 164
    2836:	a9 eb       	ldi	r26, 0xB9	; 185
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	cb eb       	ldi	r28, 0xBB	; 187
    283c:	d0 e0       	ldi	r29, 0x00	; 0
    283e:	54 e8       	ldi	r21, 0x84	; 132
    2840:	64 e9       	ldi	r22, 0x94	; 148
    2842:	40 83       	st	Z, r20
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	90 81       	ld	r25, Z
    284a:	99 23       	and	r25, r25
    284c:	34 f0       	brlt	.+12     	; 0x285a <i2c_start_wait+0x2e>
    284e:	2f 5f       	subi	r18, 0xFF	; 255
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	21 15       	cp	r18, r1
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	39 07       	cpc	r19, r25
    2858:	b9 f7       	brne	.-18     	; 0x2848 <i2c_start_wait+0x1c>
    285a:	9c 91       	ld	r25, X
    285c:	98 7f       	andi	r25, 0xF8	; 248
    285e:	98 30       	cpi	r25, 0x08	; 8
    2860:	11 f0       	breq	.+4      	; 0x2866 <i2c_start_wait+0x3a>
    2862:	90 31       	cpi	r25, 0x10	; 16
    2864:	71 f7       	brne	.-36     	; 0x2842 <i2c_start_wait+0x16>
    2866:	88 83       	st	Y, r24
    2868:	50 83       	st	Z, r21
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	90 81       	ld	r25, Z
    2870:	99 23       	and	r25, r25
    2872:	34 f0       	brlt	.+12     	; 0x2880 <i2c_start_wait+0x54>
    2874:	2f 5f       	subi	r18, 0xFF	; 255
    2876:	3f 4f       	sbci	r19, 0xFF	; 255
    2878:	21 15       	cp	r18, r1
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	39 07       	cpc	r19, r25
    287e:	b9 f7       	brne	.-18     	; 0x286e <i2c_start_wait+0x42>
    2880:	9c 91       	ld	r25, X
    2882:	98 7f       	andi	r25, 0xF8	; 248
    2884:	90 32       	cpi	r25, 0x20	; 32
    2886:	11 f0       	breq	.+4      	; 0x288c <i2c_start_wait+0x60>
    2888:	98 35       	cpi	r25, 0x58	; 88
    288a:	69 f4       	brne	.+26     	; 0x28a6 <i2c_start_wait+0x7a>
    288c:	60 83       	st	Z, r22
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	90 81       	ld	r25, Z
    2894:	94 ff       	sbrs	r25, 4
    2896:	d5 cf       	rjmp	.-86     	; 0x2842 <i2c_start_wait+0x16>
    2898:	2f 5f       	subi	r18, 0xFF	; 255
    289a:	3f 4f       	sbci	r19, 0xFF	; 255
    289c:	21 15       	cp	r18, r1
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	39 07       	cpc	r19, r25
    28a2:	b9 f7       	brne	.-18     	; 0x2892 <i2c_start_wait+0x66>
    28a4:	ce cf       	rjmp	.-100    	; 0x2842 <i2c_start_wait+0x16>
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    28ac:	84 e9       	ldi	r24, 0x94	; 148
    28ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	ec eb       	ldi	r30, 0xBC	; 188
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	20 81       	ld	r18, Z
    28bc:	24 ff       	sbrs	r18, 4
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <i2c_stop+0x1e>
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	81 15       	cp	r24, r1
    28c4:	21 e0       	ldi	r18, 0x01	; 1
    28c6:	92 07       	cpc	r25, r18
    28c8:	c1 f7       	brne	.-16     	; 0x28ba <i2c_stop+0xe>
    28ca:	08 95       	ret

000028cc <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    28cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
    28d0:	84 e8       	ldi	r24, 0x84	; 132
    28d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    28d6:	8f ef       	ldi	r24, 0xFF	; 255
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    28de:	ec eb       	ldi	r30, 0xBC	; 188
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	20 81       	ld	r18, Z
    28e4:	22 23       	and	r18, r18
    28e6:	2c f0       	brlt	.+10     	; 0x28f2 <i2c_write+0x26>
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	a1 09       	sbc	r26, r1
    28ec:	b1 09       	sbc	r27, r1
    28ee:	c8 f7       	brcc	.-14     	; 0x28e2 <i2c_write+0x16>
    28f0:	04 c0       	rjmp	.+8      	; 0x28fa <i2c_write+0x2e>
	if(i2c_timer == 0)
    28f2:	89 2b       	or	r24, r25
    28f4:	8a 2b       	or	r24, r26
    28f6:	8b 2b       	or	r24, r27
    28f8:	41 f0       	breq	.+16     	; 0x290a <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    28fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    28fe:	98 7f       	andi	r25, 0xF8	; 248
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	98 32       	cpi	r25, 0x28	; 40
    2904:	19 f4       	brne	.+6      	; 0x290c <i2c_write+0x40>
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	08 95       	ret
    290a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    290c:	08 95       	ret

0000290e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	7c 01       	movw	r14, r24
    291e:	16 2f       	mov	r17, r22
    2920:	c4 2f       	mov	r28, r20
    2922:	d2 2e       	mov	r13, r18
    2924:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2926:	04 2f       	mov	r16, r20
    2928:	0d 0f       	add	r16, r29
    292a:	26 2f       	mov	r18, r22
    292c:	2d 0d       	add	r18, r13
    292e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    2932:	88 23       	and	r24, r24
    2934:	61 f0       	breq	.+24     	; 0x294e <u8g2_DrawBox+0x40>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    2936:	dd 23       	and	r29, r29
    2938:	51 f0       	breq	.+20     	; 0x294e <u8g2_DrawBox+0x40>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    293a:	00 e0       	ldi	r16, 0x00	; 0
    293c:	2d 2d       	mov	r18, r13
    293e:	4c 2f       	mov	r20, r28
    2940:	61 2f       	mov	r22, r17
    2942:	c7 01       	movw	r24, r14
    2944:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
    y++;    
    2948:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
    294a:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    294c:	b1 f7       	brne	.-20     	; 0x293a <u8g2_DrawBox+0x2c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	1f 91       	pop	r17
    2954:	0f 91       	pop	r16
    2956:	ff 90       	pop	r15
    2958:	ef 90       	pop	r14
    295a:	df 90       	pop	r13
    295c:	08 95       	ret

0000295e <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    295e:	cf 92       	push	r12
    2960:	df 92       	push	r13
    2962:	ef 92       	push	r14
    2964:	ff 92       	push	r15
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	7c 01       	movw	r14, r24
    2970:	d6 2f       	mov	r29, r22
    2972:	c4 2f       	mov	r28, r20
    2974:	d2 2e       	mov	r13, r18
    2976:	10 2f       	mov	r17, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2978:	c6 2e       	mov	r12, r22
    297a:	c2 0e       	add	r12, r18
    297c:	04 2f       	mov	r16, r20
    297e:	01 0f       	add	r16, r17
    2980:	2c 2d       	mov	r18, r12
    2982:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    2986:	88 23       	and	r24, r24
    2988:	19 f1       	breq	.+70     	; 0x29d0 <u8g2_DrawFrame+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    298a:	00 e0       	ldi	r16, 0x00	; 0
    298c:	2d 2d       	mov	r18, r13
    298e:	4c 2f       	mov	r20, r28
    2990:	6d 2f       	mov	r22, r29
    2992:	c7 01       	movw	r24, r14
    2994:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
  if (h >= 2) {
    2998:	12 30       	cpi	r17, 0x02	; 2
    299a:	d0 f0       	brcs	.+52     	; 0x29d0 <u8g2_DrawFrame+0x72>
    h-=2;
    299c:	12 50       	subi	r17, 0x02	; 2
    y++;
    299e:	cf 5f       	subi	r28, 0xFF	; 255
    if (h > 0) {
    29a0:	11 23       	and	r17, r17
    29a2:	79 f0       	breq	.+30     	; 0x29c2 <u8g2_DrawFrame+0x64>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    29a4:	01 e0       	ldi	r16, 0x01	; 1
    29a6:	21 2f       	mov	r18, r17
    29a8:	4c 2f       	mov	r20, r28
    29aa:	6d 2f       	mov	r22, r29
    29ac:	c7 01       	movw	r24, r14
    29ae:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    29b2:	6f ef       	ldi	r22, 0xFF	; 255
    29b4:	6c 0d       	add	r22, r12
    29b6:	21 2f       	mov	r18, r17
    29b8:	4c 2f       	mov	r20, r28
    29ba:	c7 01       	movw	r24, r14
    29bc:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
      y+=h;
    29c0:	c1 0f       	add	r28, r17
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    29c2:	00 e0       	ldi	r16, 0x00	; 0
    29c4:	2d 2d       	mov	r18, r13
    29c6:	4c 2f       	mov	r20, r28
    29c8:	6d 2f       	mov	r22, r29
    29ca:	c7 01       	movw	r24, r14
    29cc:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
  }
}
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	cf 90       	pop	r12
    29e0:	08 95       	ret

000029e2 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    29e2:	7f 92       	push	r7
    29e4:	8f 92       	push	r8
    29e6:	9f 92       	push	r9
    29e8:	af 92       	push	r10
    29ea:	bf 92       	push	r11
    29ec:	cf 92       	push	r12
    29ee:	df 92       	push	r13
    29f0:	ef 92       	push	r14
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	6c 01       	movw	r12, r24
    29fe:	16 2f       	mov	r17, r22
    2a00:	f4 2e       	mov	r15, r20
    2a02:	b2 2e       	mov	r11, r18
    2a04:	c0 2f       	mov	r28, r16
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2a06:	a4 2e       	mov	r10, r20
    2a08:	a0 0e       	add	r10, r16
    2a0a:	d6 2f       	mov	r29, r22
    2a0c:	d2 0f       	add	r29, r18
    2a0e:	0a 2d       	mov	r16, r10
    2a10:	2d 2f       	mov	r18, r29
    2a12:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    2a16:	88 23       	and	r24, r24
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <u8g2_DrawRBox+0x3a>
    2a1a:	49 c0       	rjmp	.+146    	; 0x2aae <u8g2_DrawRBox+0xcc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    2a1c:	81 2e       	mov	r8, r17
    2a1e:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    2a20:	9f 2c       	mov	r9, r15
    2a22:	9e 0c       	add	r9, r14
    2a24:	8e 2d       	mov	r24, r14
    2a26:	80 95       	com	r24
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
    2a28:	d8 0f       	add	r29, r24
  
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;
    2a2a:	a8 0e       	add	r10, r24

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    2a2c:	02 e0       	ldi	r16, 0x02	; 2
    2a2e:	2e 2d       	mov	r18, r14
    2a30:	49 2d       	mov	r20, r9
    2a32:	68 2d       	mov	r22, r8
    2a34:	c6 01       	movw	r24, r12
    2a36:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    2a3a:	01 e0       	ldi	r16, 0x01	; 1
    2a3c:	2e 2d       	mov	r18, r14
    2a3e:	49 2d       	mov	r20, r9
    2a40:	6d 2f       	mov	r22, r29
    2a42:	c6 01       	movw	r24, r12
    2a44:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    2a48:	04 e0       	ldi	r16, 0x04	; 4
    2a4a:	2e 2d       	mov	r18, r14
    2a4c:	4a 2d       	mov	r20, r10
    2a4e:	68 2d       	mov	r22, r8
    2a50:	c6 01       	movw	r24, r12
    2a52:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    2a56:	08 e0       	ldi	r16, 0x08	; 8
    2a58:	2e 2d       	mov	r18, r14
    2a5a:	4a 2d       	mov	r20, r10
    2a5c:	6d 2f       	mov	r22, r29
    2a5e:	c6 01       	movw	r24, r12
    2a60:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    2a64:	2b 2d       	mov	r18, r11
    2a66:	2e 19       	sub	r18, r14
    ww -= r;
    2a68:	2e 19       	sub	r18, r14
    xl++;
    yu++;
    
    if ( ww >= 3 )
    2a6a:	23 30       	cpi	r18, 0x03	; 3
    2a6c:	98 f0       	brcs	.+38     	; 0x2a94 <u8g2_DrawRBox+0xb2>
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
    2a6e:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    2a70:	de ef       	ldi	r29, 0xFE	; 254
    2a72:	d2 0f       	add	r29, r18
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
    2a74:	77 24       	eor	r7, r7
    2a76:	73 94       	inc	r7
    2a78:	7e 0c       	add	r7, r14
    2a7a:	07 2d       	mov	r16, r7
    2a7c:	2d 2f       	mov	r18, r29
    2a7e:	4f 2d       	mov	r20, r15
    2a80:	68 2d       	mov	r22, r8
    2a82:	c6 01       	movw	r24, r12
    2a84:	0e 94 87 14 	call	0x290e	; 0x290e <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
    2a88:	2d 2f       	mov	r18, r29
    2a8a:	4a 2d       	mov	r20, r10
    2a8c:	68 2d       	mov	r22, r8
    2a8e:	c6 01       	movw	r24, r12
    2a90:	0e 94 87 14 	call	0x290e	; 0x290e <u8g2_DrawBox>
    }
    
    hh = h;
    hh -= r;
    2a94:	ce 19       	sub	r28, r14
    hh -= r;
    2a96:	ce 19       	sub	r28, r14
    //h--;
    if ( hh >= 3 )
    2a98:	c3 30       	cpi	r28, 0x03	; 3
    2a9a:	48 f0       	brcs	.+18     	; 0x2aae <u8g2_DrawRBox+0xcc>
    {
      hh -= 2;
      u8g2_DrawBox(u8g2, x, yu, w, hh);
    2a9c:	0e ef       	ldi	r16, 0xFE	; 254
    2a9e:	0c 0f       	add	r16, r28
    2aa0:	41 e0       	ldi	r20, 0x01	; 1
    2aa2:	49 0d       	add	r20, r9
    2aa4:	2b 2d       	mov	r18, r11
    2aa6:	61 2f       	mov	r22, r17
    2aa8:	c6 01       	movw	r24, r12
    2aaa:	0e 94 87 14 	call	0x290e	; 0x290e <u8g2_DrawBox>
    }
  }
}
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	df 90       	pop	r13
    2abc:	cf 90       	pop	r12
    2abe:	bf 90       	pop	r11
    2ac0:	af 90       	pop	r10
    2ac2:	9f 90       	pop	r9
    2ac4:	8f 90       	pop	r8
    2ac6:	7f 90       	pop	r7
    2ac8:	08 95       	ret

00002aca <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    2aca:	8f 92       	push	r8
    2acc:	9f 92       	push	r9
    2ace:	af 92       	push	r10
    2ad0:	bf 92       	push	r11
    2ad2:	cf 92       	push	r12
    2ad4:	df 92       	push	r13
    2ad6:	ef 92       	push	r14
    2ad8:	ff 92       	push	r15
    2ada:	0f 93       	push	r16
    2adc:	1f 93       	push	r17
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	ec 01       	movw	r28, r24
    2ae4:	16 2f       	mov	r17, r22
    2ae6:	f4 2e       	mov	r15, r20
    2ae8:	c2 2e       	mov	r12, r18
    2aea:	b0 2e       	mov	r11, r16
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2aec:	a4 2e       	mov	r10, r20
    2aee:	a0 0e       	add	r10, r16
    2af0:	d6 2e       	mov	r13, r22
    2af2:	d2 0e       	add	r13, r18
    2af4:	0a 2d       	mov	r16, r10
    2af6:	2d 2d       	mov	r18, r13
    2af8:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    2afc:	88 23       	and	r24, r24
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <u8g2_DrawRFrame+0x38>
    2b00:	52 c0       	rjmp	.+164    	; 0x2ba6 <u8g2_DrawRFrame+0xdc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    2b02:	81 2e       	mov	r8, r17
    2b04:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    2b06:	9f 2c       	mov	r9, r15
    2b08:	9e 0c       	add	r9, r14
    2b0a:	8e 2d       	mov	r24, r14
    2b0c:	80 95       	com	r24
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
    2b0e:	d8 0e       	add	r13, r24
    
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;
    2b10:	a8 0e       	add	r10, r24

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    2b12:	02 e0       	ldi	r16, 0x02	; 2
    2b14:	2e 2d       	mov	r18, r14
    2b16:	49 2d       	mov	r20, r9
    2b18:	68 2d       	mov	r22, r8
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    2b20:	01 e0       	ldi	r16, 0x01	; 1
    2b22:	2e 2d       	mov	r18, r14
    2b24:	49 2d       	mov	r20, r9
    2b26:	6d 2d       	mov	r22, r13
    2b28:	ce 01       	movw	r24, r28
    2b2a:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    2b2e:	04 e0       	ldi	r16, 0x04	; 4
    2b30:	2e 2d       	mov	r18, r14
    2b32:	4a 2d       	mov	r20, r10
    2b34:	68 2d       	mov	r22, r8
    2b36:	ce 01       	movw	r24, r28
    2b38:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    2b3c:	08 e0       	ldi	r16, 0x08	; 8
    2b3e:	2e 2d       	mov	r18, r14
    2b40:	4a 2d       	mov	r20, r10
    2b42:	6d 2d       	mov	r22, r13
    2b44:	ce 01       	movw	r24, r28
    2b46:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <u8g2_DrawCircle>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    2b4a:	2c 2d       	mov	r18, r12
    2b4c:	2e 19       	sub	r18, r14
    ww -= r;
    2b4e:	2e 19       	sub	r18, r14
    hh = h;
    hh -= r;
    2b50:	0b 2d       	mov	r16, r11
    2b52:	0e 19       	sub	r16, r14
    hh -= r;
    2b54:	0e 19       	sub	r16, r14
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
    2b56:	23 30       	cpi	r18, 0x03	; 3
    2b58:	a0 f0       	brcs	.+40     	; 0x2b82 <u8g2_DrawRFrame+0xb8>
    ww -= r;
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    2b5a:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    2b5c:	0f 2e       	mov	r0, r31
    2b5e:	fe ef       	ldi	r31, 0xFE	; 254
    2b60:	ef 2e       	mov	r14, r31
    2b62:	f0 2d       	mov	r31, r0
    2b64:	e2 0e       	add	r14, r18
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
    2b66:	2e 2d       	mov	r18, r14
    2b68:	4f 2d       	mov	r20, r15
    2b6a:	68 2d       	mov	r22, r8
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	0e 94 87 1c 	call	0x390e	; 0x390e <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    2b72:	4f ef       	ldi	r20, 0xFF	; 255
    2b74:	4b 0d       	add	r20, r11
    2b76:	4f 0d       	add	r20, r15
    2b78:	2e 2d       	mov	r18, r14
    2b7a:	68 2d       	mov	r22, r8
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	0e 94 87 1c 	call	0x390e	; 0x390e <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
    2b82:	03 30       	cpi	r16, 0x03	; 3
    2b84:	80 f0       	brcs	.+32     	; 0x2ba6 <u8g2_DrawRFrame+0xdc>
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
    2b86:	93 94       	inc	r9
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
    2b88:	02 50       	subi	r16, 0x02	; 2
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
    2b8a:	20 2f       	mov	r18, r16
    2b8c:	49 2d       	mov	r20, r9
    2b8e:	61 2f       	mov	r22, r17
    2b90:	ce 01       	movw	r24, r28
    2b92:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
    2b96:	6f ef       	ldi	r22, 0xFF	; 255
    2b98:	6c 0d       	add	r22, r12
    2b9a:	61 0f       	add	r22, r17
    2b9c:	20 2f       	mov	r18, r16
    2b9e:	49 2d       	mov	r20, r9
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    }
  }
}
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	ff 90       	pop	r15
    2bb0:	ef 90       	pop	r14
    2bb2:	df 90       	pop	r13
    2bb4:	cf 90       	pop	r12
    2bb6:	bf 90       	pop	r11
    2bb8:	af 90       	pop	r10
    2bba:	9f 90       	pop	r9
    2bbc:	8f 90       	pop	r8
    2bbe:	08 95       	ret

00002bc0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    2bc0:	af 92       	push	r10
    2bc2:	bf 92       	push	r11
    2bc4:	cf 92       	push	r12
    2bc6:	df 92       	push	r13
    2bc8:	ef 92       	push	r14
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	94 96       	adiw	r26, 0x24	; 36
    2bda:	bc 90       	ld	r11, X
    2bdc:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    2bde:	95 96       	adiw	r26, 0x25	; 37
    2be0:	dc 91       	ld	r29, X
    2be2:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    2be4:	ed 91       	ld	r30, X+
    2be6:	fc 91       	ld	r31, X
    2be8:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    2bea:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    2bec:	c1 2c       	mov	r12, r1
    2bee:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2bf0:	d7 01       	movw	r26, r14
    2bf2:	ed 91       	ld	r30, X+
    2bf4:	fc 91       	ld	r31, X
    2bf6:	11 97       	sbiw	r26, 0x01	; 1
    2bf8:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    2bfa:	92 96       	adiw	r26, 0x22	; 34
    2bfc:	0d 91       	ld	r16, X+
    2bfe:	1c 91       	ld	r17, X
    2c00:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    2c02:	42 2f       	mov	r20, r18
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	44 0f       	add	r20, r20
    2c08:	55 1f       	adc	r21, r21
    2c0a:	44 0f       	add	r20, r20
    2c0c:	55 1f       	adc	r21, r21
    2c0e:	44 0f       	add	r20, r20
    2c10:	55 1f       	adc	r21, r21
    2c12:	4c 9d       	mul	r20, r12
    2c14:	c0 01       	movw	r24, r0
    2c16:	4d 9d       	mul	r20, r13
    2c18:	90 0d       	add	r25, r0
    2c1a:	5c 9d       	mul	r21, r12
    2c1c:	90 0d       	add	r25, r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	08 0f       	add	r16, r24
    2c22:	19 1f       	adc	r17, r25
    2c24:	4c 2f       	mov	r20, r28
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	c7 01       	movw	r24, r14
    2c2a:	0e 94 22 20 	call	0x4044	; 0x4044 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    2c2e:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    2c30:	8c 2f       	mov	r24, r28
    2c32:	8d 1b       	sub	r24, r29
    2c34:	8b 15       	cp	r24, r11
    2c36:	28 f4       	brcc	.+10     	; 0x2c42 <u8g2_send_buffer+0x82>
    2c38:	bf ef       	ldi	r27, 0xFF	; 255
    2c3a:	cb 1a       	sub	r12, r27
    2c3c:	db 0a       	sbc	r13, r27
    2c3e:	ca 15       	cp	r28, r10
    2c40:	b8 f2       	brcs	.-82     	; 0x2bf0 <u8g2_send_buffer+0x30>
}
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	bf 90       	pop	r11
    2c54:	af 90       	pop	r10
    2c56:	08 95       	ret

00002c58 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    2c58:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2c5a:	a0 81       	ld	r26, Z
    2c5c:	b1 81       	ldd	r27, Z+1	; 0x01
    2c5e:	50 96       	adiw	r26, 0x10	; 16
    2c60:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    2c62:	44 a1       	ldd	r20, Z+36	; 0x24
    2c64:	94 9f       	mul	r25, r20
    2c66:	a0 01       	movw	r20, r0
    2c68:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    2c6a:	44 0f       	add	r20, r20
    2c6c:	55 1f       	adc	r21, r21
    2c6e:	44 0f       	add	r20, r20
    2c70:	55 1f       	adc	r21, r21
    2c72:	44 0f       	add	r20, r20
    2c74:	55 1f       	adc	r21, r21
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	82 a1       	ldd	r24, Z+34	; 0x22
    2c7c:	93 a1       	ldd	r25, Z+35	; 0x23
    2c7e:	0e 94 67 25 	call	0x4ace	; 0x4ace <memset>
    2c82:	08 95       	ret

00002c84 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    2c8a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    2c8e:	ce 01       	movw	r24, r28
    2c90:	0e 94 66 20 	call	0x40cc	; 0x40cc <u8x8_RefreshDisplay>
}
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

00002c9a <u8g2_draw_circle_section>:
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
    }
}
    2c9a:	cf 92       	push	r12
    2c9c:	df 92       	push	r13
    2c9e:	ef 92       	push	r14
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	6c 01       	movw	r12, r24
    2caa:	d6 2f       	mov	r29, r22
    2cac:	14 2f       	mov	r17, r20
    2cae:	c2 2f       	mov	r28, r18
    2cb0:	e0 fe       	sbrs	r14, 0
    2cb2:	0d c0       	rjmp	.+26     	; 0x2cce <u8g2_draw_circle_section+0x34>
    2cb4:	40 2f       	mov	r20, r16
    2cb6:	41 1b       	sub	r20, r17
    2cb8:	62 2f       	mov	r22, r18
    2cba:	6d 0f       	add	r22, r29
    2cbc:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2cc0:	40 2f       	mov	r20, r16
    2cc2:	4d 1b       	sub	r20, r29
    2cc4:	61 2f       	mov	r22, r17
    2cc6:	6c 0f       	add	r22, r28
    2cc8:	c6 01       	movw	r24, r12
    2cca:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2cce:	e1 fe       	sbrs	r14, 1
    2cd0:	0e c0       	rjmp	.+28     	; 0x2cee <u8g2_draw_circle_section+0x54>
    2cd2:	40 2f       	mov	r20, r16
    2cd4:	41 1b       	sub	r20, r17
    2cd6:	6c 2f       	mov	r22, r28
    2cd8:	6d 1b       	sub	r22, r29
    2cda:	c6 01       	movw	r24, r12
    2cdc:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2ce0:	40 2f       	mov	r20, r16
    2ce2:	4d 1b       	sub	r20, r29
    2ce4:	6c 2f       	mov	r22, r28
    2ce6:	61 1b       	sub	r22, r17
    2ce8:	c6 01       	movw	r24, r12
    2cea:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2cee:	e3 fe       	sbrs	r14, 3
    2cf0:	0e c0       	rjmp	.+28     	; 0x2d0e <u8g2_draw_circle_section+0x74>
    2cf2:	40 2f       	mov	r20, r16
    2cf4:	41 0f       	add	r20, r17
    2cf6:	6c 2f       	mov	r22, r28
    2cf8:	6d 0f       	add	r22, r29
    2cfa:	c6 01       	movw	r24, r12
    2cfc:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2d00:	40 2f       	mov	r20, r16
    2d02:	4d 0f       	add	r20, r29
    2d04:	61 2f       	mov	r22, r17
    2d06:	6c 0f       	add	r22, r28
    2d08:	c6 01       	movw	r24, r12
    2d0a:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2d0e:	e2 fe       	sbrs	r14, 2
    2d10:	0e c0       	rjmp	.+28     	; 0x2d2e <u8g2_draw_circle_section+0x94>
    2d12:	40 2f       	mov	r20, r16
    2d14:	41 0f       	add	r20, r17
    2d16:	6c 2f       	mov	r22, r28
    2d18:	6d 1b       	sub	r22, r29
    2d1a:	c6 01       	movw	r24, r12
    2d1c:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2d20:	40 2f       	mov	r20, r16
    2d22:	4d 0f       	add	r20, r29
    2d24:	6c 2f       	mov	r22, r28
    2d26:	61 1b       	sub	r22, r17
    2d28:	c6 01       	movw	r24, r12
    2d2a:	0e 94 93 1c 	call	0x3926	; 0x3926 <u8g2_DrawPixel>
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	ef 90       	pop	r14
    2d38:	df 90       	pop	r13
    2d3a:	cf 90       	pop	r12
    2d3c:	08 95       	ret

00002d3e <u8g2_draw_disc_section>:
    2d3e:	cf 92       	push	r12
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	6c 01       	movw	r12, r24
    2d4e:	c6 2f       	mov	r28, r22
    2d50:	14 2f       	mov	r17, r20
    2d52:	d2 2f       	mov	r29, r18
    2d54:	e0 fe       	sbrs	r14, 0
    2d56:	11 c0       	rjmp	.+34     	; 0x2d7a <u8g2_draw_disc_section+0x3c>
    2d58:	21 e0       	ldi	r18, 0x01	; 1
    2d5a:	24 0f       	add	r18, r20
    2d5c:	40 2f       	mov	r20, r16
    2d5e:	41 1b       	sub	r20, r17
    2d60:	6d 2f       	mov	r22, r29
    2d62:	6c 0f       	add	r22, r28
    2d64:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2d68:	21 e0       	ldi	r18, 0x01	; 1
    2d6a:	2c 0f       	add	r18, r28
    2d6c:	40 2f       	mov	r20, r16
    2d6e:	4c 1b       	sub	r20, r28
    2d70:	61 2f       	mov	r22, r17
    2d72:	6d 0f       	add	r22, r29
    2d74:	c6 01       	movw	r24, r12
    2d76:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2d7a:	e1 fe       	sbrs	r14, 1
    2d7c:	12 c0       	rjmp	.+36     	; 0x2da2 <u8g2_draw_disc_section+0x64>
    2d7e:	21 e0       	ldi	r18, 0x01	; 1
    2d80:	21 0f       	add	r18, r17
    2d82:	40 2f       	mov	r20, r16
    2d84:	41 1b       	sub	r20, r17
    2d86:	6d 2f       	mov	r22, r29
    2d88:	6c 1b       	sub	r22, r28
    2d8a:	c6 01       	movw	r24, r12
    2d8c:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2d90:	21 e0       	ldi	r18, 0x01	; 1
    2d92:	2c 0f       	add	r18, r28
    2d94:	40 2f       	mov	r20, r16
    2d96:	4c 1b       	sub	r20, r28
    2d98:	6d 2f       	mov	r22, r29
    2d9a:	61 1b       	sub	r22, r17
    2d9c:	c6 01       	movw	r24, r12
    2d9e:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2da2:	e3 fe       	sbrs	r14, 3
    2da4:	10 c0       	rjmp	.+32     	; 0x2dc6 <u8g2_draw_disc_section+0x88>
    2da6:	21 e0       	ldi	r18, 0x01	; 1
    2da8:	21 0f       	add	r18, r17
    2daa:	40 2f       	mov	r20, r16
    2dac:	6d 2f       	mov	r22, r29
    2dae:	6c 0f       	add	r22, r28
    2db0:	c6 01       	movw	r24, r12
    2db2:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2db6:	21 e0       	ldi	r18, 0x01	; 1
    2db8:	2c 0f       	add	r18, r28
    2dba:	40 2f       	mov	r20, r16
    2dbc:	61 2f       	mov	r22, r17
    2dbe:	6d 0f       	add	r22, r29
    2dc0:	c6 01       	movw	r24, r12
    2dc2:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2dc6:	e2 fe       	sbrs	r14, 2
    2dc8:	10 c0       	rjmp	.+32     	; 0x2dea <u8g2_draw_disc_section+0xac>
    2dca:	21 e0       	ldi	r18, 0x01	; 1
    2dcc:	21 0f       	add	r18, r17
    2dce:	6d 2f       	mov	r22, r29
    2dd0:	6c 1b       	sub	r22, r28
    2dd2:	40 2f       	mov	r20, r16
    2dd4:	c6 01       	movw	r24, r12
    2dd6:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2dda:	21 e0       	ldi	r18, 0x01	; 1
    2ddc:	2c 0f       	add	r18, r28
    2dde:	6d 2f       	mov	r22, r29
    2de0:	61 1b       	sub	r22, r17
    2de2:	40 2f       	mov	r20, r16
    2de4:	c6 01       	movw	r24, r12
    2de6:	0e 94 8d 1c 	call	0x391a	; 0x391a <u8g2_DrawVLine>
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	ef 90       	pop	r14
    2df4:	df 90       	pop	r13
    2df6:	cf 90       	pop	r12
    2df8:	08 95       	ret

00002dfa <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    2dfa:	8f 92       	push	r8
    2dfc:	9f 92       	push	r9
    2dfe:	af 92       	push	r10
    2e00:	bf 92       	push	r11
    2e02:	cf 92       	push	r12
    2e04:	df 92       	push	r13
    2e06:	ef 92       	push	r14
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	5c 01       	movw	r10, r24
    2e14:	c6 2e       	mov	r12, r22
    2e16:	94 2e       	mov	r9, r20
    2e18:	c2 2f       	mov	r28, r18
    2e1a:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    2e1c:	01 e0       	ldi	r16, 0x01	; 1
    2e1e:	02 0f       	add	r16, r18
    2e20:	04 0f       	add	r16, r20
    2e22:	21 e0       	ldi	r18, 0x01	; 1
    2e24:	26 0f       	add	r18, r22
    2e26:	2c 0f       	add	r18, r28
    2e28:	4c 1b       	sub	r20, r28
    2e2a:	6c 1b       	sub	r22, r28
    2e2c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    2e30:	88 23       	and	r24, r24
    2e32:	41 f1       	breq	.+80     	; 0x2e84 <u8g2_DrawCircle+0x8a>
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    2e34:	d1 e0       	ldi	r29, 0x01	; 1
    2e36:	dc 1b       	sub	r29, r28
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    2e38:	dc 2e       	mov	r13, r28
    2e3a:	d1 94       	neg	r13
    2e3c:	dd 0c       	add	r13, r13
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    2e3e:	e8 2c       	mov	r14, r8
    2e40:	09 2d       	mov	r16, r9
    2e42:	2c 2d       	mov	r18, r12
    2e44:	4c 2f       	mov	r20, r28
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	c5 01       	movw	r24, r10
    2e4a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <u8g2_draw_circle_section>
    
    while ( x < y )
    2e4e:	cc 23       	and	r28, r28
    2e50:	c9 f0       	breq	.+50     	; 0x2e84 <u8g2_DrawCircle+0x8a>
    2e52:	0f 2e       	mov	r0, r31
    2e54:	f3 e0       	ldi	r31, 0x03	; 3
    2e56:	ff 2e       	mov	r15, r31
    2e58:	f0 2d       	mov	r31, r0
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
    {
      if (f >= 0) 
    2e5c:	dd 23       	and	r29, r29
    2e5e:	24 f0       	brlt	.+8      	; 0x2e68 <u8g2_DrawCircle+0x6e>
      {
        y--;
    2e60:	c1 50       	subi	r28, 0x01	; 1
        ddF_y += 2;
    2e62:	d3 94       	inc	r13
    2e64:	d3 94       	inc	r13
        f += ddF_y;
    2e66:	dd 0d       	add	r29, r13
      }
      x++;
    2e68:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;
    2e6a:	df 0d       	add	r29, r15

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    2e6c:	e8 2c       	mov	r14, r8
    2e6e:	09 2d       	mov	r16, r9
    2e70:	2c 2d       	mov	r18, r12
    2e72:	4c 2f       	mov	r20, r28
    2e74:	61 2f       	mov	r22, r17
    2e76:	c5 01       	movw	r24, r10
    2e78:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <u8g2_draw_circle_section>
    2e7c:	f3 94       	inc	r15
    2e7e:	f3 94       	inc	r15
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    2e80:	1c 17       	cp	r17, r28
    2e82:	60 f3       	brcs	.-40     	; 0x2e5c <u8g2_DrawCircle+0x62>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	bf 90       	pop	r11
    2e96:	af 90       	pop	r10
    2e98:	9f 90       	pop	r9
    2e9a:	8f 90       	pop	r8
    2e9c:	08 95       	ret

00002e9e <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    2e9e:	8f 92       	push	r8
    2ea0:	9f 92       	push	r9
    2ea2:	af 92       	push	r10
    2ea4:	bf 92       	push	r11
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	0f 93       	push	r16
    2eb0:	1f 93       	push	r17
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	5c 01       	movw	r10, r24
    2eb8:	c6 2e       	mov	r12, r22
    2eba:	94 2e       	mov	r9, r20
    2ebc:	c2 2f       	mov	r28, r18
    2ebe:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    2ec0:	01 e0       	ldi	r16, 0x01	; 1
    2ec2:	02 0f       	add	r16, r18
    2ec4:	04 0f       	add	r16, r20
    2ec6:	21 e0       	ldi	r18, 0x01	; 1
    2ec8:	26 0f       	add	r18, r22
    2eca:	2c 0f       	add	r18, r28
    2ecc:	4c 1b       	sub	r20, r28
    2ece:	6c 1b       	sub	r22, r28
    2ed0:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    2ed4:	88 23       	and	r24, r24
    2ed6:	41 f1       	breq	.+80     	; 0x2f28 <u8g2_DrawDisc+0x8a>
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
  f -= rad;
    2ed8:	d1 e0       	ldi	r29, 0x01	; 1
    2eda:	dc 1b       	sub	r29, r28
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
  ddF_y *= 2;
    2edc:	dc 2e       	mov	r13, r28
    2ede:	d1 94       	neg	r13
    2ee0:	dd 0c       	add	r13, r13
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
    2ee2:	e8 2c       	mov	r14, r8
    2ee4:	09 2d       	mov	r16, r9
    2ee6:	2c 2d       	mov	r18, r12
    2ee8:	4c 2f       	mov	r20, r28
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	c5 01       	movw	r24, r10
    2eee:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <u8g2_draw_disc_section>
  
  while ( x < y )
    2ef2:	cc 23       	and	r28, r28
    2ef4:	c9 f0       	breq	.+50     	; 0x2f28 <u8g2_DrawDisc+0x8a>
    2ef6:	0f 2e       	mov	r0, r31
    2ef8:	f3 e0       	ldi	r31, 0x03	; 3
    2efa:	ff 2e       	mov	r15, r31
    2efc:	f0 2d       	mov	r31, r0
    2efe:	10 e0       	ldi	r17, 0x00	; 0
  {
    if (f >= 0) 
    2f00:	dd 23       	and	r29, r29
    2f02:	24 f0       	brlt	.+8      	; 0x2f0c <u8g2_DrawDisc+0x6e>
    {
      y--;
    2f04:	c1 50       	subi	r28, 0x01	; 1
      ddF_y += 2;
    2f06:	d3 94       	inc	r13
    2f08:	d3 94       	inc	r13
      f += ddF_y;
    2f0a:	dd 0d       	add	r29, r13
    }
    x++;
    2f0c:	1f 5f       	subi	r17, 0xFF	; 255
    ddF_x += 2;
    f += ddF_x;
    2f0e:	df 0d       	add	r29, r15

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
    2f10:	e8 2c       	mov	r14, r8
    2f12:	09 2d       	mov	r16, r9
    2f14:	2c 2d       	mov	r18, r12
    2f16:	4c 2f       	mov	r20, r28
    2f18:	61 2f       	mov	r22, r17
    2f1a:	c5 01       	movw	r24, r10
    2f1c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <u8g2_draw_disc_section>
    2f20:	f3 94       	inc	r15
    2f22:	f3 94       	inc	r15
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
  
  while ( x < y )
    2f24:	1c 17       	cp	r17, r28
    2f26:	60 f3       	brcs	.-40     	; 0x2f00 <u8g2_DrawDisc+0x62>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	df 90       	pop	r13
    2f36:	cf 90       	pop	r12
    2f38:	bf 90       	pop	r11
    2f3a:	af 90       	pop	r10
    2f3c:	9f 90       	pop	r9
    2f3e:	8f 90       	pop	r8
    2f40:	08 95       	ret

00002f42 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    2f42:	28 e0       	ldi	r18, 0x08	; 8
    2f44:	fc 01       	movw	r30, r24
    2f46:	20 83       	st	Z, r18
  return buf;
  #endif
}
    2f48:	81 e9       	ldi	r24, 0x91	; 145
    2f4a:	93 e0       	ldi	r25, 0x03	; 3
    2f4c:	08 95       	ret

00002f4e <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2f4e:	cf 92       	push	r12
    2f50:	df 92       	push	r13
    2f52:	ef 92       	push	r14
    2f54:	ff 92       	push	r15
    2f56:	0f 93       	push	r16
    2f58:	1f 93       	push	r17
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	1f 92       	push	r1
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	7c 01       	movw	r14, r24
    2f66:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    2f68:	89 01       	movw	r16, r18
    2f6a:	9a 01       	movw	r18, r20
    2f6c:	47 e6       	ldi	r20, 0x67	; 103
    2f6e:	5f e1       	ldi	r21, 0x1F	; 31
    2f70:	6a ef       	ldi	r22, 0xFA	; 250
    2f72:	70 e2       	ldi	r23, 0x20	; 32
    2f74:	0e 94 3f 21 	call	0x427e	; 0x427e <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    2f78:	ce 01       	movw	r24, r28
    2f7a:	01 96       	adiw	r24, 0x01	; 1
    2f7c:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    2f80:	86 01       	movw	r16, r12
    2f82:	24 ee       	ldi	r18, 0xE4	; 228
    2f84:	3c e1       	ldi	r19, 0x1C	; 28
    2f86:	49 81       	ldd	r20, Y+1	; 0x01
    2f88:	bc 01       	movw	r22, r24
    2f8a:	c7 01       	movw	r24, r14
    2f8c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <u8g2_SetupBuffer>
}
    2f90:	0f 90       	pop	r0
    2f92:	df 91       	pop	r29
    2f94:	cf 91       	pop	r28
    2f96:	1f 91       	pop	r17
    2f98:	0f 91       	pop	r16
    2f9a:	ff 90       	pop	r15
    2f9c:	ef 90       	pop	r14
    2f9e:	df 90       	pop	r13
    2fa0:	cf 90       	pop	r12
    2fa2:	08 95       	ret

00002fa4 <u8g2_font_get_word>:
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  return u8g2_string_width(u8g2, str);
}
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	e6 0f       	add	r30, r22
    2fa8:	f1 1d       	adc	r31, r1
    2faa:	84 91       	lpm	r24, Z
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	98 2f       	mov	r25, r24
    2fb0:	88 27       	eor	r24, r24
    2fb2:	31 96       	adiw	r30, 0x01	; 1
    2fb4:	e4 91       	lpm	r30, Z
    2fb6:	8e 0f       	add	r24, r30
    2fb8:	91 1d       	adc	r25, r1
    2fba:	08 95       	ret

00002fbc <u8g2_font_calc_vref_font>:
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	08 95       	ret

00002fc0 <u8g2_read_font_info>:
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	ec 01       	movw	r28, r24
    2fca:	8b 01       	movw	r16, r22
    2fcc:	fb 01       	movw	r30, r22
    2fce:	84 91       	lpm	r24, Z
    2fd0:	88 83       	st	Y, r24
    2fd2:	31 96       	adiw	r30, 0x01	; 1
    2fd4:	e4 91       	lpm	r30, Z
    2fd6:	e9 83       	std	Y+1, r30	; 0x01
    2fd8:	fb 01       	movw	r30, r22
    2fda:	32 96       	adiw	r30, 0x02	; 2
    2fdc:	e4 91       	lpm	r30, Z
    2fde:	ea 83       	std	Y+2, r30	; 0x02
    2fe0:	fb 01       	movw	r30, r22
    2fe2:	33 96       	adiw	r30, 0x03	; 3
    2fe4:	e4 91       	lpm	r30, Z
    2fe6:	eb 83       	std	Y+3, r30	; 0x03
    2fe8:	fb 01       	movw	r30, r22
    2fea:	34 96       	adiw	r30, 0x04	; 4
    2fec:	e4 91       	lpm	r30, Z
    2fee:	ec 83       	std	Y+4, r30	; 0x04
    2ff0:	fb 01       	movw	r30, r22
    2ff2:	35 96       	adiw	r30, 0x05	; 5
    2ff4:	e4 91       	lpm	r30, Z
    2ff6:	ed 83       	std	Y+5, r30	; 0x05
    2ff8:	fb 01       	movw	r30, r22
    2ffa:	36 96       	adiw	r30, 0x06	; 6
    2ffc:	e4 91       	lpm	r30, Z
    2ffe:	ee 83       	std	Y+6, r30	; 0x06
    3000:	fb 01       	movw	r30, r22
    3002:	37 96       	adiw	r30, 0x07	; 7
    3004:	e4 91       	lpm	r30, Z
    3006:	ef 83       	std	Y+7, r30	; 0x07
    3008:	fb 01       	movw	r30, r22
    300a:	38 96       	adiw	r30, 0x08	; 8
    300c:	e4 91       	lpm	r30, Z
    300e:	e8 87       	std	Y+8, r30	; 0x08
    3010:	fb 01       	movw	r30, r22
    3012:	39 96       	adiw	r30, 0x09	; 9
    3014:	e4 91       	lpm	r30, Z
    3016:	e9 87       	std	Y+9, r30	; 0x09
    3018:	fb 01       	movw	r30, r22
    301a:	3a 96       	adiw	r30, 0x0a	; 10
    301c:	e4 91       	lpm	r30, Z
    301e:	ea 87       	std	Y+10, r30	; 0x0a
    3020:	fb 01       	movw	r30, r22
    3022:	3b 96       	adiw	r30, 0x0b	; 11
    3024:	e4 91       	lpm	r30, Z
    3026:	eb 87       	std	Y+11, r30	; 0x0b
    3028:	fb 01       	movw	r30, r22
    302a:	3c 96       	adiw	r30, 0x0c	; 12
    302c:	e4 91       	lpm	r30, Z
    302e:	ec 87       	std	Y+12, r30	; 0x0c
    3030:	fb 01       	movw	r30, r22
    3032:	3d 96       	adiw	r30, 0x0d	; 13
    3034:	e4 91       	lpm	r30, Z
    3036:	ed 87       	std	Y+13, r30	; 0x0d
    3038:	fb 01       	movw	r30, r22
    303a:	3e 96       	adiw	r30, 0x0e	; 14
    303c:	e4 91       	lpm	r30, Z
    303e:	ee 87       	std	Y+14, r30	; 0x0e
    3040:	fb 01       	movw	r30, r22
    3042:	3f 96       	adiw	r30, 0x0f	; 15
    3044:	e4 91       	lpm	r30, Z
    3046:	ef 87       	std	Y+15, r30	; 0x0f
    3048:	fb 01       	movw	r30, r22
    304a:	70 96       	adiw	r30, 0x10	; 16
    304c:	e4 91       	lpm	r30, Z
    304e:	e8 8b       	std	Y+16, r30	; 0x10
    3050:	61 e1       	ldi	r22, 0x11	; 17
    3052:	c8 01       	movw	r24, r16
    3054:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <u8g2_font_get_word>
    3058:	9a 8b       	std	Y+18, r25	; 0x12
    305a:	89 8b       	std	Y+17, r24	; 0x11
    305c:	63 e1       	ldi	r22, 0x13	; 19
    305e:	c8 01       	movw	r24, r16
    3060:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <u8g2_font_get_word>
    3064:	9c 8b       	std	Y+20, r25	; 0x14
    3066:	8b 8b       	std	Y+19, r24	; 0x13
    3068:	65 e1       	ldi	r22, 0x15	; 21
    306a:	c8 01       	movw	r24, r16
    306c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <u8g2_font_get_word>
    3070:	9e 8b       	std	Y+22, r25	; 0x16
    3072:	8d 8b       	std	Y+21, r24	; 0x15
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	08 95       	ret

0000307e <u8g2_font_decode_get_unsigned_bits>:
    307e:	dc 01       	movw	r26, r24
    3080:	18 96       	adiw	r26, 0x08	; 8
    3082:	9c 91       	ld	r25, X
    3084:	18 97       	sbiw	r26, 0x08	; 8
    3086:	ed 91       	ld	r30, X+
    3088:	fc 91       	ld	r31, X
    308a:	11 97       	sbiw	r26, 0x01	; 1
    308c:	24 91       	lpm	r18, Z
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	09 2e       	mov	r0, r25
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <u8g2_font_decode_get_unsigned_bits+0x1a>
    3094:	35 95       	asr	r19
    3096:	27 95       	ror	r18
    3098:	0a 94       	dec	r0
    309a:	e2 f7       	brpl	.-8      	; 0x3094 <u8g2_font_decode_get_unsigned_bits+0x16>
    309c:	89 2f       	mov	r24, r25
    309e:	86 0f       	add	r24, r22
    30a0:	88 30       	cpi	r24, 0x08	; 8
    30a2:	10 f4       	brcc	.+4      	; 0x30a8 <u8g2_font_decode_get_unsigned_bits+0x2a>
    30a4:	e2 2f       	mov	r30, r18
    30a6:	0f c0       	rjmp	.+30     	; 0x30c6 <u8g2_font_decode_get_unsigned_bits+0x48>
    30a8:	31 96       	adiw	r30, 0x01	; 1
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	fc 93       	st	X, r31
    30ae:	ee 93       	st	-X, r30
    30b0:	e4 91       	lpm	r30, Z
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	38 e0       	ldi	r19, 0x08	; 8
    30b6:	39 1b       	sub	r19, r25
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <u8g2_font_decode_get_unsigned_bits+0x40>
    30ba:	ee 0f       	add	r30, r30
    30bc:	ff 1f       	adc	r31, r31
    30be:	3a 95       	dec	r19
    30c0:	e2 f7       	brpl	.-8      	; 0x30ba <u8g2_font_decode_get_unsigned_bits+0x3c>
    30c2:	e2 2b       	or	r30, r18
    30c4:	88 50       	subi	r24, 0x08	; 8
    30c6:	18 96       	adiw	r26, 0x08	; 8
    30c8:	8c 93       	st	X, r24
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <u8g2_font_decode_get_unsigned_bits+0x56>
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	6a 95       	dec	r22
    30d6:	e2 f7       	brpl	.-8      	; 0x30d0 <u8g2_font_decode_get_unsigned_bits+0x52>
    30d8:	81 50       	subi	r24, 0x01	; 1
    30da:	8e 23       	and	r24, r30
    30dc:	08 95       	ret

000030de <u8g2_font_setup_decode>:
    30de:	0f 93       	push	r16
    30e0:	1f 93       	push	r17
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	ec 01       	movw	r28, r24
    30e8:	8c 01       	movw	r16, r24
    30ea:	07 5c       	subi	r16, 0xC7	; 199
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	7a af       	std	Y+58, r23	; 0x3a
    30f0:	69 af       	std	Y+57, r22	; 0x39
    30f2:	fc 01       	movw	r30, r24
    30f4:	ef 5b       	subi	r30, 0xBF	; 191
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	10 82       	st	Z, r1
    30fa:	39 96       	adiw	r30, 0x09	; 9
    30fc:	60 81       	ld	r22, Z
    30fe:	c8 01       	movw	r24, r16
    3100:	0e 94 3f 18 	call	0x307e	; 0x307e <u8g2_font_decode_get_unsigned_bits>
    3104:	8f af       	std	Y+63, r24	; 0x3f
    3106:	fe 01       	movw	r30, r28
    3108:	e5 5b       	subi	r30, 0xB5	; 181
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 81       	ld	r22, Z
    310e:	c8 01       	movw	r24, r16
    3110:	0e 94 3f 18 	call	0x307e	; 0x307e <u8g2_font_decode_get_unsigned_bits>
    3114:	fe 01       	movw	r30, r28
    3116:	e0 5c       	subi	r30, 0xC0	; 192
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 83       	st	Z, r24
    311c:	b3 96       	adiw	r30, 0x23	; 35
    311e:	80 81       	ld	r24, Z
    3120:	b0 97       	sbiw	r30, 0x20	; 32
    3122:	80 83       	st	Z, r24
    3124:	cc 5b       	subi	r28, 0xBC	; 188
    3126:	df 4f       	sbci	r29, 0xFF	; 255
    3128:	91 e0       	ldi	r25, 0x01	; 1
    312a:	81 11       	cpse	r24, r1
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	98 83       	st	Y, r25
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	08 95       	ret

0000313a <u8g2_font_decode_get_signed_bits>:
    313a:	cf 93       	push	r28
    313c:	c6 2f       	mov	r28, r22
    313e:	0e 94 3f 18 	call	0x307e	; 0x307e <u8g2_font_decode_get_unsigned_bits>
    3142:	c1 50       	subi	r28, 0x01	; 1
    3144:	21 e0       	ldi	r18, 0x01	; 1
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	02 c0       	rjmp	.+4      	; 0x314e <u8g2_font_decode_get_signed_bits+0x14>
    314a:	22 0f       	add	r18, r18
    314c:	33 1f       	adc	r19, r19
    314e:	ca 95       	dec	r28
    3150:	e2 f7       	brpl	.-8      	; 0x314a <u8g2_font_decode_get_signed_bits+0x10>
    3152:	82 1b       	sub	r24, r18
    3154:	cf 91       	pop	r28
    3156:	08 95       	ret

00003158 <u8g2_add_vector_y>:
    3158:	21 30       	cpi	r18, 0x01	; 1
    315a:	31 f0       	breq	.+12     	; 0x3168 <u8g2_add_vector_y+0x10>
    315c:	18 f0       	brcs	.+6      	; 0x3164 <u8g2_add_vector_y+0xc>
    315e:	22 30       	cpi	r18, 0x02	; 2
    3160:	29 f0       	breq	.+10     	; 0x316c <u8g2_add_vector_y+0x14>
    3162:	06 c0       	rjmp	.+12     	; 0x3170 <u8g2_add_vector_y+0x18>
    3164:	84 0f       	add	r24, r20
    3166:	08 95       	ret
    3168:	86 0f       	add	r24, r22
    316a:	08 95       	ret
    316c:	84 1b       	sub	r24, r20
    316e:	08 95       	ret
    3170:	86 1b       	sub	r24, r22
    3172:	08 95       	ret

00003174 <u8g2_add_vector_x>:
    3174:	21 30       	cpi	r18, 0x01	; 1
    3176:	31 f0       	breq	.+12     	; 0x3184 <u8g2_add_vector_x+0x10>
    3178:	18 f0       	brcs	.+6      	; 0x3180 <u8g2_add_vector_x+0xc>
    317a:	22 30       	cpi	r18, 0x02	; 2
    317c:	29 f0       	breq	.+10     	; 0x3188 <u8g2_add_vector_x+0x14>
    317e:	06 c0       	rjmp	.+12     	; 0x318c <u8g2_add_vector_x+0x18>
    3180:	86 0f       	add	r24, r22
    3182:	08 95       	ret
    3184:	84 1b       	sub	r24, r20
    3186:	08 95       	ret
    3188:	86 1b       	sub	r24, r22
    318a:	08 95       	ret
    318c:	84 0f       	add	r24, r20
    318e:	08 95       	ret

00003190 <u8g2_font_decode_len>:
    3190:	2f 92       	push	r2
    3192:	3f 92       	push	r3
    3194:	4f 92       	push	r4
    3196:	5f 92       	push	r5
    3198:	6f 92       	push	r6
    319a:	7f 92       	push	r7
    319c:	8f 92       	push	r8
    319e:	9f 92       	push	r9
    31a0:	af 92       	push	r10
    31a2:	bf 92       	push	r11
    31a4:	cf 92       	push	r12
    31a6:	df 92       	push	r13
    31a8:	ef 92       	push	r14
    31aa:	ff 92       	push	r15
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <u8g2_font_decode_len+0x26>
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <u8g2_font_decode_len+0x28>
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <u8g2_font_decode_len+0x2a>
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	7c 01       	movw	r14, r24
    31c0:	6e 83       	std	Y+6, r22	; 0x06
    31c2:	34 2e       	mov	r3, r20
    31c4:	fc 01       	movw	r30, r24
    31c6:	75 ac       	ldd	r7, Z+61	; 0x3d
    31c8:	16 ad       	ldd	r17, Z+62	; 0x3e
    31ca:	6c 01       	movw	r12, r24
    31cc:	f5 e4       	ldi	r31, 0x45	; 69
    31ce:	cf 0e       	add	r12, r31
    31d0:	d1 1c       	adc	r13, r1
    31d2:	5c 01       	movw	r10, r24
    31d4:	82 e4       	ldi	r24, 0x42	; 66
    31d6:	a8 0e       	add	r10, r24
    31d8:	b1 1c       	adc	r11, r1
    31da:	47 01       	movw	r8, r14
    31dc:	93 e6       	ldi	r25, 0x63	; 99
    31de:	89 0e       	add	r8, r25
    31e0:	91 1c       	adc	r9, r1
    31e2:	f7 01       	movw	r30, r14
    31e4:	ec 5b       	subi	r30, 0xBC	; 188
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	fc 83       	std	Y+4, r31	; 0x04
    31ea:	eb 83       	std	Y+3, r30	; 0x03
    31ec:	c7 01       	movw	r24, r14
    31ee:	8d 5b       	subi	r24, 0xBD	; 189
    31f0:	9f 4f       	sbci	r25, 0xFF	; 255
    31f2:	9a 83       	std	Y+2, r25	; 0x02
    31f4:	89 83       	std	Y+1, r24	; 0x01
    31f6:	f7 01       	movw	r30, r14
    31f8:	f7 ad       	ldd	r31, Z+63	; 0x3f
    31fa:	f7 19       	sub	r31, r7
    31fc:	fd 83       	std	Y+5, r31	; 0x05
    31fe:	5e 80       	ldd	r5, Y+6	; 0x06
    3200:	f5 15       	cp	r31, r5
    3202:	08 f4       	brcc	.+2      	; 0x3206 <u8g2_font_decode_len+0x76>
    3204:	5f 2e       	mov	r5, r31
    3206:	f7 01       	movw	r30, r14
    3208:	64 ac       	ldd	r6, Z+60	; 0x3c
    320a:	f6 01       	movw	r30, r12
    320c:	00 81       	ld	r16, Z
    320e:	21 2e       	mov	r2, r17
    3210:	20 2f       	mov	r18, r16
    3212:	41 2f       	mov	r20, r17
    3214:	67 2d       	mov	r22, r7
    3216:	f7 01       	movw	r30, r14
    3218:	83 ad       	ldd	r24, Z+59	; 0x3b
    321a:	0e 94 ba 18 	call	0x3174	; 0x3174 <u8g2_add_vector_x>
    321e:	48 2e       	mov	r4, r24
    3220:	20 2f       	mov	r18, r16
    3222:	41 2f       	mov	r20, r17
    3224:	67 2d       	mov	r22, r7
    3226:	86 2d       	mov	r24, r6
    3228:	0e 94 ac 18 	call	0x3158	; 0x3158 <u8g2_add_vector_y>
    322c:	33 20       	and	r3, r3
    322e:	61 f0       	breq	.+24     	; 0x3248 <u8g2_font_decode_len+0xb8>
    3230:	e9 81       	ldd	r30, Y+1	; 0x01
    3232:	fa 81       	ldd	r31, Y+2	; 0x02
    3234:	90 81       	ld	r25, Z
    3236:	f4 01       	movw	r30, r8
    3238:	90 83       	st	Z, r25
    323a:	25 2d       	mov	r18, r5
    323c:	48 2f       	mov	r20, r24
    323e:	64 2d       	mov	r22, r4
    3240:	c7 01       	movw	r24, r14
    3242:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <u8g2_font_decode_len+0xd6>
    3248:	f5 01       	movw	r30, r10
    324a:	90 81       	ld	r25, Z
    324c:	91 11       	cpse	r25, r1
    324e:	0b c0       	rjmp	.+22     	; 0x3266 <u8g2_font_decode_len+0xd6>
    3250:	eb 81       	ldd	r30, Y+3	; 0x03
    3252:	fc 81       	ldd	r31, Y+4	; 0x04
    3254:	90 81       	ld	r25, Z
    3256:	f4 01       	movw	r30, r8
    3258:	90 83       	st	Z, r25
    325a:	25 2d       	mov	r18, r5
    325c:	48 2f       	mov	r20, r24
    325e:	64 2d       	mov	r22, r4
    3260:	c7 01       	movw	r24, r14
    3262:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
    3266:	fe 81       	ldd	r31, Y+6	; 0x06
    3268:	8d 81       	ldd	r24, Y+5	; 0x05
    326a:	f8 17       	cp	r31, r24
    326c:	28 f0       	brcs	.+10     	; 0x3278 <u8g2_font_decode_len+0xe8>
    326e:	f8 1b       	sub	r31, r24
    3270:	fe 83       	std	Y+6, r31	; 0x06
    3272:	1f 5f       	subi	r17, 0xFF	; 255
    3274:	71 2c       	mov	r7, r1
    3276:	bf cf       	rjmp	.-130    	; 0x31f6 <u8g2_font_decode_len+0x66>
    3278:	8e 81       	ldd	r24, Y+6	; 0x06
    327a:	87 0d       	add	r24, r7
    327c:	f7 01       	movw	r30, r14
    327e:	85 af       	std	Z+61, r24	; 0x3d
    3280:	26 ae       	std	Z+62, r2	; 0x3e
    3282:	26 96       	adiw	r28, 0x06	; 6
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	de bf       	out	0x3e, r29	; 62
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	cd bf       	out	0x3d, r28	; 61
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	ff 90       	pop	r15
    3298:	ef 90       	pop	r14
    329a:	df 90       	pop	r13
    329c:	cf 90       	pop	r12
    329e:	bf 90       	pop	r11
    32a0:	af 90       	pop	r10
    32a2:	9f 90       	pop	r9
    32a4:	8f 90       	pop	r8
    32a6:	7f 90       	pop	r7
    32a8:	6f 90       	pop	r6
    32aa:	5f 90       	pop	r5
    32ac:	4f 90       	pop	r4
    32ae:	3f 90       	pop	r3
    32b0:	2f 90       	pop	r2
    32b2:	08 95       	ret

000032b4 <u8g2_font_decode_glyph>:
    32b4:	8f 92       	push	r8
    32b6:	9f 92       	push	r9
    32b8:	af 92       	push	r10
    32ba:	bf 92       	push	r11
    32bc:	cf 92       	push	r12
    32be:	df 92       	push	r13
    32c0:	ef 92       	push	r14
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	ec 01       	movw	r28, r24
    32ce:	7c 01       	movw	r14, r24
    32d0:	89 e3       	ldi	r24, 0x39	; 57
    32d2:	e8 0e       	add	r14, r24
    32d4:	f1 1c       	adc	r15, r1
    32d6:	ce 01       	movw	r24, r28
    32d8:	0e 94 6f 18 	call	0x30de	; 0x30de <u8g2_font_setup_decode>
    32dc:	fe 01       	movw	r30, r28
    32de:	e0 5c       	subi	r30, 0xC0	; 192
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	90 80       	ld	r9, Z
    32e4:	3c 96       	adiw	r30, 0x0c	; 12
    32e6:	60 81       	ld	r22, Z
    32e8:	c7 01       	movw	r24, r14
    32ea:	0e 94 9d 18 	call	0x313a	; 0x313a <u8g2_font_decode_get_signed_bits>
    32ee:	b8 2e       	mov	r11, r24
    32f0:	fe 01       	movw	r30, r28
    32f2:	e3 5b       	subi	r30, 0xB3	; 179
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	60 81       	ld	r22, Z
    32f8:	c7 01       	movw	r24, r14
    32fa:	0e 94 9d 18 	call	0x313a	; 0x313a <u8g2_font_decode_get_signed_bits>
    32fe:	18 2f       	mov	r17, r24
    3300:	fe 01       	movw	r30, r28
    3302:	e2 5b       	subi	r30, 0xB2	; 178
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	60 81       	ld	r22, Z
    3308:	c7 01       	movw	r24, r14
    330a:	0e 94 9d 18 	call	0x313a	; 0x313a <u8g2_font_decode_get_signed_bits>
    330e:	88 2e       	mov	r8, r24
    3310:	df ac       	ldd	r13, Y+63	; 0x3f
    3312:	1d 14       	cp	r1, r13
    3314:	0c f0       	brlt	.+2      	; 0x3318 <u8g2_font_decode_glyph+0x64>
    3316:	79 c0       	rjmp	.+242    	; 0x340a <u8g2_font_decode_glyph+0x156>
    3318:	fe 01       	movw	r30, r28
    331a:	eb 5b       	subi	r30, 0xBB	; 187
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	00 81       	ld	r16, Z
    3320:	19 0d       	add	r17, r9
    3322:	11 95       	neg	r17
    3324:	20 2f       	mov	r18, r16
    3326:	41 2f       	mov	r20, r17
    3328:	6b 2d       	mov	r22, r11
    332a:	8b ad       	ldd	r24, Y+59	; 0x3b
    332c:	0e 94 ba 18 	call	0x3174	; 0x3174 <u8g2_add_vector_x>
    3330:	c8 2e       	mov	r12, r24
    3332:	8b af       	std	Y+59, r24	; 0x3b
    3334:	20 2f       	mov	r18, r16
    3336:	41 2f       	mov	r20, r17
    3338:	6b 2d       	mov	r22, r11
    333a:	8c ad       	ldd	r24, Y+60	; 0x3c
    333c:	0e 94 ac 18 	call	0x3158	; 0x3158 <u8g2_add_vector_y>
    3340:	8c af       	std	Y+60, r24	; 0x3c
    3342:	01 30       	cpi	r16, 0x01	; 1
    3344:	59 f0       	breq	.+22     	; 0x335c <u8g2_font_decode_glyph+0xa8>
    3346:	28 f0       	brcs	.+10     	; 0x3352 <u8g2_font_decode_glyph+0x9e>
    3348:	02 30       	cpi	r16, 0x02	; 2
    334a:	91 f0       	breq	.+36     	; 0x3370 <u8g2_font_decode_glyph+0xbc>
    334c:	03 30       	cpi	r16, 0x03	; 3
    334e:	d9 f0       	breq	.+54     	; 0x3386 <u8g2_font_decode_glyph+0xd2>
    3350:	23 c0       	rjmp	.+70     	; 0x3398 <u8g2_font_decode_glyph+0xe4>
    3352:	2d 2d       	mov	r18, r13
    3354:	2c 0d       	add	r18, r12
    3356:	09 2d       	mov	r16, r9
    3358:	08 0f       	add	r16, r24
    335a:	20 c0       	rjmp	.+64     	; 0x339c <u8g2_font_decode_glyph+0xe8>
    335c:	9c 2d       	mov	r25, r12
    335e:	99 19       	sub	r25, r9
    3360:	21 e0       	ldi	r18, 0x01	; 1
    3362:	2c 0d       	add	r18, r12
    3364:	0d 2d       	mov	r16, r13
    3366:	08 0f       	add	r16, r24
    3368:	cc 24       	eor	r12, r12
    336a:	c3 94       	inc	r12
    336c:	c9 0e       	add	r12, r25
    336e:	16 c0       	rjmp	.+44     	; 0x339c <u8g2_font_decode_glyph+0xe8>
    3370:	91 e0       	ldi	r25, 0x01	; 1
    3372:	39 2f       	mov	r19, r25
    3374:	3d 19       	sub	r19, r13
    3376:	21 e0       	ldi	r18, 0x01	; 1
    3378:	2c 0d       	add	r18, r12
    337a:	99 19       	sub	r25, r9
    337c:	01 e0       	ldi	r16, 0x01	; 1
    337e:	08 0f       	add	r16, r24
    3380:	89 0f       	add	r24, r25
    3382:	c3 0e       	add	r12, r19
    3384:	0b c0       	rjmp	.+22     	; 0x339c <u8g2_font_decode_glyph+0xe8>
    3386:	29 2d       	mov	r18, r9
    3388:	2c 0d       	add	r18, r12
    338a:	98 2f       	mov	r25, r24
    338c:	9d 19       	sub	r25, r13
    338e:	01 e0       	ldi	r16, 0x01	; 1
    3390:	08 0f       	add	r16, r24
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	89 0f       	add	r24, r25
    3396:	02 c0       	rjmp	.+4      	; 0x339c <u8g2_font_decode_glyph+0xe8>
    3398:	08 2f       	mov	r16, r24
    339a:	2c 2d       	mov	r18, r12
    339c:	48 2f       	mov	r20, r24
    339e:	6c 2d       	mov	r22, r12
    33a0:	ce 01       	movw	r24, r28
    33a2:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    33a6:	88 23       	and	r24, r24
    33a8:	81 f1       	breq	.+96     	; 0x340a <u8g2_font_decode_glyph+0x156>
    33aa:	1d ae       	std	Y+61, r1	; 0x3d
    33ac:	1e ae       	std	Y+62, r1	; 0x3e
    33ae:	5e 01       	movw	r10, r28
    33b0:	e8 e4       	ldi	r30, 0x48	; 72
    33b2:	ae 0e       	add	r10, r30
    33b4:	b1 1c       	adc	r11, r1
    33b6:	6e 01       	movw	r12, r28
    33b8:	f9 e4       	ldi	r31, 0x49	; 73
    33ba:	cf 0e       	add	r12, r31
    33bc:	d1 1c       	adc	r13, r1
    33be:	f5 01       	movw	r30, r10
    33c0:	60 81       	ld	r22, Z
    33c2:	c7 01       	movw	r24, r14
    33c4:	0e 94 3f 18 	call	0x307e	; 0x307e <u8g2_font_decode_get_unsigned_bits>
    33c8:	08 2f       	mov	r16, r24
    33ca:	f6 01       	movw	r30, r12
    33cc:	60 81       	ld	r22, Z
    33ce:	c7 01       	movw	r24, r14
    33d0:	0e 94 3f 18 	call	0x307e	; 0x307e <u8g2_font_decode_get_unsigned_bits>
    33d4:	18 2f       	mov	r17, r24
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	60 2f       	mov	r22, r16
    33da:	ce 01       	movw	r24, r28
    33dc:	0e 94 c8 18 	call	0x3190	; 0x3190 <u8g2_font_decode_len>
    33e0:	41 e0       	ldi	r20, 0x01	; 1
    33e2:	61 2f       	mov	r22, r17
    33e4:	ce 01       	movw	r24, r28
    33e6:	0e 94 c8 18 	call	0x3190	; 0x3190 <u8g2_font_decode_len>
    33ea:	61 e0       	ldi	r22, 0x01	; 1
    33ec:	c7 01       	movw	r24, r14
    33ee:	0e 94 3f 18 	call	0x307e	; 0x307e <u8g2_font_decode_get_unsigned_bits>
    33f2:	81 11       	cpse	r24, r1
    33f4:	f0 cf       	rjmp	.-32     	; 0x33d6 <u8g2_font_decode_glyph+0x122>
    33f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    33f8:	89 15       	cp	r24, r9
    33fa:	0c f3       	brlt	.-62     	; 0x33be <u8g2_font_decode_glyph+0x10a>
    33fc:	fe 01       	movw	r30, r28
    33fe:	ed 59       	subi	r30, 0x9D	; 157
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	cd 5b       	subi	r28, 0xBD	; 189
    3404:	df 4f       	sbci	r29, 0xFF	; 255
    3406:	88 81       	ld	r24, Y
    3408:	80 83       	st	Z, r24
    340a:	88 2d       	mov	r24, r8
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	ff 90       	pop	r15
    3416:	ef 90       	pop	r14
    3418:	df 90       	pop	r13
    341a:	cf 90       	pop	r12
    341c:	bf 90       	pop	r11
    341e:	af 90       	pop	r10
    3420:	9f 90       	pop	r9
    3422:	8f 90       	pop	r8
    3424:	08 95       	ret

00003426 <u8g2_font_get_glyph_data>:
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	fc 01       	movw	r30, r24
    3434:	c5 a9       	ldd	r28, Z+53	; 0x35
    3436:	d6 a9       	ldd	r29, Z+54	; 0x36
    3438:	67 96       	adiw	r28, 0x17	; 23
    343a:	6f 3f       	cpi	r22, 0xFF	; 255
    343c:	71 05       	cpc	r23, r1
    343e:	11 f0       	breq	.+4      	; 0x3444 <u8g2_font_get_glyph_data+0x1e>
    3440:	08 f0       	brcs	.+2      	; 0x3444 <u8g2_font_get_glyph_data+0x1e>
    3442:	36 c0       	rjmp	.+108    	; 0x34b0 <u8g2_font_get_glyph_data+0x8a>
    3444:	61 36       	cpi	r22, 0x61	; 97
    3446:	71 05       	cpc	r23, r1
    3448:	38 f0       	brcs	.+14     	; 0x3458 <u8g2_font_get_glyph_data+0x32>
    344a:	e7 5a       	subi	r30, 0xA7	; 167
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	c8 0f       	add	r28, r24
    3454:	d9 1f       	adc	r29, r25
    3456:	0a c0       	rjmp	.+20     	; 0x346c <u8g2_font_get_glyph_data+0x46>
    3458:	61 34       	cpi	r22, 0x41	; 65
    345a:	71 05       	cpc	r23, r1
    345c:	38 f0       	brcs	.+14     	; 0x346c <u8g2_font_get_glyph_data+0x46>
    345e:	fc 01       	movw	r30, r24
    3460:	e9 5a       	subi	r30, 0xA9	; 169
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	c8 0f       	add	r28, r24
    346a:	d9 1f       	adc	r29, r25
    346c:	ce 01       	movw	r24, r28
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	fc 01       	movw	r30, r24
    3472:	24 91       	lpm	r18, Z
    3474:	22 23       	and	r18, r18
    3476:	09 f4       	brne	.+2      	; 0x347a <u8g2_font_get_glyph_data+0x54>
    3478:	5a c0       	rjmp	.+180    	; 0x352e <u8g2_font_get_glyph_data+0x108>
    347a:	fe 01       	movw	r30, r28
    347c:	24 91       	lpm	r18, Z
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	62 17       	cp	r22, r18
    3482:	73 07       	cpc	r23, r19
    3484:	51 f4       	brne	.+20     	; 0x349a <u8g2_font_get_glyph_data+0x74>
    3486:	06 c0       	rjmp	.+12     	; 0x3494 <u8g2_font_get_glyph_data+0x6e>
    3488:	fe 01       	movw	r30, r28
    348a:	24 91       	lpm	r18, Z
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	62 17       	cp	r22, r18
    3490:	73 07       	cpc	r23, r19
    3492:	19 f4       	brne	.+6      	; 0x349a <u8g2_font_get_glyph_data+0x74>
    3494:	ce 01       	movw	r24, r28
    3496:	02 96       	adiw	r24, 0x02	; 2
    3498:	52 c0       	rjmp	.+164    	; 0x353e <u8g2_font_get_glyph_data+0x118>
    349a:	fc 01       	movw	r30, r24
    349c:	84 91       	lpm	r24, Z
    349e:	c8 0f       	add	r28, r24
    34a0:	d1 1d       	adc	r29, r1
    34a2:	ce 01       	movw	r24, r28
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	fc 01       	movw	r30, r24
    34a8:	24 91       	lpm	r18, Z
    34aa:	21 11       	cpse	r18, r1
    34ac:	ed cf       	rjmp	.-38     	; 0x3488 <u8g2_font_get_glyph_data+0x62>
    34ae:	42 c0       	rjmp	.+132    	; 0x3534 <u8g2_font_get_glyph_data+0x10e>
    34b0:	8b 01       	movw	r16, r22
    34b2:	fc 01       	movw	r30, r24
    34b4:	e5 5a       	subi	r30, 0xA5	; 165
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
    34bc:	c8 0f       	add	r28, r24
    34be:	d9 1f       	adc	r29, r25
    34c0:	7e 01       	movw	r14, r28
    34c2:	60 e0       	ldi	r22, 0x00	; 0
    34c4:	c7 01       	movw	r24, r14
    34c6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <u8g2_font_get_word>
    34ca:	c8 0f       	add	r28, r24
    34cc:	d9 1f       	adc	r29, r25
    34ce:	62 e0       	ldi	r22, 0x02	; 2
    34d0:	c7 01       	movw	r24, r14
    34d2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <u8g2_font_get_word>
    34d6:	f4 e0       	ldi	r31, 0x04	; 4
    34d8:	ef 0e       	add	r14, r31
    34da:	f1 1c       	adc	r15, r1
    34dc:	80 17       	cp	r24, r16
    34de:	91 07       	cpc	r25, r17
    34e0:	80 f3       	brcs	.-32     	; 0x34c2 <u8g2_font_get_glyph_data+0x9c>
    34e2:	fe 01       	movw	r30, r28
    34e4:	84 91       	lpm	r24, Z
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	98 2f       	mov	r25, r24
    34ea:	88 27       	eor	r24, r24
    34ec:	31 96       	adiw	r30, 0x01	; 1
    34ee:	e4 91       	lpm	r30, Z
    34f0:	8e 2b       	or	r24, r30
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	11 f1       	breq	.+68     	; 0x353a <u8g2_font_get_glyph_data+0x114>
    34f6:	08 17       	cp	r16, r24
    34f8:	19 07       	cpc	r17, r25
    34fa:	39 f4       	brne	.+14     	; 0x350a <u8g2_font_get_glyph_data+0xe4>
    34fc:	03 c0       	rjmp	.+6      	; 0x3504 <u8g2_font_get_glyph_data+0xde>
    34fe:	08 17       	cp	r16, r24
    3500:	19 07       	cpc	r17, r25
    3502:	19 f4       	brne	.+6      	; 0x350a <u8g2_font_get_glyph_data+0xe4>
    3504:	ce 01       	movw	r24, r28
    3506:	03 96       	adiw	r24, 0x03	; 3
    3508:	1a c0       	rjmp	.+52     	; 0x353e <u8g2_font_get_glyph_data+0x118>
    350a:	fe 01       	movw	r30, r28
    350c:	32 96       	adiw	r30, 0x02	; 2
    350e:	e4 91       	lpm	r30, Z
    3510:	ce 0f       	add	r28, r30
    3512:	d1 1d       	adc	r29, r1
    3514:	fe 01       	movw	r30, r28
    3516:	84 91       	lpm	r24, Z
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	98 2f       	mov	r25, r24
    351c:	88 27       	eor	r24, r24
    351e:	31 96       	adiw	r30, 0x01	; 1
    3520:	e4 91       	lpm	r30, Z
    3522:	8e 2b       	or	r24, r30
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	59 f7       	brne	.-42     	; 0x34fe <u8g2_font_get_glyph_data+0xd8>
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	08 c0       	rjmp	.+16     	; 0x353e <u8g2_font_get_glyph_data+0x118>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	05 c0       	rjmp	.+10     	; 0x353e <u8g2_font_get_glyph_data+0x118>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 c0       	rjmp	.+4      	; 0x353e <u8g2_font_get_glyph_data+0x118>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	1f 91       	pop	r17
    3544:	0f 91       	pop	r16
    3546:	ff 90       	pop	r15
    3548:	ef 90       	pop	r14
    354a:	08 95       	ret

0000354c <u8g2_GetGlyphWidth>:
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	ec 01       	movw	r28, r24
    3556:	0e 94 13 1a 	call	0x3426	; 0x3426 <u8g2_font_get_glyph_data>
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	f1 f0       	breq	.+60     	; 0x359a <u8g2_GetGlyphWidth+0x4e>
    355e:	bc 01       	movw	r22, r24
    3560:	ce 01       	movw	r24, r28
    3562:	0e 94 6f 18 	call	0x30de	; 0x30de <u8g2_font_setup_decode>
    3566:	8e 01       	movw	r16, r28
    3568:	07 5c       	subi	r16, 0xC7	; 199
    356a:	1f 4f       	sbci	r17, 0xFF	; 255
    356c:	fe 01       	movw	r30, r28
    356e:	e4 5b       	subi	r30, 0xB4	; 180
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	60 81       	ld	r22, Z
    3574:	c8 01       	movw	r24, r16
    3576:	0e 94 9d 18 	call	0x313a	; 0x313a <u8g2_font_decode_get_signed_bits>
    357a:	fe 01       	movw	r30, r28
    357c:	ef 59       	subi	r30, 0x9F	; 159
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 83       	st	Z, r24
    3582:	74 97       	sbiw	r30, 0x14	; 20
    3584:	60 81       	ld	r22, Z
    3586:	c8 01       	movw	r24, r16
    3588:	0e 94 9d 18 	call	0x313a	; 0x313a <u8g2_font_decode_get_signed_bits>
    358c:	c2 5b       	subi	r28, 0xB2	; 178
    358e:	df 4f       	sbci	r29, 0xFF	; 255
    3590:	68 81       	ld	r22, Y
    3592:	c8 01       	movw	r24, r16
    3594:	0e 94 9d 18 	call	0x313a	; 0x313a <u8g2_font_decode_get_signed_bits>
    3598:	01 c0       	rjmp	.+2      	; 0x359c <u8g2_GetGlyphWidth+0x50>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	1f 91       	pop	r17
    35a2:	0f 91       	pop	r16
    35a4:	08 95       	ret

000035a6 <u8g2_string_width>:
    35a6:	ef 92       	push	r14
    35a8:	ff 92       	push	r15
    35aa:	0f 93       	push	r16
    35ac:	1f 93       	push	r17
    35ae:	cf 93       	push	r28
    35b0:	df 93       	push	r29
    35b2:	ec 01       	movw	r28, r24
    35b4:	e6 2e       	mov	r14, r22
    35b6:	f7 2e       	mov	r15, r23
    35b8:	1f ae       	std	Y+63, r1	; 0x3f
    35ba:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <u8x8_utf8_init>
    35be:	0e 2d       	mov	r16, r14
    35c0:	1f 2d       	mov	r17, r15
    35c2:	e1 2c       	mov	r14, r1
    35c4:	f1 2c       	mov	r15, r1
    35c6:	f8 01       	movw	r30, r16
    35c8:	61 91       	ld	r22, Z+
    35ca:	8f 01       	movw	r16, r30
    35cc:	ea 81       	ldd	r30, Y+2	; 0x02
    35ce:	fb 81       	ldd	r31, Y+3	; 0x03
    35d0:	ce 01       	movw	r24, r28
    35d2:	09 95       	icall
    35d4:	8f 3f       	cpi	r24, 0xFF	; 255
    35d6:	ff ef       	ldi	r31, 0xFF	; 255
    35d8:	9f 07       	cpc	r25, r31
    35da:	59 f0       	breq	.+22     	; 0x35f2 <u8g2_string_width+0x4c>
    35dc:	8e 3f       	cpi	r24, 0xFE	; 254
    35de:	2f ef       	ldi	r18, 0xFF	; 255
    35e0:	92 07       	cpc	r25, r18
    35e2:	89 f3       	breq	.-30     	; 0x35c6 <u8g2_string_width+0x20>
    35e4:	bc 01       	movw	r22, r24
    35e6:	ce 01       	movw	r24, r28
    35e8:	0e 94 a6 1a 	call	0x354c	; 0x354c <u8g2_GetGlyphWidth>
    35ec:	e8 2e       	mov	r14, r24
    35ee:	f8 0e       	add	r15, r24
    35f0:	ea cf       	rjmp	.-44     	; 0x35c6 <u8g2_string_width+0x20>
    35f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    35f4:	88 23       	and	r24, r24
    35f6:	31 f0       	breq	.+12     	; 0x3604 <u8g2_string_width+0x5e>
    35f8:	cf 59       	subi	r28, 0x9F	; 159
    35fa:	df 4f       	sbci	r29, 0xFF	; 255
    35fc:	98 81       	ld	r25, Y
    35fe:	89 0f       	add	r24, r25
    3600:	f8 0e       	add	r15, r24
    3602:	fe 18       	sub	r15, r14
    3604:	8f 2d       	mov	r24, r15
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	ff 90       	pop	r15
    3610:	ef 90       	pop	r14
    3612:	08 95       	ret

00003614 <u8g2_DrawGlyph>:
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	ec 01       	movw	r28, r24
    3622:	06 2f       	mov	r16, r22
    3624:	14 2f       	mov	r17, r20
    3626:	79 01       	movw	r14, r18
    3628:	fc 01       	movw	r30, r24
    362a:	eb 5b       	subi	r30, 0xBB	; 187
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 81       	ld	r24, Z
    3630:	81 30       	cpi	r24, 0x01	; 1
    3632:	61 f0       	breq	.+24     	; 0x364c <u8g2_DrawGlyph+0x38>
    3634:	28 f0       	brcs	.+10     	; 0x3640 <u8g2_DrawGlyph+0x2c>
    3636:	82 30       	cpi	r24, 0x02	; 2
    3638:	79 f0       	breq	.+30     	; 0x3658 <u8g2_DrawGlyph+0x44>
    363a:	83 30       	cpi	r24, 0x03	; 3
    363c:	99 f0       	breq	.+38     	; 0x3664 <u8g2_DrawGlyph+0x50>
    363e:	17 c0       	rjmp	.+46     	; 0x366e <u8g2_DrawGlyph+0x5a>
    3640:	ef a9       	ldd	r30, Y+55	; 0x37
    3642:	f8 ad       	ldd	r31, Y+56	; 0x38
    3644:	ce 01       	movw	r24, r28
    3646:	09 95       	icall
    3648:	18 0f       	add	r17, r24
    364a:	11 c0       	rjmp	.+34     	; 0x366e <u8g2_DrawGlyph+0x5a>
    364c:	ef a9       	ldd	r30, Y+55	; 0x37
    364e:	f8 ad       	ldd	r31, Y+56	; 0x38
    3650:	ce 01       	movw	r24, r28
    3652:	09 95       	icall
    3654:	08 1b       	sub	r16, r24
    3656:	0b c0       	rjmp	.+22     	; 0x366e <u8g2_DrawGlyph+0x5a>
    3658:	ef a9       	ldd	r30, Y+55	; 0x37
    365a:	f8 ad       	ldd	r31, Y+56	; 0x38
    365c:	ce 01       	movw	r24, r28
    365e:	09 95       	icall
    3660:	18 1b       	sub	r17, r24
    3662:	05 c0       	rjmp	.+10     	; 0x366e <u8g2_DrawGlyph+0x5a>
    3664:	ef a9       	ldd	r30, Y+55	; 0x37
    3666:	f8 ad       	ldd	r31, Y+56	; 0x38
    3668:	ce 01       	movw	r24, r28
    366a:	09 95       	icall
    366c:	08 0f       	add	r16, r24
    366e:	0b af       	std	Y+59, r16	; 0x3b
    3670:	1c af       	std	Y+60, r17	; 0x3c
    3672:	b7 01       	movw	r22, r14
    3674:	ce 01       	movw	r24, r28
    3676:	0e 94 13 1a 	call	0x3426	; 0x3426 <u8g2_font_get_glyph_data>
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	29 f0       	breq	.+10     	; 0x3688 <u8g2_DrawGlyph+0x74>
    367e:	bc 01       	movw	r22, r24
    3680:	ce 01       	movw	r24, r28
    3682:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <u8g2_font_decode_glyph>
    3686:	01 c0       	rjmp	.+2      	; 0x368a <u8g2_DrawGlyph+0x76>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	ff 90       	pop	r15
    3694:	ef 90       	pop	r14
    3696:	08 95       	ret

00003698 <u8g2_draw_string>:
    3698:	bf 92       	push	r11
    369a:	cf 92       	push	r12
    369c:	df 92       	push	r13
    369e:	ef 92       	push	r14
    36a0:	ff 92       	push	r15
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	cf 93       	push	r28
    36a8:	df 93       	push	r29
    36aa:	ec 01       	movw	r28, r24
    36ac:	b6 2e       	mov	r11, r22
    36ae:	c4 2e       	mov	r12, r20
    36b0:	e2 2e       	mov	r14, r18
    36b2:	f3 2e       	mov	r15, r19
    36b4:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <u8x8_utf8_init>
    36b8:	0e 2d       	mov	r16, r14
    36ba:	1f 2d       	mov	r17, r15
    36bc:	d1 2c       	mov	r13, r1
    36be:	7e 01       	movw	r14, r28
    36c0:	25 e4       	ldi	r18, 0x45	; 69
    36c2:	e2 0e       	add	r14, r18
    36c4:	f1 1c       	adc	r15, r1
    36c6:	f8 01       	movw	r30, r16
    36c8:	61 91       	ld	r22, Z+
    36ca:	8f 01       	movw	r16, r30
    36cc:	ea 81       	ldd	r30, Y+2	; 0x02
    36ce:	fb 81       	ldd	r31, Y+3	; 0x03
    36d0:	ce 01       	movw	r24, r28
    36d2:	09 95       	icall
    36d4:	8f 3f       	cpi	r24, 0xFF	; 255
    36d6:	ff ef       	ldi	r31, 0xFF	; 255
    36d8:	9f 07       	cpc	r25, r31
    36da:	e9 f0       	breq	.+58     	; 0x3716 <u8g2_draw_string+0x7e>
    36dc:	8e 3f       	cpi	r24, 0xFE	; 254
    36de:	2f ef       	ldi	r18, 0xFF	; 255
    36e0:	92 07       	cpc	r25, r18
    36e2:	89 f3       	breq	.-30     	; 0x36c6 <u8g2_draw_string+0x2e>
    36e4:	9c 01       	movw	r18, r24
    36e6:	4c 2d       	mov	r20, r12
    36e8:	6b 2d       	mov	r22, r11
    36ea:	ce 01       	movw	r24, r28
    36ec:	0e 94 0a 1b 	call	0x3614	; 0x3614 <u8g2_DrawGlyph>
    36f0:	f7 01       	movw	r30, r14
    36f2:	90 81       	ld	r25, Z
    36f4:	91 30       	cpi	r25, 0x01	; 1
    36f6:	41 f0       	breq	.+16     	; 0x3708 <u8g2_draw_string+0x70>
    36f8:	28 f0       	brcs	.+10     	; 0x3704 <u8g2_draw_string+0x6c>
    36fa:	92 30       	cpi	r25, 0x02	; 2
    36fc:	39 f0       	breq	.+14     	; 0x370c <u8g2_draw_string+0x74>
    36fe:	93 30       	cpi	r25, 0x03	; 3
    3700:	39 f0       	breq	.+14     	; 0x3710 <u8g2_draw_string+0x78>
    3702:	07 c0       	rjmp	.+14     	; 0x3712 <u8g2_draw_string+0x7a>
    3704:	b8 0e       	add	r11, r24
    3706:	05 c0       	rjmp	.+10     	; 0x3712 <u8g2_draw_string+0x7a>
    3708:	c8 0e       	add	r12, r24
    370a:	03 c0       	rjmp	.+6      	; 0x3712 <u8g2_draw_string+0x7a>
    370c:	b8 1a       	sub	r11, r24
    370e:	01 c0       	rjmp	.+2      	; 0x3712 <u8g2_draw_string+0x7a>
    3710:	c8 1a       	sub	r12, r24
    3712:	d8 0e       	add	r13, r24
    3714:	d8 cf       	rjmp	.-80     	; 0x36c6 <u8g2_draw_string+0x2e>
    3716:	8d 2d       	mov	r24, r13
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	bf 90       	pop	r11
    372a:	08 95       	ret

0000372c <u8g2_DrawStr>:
    372c:	e8 e0       	ldi	r30, 0x08	; 8
    372e:	fe e1       	ldi	r31, 0x1E	; 30
    3730:	dc 01       	movw	r26, r24
    3732:	13 96       	adiw	r26, 0x03	; 3
    3734:	fc 93       	st	X, r31
    3736:	ee 93       	st	-X, r30
    3738:	12 97       	sbiw	r26, 0x02	; 2
    373a:	0e 94 4c 1b 	call	0x3698	; 0x3698 <u8g2_draw_string>
    373e:	08 95       	ret

00003740 <u8g2_UpdateRefHeight>:
    3740:	fc 01       	movw	r30, r24
    3742:	25 a9       	ldd	r18, Z+53	; 0x35
    3744:	36 a9       	ldd	r19, Z+54	; 0x36
    3746:	23 2b       	or	r18, r19
    3748:	e9 f1       	breq	.+122    	; 0x37c4 <u8g2_UpdateRefHeight+0x84>
    374a:	ed 5a       	subi	r30, 0xAD	; 173
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	20 81       	ld	r18, Z
    3750:	3c 96       	adiw	r30, 0x0c	; 12
    3752:	20 83       	st	Z, r18
    3754:	3b 97       	sbiw	r30, 0x0b	; 11
    3756:	40 81       	ld	r20, Z
    3758:	3c 96       	adiw	r30, 0x0c	; 12
    375a:	40 83       	st	Z, r20
    375c:	32 97       	sbiw	r30, 0x02	; 2
    375e:	30 81       	ld	r19, Z
    3760:	33 23       	and	r19, r19
    3762:	81 f1       	breq	.+96     	; 0x37c4 <u8g2_UpdateRefHeight+0x84>
    3764:	31 30       	cpi	r19, 0x01	; 1
    3766:	79 f4       	brne	.+30     	; 0x3786 <u8g2_UpdateRefHeight+0x46>
    3768:	39 97       	sbiw	r30, 0x09	; 9
    376a:	30 81       	ld	r19, Z
    376c:	23 17       	cp	r18, r19
    376e:	14 f4       	brge	.+4      	; 0x3774 <u8g2_UpdateRefHeight+0x34>
    3770:	3a 96       	adiw	r30, 0x0a	; 10
    3772:	30 83       	st	Z, r19
    3774:	fc 01       	movw	r30, r24
    3776:	ea 5a       	subi	r30, 0xAA	; 170
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	20 81       	ld	r18, Z
    377c:	24 17       	cp	r18, r20
    377e:	14 f5       	brge	.+68     	; 0x37c4 <u8g2_UpdateRefHeight+0x84>
    3780:	3a 96       	adiw	r30, 0x0a	; 10
    3782:	20 83       	st	Z, r18
    3784:	08 95       	ret
    3786:	fc 01       	movw	r30, r24
    3788:	e0 5b       	subi	r30, 0xB0	; 176
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	e0 81       	ld	r30, Z
    378e:	dc 01       	movw	r26, r24
    3790:	ae 5a       	subi	r26, 0xAE	; 174
    3792:	bf 4f       	sbci	r27, 0xFF	; 255
    3794:	5c 91       	ld	r21, X
    3796:	02 2e       	mov	r0, r18
    3798:	00 0c       	add	r0, r0
    379a:	33 0b       	sbc	r19, r19
    379c:	65 2f       	mov	r22, r21
    379e:	05 2e       	mov	r0, r21
    37a0:	00 0c       	add	r0, r0
    37a2:	77 0b       	sbc	r23, r23
    37a4:	6e 0f       	add	r22, r30
    37a6:	71 1d       	adc	r23, r1
    37a8:	e7 fd       	sbrc	r30, 7
    37aa:	7a 95       	dec	r23
    37ac:	26 17       	cp	r18, r22
    37ae:	37 07       	cpc	r19, r23
    37b0:	1c f4       	brge	.+6      	; 0x37b8 <u8g2_UpdateRefHeight+0x78>
    37b2:	1d 96       	adiw	r26, 0x0d	; 13
    37b4:	e5 0f       	add	r30, r21
    37b6:	ec 93       	st	X, r30
    37b8:	54 17       	cp	r21, r20
    37ba:	24 f4       	brge	.+8      	; 0x37c4 <u8g2_UpdateRefHeight+0x84>
    37bc:	fc 01       	movw	r30, r24
    37be:	e0 5a       	subi	r30, 0xA0	; 160
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	50 83       	st	Z, r21
    37c4:	08 95       	ret

000037c6 <u8g2_SetFontPosBaseline>:
    37c6:	2e ed       	ldi	r18, 0xDE	; 222
    37c8:	37 e1       	ldi	r19, 0x17	; 23
    37ca:	fc 01       	movw	r30, r24
    37cc:	30 af       	std	Z+56, r19	; 0x38
    37ce:	27 ab       	std	Z+55, r18	; 0x37
    37d0:	08 95       	ret

000037d2 <u8g2_SetFont>:
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	fc 01       	movw	r30, r24
    37d8:	25 a9       	ldd	r18, Z+53	; 0x35
    37da:	36 a9       	ldd	r19, Z+54	; 0x36
    37dc:	26 17       	cp	r18, r22
    37de:	37 07       	cpc	r19, r23
    37e0:	51 f0       	breq	.+20     	; 0x37f6 <u8g2_SetFont+0x24>
    37e2:	ec 01       	movw	r28, r24
    37e4:	76 ab       	std	Z+54, r23	; 0x36
    37e6:	65 ab       	std	Z+53, r22	; 0x35
    37e8:	8a 5b       	subi	r24, 0xBA	; 186
    37ea:	9f 4f       	sbci	r25, 0xFF	; 255
    37ec:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <u8g2_read_font_info>
    37f0:	ce 01       	movw	r24, r28
    37f2:	0e 94 a0 1b 	call	0x3740	; 0x3740 <u8g2_UpdateRefHeight>
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	08 95       	ret

000037fc <u8g2_GetStrWidth>:
    37fc:	28 e0       	ldi	r18, 0x08	; 8
    37fe:	3e e1       	ldi	r19, 0x1E	; 30
    3800:	fc 01       	movw	r30, r24
    3802:	33 83       	std	Z+3, r19	; 0x03
    3804:	22 83       	std	Z+2, r18	; 0x02
    3806:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <u8g2_string_width>
    380a:	08 95       	ret

0000380c <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    380c:	8b 5b       	subi	r24, 0xBB	; 187
    380e:	9f 4f       	sbci	r25, 0xFF	; 255
    3810:	fc 01       	movw	r30, r24
    3812:	60 83       	st	Z, r22
    3814:	08 95       	ret

00003816 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3816:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    3818:	dc 01       	movw	r26, r24
    381a:	98 96       	adiw	r26, 0x28	; 40
    381c:	3c 91       	ld	r19, X
    381e:	98 97       	sbiw	r26, 0x28	; 40
    3820:	43 1b       	sub	r20, r19
    3822:	5e 96       	adiw	r26, 0x1e	; 30
    3824:	ed 91       	ld	r30, X+
    3826:	fc 91       	ld	r31, X
    3828:	5f 97       	sbiw	r26, 0x1f	; 31
    382a:	09 95       	icall
}
    382c:	0f 91       	pop	r16
    382e:	08 95       	ret

00003830 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3830:	0f 93       	push	r16
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    3832:	fc 01       	movw	r30, r24
    3834:	e3 5a       	subi	r30, 0xA3	; 163
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	30 81       	ld	r19, Z
    383a:	33 23       	and	r19, r19
    383c:	09 f4       	brne	.+2      	; 0x3840 <u8g2_DrawHVLine+0x10>
    383e:	65 c0       	rjmp	.+202    	; 0x390a <u8g2_DrawHVLine+0xda>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    3840:	22 23       	and	r18, r18
    3842:	09 f4       	brne	.+2      	; 0x3846 <u8g2_DrawHVLine+0x16>
    3844:	62 c0       	rjmp	.+196    	; 0x390a <u8g2_DrawHVLine+0xda>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    3846:	22 30       	cpi	r18, 0x02	; 2
    3848:	58 f0       	brcs	.+22     	; 0x3860 <u8g2_DrawHVLine+0x30>
      {
	if ( dir == 2 )
    384a:	02 30       	cpi	r16, 0x02	; 2
    384c:	19 f4       	brne	.+6      	; 0x3854 <u8g2_DrawHVLine+0x24>
    384e:	6f 5f       	subi	r22, 0xFF	; 255
	{
	  x -= len;
	  x++;
    3850:	62 1b       	sub	r22, r18
    3852:	0a c0       	rjmp	.+20     	; 0x3868 <u8g2_DrawHVLine+0x38>
	}
	else if ( dir == 3 )
    3854:	03 30       	cpi	r16, 0x03	; 3
    3856:	21 f4       	brne	.+8      	; 0x3860 <u8g2_DrawHVLine+0x30>
    3858:	4f 5f       	subi	r20, 0xFF	; 255
	{
	  y -= len;
	  y++;
    385a:	42 1b       	sub	r20, r18
	}
      }
      dir &= 1;  
    385c:	51 e0       	ldi	r21, 0x01	; 1
    385e:	2d c0       	rjmp	.+90     	; 0x38ba <u8g2_DrawHVLine+0x8a>
      
      /* clip against the user window */
      if ( dir == 0 )
    3860:	50 2f       	mov	r21, r16
    3862:	51 70       	andi	r21, 0x01	; 1
    3864:	00 fd       	sbrc	r16, 0
    3866:	29 c0       	rjmp	.+82     	; 0x38ba <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
    3868:	dc 01       	movw	r26, r24
    386a:	9f 96       	adiw	r26, 0x2f	; 47
    386c:	3c 91       	ld	r19, X
    386e:	9f 97       	sbiw	r26, 0x2f	; 47
    3870:	43 17       	cp	r20, r19
    3872:	08 f4       	brcc	.+2      	; 0x3876 <u8g2_DrawHVLine+0x46>
    3874:	4a c0       	rjmp	.+148    	; 0x390a <u8g2_DrawHVLine+0xda>
	  return;
	if ( y >= u8g2->user_y1 )
    3876:	d0 96       	adiw	r26, 0x30	; 48
    3878:	3c 91       	ld	r19, X
    387a:	d0 97       	sbiw	r26, 0x30	; 48
    387c:	43 17       	cp	r20, r19
    387e:	08 f0       	brcs	.+2      	; 0x3882 <u8g2_DrawHVLine+0x52>
    3880:	44 c0       	rjmp	.+136    	; 0x390a <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    3882:	9e 96       	adiw	r26, 0x2e	; 46
    3884:	3c 91       	ld	r19, X
    3886:	9e 97       	sbiw	r26, 0x2e	; 46
    3888:	9d 96       	adiw	r26, 0x2d	; 45
    388a:	5c 91       	ld	r21, X
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    388c:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    388e:	26 17       	cp	r18, r22
    3890:	30 f4       	brcc	.+12     	; 0x389e <u8g2_DrawHVLine+0x6e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    3892:	63 17       	cp	r22, r19
    3894:	18 f4       	brcc	.+6      	; 0x389c <u8g2_DrawHVLine+0x6c>
    {
      b = d;
      b--;
    3896:	2f ef       	ldi	r18, 0xFF	; 255
    3898:	23 0f       	add	r18, r19
    389a:	03 c0       	rjmp	.+6      	; 0x38a2 <u8g2_DrawHVLine+0x72>
    }
    else
    {
      a = c;
    389c:	65 2f       	mov	r22, r21
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    389e:	63 17       	cp	r22, r19
    38a0:	a0 f5       	brcc	.+104    	; 0x390a <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    38a2:	52 17       	cp	r21, r18
    38a4:	90 f5       	brcc	.+100    	; 0x390a <u8g2_DrawHVLine+0xda>
    38a6:	65 17       	cp	r22, r21
    38a8:	08 f4       	brcc	.+2      	; 0x38ac <u8g2_DrawHVLine+0x7c>
    38aa:	65 2f       	mov	r22, r21
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    38ac:	23 17       	cp	r18, r19
    38ae:	08 f4       	brcc	.+2      	; 0x38b2 <u8g2_DrawHVLine+0x82>
    38b0:	32 2f       	mov	r19, r18
    38b2:	23 2f       	mov	r18, r19
    38b4:	26 1b       	sub	r18, r22
    38b6:	50 e0       	ldi	r21, 0x00	; 0
    38b8:	1e c0       	rjmp	.+60     	; 0x38f6 <u8g2_DrawHVLine+0xc6>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    38ba:	fc 01       	movw	r30, r24
    38bc:	35 a5       	ldd	r19, Z+45	; 0x2d
    38be:	63 17       	cp	r22, r19
    38c0:	20 f1       	brcs	.+72     	; 0x390a <u8g2_DrawHVLine+0xda>
	  return;
	if ( x >= u8g2->user_x1 )
    38c2:	36 a5       	ldd	r19, Z+46	; 0x2e
    38c4:	63 17       	cp	r22, r19
    38c6:	08 f5       	brcc	.+66     	; 0x390a <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    38c8:	30 a9       	ldd	r19, Z+48	; 0x30
    38ca:	77 a5       	ldd	r23, Z+47	; 0x2f
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    38cc:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    38ce:	24 17       	cp	r18, r20
    38d0:	30 f4       	brcc	.+12     	; 0x38de <u8g2_DrawHVLine+0xae>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    38d2:	43 17       	cp	r20, r19
    38d4:	18 f4       	brcc	.+6      	; 0x38dc <u8g2_DrawHVLine+0xac>
    {
      b = d;
      b--;
    38d6:	2f ef       	ldi	r18, 0xFF	; 255
    38d8:	23 0f       	add	r18, r19
    38da:	03 c0       	rjmp	.+6      	; 0x38e2 <u8g2_DrawHVLine+0xb2>
    }
    else
    {
      a = c;
    38dc:	47 2f       	mov	r20, r23
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    38de:	43 17       	cp	r20, r19
    38e0:	a0 f4       	brcc	.+40     	; 0x390a <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    38e2:	72 17       	cp	r23, r18
    38e4:	90 f4       	brcc	.+36     	; 0x390a <u8g2_DrawHVLine+0xda>
    38e6:	47 17       	cp	r20, r23
    38e8:	08 f4       	brcc	.+2      	; 0x38ec <u8g2_DrawHVLine+0xbc>
    38ea:	47 2f       	mov	r20, r23
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    38ec:	23 17       	cp	r18, r19
    38ee:	08 f4       	brcc	.+2      	; 0x38f2 <u8g2_DrawHVLine+0xc2>
    38f0:	32 2f       	mov	r19, r18
    38f2:	23 2f       	mov	r18, r19
    38f4:	24 1b       	sub	r18, r20
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    38f6:	dc 01       	movw	r26, r24
    38f8:	90 96       	adiw	r26, 0x20	; 32
    38fa:	ed 91       	ld	r30, X+
    38fc:	fc 91       	ld	r31, X
    38fe:	91 97       	sbiw	r26, 0x21	; 33
    3900:	04 80       	ldd	r0, Z+4	; 0x04
    3902:	f5 81       	ldd	r31, Z+5	; 0x05
    3904:	e0 2d       	mov	r30, r0
    3906:	05 2f       	mov	r16, r21
    3908:	09 95       	icall
    }
}
    390a:	0f 91       	pop	r16
    390c:	08 95       	ret

0000390e <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    390e:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    3910:	00 e0       	ldi	r16, 0x00	; 0
    3912:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
}
    3916:	0f 91       	pop	r16
    3918:	08 95       	ret

0000391a <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    391a:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
    391c:	01 e0       	ldi	r16, 0x01	; 1
    391e:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
}
    3922:	0f 91       	pop	r16
    3924:	08 95       	ret

00003926 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    3926:	0f 93       	push	r16
    3928:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    392a:	87 a5       	ldd	r24, Z+47	; 0x2f
    392c:	48 17       	cp	r20, r24
    392e:	70 f0       	brcs	.+28     	; 0x394c <u8g2_DrawPixel+0x26>
    return;
  if ( y >= u8g2->user_y1 )
    3930:	80 a9       	ldd	r24, Z+48	; 0x30
    3932:	48 17       	cp	r20, r24
    3934:	58 f4       	brcc	.+22     	; 0x394c <u8g2_DrawPixel+0x26>
    return;
  if ( x < u8g2->user_x0 )
    3936:	85 a5       	ldd	r24, Z+45	; 0x2d
    3938:	68 17       	cp	r22, r24
    393a:	40 f0       	brcs	.+16     	; 0x394c <u8g2_DrawPixel+0x26>
    return;
  if ( x >= u8g2->user_x1 )
    393c:	86 a5       	ldd	r24, Z+46	; 0x2e
    393e:	68 17       	cp	r22, r24
    3940:	28 f4       	brcc	.+10     	; 0x394c <u8g2_DrawPixel+0x26>
    3942:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    3944:	00 e0       	ldi	r16, 0x00	; 0
    3946:	21 e0       	ldi	r18, 0x01	; 1
    3948:	0e 94 18 1c 	call	0x3830	; 0x3830 <u8g2_DrawHVLine>
}
    394c:	0f 91       	pop	r16
    394e:	08 95       	ret

00003950 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    3950:	63 30       	cpi	r22, 0x03	; 3
    3952:	28 f4       	brcc	.+10     	; 0x395e <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    3954:	fc 01       	movw	r30, r24
    3956:	ed 59       	subi	r30, 0x9D	; 157
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	60 83       	st	Z, r22
    395c:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    395e:	fc 01       	movw	r30, r24
    3960:	ed 59       	subi	r30, 0x9D	; 157
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	21 e0       	ldi	r18, 0x01	; 1
    3966:	20 83       	st	Z, r18
    3968:	08 95       	ret

0000396a <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    396a:	46 17       	cp	r20, r22
    396c:	38 f4       	brcc	.+14     	; 0x397c <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
    396e:	82 17       	cp	r24, r18
    3970:	60 f0       	brcs	.+24     	; 0x398a <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	24 17       	cp	r18, r20
    3976:	60 f0       	brcs	.+24     	; 0x3990 <u8g2_is_intersection_decision_tree+0x26>
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    397c:	82 17       	cp	r24, r18
    397e:	38 f4       	brcc	.+14     	; 0x398e <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	24 17       	cp	r18, r20
    3984:	28 f0       	brcs	.+10     	; 0x3990 <u8g2_is_intersection_decision_tree+0x26>
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	08 95       	ret
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    398e:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    3990:	08 95       	ret

00003992 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	ec 01       	movw	r28, r24
    399e:	16 2f       	mov	r17, r22
    39a0:	f2 2e       	mov	r15, r18
    39a2:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    39a4:	68 a9       	ldd	r22, Y+48	; 0x30
    39a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a8:	0e 94 b5 1c 	call	0x396a	; 0x396a <u8g2_is_intersection_decision_tree>
    39ac:	88 23       	and	r24, r24
    39ae:	31 f0       	breq	.+12     	; 0x39bc <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    39b0:	2f 2d       	mov	r18, r15
    39b2:	41 2f       	mov	r20, r17
    39b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    39b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    39b8:	0e 94 b5 1c 	call	0x396a	; 0x396a <u8g2_is_intersection_decision_tree>
}
    39bc:	df 91       	pop	r29
    39be:	cf 91       	pop	r28
    39c0:	1f 91       	pop	r17
    39c2:	0f 91       	pop	r16
    39c4:	ff 90       	pop	r15
    39c6:	08 95       	ret

000039c8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    39d4:	34 2f       	mov	r19, r20
    39d6:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	03 2e       	mov	r0, r19
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    39e0:	88 0f       	add	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	0a 94       	dec	r0
    39e6:	e2 f7       	brpl	.-8      	; 0x39e0 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    39e8:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    39ea:	f7 01       	movw	r30, r14
    39ec:	ed 59       	subi	r30, 0x9D	; 157
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	50 81       	ld	r21, Z
    39f2:	52 30       	cpi	r21, 0x02	; 2
    39f4:	20 f4       	brcc	.+8      	; 0x39fe <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    39f6:	51 30       	cpi	r21, 0x01	; 1
    39f8:	21 f0       	breq	.+8      	; 0x3a02 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    39fa:	78 2f       	mov	r23, r24
    39fc:	04 c0       	rjmp	.+8      	; 0x3a06 <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	02 c0       	rjmp	.+4      	; 0x3a06 <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    3a02:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    3a04:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    3a06:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    3a08:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    3a0a:	d7 01       	movw	r26, r14
    3a0c:	92 96       	adiw	r26, 0x22	; 34
    3a0e:	8d 91       	ld	r24, X+
    3a10:	9c 91       	ld	r25, X
    3a12:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    3a14:	ed 91       	ld	r30, X+
    3a16:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    3a18:	d0 89       	ldd	r29, Z+16	; 0x10
    3a1a:	d4 9f       	mul	r29, r20
    3a1c:	f0 01       	movw	r30, r0
    3a1e:	d5 9f       	mul	r29, r21
    3a20:	f0 0d       	add	r31, r0
    3a22:	11 24       	eor	r1, r1
    3a24:	e6 0f       	add	r30, r22
    3a26:	f1 1d       	adc	r31, r1
    3a28:	e8 0f       	add	r30, r24
    3a2a:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    3a2c:	01 11       	cpse	r16, r1
    3a2e:	07 c0       	rjmp	.+14     	; 0x3a3e <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    3a30:	80 81       	ld	r24, Z
    3a32:	87 2b       	or	r24, r23
    3a34:	8c 27       	eor	r24, r28
    3a36:	81 93       	st	Z+, r24
	ptr++;
	len--;
    3a38:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    3a3a:	d1 f7       	brne	.-12     	; 0x3a30 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    3a3c:	22 c0       	rjmp	.+68     	; 0x3a82 <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    3a3e:	a7 01       	movw	r20, r14
    3a40:	4d 59       	subi	r20, 0x9D	; 157
    3a42:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    3a44:	90 81       	ld	r25, Z
    3a46:	97 2b       	or	r25, r23
    3a48:	9c 27       	eor	r25, r28
    3a4a:	90 83       	st	Z, r25
      
      bit_pos++;
    3a4c:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    3a4e:	37 70       	andi	r19, 0x07	; 7

      len--;
    3a50:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    3a52:	31 11       	cpse	r19, r1
    3a54:	0e c0       	rjmp	.+28     	; 0x3a72 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    3a56:	d7 01       	movw	r26, r14
    3a58:	96 96       	adiw	r26, 0x26	; 38
    3a5a:	8c 91       	ld	r24, X
    3a5c:	e8 0f       	add	r30, r24
    3a5e:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    3a60:	da 01       	movw	r26, r20
    3a62:	8c 91       	ld	r24, X
    3a64:	82 30       	cpi	r24, 0x02	; 2
    3a66:	40 f4       	brcc	.+16     	; 0x3a78 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    3a68:	81 30       	cpi	r24, 0x01	; 1
    3a6a:	41 f0       	breq	.+16     	; 0x3a7c <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    3a6c:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3a6e:	71 e0       	ldi	r23, 0x01	; 1
    3a70:	06 c0       	rjmp	.+12     	; 0x3a7e <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    3a72:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    3a74:	cc 0f       	add	r28, r28
    3a76:	03 c0       	rjmp	.+6      	; 0x3a7e <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    3a78:	c1 e0       	ldi	r28, 0x01	; 1
    3a7a:	01 c0       	rjmp	.+2      	; 0x3a7e <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3a7c:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    3a7e:	21 11       	cpse	r18, r1
    3a80:	e1 cf       	rjmp	.-62     	; 0x3a44 <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    3a82:	df 91       	pop	r29
    3a84:	cf 91       	pop	r28
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	08 95       	ret

00003a8e <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    3a8e:	fc 01       	movw	r30, r24
    3a90:	a0 81       	ld	r26, Z
    3a92:	b1 81       	ldd	r27, Z+1	; 0x01
    3a94:	84 a1       	ldd	r24, Z+36	; 0x24
    3a96:	98 2f       	mov	r25, r24
    3a98:	99 0f       	add	r25, r25
    3a9a:	99 0f       	add	r25, r25
    3a9c:	99 0f       	add	r25, r25
    3a9e:	97 a3       	std	Z+39, r25	; 0x27
    3aa0:	50 96       	adiw	r26, 0x10	; 16
    3aa2:	9c 91       	ld	r25, X
    3aa4:	50 97       	sbiw	r26, 0x10	; 16
    3aa6:	90 32       	cpi	r25, 0x20	; 32
    3aa8:	08 f0       	brcs	.+2      	; 0x3aac <u8g2_update_dimension_common+0x1e>
    3aaa:	9f e1       	ldi	r25, 0x1F	; 31
    3aac:	99 0f       	add	r25, r25
    3aae:	99 0f       	add	r25, r25
    3ab0:	99 0f       	add	r25, r25
    3ab2:	96 a3       	std	Z+38, r25	; 0x26
    3ab4:	45 a1       	ldd	r20, Z+37	; 0x25
    3ab6:	94 2f       	mov	r25, r20
    3ab8:	99 0f       	add	r25, r25
    3aba:	99 0f       	add	r25, r25
    3abc:	99 0f       	add	r25, r25
    3abe:	90 a7       	std	Z+40, r25	; 0x28
    3ac0:	51 96       	adiw	r26, 0x11	; 17
    3ac2:	5c 91       	ld	r21, X
    3ac4:	51 97       	sbiw	r26, 0x11	; 17
    3ac6:	24 2f       	mov	r18, r20
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	28 0f       	add	r18, r24
    3acc:	31 1d       	adc	r19, r1
    3ace:	65 2f       	mov	r22, r21
    3ad0:	70 e0       	ldi	r23, 0x00	; 0
    3ad2:	62 17       	cp	r22, r18
    3ad4:	73 07       	cpc	r23, r19
    3ad6:	14 f4       	brge	.+4      	; 0x3adc <u8g2_update_dimension_common+0x4e>
    3ad8:	85 2f       	mov	r24, r21
    3ada:	84 1b       	sub	r24, r20
    3adc:	91 a7       	std	Z+41, r25	; 0x29
    3ade:	88 0f       	add	r24, r24
    3ae0:	88 0f       	add	r24, r24
    3ae2:	88 0f       	add	r24, r24
    3ae4:	89 0f       	add	r24, r25
    3ae6:	82 a7       	std	Z+42, r24	; 0x2a
    3ae8:	80 ef       	ldi	r24, 0xF0	; 240
    3aea:	83 a7       	std	Z+43, r24	; 0x2b
    3aec:	54 96       	adiw	r26, 0x14	; 20
    3aee:	8d 91       	ld	r24, X+
    3af0:	9c 91       	ld	r25, X
    3af2:	55 97       	sbiw	r26, 0x15	; 21
    3af4:	81 3f       	cpi	r24, 0xF1	; 241
    3af6:	91 05       	cpc	r25, r1
    3af8:	08 f4       	brcc	.+2      	; 0x3afc <u8g2_update_dimension_common+0x6e>
    3afa:	83 a7       	std	Z+43, r24	; 0x2b
    3afc:	56 96       	adiw	r26, 0x16	; 22
    3afe:	8c 91       	ld	r24, X
    3b00:	84 a7       	std	Z+44, r24	; 0x2c
    3b02:	08 95       	ret

00003b04 <u8g2_update_dimension_r0>:
    3b04:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <u8g2_update_dimension_common>
    3b08:	08 95       	ret

00003b0a <u8g2_apply_clip_window>:
    3b0a:	0f 93       	push	r16
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	ec 01       	movw	r28, r24
    3b12:	0c a9       	ldd	r16, Y+52	; 0x34
    3b14:	2a a9       	ldd	r18, Y+50	; 0x32
    3b16:	4b a9       	ldd	r20, Y+51	; 0x33
    3b18:	69 a9       	ldd	r22, Y+49	; 0x31
    3b1a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <u8g2_IsIntersection>
    3b1e:	81 11       	cpse	r24, r1
    3b20:	04 c0       	rjmp	.+8      	; 0x3b2a <u8g2_apply_clip_window+0x20>
    3b22:	c3 5a       	subi	r28, 0xA3	; 163
    3b24:	df 4f       	sbci	r29, 0xFF	; 255
    3b26:	18 82       	st	Y, r1
    3b28:	19 c0       	rjmp	.+50     	; 0x3b5c <u8g2_apply_clip_window+0x52>
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e3 5a       	subi	r30, 0xA3	; 163
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	80 83       	st	Z, r24
    3b34:	89 a9       	ldd	r24, Y+49	; 0x31
    3b36:	9d a5       	ldd	r25, Y+45	; 0x2d
    3b38:	98 17       	cp	r25, r24
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <u8g2_apply_clip_window+0x34>
    3b3c:	8d a7       	std	Y+45, r24	; 0x2d
    3b3e:	8a a9       	ldd	r24, Y+50	; 0x32
    3b40:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b42:	89 17       	cp	r24, r25
    3b44:	08 f4       	brcc	.+2      	; 0x3b48 <u8g2_apply_clip_window+0x3e>
    3b46:	8e a7       	std	Y+46, r24	; 0x2e
    3b48:	8b a9       	ldd	r24, Y+51	; 0x33
    3b4a:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b4c:	98 17       	cp	r25, r24
    3b4e:	08 f4       	brcc	.+2      	; 0x3b52 <u8g2_apply_clip_window+0x48>
    3b50:	8f a7       	std	Y+47, r24	; 0x2f
    3b52:	8c a9       	ldd	r24, Y+52	; 0x34
    3b54:	98 a9       	ldd	r25, Y+48	; 0x30
    3b56:	89 17       	cp	r24, r25
    3b58:	08 f4       	brcc	.+2      	; 0x3b5c <u8g2_apply_clip_window+0x52>
    3b5a:	88 ab       	std	Y+48, r24	; 0x30
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	0f 91       	pop	r16
    3b62:	08 95       	ret

00003b64 <u8g2_update_page_win_r0>:
    3b64:	fc 01       	movw	r30, r24
    3b66:	15 a6       	std	Z+45, r1	; 0x2d
    3b68:	83 a5       	ldd	r24, Z+43	; 0x2b
    3b6a:	86 a7       	std	Z+46, r24	; 0x2e
    3b6c:	81 a5       	ldd	r24, Z+41	; 0x29
    3b6e:	87 a7       	std	Z+47, r24	; 0x2f
    3b70:	82 a5       	ldd	r24, Z+42	; 0x2a
    3b72:	80 ab       	std	Z+48, r24	; 0x30
    3b74:	cf 01       	movw	r24, r30
    3b76:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <u8g2_apply_clip_window>
    3b7a:	08 95       	ret

00003b7c <u8g2_draw_l90_r0>:
    3b7c:	0f 93       	push	r16
    3b7e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <u8g2_draw_hv_line_2dir>
    3b82:	0f 91       	pop	r16
    3b84:	08 95       	ret

00003b86 <u8g2_SetMaxClipWindow>:
    3b86:	dc 01       	movw	r26, r24
    3b88:	d1 96       	adiw	r26, 0x31	; 49
    3b8a:	1c 92       	st	X, r1
    3b8c:	d1 97       	sbiw	r26, 0x31	; 49
    3b8e:	d3 96       	adiw	r26, 0x33	; 51
    3b90:	1c 92       	st	X, r1
    3b92:	d3 97       	sbiw	r26, 0x33	; 51
    3b94:	8f ef       	ldi	r24, 0xFF	; 255
    3b96:	d2 96       	adiw	r26, 0x32	; 50
    3b98:	8c 93       	st	X, r24
    3b9a:	d2 97       	sbiw	r26, 0x32	; 50
    3b9c:	d4 96       	adiw	r26, 0x34	; 52
    3b9e:	8c 93       	st	X, r24
    3ba0:	d4 97       	sbiw	r26, 0x34	; 52
    3ba2:	90 96       	adiw	r26, 0x20	; 32
    3ba4:	ed 91       	ld	r30, X+
    3ba6:	fc 91       	ld	r31, X
    3ba8:	91 97       	sbiw	r26, 0x21	; 33
    3baa:	02 80       	ldd	r0, Z+2	; 0x02
    3bac:	f3 81       	ldd	r31, Z+3	; 0x03
    3bae:	e0 2d       	mov	r30, r0
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	09 95       	icall
    3bb4:	08 95       	ret

00003bb6 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    3bc0:	1e aa       	std	Y+54, r1	; 0x36
    3bc2:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    3bc4:	3f 8f       	std	Y+31, r19	; 0x1f
    3bc6:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    3bc8:	7b a3       	std	Y+35, r23	; 0x23
    3bca:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    3bcc:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    3bce:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	ee 5b       	subi	r30, 0xBE	; 190
    3bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd6:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    3bd8:	b0 96       	adiw	r30, 0x20	; 32
    3bda:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    3bdc:	31 96       	adiw	r30, 0x01	; 1
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    3be2:	31 96       	adiw	r30, 0x01	; 1
    3be4:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    3be6:	19 a3       	std	Y+33, r17	; 0x21
    3be8:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    3bea:	d8 01       	movw	r26, r16
    3bec:	ed 91       	ld	r30, X+
    3bee:	fc 91       	ld	r31, X
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    3bf4:	ce 01       	movw	r24, r28
    3bf6:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    3c00:	cb 5b       	subi	r28, 0xBB	; 187
    3c02:	df 4f       	sbci	r29, 0xFF	; 255
    3c04:	18 82       	st	Y, r1
#endif
}
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	08 95       	ret

00003c10 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    3c10:	66 23       	and	r22, r22
    3c12:	29 f0       	breq	.+10     	; 0x3c1e <u8x8_ascii_next+0xe>
    3c14:	6a 30       	cpi	r22, 0x0A	; 10
    3c16:	31 f0       	breq	.+12     	; 0x3c24 <u8x8_ascii_next+0x14>
    3c18:	86 2f       	mov	r24, r22
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	08 95       	ret
    3c1e:	8f ef       	ldi	r24, 0xFF	; 255
    3c20:	9f ef       	ldi	r25, 0xFF	; 255
    3c22:	08 95       	ret
    3c24:	8f ef       	ldi	r24, 0xFF	; 255
    3c26:	9f ef       	ldi	r25, 0xFF	; 255
    3c28:	08 95       	ret

00003c2a <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	10 8e       	std	Z+24, r1	; 0x18
    3c2e:	08 95       	ret

00003c30 <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3c30:	0f 93       	push	r16
    3c32:	1f 93       	push	r17
    3c34:	cf 93       	push	r28
    3c36:	df 93       	push	r29
	uint8_t *data;
	switch(msg){
    3c38:	68 31       	cpi	r22, 0x18	; 24
    3c3a:	19 f1       	breq	.+70     	; 0x3c82 <u8x8_byte_avr_hw_i2c+0x52>
    3c3c:	28 f4       	brcc	.+10     	; 0x3c48 <u8x8_byte_avr_hw_i2c+0x18>
    3c3e:	64 31       	cpi	r22, 0x14	; 20
    3c40:	e1 f0       	breq	.+56     	; 0x3c7a <u8x8_byte_avr_hw_i2c+0x4a>
    3c42:	67 31       	cpi	r22, 0x17	; 23
    3c44:	39 f0       	breq	.+14     	; 0x3c54 <u8x8_byte_avr_hw_i2c+0x24>
    3c46:	27 c0       	rjmp	.+78     	; 0x3c96 <u8x8_byte_avr_hw_i2c+0x66>
    3c48:	69 31       	cpi	r22, 0x19	; 25
    3c4a:	09 f1       	breq	.+66     	; 0x3c8e <u8x8_byte_avr_hw_i2c+0x5e>
    3c4c:	60 32       	cpi	r22, 0x20	; 32
    3c4e:	19 f5       	brne	.+70     	; 0x3c96 <u8x8_byte_avr_hw_i2c+0x66>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	24 c0       	rjmp	.+72     	; 0x3c9c <u8x8_byte_avr_hw_i2c+0x6c>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    3c54:	8f ef       	ldi	r24, 0xFF	; 255
    3c56:	84 0f       	add	r24, r20
    3c58:	44 23       	and	r20, r20
    3c5a:	f9 f0       	breq	.+62     	; 0x3c9a <u8x8_byte_avr_hw_i2c+0x6a>
    3c5c:	e9 01       	movw	r28, r18
    3c5e:	08 2f       	mov	r16, r24
    3c60:	10 e0       	ldi	r17, 0x00	; 0
    3c62:	0f 5f       	subi	r16, 0xFF	; 255
    3c64:	1f 4f       	sbci	r17, 0xFF	; 255
    3c66:	02 0f       	add	r16, r18
    3c68:	13 1f       	adc	r17, r19
				i2c_write(*data++);
    3c6a:	89 91       	ld	r24, Y+
    3c6c:	0e 94 66 14 	call	0x28cc	; 0x28cc <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    3c70:	0c 17       	cp	r16, r28
    3c72:	1d 07       	cpc	r17, r29
    3c74:	d1 f7       	brne	.-12     	; 0x3c6a <u8x8_byte_avr_hw_i2c+0x3a>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	11 c0       	rjmp	.+34     	; 0x3c9c <u8x8_byte_avr_hw_i2c+0x6c>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    3c7a:	0e 94 10 14 	call	0x2820	; 0x2820 <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    3c80:	0d c0       	rjmp	.+26     	; 0x3c9c <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    3c82:	fc 01       	movw	r30, r24
    3c84:	86 89       	ldd	r24, Z+22	; 0x16
    3c86:	0e 94 16 14 	call	0x282c	; 0x282c <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    3c8c:	07 c0       	rjmp	.+14     	; 0x3c9c <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    3c8e:	0e 94 56 14 	call	0x28ac	; 0x28ac <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    3c92:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    3c94:	03 c0       	rjmp	.+6      	; 0x3c9c <u8x8_byte_avr_hw_i2c+0x6c>
		default:
			return 0;
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	01 c0       	rjmp	.+2      	; 0x3c9c <u8x8_byte_avr_hw_i2c+0x6c>
	}
	return 1;
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
}
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	1f 91       	pop	r17
    3ca2:	0f 91       	pop	r16
    3ca4:	08 95       	ret

00003ca6 <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    3ca6:	6a 32       	cpi	r22, 0x2A	; 42
    3ca8:	51 f0       	breq	.+20     	; 0x3cbe <u8x8_avr_delay+0x18>
    3caa:	18 f4       	brcc	.+6      	; 0x3cb2 <u8x8_avr_delay+0xc>
    3cac:	69 32       	cpi	r22, 0x29	; 41
    3cae:	59 f0       	breq	.+22     	; 0x3cc6 <u8x8_avr_delay+0x20>
    3cb0:	33 c0       	rjmp	.+102    	; 0x3d18 <u8x8_avr_delay+0x72>
    3cb2:	6b 32       	cpi	r22, 0x2B	; 43
    3cb4:	61 f0       	breq	.+24     	; 0x3cce <u8x8_avr_delay+0x28>
    3cb6:	6c 32       	cpi	r22, 0x2C	; 44
    3cb8:	79 f5       	brne	.+94     	; 0x3d18 <u8x8_avr_delay+0x72>
			break;
		default:
			return 0;
	}

	return 1;
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	08 95       	ret
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3cbe:	41 11       	cpse	r20, r1
    3cc0:	19 c0       	rjmp	.+50     	; 0x3cf4 <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3cc6:	41 11       	cpse	r20, r1
    3cc8:	1d c0       	rjmp	.+58     	; 0x3d04 <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    3cce:	24 2f       	mov	r18, r20
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	a4 e6       	ldi	r26, 0x64	; 100
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__umulhisi3>
    3cda:	20 ea       	ldi	r18, 0xA0	; 160
    3cdc:	3f e0       	ldi	r19, 0x0F	; 15
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    3ce6:	23 32       	cpi	r18, 0x23	; 35
    3ce8:	c8 f4       	brcc	.+50     	; 0x3d1c <u8x8_avr_delay+0x76>
				break;

			__asm__ __volatile__ (
    3cea:	82 2f       	mov	r24, r18
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <u8x8_avr_delay+0x46>
			break;
		default:
			return 0;
	}

	return 1;
    3cf0:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    3cf2:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cf4:	83 e0       	ldi	r24, 0x03	; 3
    3cf6:	8a 95       	dec	r24
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <u8x8_avr_delay+0x50>
    3cfa:	00 00       	nop
    3cfc:	41 50       	subi	r20, 0x01	; 1
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3cfe:	d1 f7       	brne	.-12     	; 0x3cf4 <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d04:	89 ef       	ldi	r24, 0xF9	; 249
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <u8x8_avr_delay+0x62>
    3d0c:	00 c0       	rjmp	.+0      	; 0x3d0e <u8x8_avr_delay+0x68>
    3d0e:	00 00       	nop
    3d10:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3d12:	c1 f7       	brne	.-16     	; 0x3d04 <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	08 95       	ret
	}

	return 1;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
}
    3d1e:	08 95       	ret

00003d20 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    3d20:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    3d22:	dc 01       	movw	r26, r24
    3d24:	18 96       	adiw	r26, 0x08	; 8
    3d26:	ed 91       	ld	r30, X+
    3d28:	fc 91       	ld	r31, X
    3d2a:	19 97       	sbiw	r26, 0x09	; 9
    3d2c:	46 2f       	mov	r20, r22
    3d2e:	67 e1       	ldi	r22, 0x17	; 23
    3d30:	09 95       	icall
}
    3d32:	08 95       	ret

00003d34 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	1f 92       	push	r1
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    3d40:	ae 01       	movw	r20, r28
    3d42:	4f 5f       	subi	r20, 0xFF	; 255
    3d44:	5f 4f       	sbci	r21, 0xFF	; 255
    3d46:	61 e0       	ldi	r22, 0x01	; 1
    3d48:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <u8x8_byte_SendBytes>
}
    3d4c:	0f 90       	pop	r0
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	08 95       	ret

00003d54 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    3d54:	dc 01       	movw	r26, r24
    3d56:	18 96       	adiw	r26, 0x08	; 8
    3d58:	ed 91       	ld	r30, X+
    3d5a:	fc 91       	ld	r31, X
    3d5c:	19 97       	sbiw	r26, 0x09	; 9
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	68 e1       	ldi	r22, 0x18	; 24
    3d66:	09 95       	icall
}
    3d68:	08 95       	ret

00003d6a <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	18 96       	adiw	r26, 0x08	; 8
    3d6e:	ed 91       	ld	r30, X+
    3d70:	fc 91       	ld	r31, X
    3d72:	19 97       	sbiw	r26, 0x09	; 9
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e0       	ldi	r20, 0x00	; 0
    3d7a:	69 e1       	ldi	r22, 0x19	; 25
    3d7c:	09 95       	icall
}
    3d7e:	08 95       	ret

00003d80 <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    3d80:	ef 92       	push	r14
    3d82:	ff 92       	push	r15
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	ec 01       	movw	r28, r24
    3d8c:	16 2f       	mov	r17, r22
    3d8e:	7a 01       	movw	r14, r20
    3d90:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <u8x8_byte_StartTransfer>
    3d94:	60 e4       	ldi	r22, 0x40	; 64
    3d96:	ce 01       	movw	r24, r28
    3d98:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <u8x8_byte_SendByte>
    3d9c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d9e:	f9 85       	ldd	r31, Y+9	; 0x09
    3da0:	97 01       	movw	r18, r14
    3da2:	41 2f       	mov	r20, r17
    3da4:	67 e1       	ldi	r22, 0x17	; 23
    3da6:	ce 01       	movw	r24, r28
    3da8:	09 95       	icall
    3daa:	ce 01       	movw	r24, r28
    3dac:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <u8x8_byte_EndTransfer>
    3db0:	df 91       	pop	r29
    3db2:	cf 91       	pop	r28
    3db4:	1f 91       	pop	r17
    3db6:	ff 90       	pop	r15
    3db8:	ef 90       	pop	r14
    3dba:	08 95       	ret

00003dbc <u8x8_cad_SendCmd>:
    3dbc:	46 2f       	mov	r20, r22
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	16 96       	adiw	r26, 0x06	; 6
    3dc2:	ed 91       	ld	r30, X+
    3dc4:	fc 91       	ld	r31, X
    3dc6:	17 97       	sbiw	r26, 0x07	; 7
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	65 e1       	ldi	r22, 0x15	; 21
    3dce:	09 95       	icall
    3dd0:	08 95       	ret

00003dd2 <u8x8_cad_SendArg>:
    3dd2:	46 2f       	mov	r20, r22
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	16 96       	adiw	r26, 0x06	; 6
    3dd8:	ed 91       	ld	r30, X+
    3dda:	fc 91       	ld	r31, X
    3ddc:	17 97       	sbiw	r26, 0x07	; 7
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	66 e1       	ldi	r22, 0x16	; 22
    3de4:	09 95       	icall
    3de6:	08 95       	ret

00003de8 <u8x8_cad_SendData>:
    3de8:	9a 01       	movw	r18, r20
    3dea:	dc 01       	movw	r26, r24
    3dec:	16 96       	adiw	r26, 0x06	; 6
    3dee:	ed 91       	ld	r30, X+
    3df0:	fc 91       	ld	r31, X
    3df2:	17 97       	sbiw	r26, 0x07	; 7
    3df4:	46 2f       	mov	r20, r22
    3df6:	67 e1       	ldi	r22, 0x17	; 23
    3df8:	09 95       	icall
    3dfa:	08 95       	ret

00003dfc <u8x8_cad_StartTransfer>:
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	16 96       	adiw	r26, 0x06	; 6
    3e00:	ed 91       	ld	r30, X+
    3e02:	fc 91       	ld	r31, X
    3e04:	17 97       	sbiw	r26, 0x07	; 7
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e0       	ldi	r20, 0x00	; 0
    3e0c:	68 e1       	ldi	r22, 0x18	; 24
    3e0e:	09 95       	icall
    3e10:	08 95       	ret

00003e12 <u8x8_cad_EndTransfer>:
    3e12:	dc 01       	movw	r26, r24
    3e14:	16 96       	adiw	r26, 0x06	; 6
    3e16:	ed 91       	ld	r30, X+
    3e18:	fc 91       	ld	r31, X
    3e1a:	17 97       	sbiw	r26, 0x07	; 7
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	69 e1       	ldi	r22, 0x19	; 25
    3e24:	09 95       	icall
    3e26:	08 95       	ret

00003e28 <u8x8_cad_SendSequence>:
    3e28:	ef 92       	push	r14
    3e2a:	ff 92       	push	r15
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	1f 92       	push	r1
    3e36:	cd b7       	in	r28, 0x3d	; 61
    3e38:	de b7       	in	r29, 0x3e	; 62
    3e3a:	7c 01       	movw	r14, r24
    3e3c:	8b 01       	movw	r16, r22
    3e3e:	d8 01       	movw	r26, r16
    3e40:	6c 91       	ld	r22, X
    3e42:	67 31       	cpi	r22, 0x17	; 23
    3e44:	c1 f0       	breq	.+48     	; 0x3e76 <u8x8_cad_SendSequence+0x4e>
    3e46:	18 f4       	brcc	.+6      	; 0x3e4e <u8x8_cad_SendSequence+0x26>
    3e48:	65 31       	cpi	r22, 0x15	; 21
    3e4a:	30 f4       	brcc	.+12     	; 0x3e58 <u8x8_cad_SendSequence+0x30>
    3e4c:	38 c0       	rjmp	.+112    	; 0x3ebe <u8x8_cad_SendSequence+0x96>
    3e4e:	6a 31       	cpi	r22, 0x1A	; 26
    3e50:	f8 f0       	brcs	.+62     	; 0x3e90 <u8x8_cad_SendSequence+0x68>
    3e52:	6e 3f       	cpi	r22, 0xFE	; 254
    3e54:	51 f1       	breq	.+84     	; 0x3eaa <u8x8_cad_SendSequence+0x82>
    3e56:	33 c0       	rjmp	.+102    	; 0x3ebe <u8x8_cad_SendSequence+0x96>
    3e58:	f8 01       	movw	r30, r16
    3e5a:	41 81       	ldd	r20, Z+1	; 0x01
    3e5c:	49 83       	std	Y+1, r20	; 0x01
    3e5e:	d7 01       	movw	r26, r14
    3e60:	16 96       	adiw	r26, 0x06	; 6
    3e62:	ed 91       	ld	r30, X+
    3e64:	fc 91       	ld	r31, X
    3e66:	17 97       	sbiw	r26, 0x07	; 7
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	c7 01       	movw	r24, r14
    3e6e:	09 95       	icall
    3e70:	0e 5f       	subi	r16, 0xFE	; 254
    3e72:	1f 4f       	sbci	r17, 0xFF	; 255
    3e74:	e4 cf       	rjmp	.-56     	; 0x3e3e <u8x8_cad_SendSequence+0x16>
    3e76:	f8 01       	movw	r30, r16
    3e78:	81 81       	ldd	r24, Z+1	; 0x01
    3e7a:	89 83       	std	Y+1, r24	; 0x01
    3e7c:	ae 01       	movw	r20, r28
    3e7e:	4f 5f       	subi	r20, 0xFF	; 255
    3e80:	5f 4f       	sbci	r21, 0xFF	; 255
    3e82:	61 e0       	ldi	r22, 0x01	; 1
    3e84:	c7 01       	movw	r24, r14
    3e86:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <u8x8_cad_SendData>
    3e8a:	0e 5f       	subi	r16, 0xFE	; 254
    3e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8e:	d7 cf       	rjmp	.-82     	; 0x3e3e <u8x8_cad_SendSequence+0x16>
    3e90:	0f 5f       	subi	r16, 0xFF	; 255
    3e92:	1f 4f       	sbci	r17, 0xFF	; 255
    3e94:	d7 01       	movw	r26, r14
    3e96:	16 96       	adiw	r26, 0x06	; 6
    3e98:	ed 91       	ld	r30, X+
    3e9a:	fc 91       	ld	r31, X
    3e9c:	17 97       	sbiw	r26, 0x07	; 7
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	c7 01       	movw	r24, r14
    3ea6:	09 95       	icall
    3ea8:	ca cf       	rjmp	.-108    	; 0x3e3e <u8x8_cad_SendSequence+0x16>
    3eaa:	f8 01       	movw	r30, r16
    3eac:	41 81       	ldd	r20, Z+1	; 0x01
    3eae:	49 83       	std	Y+1, r20	; 0x01
    3eb0:	69 e2       	ldi	r22, 0x29	; 41
    3eb2:	c7 01       	movw	r24, r14
    3eb4:	0e 94 1d 21 	call	0x423a	; 0x423a <u8x8_gpio_call>
    3eb8:	0e 5f       	subi	r16, 0xFE	; 254
    3eba:	1f 4f       	sbci	r17, 0xFF	; 255
    3ebc:	c0 cf       	rjmp	.-128    	; 0x3e3e <u8x8_cad_SendSequence+0x16>
    3ebe:	0f 90       	pop	r0
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	ff 90       	pop	r15
    3eca:	ef 90       	pop	r14
    3ecc:	08 95       	ret

00003ece <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3ece:	ef 92       	push	r14
    3ed0:	ff 92       	push	r15
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	cf 93       	push	r28
    3ed8:	7c 01       	movw	r14, r24
    3eda:	c4 2f       	mov	r28, r20
    3edc:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    3ede:	66 31       	cpi	r22, 0x16	; 22
    3ee0:	29 f1       	breq	.+74     	; 0x3f2c <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    3ee2:	30 f4       	brcc	.+12     	; 0x3ef0 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    3ee4:	64 31       	cpi	r22, 0x14	; 20
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    3ee8:	42 c0       	rjmp	.+132    	; 0x3f6e <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    3eea:	65 31       	cpi	r22, 0x15	; 21
    3eec:	49 f0       	breq	.+18     	; 0x3f00 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    3eee:	62 c0       	rjmp	.+196    	; 0x3fb4 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    3ef0:	68 31       	cpi	r22, 0x18	; 24
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <u8x8_cad_ssd13xx_fast_i2c+0x28>
    3ef4:	50 c0       	rjmp	.+160    	; 0x3f96 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    3ef6:	f8 f0       	brcs	.+62     	; 0x3f36 <u8x8_cad_ssd13xx_fast_i2c+0x68>
    3ef8:	69 31       	cpi	r22, 0x19	; 25
    3efa:	09 f4       	brne	.+2      	; 0x3efe <u8x8_cad_ssd13xx_fast_i2c+0x30>
    3efc:	50 c0       	rjmp	.+160    	; 0x3f9e <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    3efe:	5a c0       	rjmp	.+180    	; 0x3fb4 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    3f00:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <in_transfer.3298>
    3f04:	88 23       	and	r24, r24
    3f06:	19 f0       	breq	.+6      	; 0x3f0e <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    3f08:	c7 01       	movw	r24, r14
    3f0a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    3f0e:	c7 01       	movw	r24, r14
    3f10:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	c7 01       	movw	r24, r14
    3f18:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    3f1c:	6c 2f       	mov	r22, r28
    3f1e:	c7 01       	movw	r24, r14
    3f20:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <u8x8_byte_SendByte>
      in_transfer = 1;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <in_transfer.3298>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    3f2a:	45 c0       	rjmp	.+138    	; 0x3fb6 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    3f2c:	64 2f       	mov	r22, r20
    3f2e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3f32:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    3f34:	40 c0       	rjmp	.+128    	; 0x3fb6 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    3f36:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <in_transfer.3298>
    3f3a:	88 23       	and	r24, r24
    3f3c:	19 f0       	breq	.+6      	; 0x3f44 <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    3f3e:	c7 01       	movw	r24, r14
    3f40:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3f44:	c9 31       	cpi	r28, 0x19	; 25
    3f46:	50 f0       	brcs	.+20     	; 0x3f5c <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    3f48:	a8 01       	movw	r20, r16
    3f4a:	68 e1       	ldi	r22, 0x18	; 24
    3f4c:	c7 01       	movw	r24, r14
    3f4e:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <u8x8_i2c_data_transfer>
	arg_int-=24;
    3f52:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    3f54:	08 5e       	subi	r16, 0xE8	; 232
    3f56:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3f58:	c9 31       	cpi	r28, 0x19	; 25
    3f5a:	b0 f7       	brcc	.-20     	; 0x3f48 <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    3f5c:	a8 01       	movw	r20, r16
    3f5e:	6c 2f       	mov	r22, r28
    3f60:	c7 01       	movw	r24, r14
    3f62:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    3f66:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    3f6c:	24 c0       	rjmp	.+72     	; 0x3fb6 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    3f6e:	dc 01       	movw	r26, r24
    3f70:	56 96       	adiw	r26, 0x16	; 22
    3f72:	8c 91       	ld	r24, X
    3f74:	56 97       	sbiw	r26, 0x16	; 22
    3f76:	8f 3f       	cpi	r24, 0xFF	; 255
    3f78:	19 f4       	brne	.+6      	; 0x3f80 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    3f7a:	88 e7       	ldi	r24, 0x78	; 120
    3f7c:	56 96       	adiw	r26, 0x16	; 22
    3f7e:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    3f80:	d7 01       	movw	r26, r14
    3f82:	18 96       	adiw	r26, 0x08	; 8
    3f84:	ed 91       	ld	r30, X+
    3f86:	fc 91       	ld	r31, X
    3f88:	19 97       	sbiw	r26, 0x09	; 9
    3f8a:	98 01       	movw	r18, r16
    3f8c:	4c 2f       	mov	r20, r28
    3f8e:	64 e1       	ldi	r22, 0x14	; 20
    3f90:	c7 01       	movw	r24, r14
    3f92:	09 95       	icall
    3f94:	10 c0       	rjmp	.+32     	; 0x3fb6 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    3f96:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    3f9c:	0c c0       	rjmp	.+24     	; 0x3fb6 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    3f9e:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <in_transfer.3298>
    3fa2:	88 23       	and	r24, r24
    3fa4:	19 f0       	breq	.+6      	; 0x3fac <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    3fa6:	c7 01       	movw	r24, r14
    3fa8:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <u8x8_byte_EndTransfer>
      in_transfer = 0;
    3fac:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <in_transfer.3298>
      break;
    default:
      return 0;
  }
  return 1;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    3fb2:	01 c0       	rjmp	.+2      	; 0x3fb6 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    3fb6:	cf 91       	pop	r28
    3fb8:	1f 91       	pop	r17
    3fba:	0f 91       	pop	r16
    3fbc:	ff 90       	pop	r15
    3fbe:	ef 90       	pop	r14
    3fc0:	08 95       	ret

00003fc2 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	71 83       	std	Z+1, r23	; 0x01
    3fc6:	60 83       	st	Z, r22
    3fc8:	fb 01       	movw	r30, r22
    3fca:	22 89       	ldd	r18, Z+18	; 0x12
    3fcc:	fc 01       	movw	r30, r24
    3fce:	24 8b       	std	Z+20, r18	; 0x14
    3fd0:	08 95       	ret

00003fd2 <u8x8_d_helper_display_init>:
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	ec 01       	movw	r28, r24
    3fd8:	ea 85       	ldd	r30, Y+10	; 0x0a
    3fda:	fb 85       	ldd	r31, Y+11	; 0x0b
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	40 e0       	ldi	r20, 0x00	; 0
    3fe2:	68 e2       	ldi	r22, 0x28	; 40
    3fe4:	09 95       	icall
    3fe6:	ee 81       	ldd	r30, Y+6	; 0x06
    3fe8:	ff 81       	ldd	r31, Y+7	; 0x07
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e0       	ldi	r20, 0x00	; 0
    3ff0:	64 e1       	ldi	r22, 0x14	; 20
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	09 95       	icall
    3ff6:	41 e0       	ldi	r20, 0x01	; 1
    3ff8:	6b e4       	ldi	r22, 0x4B	; 75
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	0e 94 1d 21 	call	0x423a	; 0x423a <u8x8_gpio_call>
    4000:	e8 81       	ld	r30, Y
    4002:	f9 81       	ldd	r31, Y+1	; 0x01
    4004:	44 81       	ldd	r20, Z+4	; 0x04
    4006:	69 e2       	ldi	r22, 0x29	; 41
    4008:	ce 01       	movw	r24, r28
    400a:	0e 94 1d 21 	call	0x423a	; 0x423a <u8x8_gpio_call>
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	6b e4       	ldi	r22, 0x4B	; 75
    4012:	ce 01       	movw	r24, r28
    4014:	0e 94 1d 21 	call	0x423a	; 0x423a <u8x8_gpio_call>
    4018:	e8 81       	ld	r30, Y
    401a:	f9 81       	ldd	r31, Y+1	; 0x01
    401c:	44 81       	ldd	r20, Z+4	; 0x04
    401e:	69 e2       	ldi	r22, 0x29	; 41
    4020:	ce 01       	movw	r24, r28
    4022:	0e 94 1d 21 	call	0x423a	; 0x423a <u8x8_gpio_call>
    4026:	41 e0       	ldi	r20, 0x01	; 1
    4028:	6b e4       	ldi	r22, 0x4B	; 75
    402a:	ce 01       	movw	r24, r28
    402c:	0e 94 1d 21 	call	0x423a	; 0x423a <u8x8_gpio_call>
    4030:	e8 81       	ld	r30, Y
    4032:	f9 81       	ldd	r31, Y+1	; 0x01
    4034:	45 81       	ldd	r20, Z+5	; 0x05
    4036:	69 e2       	ldi	r22, 0x29	; 41
    4038:	ce 01       	movw	r24, r28
    403a:	0e 94 1d 21 	call	0x423a	; 0x423a <u8x8_gpio_call>
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	08 95       	ret

00004044 <u8x8_DrawTile>:
    4044:	0f 93       	push	r16
    4046:	1f 93       	push	r17
    4048:	cf 93       	push	r28
    404a:	df 93       	push	r29
    404c:	00 d0       	rcall	.+0      	; 0x404e <u8x8_DrawTile+0xa>
    404e:	00 d0       	rcall	.+0      	; 0x4050 <u8x8_DrawTile+0xc>
    4050:	1f 92       	push	r1
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	6c 83       	std	Y+4, r22	; 0x04
    4058:	4d 83       	std	Y+5, r20	; 0x05
    405a:	2b 83       	std	Y+3, r18	; 0x03
    405c:	1a 83       	std	Y+2, r17	; 0x02
    405e:	09 83       	std	Y+1, r16	; 0x01
    4060:	dc 01       	movw	r26, r24
    4062:	14 96       	adiw	r26, 0x04	; 4
    4064:	ed 91       	ld	r30, X+
    4066:	fc 91       	ld	r31, X
    4068:	15 97       	sbiw	r26, 0x05	; 5
    406a:	9e 01       	movw	r18, r28
    406c:	2f 5f       	subi	r18, 0xFF	; 255
    406e:	3f 4f       	sbci	r19, 0xFF	; 255
    4070:	41 e0       	ldi	r20, 0x01	; 1
    4072:	6f e0       	ldi	r22, 0x0F	; 15
    4074:	09 95       	icall
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	0f 90       	pop	r0
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	1f 91       	pop	r17
    4086:	0f 91       	pop	r16
    4088:	08 95       	ret

0000408a <u8x8_SetupMemory>:
    408a:	dc 01       	movw	r26, r24
    408c:	14 96       	adiw	r26, 0x04	; 4
    408e:	ed 91       	ld	r30, X+
    4090:	fc 91       	ld	r31, X
    4092:	15 97       	sbiw	r26, 0x05	; 5
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e0       	ldi	r20, 0x00	; 0
    409a:	69 e0       	ldi	r22, 0x09	; 9
    409c:	09 95       	icall
    409e:	08 95       	ret

000040a0 <u8x8_InitDisplay>:
    40a0:	dc 01       	movw	r26, r24
    40a2:	14 96       	adiw	r26, 0x04	; 4
    40a4:	ed 91       	ld	r30, X+
    40a6:	fc 91       	ld	r31, X
    40a8:	15 97       	sbiw	r26, 0x05	; 5
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e0       	ldi	r20, 0x00	; 0
    40b0:	6a e0       	ldi	r22, 0x0A	; 10
    40b2:	09 95       	icall
    40b4:	08 95       	ret

000040b6 <u8x8_SetPowerSave>:
    40b6:	46 2f       	mov	r20, r22
    40b8:	dc 01       	movw	r26, r24
    40ba:	14 96       	adiw	r26, 0x04	; 4
    40bc:	ed 91       	ld	r30, X+
    40be:	fc 91       	ld	r31, X
    40c0:	15 97       	sbiw	r26, 0x05	; 5
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	6b e0       	ldi	r22, 0x0B	; 11
    40c8:	09 95       	icall
    40ca:	08 95       	ret

000040cc <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    40cc:	dc 01       	movw	r26, r24
    40ce:	14 96       	adiw	r26, 0x04	; 4
    40d0:	ed 91       	ld	r30, X+
    40d2:	fc 91       	ld	r31, X
    40d4:	15 97       	sbiw	r26, 0x05	; 5
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e0       	ldi	r20, 0x00	; 0
    40dc:	60 e1       	ldi	r22, 0x10	; 16
    40de:	09 95       	icall
    40e0:	08 95       	ret

000040e2 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    40e2:	ef 92       	push	r14
    40e4:	ff 92       	push	r15
    40e6:	0f 93       	push	r16
    40e8:	1f 93       	push	r17
    40ea:	cf 93       	push	r28
    40ec:	df 93       	push	r29
    40ee:	8c 01       	movw	r16, r24
    40f0:	c4 2f       	mov	r28, r20
    40f2:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    40f4:	6d 30       	cpi	r22, 0x0D	; 13
    40f6:	b9 f0       	breq	.+46     	; 0x4126 <u8x8_d_ssd1306_sh1106_generic+0x44>
    40f8:	18 f4       	brcc	.+6      	; 0x4100 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    40fa:	6b 30       	cpi	r22, 0x0B	; 11
    40fc:	31 f0       	breq	.+12     	; 0x410a <u8x8_d_ssd1306_sh1106_generic+0x28>
    40fe:	72 c0       	rjmp	.+228    	; 0x41e4 <u8x8_d_ssd1306_sh1106_generic+0x102>
    4100:	6e 30       	cpi	r22, 0x0E	; 14
    4102:	69 f1       	breq	.+90     	; 0x415e <u8x8_d_ssd1306_sh1106_generic+0x7c>
    4104:	6f 30       	cpi	r22, 0x0F	; 15
    4106:	d1 f1       	breq	.+116    	; 0x417c <u8x8_d_ssd1306_sh1106_generic+0x9a>
    4108:	6d c0       	rjmp	.+218    	; 0x41e4 <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    410a:	41 11       	cpse	r20, r1
    410c:	06 c0       	rjmp	.+12     	; 0x411a <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    410e:	64 e9       	ldi	r22, 0x94	; 148
    4110:	72 e0       	ldi	r23, 0x02	; 2
    4112:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	66 c0       	rjmp	.+204    	; 0x41e6 <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    411a:	6f e8       	ldi	r22, 0x8F	; 143
    411c:	72 e0       	ldi	r23, 0x02	; 2
    411e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	60 c0       	rjmp	.+192    	; 0x41e6 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    4126:	41 11       	cpse	r20, r1
    4128:	0d c0       	rjmp	.+26     	; 0x4144 <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    412a:	68 e8       	ldi	r22, 0x88	; 136
    412c:	72 e0       	ldi	r23, 0x02	; 2
    412e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    4132:	d8 01       	movw	r26, r16
    4134:	ed 91       	ld	r30, X+
    4136:	fc 91       	ld	r31, X
    4138:	11 97       	sbiw	r26, 0x01	; 1
    413a:	82 89       	ldd	r24, Z+18	; 0x12
    413c:	54 96       	adiw	r26, 0x14	; 20
    413e:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	51 c0       	rjmp	.+162    	; 0x41e6 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    4144:	61 e8       	ldi	r22, 0x81	; 129
    4146:	72 e0       	ldi	r23, 0x02	; 2
    4148:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    414c:	d8 01       	movw	r26, r16
    414e:	ed 91       	ld	r30, X+
    4150:	fc 91       	ld	r31, X
    4152:	11 97       	sbiw	r26, 0x01	; 1
    4154:	83 89       	ldd	r24, Z+19	; 0x13
    4156:	54 96       	adiw	r26, 0x14	; 20
    4158:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	44 c0       	rjmp	.+136    	; 0x41e6 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    415e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    4162:	61 e8       	ldi	r22, 0x81	; 129
    4164:	c8 01       	movw	r24, r16
    4166:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    416a:	6c 2f       	mov	r22, r28
    416c:	c8 01       	movw	r24, r16
    416e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    4172:	c8 01       	movw	r24, r16
    4174:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4178:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    417a:	35 c0       	rjmp	.+106    	; 0x41e6 <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    417c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    4180:	f7 01       	movw	r30, r14
    4182:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    4184:	dd 0f       	add	r29, r29
    4186:	dd 0f       	add	r29, r29
    4188:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    418a:	d8 01       	movw	r26, r16
    418c:	54 96       	adiw	r26, 0x14	; 20
    418e:	8c 91       	ld	r24, X
    4190:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    4192:	60 e4       	ldi	r22, 0x40	; 64
    4194:	c8 01       	movw	r24, r16
    4196:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    419a:	6d 2f       	mov	r22, r29
    419c:	62 95       	swap	r22
    419e:	6f 70       	andi	r22, 0x0F	; 15
    41a0:	60 61       	ori	r22, 0x10	; 16
    41a2:	c8 01       	movw	r24, r16
    41a4:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    41a8:	6d 2f       	mov	r22, r29
    41aa:	6f 70       	andi	r22, 0x0F	; 15
    41ac:	c8 01       	movw	r24, r16
    41ae:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    41b2:	f7 01       	movw	r30, r14
    41b4:	64 81       	ldd	r22, Z+4	; 0x04
    41b6:	60 6b       	ori	r22, 0xB0	; 176
    41b8:	c8 01       	movw	r24, r16
    41ba:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    41be:	d7 01       	movw	r26, r14
    41c0:	4d 91       	ld	r20, X+
    41c2:	5c 91       	ld	r21, X
    41c4:	11 97       	sbiw	r26, 0x01	; 1
    41c6:	12 96       	adiw	r26, 0x02	; 2
    41c8:	6c 91       	ld	r22, X
    41ca:	66 0f       	add	r22, r22
    41cc:	66 0f       	add	r22, r22
    41ce:	66 0f       	add	r22, r22
    41d0:	c8 01       	movw	r24, r16
    41d2:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    41d6:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    41d8:	91 f7       	brne	.-28     	; 0x41be <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    41da:	c8 01       	movw	r24, r16
    41dc:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    41e0:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    41e2:	01 c0       	rjmp	.+2      	; 0x41e6 <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    41e4:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	ff 90       	pop	r15
    41f0:	ef 90       	pop	r14
    41f2:	08 95       	ret

000041f4 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    41f4:	0f 93       	push	r16
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	8c 01       	movw	r16, r24
    41fc:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    41fe:	0e 94 71 20 	call	0x40e2	; 0x40e2 <u8x8_d_ssd1306_sh1106_generic>
    4202:	81 11       	cpse	r24, r1
    4204:	15 c0       	rjmp	.+42     	; 0x4230 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    4206:	c9 30       	cpi	r28, 0x09	; 9
    4208:	61 f0       	breq	.+24     	; 0x4222 <u8x8_d_ssd1306_128x64_noname+0x2e>
    420a:	ca 30       	cpi	r28, 0x0A	; 10
    420c:	91 f4       	brne	.+36     	; 0x4232 <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    420e:	c8 01       	movw	r24, r16
    4210:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    4214:	69 e9       	ldi	r22, 0x99	; 153
    4216:	72 e0       	ldi	r23, 0x02	; 2
    4218:	c8 01       	movw	r24, r16
    421a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    421e:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    4220:	08 c0       	rjmp	.+16     	; 0x4232 <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    4222:	69 e6       	ldi	r22, 0x69	; 105
    4224:	72 e0       	ldi	r23, 0x02	; 2
    4226:	c8 01       	movw	r24, r16
    4228:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    422c:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    422e:	01 c0       	rjmp	.+2      	; 0x4232 <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    4230:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    4232:	cf 91       	pop	r28
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	08 95       	ret

0000423a <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    423a:	dc 01       	movw	r26, r24
    423c:	1a 96       	adiw	r26, 0x0a	; 10
    423e:	ed 91       	ld	r30, X+
    4240:	fc 91       	ld	r31, X
    4242:	1b 97       	sbiw	r26, 0x0b	; 11
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	09 95       	icall
    424a:	08 95       	ret

0000424c <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	08 95       	ret

00004250 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    4250:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    4252:	11 82       	std	Z+1, r1	; 0x01
    4254:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    4256:	86 e2       	ldi	r24, 0x26	; 38
    4258:	91 e2       	ldi	r25, 0x21	; 33
    425a:	95 83       	std	Z+5, r25	; 0x05
    425c:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    425e:	97 83       	std	Z+7, r25	; 0x07
    4260:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    4262:	91 87       	std	Z+9, r25	; 0x09
    4264:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    4266:	93 87       	std	Z+11, r25	; 0x0b
    4268:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    426a:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    426c:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    426e:	14 86       	std	Z+12, r1	; 0x0c
    4270:	15 86       	std	Z+13, r1	; 0x0d
    4272:	16 86       	std	Z+14, r1	; 0x0e
    4274:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    4276:	8f ef       	ldi	r24, 0xFF	; 255
    4278:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    427a:	82 8f       	std	Z+26, r24	; 0x1a
    427c:	08 95       	ret

0000427e <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    427e:	af 92       	push	r10
    4280:	bf 92       	push	r11
    4282:	cf 92       	push	r12
    4284:	df 92       	push	r13
    4286:	ef 92       	push	r14
    4288:	ff 92       	push	r15
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	ec 01       	movw	r28, r24
    4294:	5b 01       	movw	r10, r22
    4296:	6a 01       	movw	r12, r20
    4298:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    429a:	0e 94 28 21 	call	0x4250	; 0x4250 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    429e:	bd 82       	std	Y+5, r11	; 0x05
    42a0:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    42a2:	df 82       	std	Y+7, r13	; 0x07
    42a4:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    42a6:	f9 86       	std	Y+9, r15	; 0x09
    42a8:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    42aa:	1b 87       	std	Y+11, r17	; 0x0b
    42ac:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    42ae:	ce 01       	movw	r24, r28
    42b0:	0e 94 45 20 	call	0x408a	; 0x408a <u8x8_SetupMemory>
}
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	ff 90       	pop	r15
    42be:	ef 90       	pop	r14
    42c0:	df 90       	pop	r13
    42c2:	cf 90       	pop	r12
    42c4:	bf 90       	pop	r11
    42c6:	af 90       	pop	r10
    42c8:	08 95       	ret

000042ca <USART_Init>:
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
}

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);				/* Enable USART transmitter and receiver */
    42ca:	e1 ec       	ldi	r30, 0xC1	; 193
    42cc:	f0 e0       	ldi	r31, 0x00	; 0
    42ce:	20 81       	ld	r18, Z
    42d0:	28 61       	ori	r18, 0x18	; 24
    42d2:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCPOL0)| (1 << UCSZ00) | (1 << UCSZ01);	/* Write USCRC for 8 bit data and 1 stop bit */
    42d4:	e2 ec       	ldi	r30, 0xC2	; 194
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	20 81       	ld	r18, Z
    42da:	27 60       	ori	r18, 0x07	; 7
    42dc:	20 83       	st	Z, r18
	UBRR0L = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	88 0f       	add	r24, r24
    42e4:	99 1f       	adc	r25, r25
    42e6:	aa 1f       	adc	r26, r26
    42e8:	bb 1f       	adc	r27, r27
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	aa 1f       	adc	r26, r26
    42f0:	bb 1f       	adc	r27, r27
    42f2:	9c 01       	movw	r18, r24
    42f4:	ad 01       	movw	r20, r26
    42f6:	22 0f       	add	r18, r18
    42f8:	33 1f       	adc	r19, r19
    42fa:	44 1f       	adc	r20, r20
    42fc:	55 1f       	adc	r21, r21
    42fe:	22 0f       	add	r18, r18
    4300:	33 1f       	adc	r19, r19
    4302:	44 1f       	adc	r20, r20
    4304:	55 1f       	adc	r21, r21
    4306:	60 e0       	ldi	r22, 0x00	; 0
    4308:	74 e2       	ldi	r23, 0x24	; 36
    430a:	84 ef       	ldi	r24, 0xF4	; 244
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__udivmodsi4>
    4312:	8f ef       	ldi	r24, 0xFF	; 255
    4314:	82 0f       	add	r24, r18
    4316:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
    431a:	da 01       	movw	r26, r20
    431c:	c9 01       	movw	r24, r18
    431e:	01 97       	sbiw	r24, 0x01	; 1
    4320:	a1 09       	sbc	r26, r1
    4322:	b1 09       	sbc	r27, r1
    4324:	89 2f       	mov	r24, r25
    4326:	9a 2f       	mov	r25, r26
    4328:	ab 2f       	mov	r26, r27
    432a:	bb 27       	eor	r27, r27
    432c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    4330:	08 95       	ret

00004332 <initBluetooth>:
int *Settings;


int result;
void initBluetooth(int SettingsHold[settings]){
	Settings = &SettingsHold[0];
    4332:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Settings+0x1>
    4336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Settings>
	
	PCICR |= (1<<PCIE2);
    433a:	e8 e6       	ldi	r30, 0x68	; 104
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	84 60       	ori	r24, 0x04	; 4
    4342:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT16);
    4344:	ed e6       	ldi	r30, 0x6D	; 109
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	80 81       	ld	r24, Z
    434a:	81 60       	ori	r24, 0x01	; 1
    434c:	80 83       	st	Z, r24
	
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
    434e:	60 e8       	ldi	r22, 0x80	; 128
    4350:	75 e2       	ldi	r23, 0x25	; 37
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	0e 94 65 21 	call	0x42ca	; 0x42ca <USART_Init>
    435a:	08 95       	ret

0000435c <USART_RxChar>:
	UBRR0H = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
    435c:	e0 ec       	ldi	r30, 0xC0	; 192
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	80 81       	ld	r24, Z
    4362:	88 23       	and	r24, r24
    4364:	ec f7       	brge	.-6      	; 0x4360 <USART_RxChar+0x4>
	return(UDR0);									/* Get and return received data */
    4366:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
    436a:	08 95       	ret

0000436c <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
    436c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
    4370:	e0 ec       	ldi	r30, 0xC0	; 192
    4372:	f0 e0       	ldi	r31, 0x00	; 0
    4374:	80 81       	ld	r24, Z
    4376:	85 ff       	sbrs	r24, 5
    4378:	fd cf       	rjmp	.-6      	; 0x4374 <USART_TxChar+0x8>
}
    437a:	08 95       	ret

0000437c <USART_ReceiveString>:
* the function returns.
* - The array is terminated with ?\0?.
*/

void USART_ReceiveString(char *str)
{
    437c:	ef 92       	push	r14
    437e:	ff 92       	push	r15
    4380:	0f 93       	push	r16
    4382:	1f 93       	push	r17
    4384:	cf 93       	push	r28
    4386:	7c 01       	movw	r14, r24
	uint8_t t = 0;
    4388:	c0 e0       	ldi	r28, 0x00	; 0

	while ((str[t] = USART_RxChar()) != '\n')
    438a:	01 c0       	rjmp	.+2      	; 0x438e <USART_ReceiveString+0x12>
	{
		t++;
    438c:	cf 5f       	subi	r28, 0xFF	; 255

void USART_ReceiveString(char *str)
{
	uint8_t t = 0;

	while ((str[t] = USART_RxChar()) != '\n')
    438e:	87 01       	movw	r16, r14
    4390:	0c 0f       	add	r16, r28
    4392:	11 1d       	adc	r17, r1
    4394:	0e 94 ae 21 	call	0x435c	; 0x435c <USART_RxChar>
    4398:	f8 01       	movw	r30, r16
    439a:	80 83       	st	Z, r24
    439c:	8a 30       	cpi	r24, 0x0A	; 10
    439e:	b1 f7       	brne	.-20     	; 0x438c <USART_ReceiveString+0x10>
	{
		t++;
	}
	str[t] = '\0';
    43a0:	10 82       	st	Z, r1
}
    43a2:	cf 91       	pop	r28
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	ff 90       	pop	r15
    43aa:	ef 90       	pop	r14
    43ac:	08 95       	ret

000043ae <USART_SendString>:

void USART_SendString(char *str)									/* Send string of USART data function */
{
    43ae:	cf 93       	push	r28
    43b0:	df 93       	push	r29
    43b2:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
    43b4:	88 81       	ld	r24, Y
    43b6:	88 23       	and	r24, r24
    43b8:	31 f0       	breq	.+12     	; 0x43c6 <USART_SendString+0x18>
    43ba:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);										/* Send each char of string till the NULL */
    43bc:	0e 94 b6 21 	call	0x436c	; 0x436c <USART_TxChar>
}

void USART_SendString(char *str)									/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
    43c0:	89 91       	ld	r24, Y+
    43c2:	81 11       	cpse	r24, r1
    43c4:	fb cf       	rjmp	.-10     	; 0x43bc <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);										/* Send each char of string till the NULL */
		i++;
	}
}
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	08 95       	ret

000043cc <USART_BluetoothChanger>:

void USART_BluetoothChanger(char Data_in[BL_BUFFERSIZE]){			/* When certain values are received the car does something*/
    43cc:	ef 92       	push	r14
    43ce:	ff 92       	push	r15
    43d0:	0f 93       	push	r16
    43d2:	1f 93       	push	r17
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	2a 97       	sbiw	r28, 0x0a	; 10
    43de:	0f b6       	in	r0, 0x3f	; 63
    43e0:	f8 94       	cli
    43e2:	de bf       	out	0x3e, r29	; 62
    43e4:	0f be       	out	0x3f, r0	; 63
    43e6:	cd bf       	out	0x3d, r28	; 61
    43e8:	8c 01       	movw	r16, r24
	
	if(strcmp(Data_in, BL_LED_ON) == 0)
    43ea:	63 ed       	ldi	r22, 0xD3	; 211
    43ec:	72 e0       	ldi	r23, 0x02	; 2
    43ee:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    43f2:	89 2b       	or	r24, r25
    43f4:	29 f4       	brne	.+10     	; 0x4400 <USART_BluetoothChanger+0x34>
	{
		/* Turn ON LED */
		USART_SendString("LE4D_ON");								/* send status of LED i.e. LED ON */
    43f6:	8e ec       	ldi	r24, 0xCE	; 206
    43f8:	92 e0       	ldi	r25, 0x02	; 2
    43fa:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
    43fe:	89 c0       	rjmp	.+274    	; 0x4512 <USART_BluetoothChanger+0x146>
		
	}
	else if(strcmp(Data_in, BL_LED_OFF) == 0)
    4400:	6b ed       	ldi	r22, 0xDB	; 219
    4402:	72 e0       	ldi	r23, 0x02	; 2
    4404:	c8 01       	movw	r24, r16
    4406:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    440a:	89 2b       	or	r24, r25
    440c:	29 f4       	brne	.+10     	; 0x4418 <USART_BluetoothChanger+0x4c>
	{
		/* Turn OFF LED */
		USART_SendString("LED4_OFF"); 								/* send status of LED i.e. LED OFF */
    440e:	86 ed       	ldi	r24, 0xD6	; 214
    4410:	92 e0       	ldi	r25, 0x02	; 2
    4412:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
    4416:	7d c0       	rjmp	.+250    	; 0x4512 <USART_BluetoothChanger+0x146>
	}
	else if(strcmp(Data_in, BL_FORWARD) == 0)
    4418:	6f ed       	ldi	r22, 0xDF	; 223
    441a:	72 e0       	ldi	r23, 0x02	; 2
    441c:	c8 01       	movw	r24, r16
    441e:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    4422:	89 2b       	or	r24, r25
    4424:	29 f4       	brne	.+10     	; 0x4430 <USART_BluetoothChanger+0x64>
	{
		/* Turn OFF LED */
		USART_SendString("Driving forwards"); 						/* send status of LED i.e. LED OFF */
    4426:	87 ee       	ldi	r24, 0xE7	; 231
    4428:	92 e0       	ldi	r25, 0x02	; 2
    442a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
    442e:	71 c0       	rjmp	.+226    	; 0x4512 <USART_BluetoothChanger+0x146>
	}
	else if(strcmp(Data_in, BL_BACKWARD) == 0)
    4430:	68 ef       	ldi	r22, 0xF8	; 248
    4432:	72 e0       	ldi	r23, 0x02	; 2
    4434:	c8 01       	movw	r24, r16
    4436:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    443a:	89 2b       	or	r24, r25
    443c:	29 f4       	brne	.+10     	; 0x4448 <USART_BluetoothChanger+0x7c>
	{
		USART_SendString("Driving backwards"); 						/* send status of LED i.e. LED OFF */
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	93 e0       	ldi	r25, 0x03	; 3
    4442:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
    4446:	65 c0       	rjmp	.+202    	; 0x4512 <USART_BluetoothChanger+0x146>
	}
	else if(strcmp(Data_in, BL_LEFT) == 0)
    4448:	63 e1       	ldi	r22, 0x13	; 19
    444a:	73 e0       	ldi	r23, 0x03	; 3
    444c:	c8 01       	movw	r24, r16
    444e:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    4452:	89 2b       	or	r24, r25
    4454:	29 f4       	brne	.+10     	; 0x4460 <USART_BluetoothChanger+0x94>
	{
		USART_SendString("Steering Left"); 							/* send status of LED i.e. LED OFF */
    4456:	88 e1       	ldi	r24, 0x18	; 24
    4458:	93 e0       	ldi	r25, 0x03	; 3
    445a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
    445e:	59 c0       	rjmp	.+178    	; 0x4512 <USART_BluetoothChanger+0x146>
	}
	else if(strcmp(Data_in, BL_RIGHT) == 0)
    4460:	66 e2       	ldi	r22, 0x26	; 38
    4462:	73 e0       	ldi	r23, 0x03	; 3
    4464:	c8 01       	movw	r24, r16
    4466:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    446a:	89 2b       	or	r24, r25
    446c:	29 f4       	brne	.+10     	; 0x4478 <USART_BluetoothChanger+0xac>
	{
		USART_SendString("Steering Right"); 						/* send status of LED i.e. LED OFF */
    446e:	8c e2       	ldi	r24, 0x2C	; 44
    4470:	93 e0       	ldi	r25, 0x03	; 3
    4472:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
    4476:	4d c0       	rjmp	.+154    	; 0x4512 <USART_BluetoothChanger+0x146>
	}
	else if(strcmp(Data_in, BL_ModeUp) == 0)
    4478:	6b e3       	ldi	r22, 0x3B	; 59
    447a:	73 e0       	ldi	r23, 0x03	; 3
    447c:	c8 01       	movw	r24, r16
    447e:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    4482:	89 2b       	or	r24, r25
    4484:	71 f4       	brne	.+28     	; 0x44a2 <USART_BluetoothChanger+0xd6>
	{
		USART_SendString("Mode Up"); 						/* send status of LED i.e. LED OFF */
    4486:	82 e4       	ldi	r24, 0x42	; 66
    4488:	93 e0       	ldi	r25, 0x03	; 3
    448a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
		*(Settings + 0) += 1;
    448e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Settings>
    4492:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <Settings+0x1>
    4496:	80 81       	ld	r24, Z
    4498:	91 81       	ldd	r25, Z+1	; 0x01
    449a:	01 96       	adiw	r24, 0x01	; 1
    449c:	91 83       	std	Z+1, r25	; 0x01
    449e:	80 83       	st	Z, r24
    44a0:	38 c0       	rjmp	.+112    	; 0x4512 <USART_BluetoothChanger+0x146>
	}
	else if(strcmp(Data_in, BL_ModeDown) == 0)
    44a2:	6a e4       	ldi	r22, 0x4A	; 74
    44a4:	73 e0       	ldi	r23, 0x03	; 3
    44a6:	c8 01       	movw	r24, r16
    44a8:	0e 94 79 25 	call	0x4af2	; 0x4af2 <strcmp>
    44ac:	89 2b       	or	r24, r25
    44ae:	71 f4       	brne	.+28     	; 0x44cc <USART_BluetoothChanger+0x100>
	{
		USART_SendString("Mode down"); 						/* send status of LED i.e. LED OFF */
    44b0:	83 e5       	ldi	r24, 0x53	; 83
    44b2:	93 e0       	ldi	r25, 0x03	; 3
    44b4:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
		*(Settings + 0) -= 1;
    44b8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Settings>
    44bc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <Settings+0x1>
    44c0:	80 81       	ld	r24, Z
    44c2:	91 81       	ldd	r25, Z+1	; 0x01
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	91 83       	std	Z+1, r25	; 0x01
    44c8:	80 83       	st	Z, r24
    44ca:	23 c0       	rjmp	.+70     	; 0x4512 <USART_BluetoothChanger+0x146>
	}
	else{
		char buffer_tmp[BL_BUFFERSIZE] = "RX:> ";
    44cc:	86 e0       	ldi	r24, 0x06	; 6
    44ce:	e6 e3       	ldi	r30, 0x36	; 54
    44d0:	f1 e0       	ldi	r31, 0x01	; 1
    44d2:	9e 01       	movw	r18, r28
    44d4:	2f 5f       	subi	r18, 0xFF	; 255
    44d6:	3f 4f       	sbci	r19, 0xFF	; 255
    44d8:	79 01       	movw	r14, r18
    44da:	d9 01       	movw	r26, r18
    44dc:	01 90       	ld	r0, Z+
    44de:	0d 92       	st	X+, r0
    44e0:	8a 95       	dec	r24
    44e2:	e1 f7       	brne	.-8      	; 0x44dc <USART_BluetoothChanger+0x110>
    44e4:	fe 01       	movw	r30, r28
    44e6:	37 96       	adiw	r30, 0x07	; 7
    44e8:	84 e0       	ldi	r24, 0x04	; 4
    44ea:	df 01       	movw	r26, r30
    44ec:	1d 92       	st	X+, r1
    44ee:	8a 95       	dec	r24
    44f0:	e9 f7       	brne	.-6      	; 0x44ec <USART_BluetoothChanger+0x120>
		strcat(buffer_tmp, Data_in);
    44f2:	b8 01       	movw	r22, r16
    44f4:	c9 01       	movw	r24, r18
    44f6:	0e 94 6e 25 	call	0x4adc	; 0x4adc <strcat>
		strcat(buffer_tmp, "\n");
    44fa:	f7 01       	movw	r30, r14
    44fc:	01 90       	ld	r0, Z+
    44fe:	00 20       	and	r0, r0
    4500:	e9 f7       	brne	.-6      	; 0x44fc <USART_BluetoothChanger+0x130>
    4502:	31 97       	sbiw	r30, 0x01	; 1
    4504:	8a e0       	ldi	r24, 0x0A	; 10
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	91 83       	std	Z+1, r25	; 0x01
    450a:	80 83       	st	Z, r24
		USART_SendString(buffer_tmp);
    450c:	c7 01       	movw	r24, r14
    450e:	0e 94 d7 21 	call	0x43ae	; 0x43ae <USART_SendString>
		strcpy(buffer_tmp, "");
	}
	
    4512:	2a 96       	adiw	r28, 0x0a	; 10
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	df 91       	pop	r29
    4520:	cf 91       	pop	r28
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	ff 90       	pop	r15
    4528:	ef 90       	pop	r14
    452a:	08 95       	ret

0000452c <__subsf3>:
    452c:	50 58       	subi	r21, 0x80	; 128

0000452e <__addsf3>:
    452e:	bb 27       	eor	r27, r27
    4530:	aa 27       	eor	r26, r26
    4532:	0e 94 ae 22 	call	0x455c	; 0x455c <__addsf3x>
    4536:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <__fp_round>
    453a:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__fp_pscA>
    453e:	38 f0       	brcs	.+14     	; 0x454e <__addsf3+0x20>
    4540:	0e 94 77 24 	call	0x48ee	; 0x48ee <__fp_pscB>
    4544:	20 f0       	brcs	.+8      	; 0x454e <__addsf3+0x20>
    4546:	39 f4       	brne	.+14     	; 0x4556 <__addsf3+0x28>
    4548:	9f 3f       	cpi	r25, 0xFF	; 255
    454a:	19 f4       	brne	.+6      	; 0x4552 <__addsf3+0x24>
    454c:	26 f4       	brtc	.+8      	; 0x4556 <__addsf3+0x28>
    454e:	0c 94 46 24 	jmp	0x488c	; 0x488c <__fp_nan>
    4552:	0e f4       	brtc	.+2      	; 0x4556 <__addsf3+0x28>
    4554:	e0 95       	com	r30
    4556:	e7 fb       	bst	r30, 7
    4558:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__fp_inf>

0000455c <__addsf3x>:
    455c:	e9 2f       	mov	r30, r25
    455e:	0e 94 8f 24 	call	0x491e	; 0x491e <__fp_split3>
    4562:	58 f3       	brcs	.-42     	; 0x453a <__addsf3+0xc>
    4564:	ba 17       	cp	r27, r26
    4566:	62 07       	cpc	r22, r18
    4568:	73 07       	cpc	r23, r19
    456a:	84 07       	cpc	r24, r20
    456c:	95 07       	cpc	r25, r21
    456e:	20 f0       	brcs	.+8      	; 0x4578 <__addsf3x+0x1c>
    4570:	79 f4       	brne	.+30     	; 0x4590 <__addsf3x+0x34>
    4572:	a6 f5       	brtc	.+104    	; 0x45dc <__addsf3x+0x80>
    4574:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <__fp_zero>
    4578:	0e f4       	brtc	.+2      	; 0x457c <__addsf3x+0x20>
    457a:	e0 95       	com	r30
    457c:	0b 2e       	mov	r0, r27
    457e:	ba 2f       	mov	r27, r26
    4580:	a0 2d       	mov	r26, r0
    4582:	0b 01       	movw	r0, r22
    4584:	b9 01       	movw	r22, r18
    4586:	90 01       	movw	r18, r0
    4588:	0c 01       	movw	r0, r24
    458a:	ca 01       	movw	r24, r20
    458c:	a0 01       	movw	r20, r0
    458e:	11 24       	eor	r1, r1
    4590:	ff 27       	eor	r31, r31
    4592:	59 1b       	sub	r21, r25
    4594:	99 f0       	breq	.+38     	; 0x45bc <__addsf3x+0x60>
    4596:	59 3f       	cpi	r21, 0xF9	; 249
    4598:	50 f4       	brcc	.+20     	; 0x45ae <__addsf3x+0x52>
    459a:	50 3e       	cpi	r21, 0xE0	; 224
    459c:	68 f1       	brcs	.+90     	; 0x45f8 <__addsf3x+0x9c>
    459e:	1a 16       	cp	r1, r26
    45a0:	f0 40       	sbci	r31, 0x00	; 0
    45a2:	a2 2f       	mov	r26, r18
    45a4:	23 2f       	mov	r18, r19
    45a6:	34 2f       	mov	r19, r20
    45a8:	44 27       	eor	r20, r20
    45aa:	58 5f       	subi	r21, 0xF8	; 248
    45ac:	f3 cf       	rjmp	.-26     	; 0x4594 <__addsf3x+0x38>
    45ae:	46 95       	lsr	r20
    45b0:	37 95       	ror	r19
    45b2:	27 95       	ror	r18
    45b4:	a7 95       	ror	r26
    45b6:	f0 40       	sbci	r31, 0x00	; 0
    45b8:	53 95       	inc	r21
    45ba:	c9 f7       	brne	.-14     	; 0x45ae <__addsf3x+0x52>
    45bc:	7e f4       	brtc	.+30     	; 0x45dc <__addsf3x+0x80>
    45be:	1f 16       	cp	r1, r31
    45c0:	ba 0b       	sbc	r27, r26
    45c2:	62 0b       	sbc	r22, r18
    45c4:	73 0b       	sbc	r23, r19
    45c6:	84 0b       	sbc	r24, r20
    45c8:	ba f0       	brmi	.+46     	; 0x45f8 <__addsf3x+0x9c>
    45ca:	91 50       	subi	r25, 0x01	; 1
    45cc:	a1 f0       	breq	.+40     	; 0x45f6 <__addsf3x+0x9a>
    45ce:	ff 0f       	add	r31, r31
    45d0:	bb 1f       	adc	r27, r27
    45d2:	66 1f       	adc	r22, r22
    45d4:	77 1f       	adc	r23, r23
    45d6:	88 1f       	adc	r24, r24
    45d8:	c2 f7       	brpl	.-16     	; 0x45ca <__addsf3x+0x6e>
    45da:	0e c0       	rjmp	.+28     	; 0x45f8 <__addsf3x+0x9c>
    45dc:	ba 0f       	add	r27, r26
    45de:	62 1f       	adc	r22, r18
    45e0:	73 1f       	adc	r23, r19
    45e2:	84 1f       	adc	r24, r20
    45e4:	48 f4       	brcc	.+18     	; 0x45f8 <__addsf3x+0x9c>
    45e6:	87 95       	ror	r24
    45e8:	77 95       	ror	r23
    45ea:	67 95       	ror	r22
    45ec:	b7 95       	ror	r27
    45ee:	f7 95       	ror	r31
    45f0:	9e 3f       	cpi	r25, 0xFE	; 254
    45f2:	08 f0       	brcs	.+2      	; 0x45f6 <__addsf3x+0x9a>
    45f4:	b0 cf       	rjmp	.-160    	; 0x4556 <__addsf3+0x28>
    45f6:	93 95       	inc	r25
    45f8:	88 0f       	add	r24, r24
    45fa:	08 f0       	brcs	.+2      	; 0x45fe <__addsf3x+0xa2>
    45fc:	99 27       	eor	r25, r25
    45fe:	ee 0f       	add	r30, r30
    4600:	97 95       	ror	r25
    4602:	87 95       	ror	r24
    4604:	08 95       	ret

00004606 <atan>:
    4606:	df 93       	push	r29
    4608:	dd 27       	eor	r29, r29
    460a:	b9 2f       	mov	r27, r25
    460c:	bf 77       	andi	r27, 0x7F	; 127
    460e:	40 e8       	ldi	r20, 0x80	; 128
    4610:	5f e3       	ldi	r21, 0x3F	; 63
    4612:	16 16       	cp	r1, r22
    4614:	17 06       	cpc	r1, r23
    4616:	48 07       	cpc	r20, r24
    4618:	5b 07       	cpc	r21, r27
    461a:	18 f4       	brcc	.+6      	; 0x4622 <atan+0x1c>
    461c:	d9 2f       	mov	r29, r25
    461e:	0e 94 bd 24 	call	0x497a	; 0x497a <inverse>
    4622:	9f 93       	push	r25
    4624:	8f 93       	push	r24
    4626:	7f 93       	push	r23
    4628:	6f 93       	push	r22
    462a:	0e 94 32 25 	call	0x4a64	; 0x4a64 <square>
    462e:	e8 e6       	ldi	r30, 0x68	; 104
    4630:	f0 e0       	ldi	r31, 0x00	; 0
    4632:	0e 94 49 24 	call	0x4892	; 0x4892 <__fp_powser>
    4636:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__fp_round>
    463a:	2f 91       	pop	r18
    463c:	3f 91       	pop	r19
    463e:	4f 91       	pop	r20
    4640:	5f 91       	pop	r21
    4642:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__mulsf3x>
    4646:	dd 23       	and	r29, r29
    4648:	51 f0       	breq	.+20     	; 0x465e <atan+0x58>
    464a:	90 58       	subi	r25, 0x80	; 128
    464c:	a2 ea       	ldi	r26, 0xA2	; 162
    464e:	2a ed       	ldi	r18, 0xDA	; 218
    4650:	3f e0       	ldi	r19, 0x0F	; 15
    4652:	49 ec       	ldi	r20, 0xC9	; 201
    4654:	5f e3       	ldi	r21, 0x3F	; 63
    4656:	d0 78       	andi	r29, 0x80	; 128
    4658:	5d 27       	eor	r21, r29
    465a:	0e 94 ae 22 	call	0x455c	; 0x455c <__addsf3x>
    465e:	df 91       	pop	r29
    4660:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <__fp_round>

00004664 <__cmpsf2>:
    4664:	0e 94 1c 24 	call	0x4838	; 0x4838 <__fp_cmp>
    4668:	08 f4       	brcc	.+2      	; 0x466c <__cmpsf2+0x8>
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	08 95       	ret

0000466e <__divsf3>:
    466e:	0e 94 4b 23 	call	0x4696	; 0x4696 <__divsf3x>
    4672:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <__fp_round>
    4676:	0e 94 77 24 	call	0x48ee	; 0x48ee <__fp_pscB>
    467a:	58 f0       	brcs	.+22     	; 0x4692 <__divsf3+0x24>
    467c:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__fp_pscA>
    4680:	40 f0       	brcs	.+16     	; 0x4692 <__divsf3+0x24>
    4682:	29 f4       	brne	.+10     	; 0x468e <__divsf3+0x20>
    4684:	5f 3f       	cpi	r21, 0xFF	; 255
    4686:	29 f0       	breq	.+10     	; 0x4692 <__divsf3+0x24>
    4688:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__fp_inf>
    468c:	51 11       	cpse	r21, r1
    468e:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__fp_szero>
    4692:	0c 94 46 24 	jmp	0x488c	; 0x488c <__fp_nan>

00004696 <__divsf3x>:
    4696:	0e 94 8f 24 	call	0x491e	; 0x491e <__fp_split3>
    469a:	68 f3       	brcs	.-38     	; 0x4676 <__divsf3+0x8>

0000469c <__divsf3_pse>:
    469c:	99 23       	and	r25, r25
    469e:	b1 f3       	breq	.-20     	; 0x468c <__divsf3+0x1e>
    46a0:	55 23       	and	r21, r21
    46a2:	91 f3       	breq	.-28     	; 0x4688 <__divsf3+0x1a>
    46a4:	95 1b       	sub	r25, r21
    46a6:	55 0b       	sbc	r21, r21
    46a8:	bb 27       	eor	r27, r27
    46aa:	aa 27       	eor	r26, r26
    46ac:	62 17       	cp	r22, r18
    46ae:	73 07       	cpc	r23, r19
    46b0:	84 07       	cpc	r24, r20
    46b2:	38 f0       	brcs	.+14     	; 0x46c2 <__divsf3_pse+0x26>
    46b4:	9f 5f       	subi	r25, 0xFF	; 255
    46b6:	5f 4f       	sbci	r21, 0xFF	; 255
    46b8:	22 0f       	add	r18, r18
    46ba:	33 1f       	adc	r19, r19
    46bc:	44 1f       	adc	r20, r20
    46be:	aa 1f       	adc	r26, r26
    46c0:	a9 f3       	breq	.-22     	; 0x46ac <__divsf3_pse+0x10>
    46c2:	35 d0       	rcall	.+106    	; 0x472e <__divsf3_pse+0x92>
    46c4:	0e 2e       	mov	r0, r30
    46c6:	3a f0       	brmi	.+14     	; 0x46d6 <__divsf3_pse+0x3a>
    46c8:	e0 e8       	ldi	r30, 0x80	; 128
    46ca:	32 d0       	rcall	.+100    	; 0x4730 <__divsf3_pse+0x94>
    46cc:	91 50       	subi	r25, 0x01	; 1
    46ce:	50 40       	sbci	r21, 0x00	; 0
    46d0:	e6 95       	lsr	r30
    46d2:	00 1c       	adc	r0, r0
    46d4:	ca f7       	brpl	.-14     	; 0x46c8 <__divsf3_pse+0x2c>
    46d6:	2b d0       	rcall	.+86     	; 0x472e <__divsf3_pse+0x92>
    46d8:	fe 2f       	mov	r31, r30
    46da:	29 d0       	rcall	.+82     	; 0x472e <__divsf3_pse+0x92>
    46dc:	66 0f       	add	r22, r22
    46de:	77 1f       	adc	r23, r23
    46e0:	88 1f       	adc	r24, r24
    46e2:	bb 1f       	adc	r27, r27
    46e4:	26 17       	cp	r18, r22
    46e6:	37 07       	cpc	r19, r23
    46e8:	48 07       	cpc	r20, r24
    46ea:	ab 07       	cpc	r26, r27
    46ec:	b0 e8       	ldi	r27, 0x80	; 128
    46ee:	09 f0       	breq	.+2      	; 0x46f2 <__divsf3_pse+0x56>
    46f0:	bb 0b       	sbc	r27, r27
    46f2:	80 2d       	mov	r24, r0
    46f4:	bf 01       	movw	r22, r30
    46f6:	ff 27       	eor	r31, r31
    46f8:	93 58       	subi	r25, 0x83	; 131
    46fa:	5f 4f       	sbci	r21, 0xFF	; 255
    46fc:	3a f0       	brmi	.+14     	; 0x470c <__divsf3_pse+0x70>
    46fe:	9e 3f       	cpi	r25, 0xFE	; 254
    4700:	51 05       	cpc	r21, r1
    4702:	78 f0       	brcs	.+30     	; 0x4722 <__divsf3_pse+0x86>
    4704:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__fp_inf>
    4708:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__fp_szero>
    470c:	5f 3f       	cpi	r21, 0xFF	; 255
    470e:	e4 f3       	brlt	.-8      	; 0x4708 <__divsf3_pse+0x6c>
    4710:	98 3e       	cpi	r25, 0xE8	; 232
    4712:	d4 f3       	brlt	.-12     	; 0x4708 <__divsf3_pse+0x6c>
    4714:	86 95       	lsr	r24
    4716:	77 95       	ror	r23
    4718:	67 95       	ror	r22
    471a:	b7 95       	ror	r27
    471c:	f7 95       	ror	r31
    471e:	9f 5f       	subi	r25, 0xFF	; 255
    4720:	c9 f7       	brne	.-14     	; 0x4714 <__divsf3_pse+0x78>
    4722:	88 0f       	add	r24, r24
    4724:	91 1d       	adc	r25, r1
    4726:	96 95       	lsr	r25
    4728:	87 95       	ror	r24
    472a:	97 f9       	bld	r25, 7
    472c:	08 95       	ret
    472e:	e1 e0       	ldi	r30, 0x01	; 1
    4730:	66 0f       	add	r22, r22
    4732:	77 1f       	adc	r23, r23
    4734:	88 1f       	adc	r24, r24
    4736:	bb 1f       	adc	r27, r27
    4738:	62 17       	cp	r22, r18
    473a:	73 07       	cpc	r23, r19
    473c:	84 07       	cpc	r24, r20
    473e:	ba 07       	cpc	r27, r26
    4740:	20 f0       	brcs	.+8      	; 0x474a <__divsf3_pse+0xae>
    4742:	62 1b       	sub	r22, r18
    4744:	73 0b       	sbc	r23, r19
    4746:	84 0b       	sbc	r24, r20
    4748:	ba 0b       	sbc	r27, r26
    474a:	ee 1f       	adc	r30, r30
    474c:	88 f7       	brcc	.-30     	; 0x4730 <__divsf3_pse+0x94>
    474e:	e0 95       	com	r30
    4750:	08 95       	ret

00004752 <__fixsfsi>:
    4752:	0e 94 b0 23 	call	0x4760	; 0x4760 <__fixunssfsi>
    4756:	68 94       	set
    4758:	b1 11       	cpse	r27, r1
    475a:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__fp_szero>
    475e:	08 95       	ret

00004760 <__fixunssfsi>:
    4760:	0e 94 97 24 	call	0x492e	; 0x492e <__fp_splitA>
    4764:	88 f0       	brcs	.+34     	; 0x4788 <__fixunssfsi+0x28>
    4766:	9f 57       	subi	r25, 0x7F	; 127
    4768:	98 f0       	brcs	.+38     	; 0x4790 <__fixunssfsi+0x30>
    476a:	b9 2f       	mov	r27, r25
    476c:	99 27       	eor	r25, r25
    476e:	b7 51       	subi	r27, 0x17	; 23
    4770:	b0 f0       	brcs	.+44     	; 0x479e <__fixunssfsi+0x3e>
    4772:	e1 f0       	breq	.+56     	; 0x47ac <__fixunssfsi+0x4c>
    4774:	66 0f       	add	r22, r22
    4776:	77 1f       	adc	r23, r23
    4778:	88 1f       	adc	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	1a f0       	brmi	.+6      	; 0x4784 <__fixunssfsi+0x24>
    477e:	ba 95       	dec	r27
    4780:	c9 f7       	brne	.-14     	; 0x4774 <__fixunssfsi+0x14>
    4782:	14 c0       	rjmp	.+40     	; 0x47ac <__fixunssfsi+0x4c>
    4784:	b1 30       	cpi	r27, 0x01	; 1
    4786:	91 f0       	breq	.+36     	; 0x47ac <__fixunssfsi+0x4c>
    4788:	0e 94 b1 24 	call	0x4962	; 0x4962 <__fp_zero>
    478c:	b1 e0       	ldi	r27, 0x01	; 1
    478e:	08 95       	ret
    4790:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <__fp_zero>
    4794:	67 2f       	mov	r22, r23
    4796:	78 2f       	mov	r23, r24
    4798:	88 27       	eor	r24, r24
    479a:	b8 5f       	subi	r27, 0xF8	; 248
    479c:	39 f0       	breq	.+14     	; 0x47ac <__fixunssfsi+0x4c>
    479e:	b9 3f       	cpi	r27, 0xF9	; 249
    47a0:	cc f3       	brlt	.-14     	; 0x4794 <__fixunssfsi+0x34>
    47a2:	86 95       	lsr	r24
    47a4:	77 95       	ror	r23
    47a6:	67 95       	ror	r22
    47a8:	b3 95       	inc	r27
    47aa:	d9 f7       	brne	.-10     	; 0x47a2 <__fixunssfsi+0x42>
    47ac:	3e f4       	brtc	.+14     	; 0x47bc <__fixunssfsi+0x5c>
    47ae:	90 95       	com	r25
    47b0:	80 95       	com	r24
    47b2:	70 95       	com	r23
    47b4:	61 95       	neg	r22
    47b6:	7f 4f       	sbci	r23, 0xFF	; 255
    47b8:	8f 4f       	sbci	r24, 0xFF	; 255
    47ba:	9f 4f       	sbci	r25, 0xFF	; 255
    47bc:	08 95       	ret

000047be <__floatunsisf>:
    47be:	e8 94       	clt
    47c0:	09 c0       	rjmp	.+18     	; 0x47d4 <__floatsisf+0x12>

000047c2 <__floatsisf>:
    47c2:	97 fb       	bst	r25, 7
    47c4:	3e f4       	brtc	.+14     	; 0x47d4 <__floatsisf+0x12>
    47c6:	90 95       	com	r25
    47c8:	80 95       	com	r24
    47ca:	70 95       	com	r23
    47cc:	61 95       	neg	r22
    47ce:	7f 4f       	sbci	r23, 0xFF	; 255
    47d0:	8f 4f       	sbci	r24, 0xFF	; 255
    47d2:	9f 4f       	sbci	r25, 0xFF	; 255
    47d4:	99 23       	and	r25, r25
    47d6:	a9 f0       	breq	.+42     	; 0x4802 <__floatsisf+0x40>
    47d8:	f9 2f       	mov	r31, r25
    47da:	96 e9       	ldi	r25, 0x96	; 150
    47dc:	bb 27       	eor	r27, r27
    47de:	93 95       	inc	r25
    47e0:	f6 95       	lsr	r31
    47e2:	87 95       	ror	r24
    47e4:	77 95       	ror	r23
    47e6:	67 95       	ror	r22
    47e8:	b7 95       	ror	r27
    47ea:	f1 11       	cpse	r31, r1
    47ec:	f8 cf       	rjmp	.-16     	; 0x47de <__floatsisf+0x1c>
    47ee:	fa f4       	brpl	.+62     	; 0x482e <__floatsisf+0x6c>
    47f0:	bb 0f       	add	r27, r27
    47f2:	11 f4       	brne	.+4      	; 0x47f8 <__floatsisf+0x36>
    47f4:	60 ff       	sbrs	r22, 0
    47f6:	1b c0       	rjmp	.+54     	; 0x482e <__floatsisf+0x6c>
    47f8:	6f 5f       	subi	r22, 0xFF	; 255
    47fa:	7f 4f       	sbci	r23, 0xFF	; 255
    47fc:	8f 4f       	sbci	r24, 0xFF	; 255
    47fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4800:	16 c0       	rjmp	.+44     	; 0x482e <__floatsisf+0x6c>
    4802:	88 23       	and	r24, r24
    4804:	11 f0       	breq	.+4      	; 0x480a <__floatsisf+0x48>
    4806:	96 e9       	ldi	r25, 0x96	; 150
    4808:	11 c0       	rjmp	.+34     	; 0x482c <__floatsisf+0x6a>
    480a:	77 23       	and	r23, r23
    480c:	21 f0       	breq	.+8      	; 0x4816 <__floatsisf+0x54>
    480e:	9e e8       	ldi	r25, 0x8E	; 142
    4810:	87 2f       	mov	r24, r23
    4812:	76 2f       	mov	r23, r22
    4814:	05 c0       	rjmp	.+10     	; 0x4820 <__floatsisf+0x5e>
    4816:	66 23       	and	r22, r22
    4818:	71 f0       	breq	.+28     	; 0x4836 <__floatsisf+0x74>
    481a:	96 e8       	ldi	r25, 0x86	; 134
    481c:	86 2f       	mov	r24, r22
    481e:	70 e0       	ldi	r23, 0x00	; 0
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	2a f0       	brmi	.+10     	; 0x482e <__floatsisf+0x6c>
    4824:	9a 95       	dec	r25
    4826:	66 0f       	add	r22, r22
    4828:	77 1f       	adc	r23, r23
    482a:	88 1f       	adc	r24, r24
    482c:	da f7       	brpl	.-10     	; 0x4824 <__floatsisf+0x62>
    482e:	88 0f       	add	r24, r24
    4830:	96 95       	lsr	r25
    4832:	87 95       	ror	r24
    4834:	97 f9       	bld	r25, 7
    4836:	08 95       	ret

00004838 <__fp_cmp>:
    4838:	99 0f       	add	r25, r25
    483a:	00 08       	sbc	r0, r0
    483c:	55 0f       	add	r21, r21
    483e:	aa 0b       	sbc	r26, r26
    4840:	e0 e8       	ldi	r30, 0x80	; 128
    4842:	fe ef       	ldi	r31, 0xFE	; 254
    4844:	16 16       	cp	r1, r22
    4846:	17 06       	cpc	r1, r23
    4848:	e8 07       	cpc	r30, r24
    484a:	f9 07       	cpc	r31, r25
    484c:	c0 f0       	brcs	.+48     	; 0x487e <__fp_cmp+0x46>
    484e:	12 16       	cp	r1, r18
    4850:	13 06       	cpc	r1, r19
    4852:	e4 07       	cpc	r30, r20
    4854:	f5 07       	cpc	r31, r21
    4856:	98 f0       	brcs	.+38     	; 0x487e <__fp_cmp+0x46>
    4858:	62 1b       	sub	r22, r18
    485a:	73 0b       	sbc	r23, r19
    485c:	84 0b       	sbc	r24, r20
    485e:	95 0b       	sbc	r25, r21
    4860:	39 f4       	brne	.+14     	; 0x4870 <__fp_cmp+0x38>
    4862:	0a 26       	eor	r0, r26
    4864:	61 f0       	breq	.+24     	; 0x487e <__fp_cmp+0x46>
    4866:	23 2b       	or	r18, r19
    4868:	24 2b       	or	r18, r20
    486a:	25 2b       	or	r18, r21
    486c:	21 f4       	brne	.+8      	; 0x4876 <__fp_cmp+0x3e>
    486e:	08 95       	ret
    4870:	0a 26       	eor	r0, r26
    4872:	09 f4       	brne	.+2      	; 0x4876 <__fp_cmp+0x3e>
    4874:	a1 40       	sbci	r26, 0x01	; 1
    4876:	a6 95       	lsr	r26
    4878:	8f ef       	ldi	r24, 0xFF	; 255
    487a:	81 1d       	adc	r24, r1
    487c:	81 1d       	adc	r24, r1
    487e:	08 95       	ret

00004880 <__fp_inf>:
    4880:	97 f9       	bld	r25, 7
    4882:	9f 67       	ori	r25, 0x7F	; 127
    4884:	80 e8       	ldi	r24, 0x80	; 128
    4886:	70 e0       	ldi	r23, 0x00	; 0
    4888:	60 e0       	ldi	r22, 0x00	; 0
    488a:	08 95       	ret

0000488c <__fp_nan>:
    488c:	9f ef       	ldi	r25, 0xFF	; 255
    488e:	80 ec       	ldi	r24, 0xC0	; 192
    4890:	08 95       	ret

00004892 <__fp_powser>:
    4892:	df 93       	push	r29
    4894:	cf 93       	push	r28
    4896:	1f 93       	push	r17
    4898:	0f 93       	push	r16
    489a:	ff 92       	push	r15
    489c:	ef 92       	push	r14
    489e:	df 92       	push	r13
    48a0:	7b 01       	movw	r14, r22
    48a2:	8c 01       	movw	r16, r24
    48a4:	68 94       	set
    48a6:	06 c0       	rjmp	.+12     	; 0x48b4 <__fp_powser+0x22>
    48a8:	da 2e       	mov	r13, r26
    48aa:	ef 01       	movw	r28, r30
    48ac:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__mulsf3x>
    48b0:	fe 01       	movw	r30, r28
    48b2:	e8 94       	clt
    48b4:	a5 91       	lpm	r26, Z+
    48b6:	25 91       	lpm	r18, Z+
    48b8:	35 91       	lpm	r19, Z+
    48ba:	45 91       	lpm	r20, Z+
    48bc:	55 91       	lpm	r21, Z+
    48be:	a6 f3       	brts	.-24     	; 0x48a8 <__fp_powser+0x16>
    48c0:	ef 01       	movw	r28, r30
    48c2:	0e 94 ae 22 	call	0x455c	; 0x455c <__addsf3x>
    48c6:	fe 01       	movw	r30, r28
    48c8:	97 01       	movw	r18, r14
    48ca:	a8 01       	movw	r20, r16
    48cc:	da 94       	dec	r13
    48ce:	69 f7       	brne	.-38     	; 0x48aa <__fp_powser+0x18>
    48d0:	df 90       	pop	r13
    48d2:	ef 90       	pop	r14
    48d4:	ff 90       	pop	r15
    48d6:	0f 91       	pop	r16
    48d8:	1f 91       	pop	r17
    48da:	cf 91       	pop	r28
    48dc:	df 91       	pop	r29
    48de:	08 95       	ret

000048e0 <__fp_pscA>:
    48e0:	00 24       	eor	r0, r0
    48e2:	0a 94       	dec	r0
    48e4:	16 16       	cp	r1, r22
    48e6:	17 06       	cpc	r1, r23
    48e8:	18 06       	cpc	r1, r24
    48ea:	09 06       	cpc	r0, r25
    48ec:	08 95       	ret

000048ee <__fp_pscB>:
    48ee:	00 24       	eor	r0, r0
    48f0:	0a 94       	dec	r0
    48f2:	12 16       	cp	r1, r18
    48f4:	13 06       	cpc	r1, r19
    48f6:	14 06       	cpc	r1, r20
    48f8:	05 06       	cpc	r0, r21
    48fa:	08 95       	ret

000048fc <__fp_round>:
    48fc:	09 2e       	mov	r0, r25
    48fe:	03 94       	inc	r0
    4900:	00 0c       	add	r0, r0
    4902:	11 f4       	brne	.+4      	; 0x4908 <__fp_round+0xc>
    4904:	88 23       	and	r24, r24
    4906:	52 f0       	brmi	.+20     	; 0x491c <__fp_round+0x20>
    4908:	bb 0f       	add	r27, r27
    490a:	40 f4       	brcc	.+16     	; 0x491c <__fp_round+0x20>
    490c:	bf 2b       	or	r27, r31
    490e:	11 f4       	brne	.+4      	; 0x4914 <__fp_round+0x18>
    4910:	60 ff       	sbrs	r22, 0
    4912:	04 c0       	rjmp	.+8      	; 0x491c <__fp_round+0x20>
    4914:	6f 5f       	subi	r22, 0xFF	; 255
    4916:	7f 4f       	sbci	r23, 0xFF	; 255
    4918:	8f 4f       	sbci	r24, 0xFF	; 255
    491a:	9f 4f       	sbci	r25, 0xFF	; 255
    491c:	08 95       	ret

0000491e <__fp_split3>:
    491e:	57 fd       	sbrc	r21, 7
    4920:	90 58       	subi	r25, 0x80	; 128
    4922:	44 0f       	add	r20, r20
    4924:	55 1f       	adc	r21, r21
    4926:	59 f0       	breq	.+22     	; 0x493e <__fp_splitA+0x10>
    4928:	5f 3f       	cpi	r21, 0xFF	; 255
    492a:	71 f0       	breq	.+28     	; 0x4948 <__fp_splitA+0x1a>
    492c:	47 95       	ror	r20

0000492e <__fp_splitA>:
    492e:	88 0f       	add	r24, r24
    4930:	97 fb       	bst	r25, 7
    4932:	99 1f       	adc	r25, r25
    4934:	61 f0       	breq	.+24     	; 0x494e <__fp_splitA+0x20>
    4936:	9f 3f       	cpi	r25, 0xFF	; 255
    4938:	79 f0       	breq	.+30     	; 0x4958 <__fp_splitA+0x2a>
    493a:	87 95       	ror	r24
    493c:	08 95       	ret
    493e:	12 16       	cp	r1, r18
    4940:	13 06       	cpc	r1, r19
    4942:	14 06       	cpc	r1, r20
    4944:	55 1f       	adc	r21, r21
    4946:	f2 cf       	rjmp	.-28     	; 0x492c <__fp_split3+0xe>
    4948:	46 95       	lsr	r20
    494a:	f1 df       	rcall	.-30     	; 0x492e <__fp_splitA>
    494c:	08 c0       	rjmp	.+16     	; 0x495e <__fp_splitA+0x30>
    494e:	16 16       	cp	r1, r22
    4950:	17 06       	cpc	r1, r23
    4952:	18 06       	cpc	r1, r24
    4954:	99 1f       	adc	r25, r25
    4956:	f1 cf       	rjmp	.-30     	; 0x493a <__fp_splitA+0xc>
    4958:	86 95       	lsr	r24
    495a:	71 05       	cpc	r23, r1
    495c:	61 05       	cpc	r22, r1
    495e:	08 94       	sec
    4960:	08 95       	ret

00004962 <__fp_zero>:
    4962:	e8 94       	clt

00004964 <__fp_szero>:
    4964:	bb 27       	eor	r27, r27
    4966:	66 27       	eor	r22, r22
    4968:	77 27       	eor	r23, r23
    496a:	cb 01       	movw	r24, r22
    496c:	97 f9       	bld	r25, 7
    496e:	08 95       	ret

00004970 <__gesf2>:
    4970:	0e 94 1c 24 	call	0x4838	; 0x4838 <__fp_cmp>
    4974:	08 f4       	brcc	.+2      	; 0x4978 <__gesf2+0x8>
    4976:	8f ef       	ldi	r24, 0xFF	; 255
    4978:	08 95       	ret

0000497a <inverse>:
    497a:	9b 01       	movw	r18, r22
    497c:	ac 01       	movw	r20, r24
    497e:	60 e0       	ldi	r22, 0x00	; 0
    4980:	70 e0       	ldi	r23, 0x00	; 0
    4982:	80 e8       	ldi	r24, 0x80	; 128
    4984:	9f e3       	ldi	r25, 0x3F	; 63
    4986:	0c 94 37 23 	jmp	0x466e	; 0x466e <__divsf3>

0000498a <__mulsf3>:
    498a:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__mulsf3x>
    498e:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <__fp_round>
    4992:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__fp_pscA>
    4996:	38 f0       	brcs	.+14     	; 0x49a6 <__mulsf3+0x1c>
    4998:	0e 94 77 24 	call	0x48ee	; 0x48ee <__fp_pscB>
    499c:	20 f0       	brcs	.+8      	; 0x49a6 <__mulsf3+0x1c>
    499e:	95 23       	and	r25, r21
    49a0:	11 f0       	breq	.+4      	; 0x49a6 <__mulsf3+0x1c>
    49a2:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__fp_inf>
    49a6:	0c 94 46 24 	jmp	0x488c	; 0x488c <__fp_nan>
    49aa:	11 24       	eor	r1, r1
    49ac:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__fp_szero>

000049b0 <__mulsf3x>:
    49b0:	0e 94 8f 24 	call	0x491e	; 0x491e <__fp_split3>
    49b4:	70 f3       	brcs	.-36     	; 0x4992 <__mulsf3+0x8>

000049b6 <__mulsf3_pse>:
    49b6:	95 9f       	mul	r25, r21
    49b8:	c1 f3       	breq	.-16     	; 0x49aa <__mulsf3+0x20>
    49ba:	95 0f       	add	r25, r21
    49bc:	50 e0       	ldi	r21, 0x00	; 0
    49be:	55 1f       	adc	r21, r21
    49c0:	62 9f       	mul	r22, r18
    49c2:	f0 01       	movw	r30, r0
    49c4:	72 9f       	mul	r23, r18
    49c6:	bb 27       	eor	r27, r27
    49c8:	f0 0d       	add	r31, r0
    49ca:	b1 1d       	adc	r27, r1
    49cc:	63 9f       	mul	r22, r19
    49ce:	aa 27       	eor	r26, r26
    49d0:	f0 0d       	add	r31, r0
    49d2:	b1 1d       	adc	r27, r1
    49d4:	aa 1f       	adc	r26, r26
    49d6:	64 9f       	mul	r22, r20
    49d8:	66 27       	eor	r22, r22
    49da:	b0 0d       	add	r27, r0
    49dc:	a1 1d       	adc	r26, r1
    49de:	66 1f       	adc	r22, r22
    49e0:	82 9f       	mul	r24, r18
    49e2:	22 27       	eor	r18, r18
    49e4:	b0 0d       	add	r27, r0
    49e6:	a1 1d       	adc	r26, r1
    49e8:	62 1f       	adc	r22, r18
    49ea:	73 9f       	mul	r23, r19
    49ec:	b0 0d       	add	r27, r0
    49ee:	a1 1d       	adc	r26, r1
    49f0:	62 1f       	adc	r22, r18
    49f2:	83 9f       	mul	r24, r19
    49f4:	a0 0d       	add	r26, r0
    49f6:	61 1d       	adc	r22, r1
    49f8:	22 1f       	adc	r18, r18
    49fa:	74 9f       	mul	r23, r20
    49fc:	33 27       	eor	r19, r19
    49fe:	a0 0d       	add	r26, r0
    4a00:	61 1d       	adc	r22, r1
    4a02:	23 1f       	adc	r18, r19
    4a04:	84 9f       	mul	r24, r20
    4a06:	60 0d       	add	r22, r0
    4a08:	21 1d       	adc	r18, r1
    4a0a:	82 2f       	mov	r24, r18
    4a0c:	76 2f       	mov	r23, r22
    4a0e:	6a 2f       	mov	r22, r26
    4a10:	11 24       	eor	r1, r1
    4a12:	9f 57       	subi	r25, 0x7F	; 127
    4a14:	50 40       	sbci	r21, 0x00	; 0
    4a16:	9a f0       	brmi	.+38     	; 0x4a3e <__mulsf3_pse+0x88>
    4a18:	f1 f0       	breq	.+60     	; 0x4a56 <__mulsf3_pse+0xa0>
    4a1a:	88 23       	and	r24, r24
    4a1c:	4a f0       	brmi	.+18     	; 0x4a30 <__mulsf3_pse+0x7a>
    4a1e:	ee 0f       	add	r30, r30
    4a20:	ff 1f       	adc	r31, r31
    4a22:	bb 1f       	adc	r27, r27
    4a24:	66 1f       	adc	r22, r22
    4a26:	77 1f       	adc	r23, r23
    4a28:	88 1f       	adc	r24, r24
    4a2a:	91 50       	subi	r25, 0x01	; 1
    4a2c:	50 40       	sbci	r21, 0x00	; 0
    4a2e:	a9 f7       	brne	.-22     	; 0x4a1a <__mulsf3_pse+0x64>
    4a30:	9e 3f       	cpi	r25, 0xFE	; 254
    4a32:	51 05       	cpc	r21, r1
    4a34:	80 f0       	brcs	.+32     	; 0x4a56 <__mulsf3_pse+0xa0>
    4a36:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__fp_inf>
    4a3a:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__fp_szero>
    4a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    4a40:	e4 f3       	brlt	.-8      	; 0x4a3a <__mulsf3_pse+0x84>
    4a42:	98 3e       	cpi	r25, 0xE8	; 232
    4a44:	d4 f3       	brlt	.-12     	; 0x4a3a <__mulsf3_pse+0x84>
    4a46:	86 95       	lsr	r24
    4a48:	77 95       	ror	r23
    4a4a:	67 95       	ror	r22
    4a4c:	b7 95       	ror	r27
    4a4e:	f7 95       	ror	r31
    4a50:	e7 95       	ror	r30
    4a52:	9f 5f       	subi	r25, 0xFF	; 255
    4a54:	c1 f7       	brne	.-16     	; 0x4a46 <__mulsf3_pse+0x90>
    4a56:	fe 2b       	or	r31, r30
    4a58:	88 0f       	add	r24, r24
    4a5a:	91 1d       	adc	r25, r1
    4a5c:	96 95       	lsr	r25
    4a5e:	87 95       	ror	r24
    4a60:	97 f9       	bld	r25, 7
    4a62:	08 95       	ret

00004a64 <square>:
    4a64:	9b 01       	movw	r18, r22
    4a66:	ac 01       	movw	r20, r24
    4a68:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__mulsf3>

00004a6c <__udivmodsi4>:
    4a6c:	a1 e2       	ldi	r26, 0x21	; 33
    4a6e:	1a 2e       	mov	r1, r26
    4a70:	aa 1b       	sub	r26, r26
    4a72:	bb 1b       	sub	r27, r27
    4a74:	fd 01       	movw	r30, r26
    4a76:	0d c0       	rjmp	.+26     	; 0x4a92 <__udivmodsi4_ep>

00004a78 <__udivmodsi4_loop>:
    4a78:	aa 1f       	adc	r26, r26
    4a7a:	bb 1f       	adc	r27, r27
    4a7c:	ee 1f       	adc	r30, r30
    4a7e:	ff 1f       	adc	r31, r31
    4a80:	a2 17       	cp	r26, r18
    4a82:	b3 07       	cpc	r27, r19
    4a84:	e4 07       	cpc	r30, r20
    4a86:	f5 07       	cpc	r31, r21
    4a88:	20 f0       	brcs	.+8      	; 0x4a92 <__udivmodsi4_ep>
    4a8a:	a2 1b       	sub	r26, r18
    4a8c:	b3 0b       	sbc	r27, r19
    4a8e:	e4 0b       	sbc	r30, r20
    4a90:	f5 0b       	sbc	r31, r21

00004a92 <__udivmodsi4_ep>:
    4a92:	66 1f       	adc	r22, r22
    4a94:	77 1f       	adc	r23, r23
    4a96:	88 1f       	adc	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	1a 94       	dec	r1
    4a9c:	69 f7       	brne	.-38     	; 0x4a78 <__udivmodsi4_loop>
    4a9e:	60 95       	com	r22
    4aa0:	70 95       	com	r23
    4aa2:	80 95       	com	r24
    4aa4:	90 95       	com	r25
    4aa6:	9b 01       	movw	r18, r22
    4aa8:	ac 01       	movw	r20, r24
    4aaa:	bd 01       	movw	r22, r26
    4aac:	cf 01       	movw	r24, r30
    4aae:	08 95       	ret

00004ab0 <__umulhisi3>:
    4ab0:	a2 9f       	mul	r26, r18
    4ab2:	b0 01       	movw	r22, r0
    4ab4:	b3 9f       	mul	r27, r19
    4ab6:	c0 01       	movw	r24, r0
    4ab8:	a3 9f       	mul	r26, r19
    4aba:	70 0d       	add	r23, r0
    4abc:	81 1d       	adc	r24, r1
    4abe:	11 24       	eor	r1, r1
    4ac0:	91 1d       	adc	r25, r1
    4ac2:	b2 9f       	mul	r27, r18
    4ac4:	70 0d       	add	r23, r0
    4ac6:	81 1d       	adc	r24, r1
    4ac8:	11 24       	eor	r1, r1
    4aca:	91 1d       	adc	r25, r1
    4acc:	08 95       	ret

00004ace <memset>:
    4ace:	dc 01       	movw	r26, r24
    4ad0:	01 c0       	rjmp	.+2      	; 0x4ad4 <memset+0x6>
    4ad2:	6d 93       	st	X+, r22
    4ad4:	41 50       	subi	r20, 0x01	; 1
    4ad6:	50 40       	sbci	r21, 0x00	; 0
    4ad8:	e0 f7       	brcc	.-8      	; 0x4ad2 <memset+0x4>
    4ada:	08 95       	ret

00004adc <strcat>:
    4adc:	fb 01       	movw	r30, r22
    4ade:	dc 01       	movw	r26, r24
    4ae0:	0d 90       	ld	r0, X+
    4ae2:	00 20       	and	r0, r0
    4ae4:	e9 f7       	brne	.-6      	; 0x4ae0 <strcat+0x4>
    4ae6:	11 97       	sbiw	r26, 0x01	; 1
    4ae8:	01 90       	ld	r0, Z+
    4aea:	0d 92       	st	X+, r0
    4aec:	00 20       	and	r0, r0
    4aee:	e1 f7       	brne	.-8      	; 0x4ae8 <strcat+0xc>
    4af0:	08 95       	ret

00004af2 <strcmp>:
    4af2:	fb 01       	movw	r30, r22
    4af4:	dc 01       	movw	r26, r24
    4af6:	8d 91       	ld	r24, X+
    4af8:	01 90       	ld	r0, Z+
    4afa:	80 19       	sub	r24, r0
    4afc:	01 10       	cpse	r0, r1
    4afe:	d9 f3       	breq	.-10     	; 0x4af6 <strcmp+0x4>
    4b00:	99 0b       	sbc	r25, r25
    4b02:	08 95       	ret

00004b04 <__itoa_ncheck>:
    4b04:	bb 27       	eor	r27, r27
    4b06:	4a 30       	cpi	r20, 0x0A	; 10
    4b08:	31 f4       	brne	.+12     	; 0x4b16 <__itoa_ncheck+0x12>
    4b0a:	99 23       	and	r25, r25
    4b0c:	22 f4       	brpl	.+8      	; 0x4b16 <__itoa_ncheck+0x12>
    4b0e:	bd e2       	ldi	r27, 0x2D	; 45
    4b10:	90 95       	com	r25
    4b12:	81 95       	neg	r24
    4b14:	9f 4f       	sbci	r25, 0xFF	; 255
    4b16:	0c 94 8e 25 	jmp	0x4b1c	; 0x4b1c <__utoa_common>

00004b1a <__utoa_ncheck>:
    4b1a:	bb 27       	eor	r27, r27

00004b1c <__utoa_common>:
    4b1c:	fb 01       	movw	r30, r22
    4b1e:	55 27       	eor	r21, r21
    4b20:	aa 27       	eor	r26, r26
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	aa 1f       	adc	r26, r26
    4b28:	a4 17       	cp	r26, r20
    4b2a:	10 f0       	brcs	.+4      	; 0x4b30 <__utoa_common+0x14>
    4b2c:	a4 1b       	sub	r26, r20
    4b2e:	83 95       	inc	r24
    4b30:	50 51       	subi	r21, 0x10	; 16
    4b32:	b9 f7       	brne	.-18     	; 0x4b22 <__utoa_common+0x6>
    4b34:	a0 5d       	subi	r26, 0xD0	; 208
    4b36:	aa 33       	cpi	r26, 0x3A	; 58
    4b38:	08 f0       	brcs	.+2      	; 0x4b3c <__utoa_common+0x20>
    4b3a:	a9 5d       	subi	r26, 0xD9	; 217
    4b3c:	a1 93       	st	Z+, r26
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	79 f7       	brne	.-34     	; 0x4b20 <__utoa_common+0x4>
    4b42:	b1 11       	cpse	r27, r1
    4b44:	b1 93       	st	Z+, r27
    4b46:	11 92       	st	Z+, r1
    4b48:	cb 01       	movw	r24, r22
    4b4a:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <strrev>

00004b4e <strrev>:
    4b4e:	dc 01       	movw	r26, r24
    4b50:	fc 01       	movw	r30, r24
    4b52:	67 2f       	mov	r22, r23
    4b54:	71 91       	ld	r23, Z+
    4b56:	77 23       	and	r23, r23
    4b58:	e1 f7       	brne	.-8      	; 0x4b52 <strrev+0x4>
    4b5a:	32 97       	sbiw	r30, 0x02	; 2
    4b5c:	04 c0       	rjmp	.+8      	; 0x4b66 <strrev+0x18>
    4b5e:	7c 91       	ld	r23, X
    4b60:	6d 93       	st	X+, r22
    4b62:	70 83       	st	Z, r23
    4b64:	62 91       	ld	r22, -Z
    4b66:	ae 17       	cp	r26, r30
    4b68:	bf 07       	cpc	r27, r31
    4b6a:	c8 f3       	brcs	.-14     	; 0x4b5e <strrev+0x10>
    4b6c:	08 95       	ret

00004b6e <_exit>:
    4b6e:	f8 94       	cli

00004b70 <__stop_program>:
    4b70:	ff cf       	rjmp	.-2      	; 0x4b70 <__stop_program>

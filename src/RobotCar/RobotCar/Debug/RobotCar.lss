
RobotCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  000041b4  00004248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ca  008002c4  008002c4  0000440c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000443c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002108  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00048907  00000000  00000000  00006584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f01  00000000  00000000  0004ee8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cce1  00000000  00000000  00051d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000c59c  00000000  00000000  0005ea70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010dc4  00000000  00000000  0006b00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004e6d3  00000000  00000000  0007bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000020c0  00000000  00000000  000ca4a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__ctors_end>
       4:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
       8:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
       c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      10:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      14:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_5>
      18:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      1c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      20:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      24:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      28:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      2c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      30:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      34:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      38:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      3c:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_15>
      40:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      44:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      48:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      4c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      50:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      54:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      58:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      5c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      60:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      64:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 00       	.word	0x00bf	; ????
      6a:	03 02       	muls	r16, r19
      6c:	03 04       	cpc	r0, r3
      6e:	03 05       	cpc	r16, r3
      70:	04 06       	cpc	r0, r20
      72:	0a 00       	.word	0x000a	; ????
      74:	fe 07       	cpc	r31, r30
      76:	fe 07       	cpc	r31, r30
      78:	00 01       	movw	r0, r0
      7a:	42 02       	muls	r20, r18
      7c:	88 07       	cpc	r24, r24
      7e:	c4 20       	and	r12, r4
      80:	05 00       	.word	0x0005	; ????
      82:	62 07       	cpc	r22, r18
      84:	21 07       	cpc	r18, r17
      86:	39 43       	sbci	r19, 0x39	; 57
      88:	c7 a0       	ldd	r12, Z+39	; 0x27
      8a:	04 22       	and	r0, r20
      8c:	07 9b       	sbis	0x00, 7	; 0
      8e:	52 47       	sbci	r21, 0x72	; 114
      90:	62 09       	sbc	r22, r2
      92:	23 0e       	add	r2, r19
      94:	3d 42       	sbci	r19, 0x2D	; 45
      96:	4f 29       	or	r20, r15
      98:	49 06       	cpc	r4, r25
      9a:	a5 32       	cpi	r26, 0x25	; 37
      9c:	28 a5       	ldd	r18, Y+40	; 0x28
      9e:	24 01       	movw	r4, r8
      a0:	24 0c       	add	r2, r4
      a2:	3d 42       	sbci	r19, 0x2D	; 45
      a4:	57 b6       	in	r5, 0x37	; 55
      a6:	d4 b6       	in	r13, 0x34	; 52
      a8:	24 d9       	rcall	.-3512   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      aa:	22 00       	.word	0x0022	; ????
      ac:	25 0c       	add	r2, r5
      ae:	3d 42       	sbci	r19, 0x2D	; 45
      b0:	4f a4       	ldd	r4, Y+47	; 0x2f
      b2:	74 ab       	std	Z+52, r23	; 0x34
      b4:	b4 48       	sbci	r27, 0x84	; 132
      b6:	09 00       	.word	0x0009	; ????
      b8:	26 0d       	add	r18, r6
      ba:	3d 42       	sbci	r19, 0x2D	; 45
      bc:	4f 96       	adiw	r24, 0x1f	; 31
      be:	44 49       	sbci	r20, 0x94	; 148
      c0:	56 49       	sbci	r21, 0x96	; 150
      c2:	a4 48       	sbci	r26, 0x84	; 132
      c4:	09 27       	eor	r16, r25
      c6:	06 19       	sub	r16, r6
      c8:	53 c7       	rjmp	.+3750   	; 0xf70 <u8g2_setup+0x1a>
      ca:	00 28       	or	r0, r0
      cc:	08 bb       	out	0x18, r16	; 24
      ce:	42 57       	subi	r20, 0x72	; 114
      d0:	52 aa       	std	Z+50, r5	; 0x32
      d2:	15 29       	or	r17, r5
      d4:	09 bb       	out	0x19, r16	; 25
      d6:	42 47       	sbci	r20, 0x72	; 114
      d8:	56 aa       	std	Z+54, r5	; 0x36
      da:	94 00       	.word	0x0094	; ????
      dc:	2a 0a       	sbc	r2, r26
      de:	2d 46       	sbci	r18, 0x6D	; 109
      e0:	47 96       	adiw	r24, 0x17	; 23
      e2:	54 06       	cpc	r5, r20
      e4:	a5 2d       	mov	r26, r5
      e6:	2b 0a       	sbc	r2, r27
      e8:	2d 46       	sbci	r18, 0x6D	; 109
      ea:	57 18       	sub	r5, r7
      ec:	0d 52       	subi	r16, 0x2D	; 45
      ee:	18 01       	movw	r2, r16
      f0:	2c 07       	cpc	r18, r28
      f2:	9b 3e       	cpi	r25, 0xEB	; 235
      f4:	8f 52       	subi	r24, 0x2F	; 47
      f6:	02 2d       	mov	r16, r2
      f8:	06 0d       	add	r16, r6
      fa:	4e c7       	rjmp	.+3740   	; 0xf98 <u8g2_setup+0x42>
      fc:	20 2e       	mov	r2, r16
      fe:	08 9b       	sbis	0x01, 0	; 1
     100:	3e 4f       	sbci	r19, 0xFE	; 254
     102:	b2 24       	eor	r11, r2
     104:	00 2f       	mov	r16, r16
     106:	08 3d       	cpi	r16, 0xD8	; 216
     108:	42 67       	ori	r20, 0x72	; 114
     10a:	ad 63       	ori	r26, 0x3D	; 61
     10c:	08 30       	cpi	r16, 0x08	; 8
     10e:	0b 3d       	cpi	r16, 0xDB	; 219
     110:	42 57       	subi	r20, 0x72	; 114
     112:	96 d4       	rcall	.+2348   	; 0xa40 <__stack+0x141>
     114:	6c 49       	sbci	r22, 0x9C	; 156
     116:	2d 02       	muls	r18, r29
     118:	31 0a       	sbc	r3, r17
     11a:	3d 42       	sbci	r19, 0x2D	; 45
     11c:	57 26       	eor	r5, r23
     11e:	25 61       	ori	r18, 0x15	; 21
     120:	d3 20       	and	r13, r3
     122:	32 0c       	add	r3, r2
     124:	3d 42       	sbci	r19, 0x2D	; 45
     126:	cf 92       	push	r12
     128:	85 91       	lpm	r24, Z+
     12a:	94 85       	ldd	r25, Z+12	; 0x0c
     12c:	83 00       	.word	0x0083	; ????
     12e:	33 0c       	add	r3, r3
     130:	3d 42       	sbci	r19, 0x2D	; 45
     132:	c7 20       	and	r12, r7
     134:	66 99       	sbic	0x0c, 6	; 12
     136:	aa 25       	eor	r26, r10
     138:	0b 00       	.word	0x000b	; ????
     13a:	34 0c       	add	r3, r4
     13c:	3d 42       	sbci	r19, 0x2D	; 45
     13e:	5f 26       	eor	r5, r31
     140:	25 a5       	ldd	r18, Z+45	; 0x2d
     142:	64 d0       	rcall	.+200    	; 0x20c <__trampolines_end+0x1a4>
     144:	c2 04       	cpc	r12, r2
     146:	35 0b       	sbc	r19, r21
     148:	3d 42       	sbci	r19, 0x2D	; 45
     14a:	c7 31       	cpi	r28, 0x17	; 23
     14c:	31 85       	ldd	r19, Z+9	; 0x09
     14e:	5a b2       	in	r5, 0x1a	; 26
     150:	00 36       	cpi	r16, 0x60	; 96
     152:	0c 3d       	cpi	r16, 0xDC	; 220
     154:	42 97       	sbiw	r24, 0x12	; 18
     156:	94 85       	ldd	r25, Z+12	; 0x0c
     158:	89 49       	sbci	r24, 0x99	; 153
     15a:	4b 16       	cp	r4, r27
     15c:	00 37       	cpi	r16, 0x70	; 112
     15e:	0b 3d       	cpi	r16, 0xDB	; 219
     160:	42 c7       	rjmp	.+3716   	; 0xfe6 <u8g2_setup+0x90>
     162:	20 66       	ori	r18, 0x60	; 96
     164:	61 56       	subi	r22, 0x61	; 97
     166:	cc 00       	.word	0x00cc	; ????
     168:	38 0c       	add	r3, r8
     16a:	3d 42       	sbci	r19, 0x2D	; 45
     16c:	cf 92       	push	r12
     16e:	69 c9       	rjmp	.-3374   	; 0xfffff442 <__eeprom_end+0xff7ef442>
     170:	92 69       	ori	r25, 0x92	; 146
     172:	c9 02       	muls	r28, r25
     174:	39 0c       	add	r3, r9
     176:	3d 42       	sbci	r19, 0x2D	; 45
     178:	cf 92       	push	r12
     17a:	49 8a       	std	Y+17, r4	; 0x11
     17c:	12 66       	ori	r17, 0x62	; 98
     17e:	91 04       	cpc	r9, r1
     180:	3a 0a       	sbc	r3, r26
     182:	bb 3e       	cpi	r27, 0xEB	; 235
     184:	4f b2       	in	r4, 0x1f	; 31
     186:	a4 c9       	rjmp	.-3256   	; 0xfffff4d0 <__eeprom_end+0xff7ef4d0>
     188:	92 00       	.word	0x0092	; ????
     18a:	3b 09       	sbc	r19, r11
     18c:	bb 3e       	cpi	r27, 0xEB	; 235
     18e:	4f b2       	in	r4, 0x1f	; 31
     190:	a4 4a       	sbci	r26, 0xA4	; 164
     192:	09 3c       	cpi	r16, 0xC9	; 201
     194:	08 bc       	out	0x28, r0	; 40
     196:	42 5f       	subi	r20, 0xF2	; 242
     198:	d4 d8       	rcall	.-3672   	; 0xfffff342 <__eeprom_end+0xff7ef342>
     19a:	00 3d       	cpi	r16, 0xD0	; 208
     19c:	08 1d       	adc	r16, r8
     19e:	4a c7       	rjmp	.+3732   	; 0x1034 <timeInit+0x10>
     1a0:	a0 0e       	add	r10, r16
     1a2:	02 3e       	cpi	r16, 0xE2	; 226
     1a4:	08 bc       	out	0x28, r0	; 40
     1a6:	42 47       	sbci	r20, 0x72	; 114
     1a8:	d8 d4       	rcall	.+2480   	; 0xb5a <__stack+0x25b>
     1aa:	06 3f       	cpi	r16, 0xF6	; 246
     1ac:	0a 3d       	cpi	r16, 0xDA	; 218
     1ae:	42 cf       	rjmp	.-380    	; 0x34 <__FUSE_REGION_LENGTH__+0x31>
     1b0:	92 35       	cpi	r25, 0x52	; 82
     1b2:	e6 50       	subi	r30, 0x06	; 6
     1b4:	04 40       	sbci	r16, 0x04	; 4
     1b6:	0c 3d       	cpi	r16, 0xDC	; 220
     1b8:	42 cf       	rjmp	.-380    	; 0x3e <__SP_H__>
     1ba:	92 49       	sbci	r25, 0x92	; 146
     1bc:	4b 62       	ori	r20, 0x2B	; 43
     1be:	49 17       	cp	r20, r25
     1c0:	00 41       	sbci	r16, 0x10	; 16
     1c2:	0c 3d       	cpi	r16, 0xDC	; 220
     1c4:	42 57       	subi	r20, 0x72	; 114
     1c6:	96 d4       	rcall	.+2348   	; 0xaf4 <__stack+0x1f5>
     1c8:	b4 61       	ori	r27, 0x14	; 20
     1ca:	c8 b4       	in	r12, 0x28	; 40
     1cc:	00 42       	sbci	r16, 0x20	; 32
     1ce:	0d 3d       	cpi	r16, 0xDD	; 221
     1d0:	42 c7       	rjmp	.+3716   	; 0x1056 <__vector_15+0xc>
     1d2:	10 55       	subi	r17, 0x50	; 80
     1d4:	a2 64       	ori	r26, 0x42	; 66
     1d6:	aa 44       	sbci	r26, 0x4A	; 74
     1d8:	83 02       	muls	r24, r19
     1da:	43 0a       	sbc	r4, r19
     1dc:	3d 42       	sbci	r19, 0x2D	; 45
     1de:	cf 92       	push	r12
     1e0:	89 6d       	ori	r24, 0xD9	; 217
     1e2:	c9 02       	muls	r28, r25
     1e4:	44 0f       	add	r20, r20
     1e6:	3d 42       	sbci	r19, 0x2D	; 45
     1e8:	c7 10       	cpse	r12, r7
     1ea:	55 a2       	std	Z+37, r5	; 0x25
     1ec:	24 4a       	sbci	r18, 0xA4	; 164
     1ee:	a2 24       	eor	r10, r2
     1f0:	1a 14       	cp	r1, r10
     1f2:	00 45       	sbci	r16, 0x50	; 80
     1f4:	0b 3d       	cpi	r16, 0xDB	; 219
     1f6:	42 c7       	rjmp	.+3716   	; 0x107c <__vector_15+0x32>
     1f8:	31 1c       	adc	r3, r1
     1fa:	92 30       	cpi	r25, 0x02	; 2
     1fc:	1c 04       	cpc	r1, r12
     1fe:	46 0a       	sbc	r4, r22
     200:	3d 42       	sbci	r19, 0x2D	; 45
     202:	c7 31       	cpi	r28, 0x17	; 23
     204:	1c 92       	st	X, r1
     206:	b0 08       	sbc	r11, r0
     208:	47 0b       	sbc	r20, r23
     20a:	3d 42       	sbci	r19, 0x2D	; 45
     20c:	cf 92       	push	r12
     20e:	89 a5       	ldd	r24, Y+41	; 0x29
     210:	2d 59       	subi	r18, 0x9D	; 157
     212:	00 48       	sbci	r16, 0x80	; 128
     214:	0a 3d       	cpi	r16, 0xDA	; 218
     216:	42 47       	sbci	r20, 0x72	; 114
     218:	66 1b       	sub	r22, r22
     21a:	86 cc       	rjmp	.-1780   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     21c:	16 49       	sbci	r17, 0x96	; 150
     21e:	08 bb       	out	0x18, r16	; 24
     220:	42 c7       	rjmp	.+3716   	; 0x10a6 <__vector_15+0x5c>
     222:	12 75       	andi	r17, 0x52	; 82
     224:	19 4a       	sbci	r17, 0xA9	; 169
     226:	0a 3d       	cpi	r16, 0xDA	; 218
     228:	42 d7       	rcall	.+3716   	; 0x10ae <__vector_15+0x64>
     22a:	16 b6       	in	r1, 0x36	; 54
     22c:	44 91       	lpm	r20, Z
     22e:	04 4b       	sbci	r16, 0xB4	; 180
     230:	0d 3d       	cpi	r16, 0xDD	; 221
     232:	42 47       	sbci	r20, 0x72	; 114
     234:	26 25       	eor	r18, r6
     236:	25 2d       	mov	r18, r5
     238:	89 2a       	or	r8, r25
     23a:	59 00       	.word	0x0059	; ????
     23c:	4c 08       	sbc	r4, r12
     23e:	3d 42       	sbci	r19, 0x2D	; 45
     240:	47 d8       	rcall	.-3954   	; 0xfffff2d0 <__eeprom_end+0xff7ef2d0>
     242:	e3 20       	and	r14, r3
     244:	4d 0b       	sbc	r20, r29
     246:	3d 42       	sbci	r19, 0x2D	; 45
     248:	47 a6       	std	Z+47, r4	; 0x2f
     24a:	2d 4b       	sbci	r18, 0xBD	; 189
     24c:	a2 d9       	rcall	.-3260   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     24e:	02 4e       	sbci	r16, 0xE2	; 226
     250:	0c 3d       	cpi	r16, 0xDC	; 220
     252:	42 47       	sbci	r20, 0x72	; 114
     254:	a6 4d       	sbci	r26, 0xD6	; 214
     256:	4a 22       	and	r4, r26
     258:	6d 5a       	subi	r22, 0xAD	; 173
     25a:	00 4f       	sbci	r16, 0xF0	; 240
     25c:	0a 3d       	cpi	r16, 0xDA	; 218
     25e:	42 cf       	rjmp	.-380    	; 0xe4 <__trampolines_end+0x7c>
     260:	92 79       	andi	r25, 0x92	; 146
     262:	4b 16       	cp	r4, r27
     264:	00 50       	subi	r16, 0x00	; 0
     266:	0c 3d       	cpi	r16, 0xDC	; 220
     268:	42 c7       	rjmp	.+3716   	; 0x10ee <__vector_15+0xa4>
     26a:	90 64       	ori	r25, 0x40	; 64
     26c:	da a0       	ldd	r13, Y+34	; 0x22
     26e:	84 45       	sbci	r24, 0x54	; 84
     270:	00 51       	subi	r16, 0x10	; 16
     272:	0a 45       	sbci	r16, 0x5A	; 90
     274:	3e cf       	rjmp	.-388    	; 0xf2 <__trampolines_end+0x8a>
     276:	92 79       	andi	r25, 0x92	; 146
     278:	a9 ac       	ldd	r10, Y+57	; 0x39
     27a:	01 52       	subi	r16, 0x21	; 33
     27c:	0d 3d       	cpi	r16, 0xDD	; 221
     27e:	42 c7       	rjmp	.+3716   	; 0x1104 <__vector_15+0xba>
     280:	90 64       	ori	r25, 0x40	; 64
     282:	da a0       	ldd	r13, Y+34	; 0x22
     284:	94 2a       	or	r9, r20
     286:	59 00       	.word	0x0059	; ????
     288:	53 0b       	sbc	r21, r19
     28a:	3d 42       	sbci	r19, 0x2D	; 45
     28c:	cf 92       	push	r12
     28e:	a9 ab       	std	Y+49, r26	; 0x31
     290:	96 2c       	mov	r9, r6
     292:	00 54       	subi	r16, 0x40	; 64
     294:	09 3d       	cpi	r16, 0xD9	; 217
     296:	42 c7       	rjmp	.+3716   	; 0x111c <__vector_15+0xd2>
     298:	20 85       	ldd	r18, Z+8	; 0x08
     29a:	3d 01       	movw	r6, r26
     29c:	55 09       	sbc	r21, r5
     29e:	3d 42       	sbci	r19, 0x2D	; 45
     2a0:	47 e6       	ldi	r20, 0x67	; 103
     2a2:	5b b2       	in	r5, 0x1b	; 27
     2a4:	00 56       	subi	r16, 0x60	; 96
     2a6:	0d 3d       	cpi	r16, 0xDD	; 221
     2a8:	42 47       	sbci	r20, 0x72	; 114
     2aa:	66 4b       	sbci	r22, 0xB6	; 182
     2ac:	4a 49       	sbci	r20, 0x9A	; 154
     2ae:	94 64       	ori	r25, 0x44	; 68
     2b0:	11 00       	.word	0x0011	; ????
     2b2:	57 0a       	sbc	r5, r23
     2b4:	3d 42       	sbci	r19, 0x2D	; 45
     2b6:	47 e6       	ldi	r20, 0x67	; 103
     2b8:	92 28       	or	r9, r2
     2ba:	c9 2d       	mov	r28, r9
     2bc:	58 0b       	sbc	r21, r24
     2be:	3d 42       	sbci	r19, 0x2D	; 45
     2c0:	47 a6       	std	Z+47, r4	; 0x2f
     2c2:	25 b5       	in	r18, 0x25	; 37
     2c4:	4a 4d       	sbci	r20, 0xDA	; 218
     2c6:	0b 59       	subi	r16, 0x9B	; 155
     2c8:	0a 3d       	cpi	r16, 0xDA	; 218
     2ca:	42 47       	sbci	r20, 0x72	; 114
     2cc:	a6 25       	eor	r26, r6
     2ce:	b5 b0       	in	r11, 0x05	; 5
     2d0:	09 5a       	subi	r16, 0xA9	; 169
     2d2:	0a 3d       	cpi	r16, 0xDA	; 218
     2d4:	42 c7       	rjmp	.+3716   	; 0x115a <getTimeToChar+0x3c>
     2d6:	20 66       	ori	r18, 0x60	; 96
     2d8:	1d 07       	cpc	r17, r29
     2da:	01 5b       	subi	r16, 0xB1	; 177
     2dc:	08 bb       	out	0x18, r16	; 24
     2de:	42 c7       	rjmp	.+3716   	; 0x1164 <getTimeToChar+0x46>
     2e0:	10 75       	andi	r17, 0x50	; 80
     2e2:	1a 5c       	subi	r17, 0xCA	; 202
     2e4:	08 3d       	cpi	r16, 0xD8	; 216
     2e6:	42 47       	sbci	r20, 0x72	; 114
     2e8:	98 76       	andi	r25, 0x68	; 104
     2ea:	0c 5d       	subi	r16, 0xDC	; 220
     2ec:	08 bb       	out	0x18, r16	; 24
     2ee:	42 c7       	rjmp	.+3716   	; 0x1174 <getTimeToChar+0x56>
     2f0:	d4 69       	ori	r29, 0x94	; 148
     2f2:	08 5e       	subi	r16, 0xE8	; 232
     2f4:	08 1d       	adc	r16, r8
     2f6:	52 57       	subi	r21, 0x72	; 114
     2f8:	96 d4       	rcall	.+2348   	; 0xc26 <__stack+0x327>
     2fa:	02 5f       	subi	r16, 0xF2	; 242
     2fc:	06 0d       	add	r16, r6
     2fe:	3e c7       	rjmp	.+3708   	; 0x117c <getTimeToChar+0x5e>
     300:	20 60       	ori	r18, 0x00	; 0
     302:	06 12       	cpse	r0, r22
     304:	5b 47       	sbci	r21, 0x7B	; 123
     306:	14 61       	ori	r17, 0x14	; 20
     308:	0a 2d       	mov	r16, r10
     30a:	42 cf       	rjmp	.-380    	; 0x190 <__trampolines_end+0x128>
     30c:	9a 0c       	add	r9, r10
     30e:	5a 32       	cpi	r21, 0x2A	; 42
     310:	04 62       	ori	r16, 0x24	; 36
     312:	0b 3d       	cpi	r16, 0xDB	; 219
     314:	42 47       	sbci	r20, 0x72	; 114
     316:	58 31       	cpi	r21, 0x18	; 24
     318:	69 93       	st	Y+, r22
     31a:	a2 00       	.word	0x00a2	; ????
     31c:	63 0a       	sbc	r6, r19
     31e:	2d 42       	sbci	r18, 0x2D	; 45
     320:	cf 92       	push	r12
     322:	89 59       	subi	r24, 0x99	; 153
     324:	b2 00       	.word	0x00b2	; ????
     326:	64 0a       	sbc	r6, r20
     328:	3d 42       	sbci	r19, 0x2D	; 45
     32a:	67 c5       	rjmp	.+2766   	; 0xdfa <__stack+0x4fb>
     32c:	b4 49       	sbci	r27, 0x94	; 148
     32e:	8a 12       	cpse	r8, r26
     330:	65 0a       	sbc	r6, r21
     332:	2d 42       	sbci	r18, 0x2D	; 45
     334:	cf 92       	push	r12
     336:	0d 43       	sbci	r16, 0x3D	; 61
     338:	ba 00       	.word	0x00ba	; ????
     33a:	66 0b       	sbc	r22, r22
     33c:	3d 42       	sbci	r19, 0x2D	; 45
     33e:	97 54       	subi	r25, 0x47	; 71
     340:	c9 86       	std	Y+9, r12	; 0x09
     342:	28 ac       	ldd	r2, Y+56	; 0x38
     344:	01 67       	ori	r16, 0x71	; 113
     346:	0c 3d       	cpi	r16, 0xDC	; 220
     348:	3a cf       	rjmp	.-396    	; 0x1be <__trampolines_end+0x156>
     34a:	a0 69       	ori	r26, 0x90	; 144
     34c:	c9 10       	cpse	r12, r9
     34e:	6a c9       	rjmp	.-3372   	; 0xfffff624 <__eeprom_end+0xff7ef624>
     350:	02 68       	ori	r16, 0x82	; 130
     352:	0a 3d       	cpi	r16, 0xDA	; 218
     354:	42 47       	sbci	r20, 0x72	; 114
     356:	58 31       	cpi	r21, 0x18	; 24
     358:	69 b6       	in	r6, 0x39	; 57
     35a:	00 69       	ori	r16, 0x90	; 144
     35c:	08 bb       	out	0x18, r16	; 24
     35e:	42 4f       	sbci	r20, 0xF2	; 242
     360:	28 b5       	in	r18, 0x28	; 40
     362:	0c 6a       	ori	r16, 0xAC	; 172
     364:	0b cc       	rjmp	.-2026   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     366:	3a 5f       	subi	r19, 0xFA	; 250
     368:	ac d5       	rcall	.+2904   	; 0xec2 <__stack+0x5c3>
     36a:	24 29       	or	r18, r4
     36c:	51 00       	.word	0x0051	; ????
     36e:	6b 0b       	sbc	r22, r27
     370:	3d 42       	sbci	r19, 0x2D	; 45
     372:	47 58       	subi	r20, 0x87	; 135
     374:	93 92       	.word	0x9293	; ????
     376:	a9 92       	st	Y+, r10
     378:	05 6c       	ori	r16, 0xC5	; 197
     37a:	08 bb       	out	0x18, r16	; 24
     37c:	42 87       	std	Z+10, r20	; 0x0a
     37e:	d4 cb       	rjmp	.-2136   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     380:	00 6d       	ori	r16, 0xD0	; 208
     382:	0b 2d       	mov	r16, r11
     384:	42 87       	std	Z+10, r20	; 0x0a
     386:	d2 a2       	std	Z+34, r13	; 0x22
     388:	24 4a       	sbci	r18, 0xA4	; 164
     38a:	a2 05       	cpc	r26, r2
     38c:	6e 09       	sbc	r22, r14
     38e:	2d 42       	sbci	r18, 0x2D	; 45
     390:	47 62       	ori	r20, 0x27	; 39
     392:	d2 6c       	ori	r29, 0xC2	; 194
     394:	01 6f       	ori	r16, 0xF1	; 241
     396:	09 2d       	mov	r16, r9
     398:	42 cf       	rjmp	.-380    	; 0x21e <__trampolines_end+0x1b6>
     39a:	92 d9       	rcall	.-3292   	; 0xfffff6c0 <__eeprom_end+0xff7ef6c0>
     39c:	92 05       	cpc	r25, r2
     39e:	70 0c       	add	r7, r0
     3a0:	3d 3a       	cpi	r19, 0xAD	; 173
     3a2:	47 62       	ori	r20, 0x27	; 39
     3a4:	d2 26       	eor	r13, r18
     3a6:	45 09       	sbc	r20, r5
     3a8:	43 00       	.word	0x0043	; ????
     3aa:	71 0a       	sbc	r7, r17
     3ac:	3d 3a       	cpi	r19, 0xAD	; 173
     3ae:	8f 69       	ori	r24, 0x9F	; 159
     3b0:	93 14       	cp	r9, r3
     3b2:	25 2c       	mov	r2, r5
     3b4:	72 09       	sbc	r23, r2
     3b6:	2d 42       	sbci	r18, 0x2D	; 45
     3b8:	47 62       	ori	r20, 0x27	; 39
     3ba:	12 8b       	std	Z+18, r17	; 0x12
     3bc:	00 73       	andi	r16, 0x30	; 48
     3be:	09 2d       	mov	r16, r9
     3c0:	42 cf       	rjmp	.-380    	; 0x246 <__trampolines_end+0x1de>
     3c2:	92 1e       	adc	r9, r18
     3c4:	14 00       	.word	0x0014	; ????
     3c6:	74 0c       	add	r7, r4
     3c8:	3d 42       	sbci	r19, 0x2D	; 45
     3ca:	4f 98       	cbi	0x09, 7	; 9
     3cc:	0d 51       	subi	r16, 0x1D	; 29
     3ce:	58 8a       	std	Y+16, r5	; 0x10
     3d0:	14 00       	.word	0x0014	; ????
     3d2:	75 09       	sbc	r23, r5
     3d4:	2d 42       	sbci	r18, 0x2D	; 45
     3d6:	47 e6       	ldi	r20, 0x67	; 103
     3d8:	a4 28       	or	r10, r4
     3da:	01 76       	andi	r16, 0x61	; 97
     3dc:	0b 2d       	mov	r16, r11
     3de:	42 47       	sbci	r20, 0x72	; 114
     3e0:	a6 25       	eor	r26, r6
     3e2:	a5 24       	eor	r10, r5
     3e4:	8b 00       	.word	0x008b	; ????
     3e6:	77 0a       	sbc	r7, r23
     3e8:	2d 42       	sbci	r18, 0x2D	; 45
     3ea:	47 66       	ori	r20, 0x67	; 103
     3ec:	49 94       	.word	0x9449	; ????
     3ee:	2e 00       	.word	0x002e	; ????
     3f0:	78 0a       	sbc	r7, r24
     3f2:	2d 42       	sbci	r18, 0x2D	; 45
     3f4:	47 96       	adiw	r24, 0x17	; 23
     3f6:	d4 2a       	or	r13, r20
     3f8:	b5 00       	.word	0x00b5	; ????
     3fa:	79 0c       	add	r7, r9
     3fc:	3d 3a       	cpi	r19, 0xAD	; 173
     3fe:	47 66       	ori	r20, 0x67	; 103
     400:	52 94       	swap	r5
     402:	50 4b       	sbci	r21, 0xB0	; 176
     404:	16 00       	.word	0x0016	; ????
     406:	7a 09       	sbc	r23, r10
     408:	2d 42       	sbci	r18, 0x2D	; 45
     40a:	c7 a0       	ldd	r12, Z+39	; 0x27
     40c:	b5 0d       	add	r27, r5
     40e:	02 7b       	andi	r16, 0xB2	; 178
     410:	0a bc       	out	0x2a, r0	; 42
     412:	42 97       	sbiw	r24, 0x12	; 18
     414:	12 26       	eor	r1, r18
     416:	62 14       	cp	r6, r2
     418:	0a 7c       	andi	r16, 0xCA	; 202
     41a:	06 39       	cpi	r16, 0x96	; 150
     41c:	43 c7       	rjmp	.+3718   	; 0x12a4 <choiceAdder+0x7a>
     41e:	21 7d       	andi	r18, 0xD1	; 209
     420:	0b bc       	out	0x2b, r0	; 43
     422:	42 87       	std	Z+10, r20	; 0x0a
     424:	18 85       	ldd	r17, Y+8	; 0x08
     426:	4a 98       	cbi	0x09, 2	; 9
     428:	48 00       	.word	0x0048	; ????
     42a:	7e 09       	sbc	r23, r14
     42c:	1d 52       	subi	r17, 0x2D	; 45
     42e:	4f a4       	ldd	r4, Y+47	; 0x2f
     430:	24 52       	subi	r18, 0x24	; 36
     432:	02 a0       	ldd	r0, Z+34	; 0x22
     434:	05 00       	.word	0x0005	; ????
     436:	62 07       	cpc	r22, r18
     438:	a1 07       	cpc	r26, r17
     43a:	39 43       	sbci	r19, 0x39	; 57
     43c:	47 32       	cpi	r20, 0x27	; 39
     43e:	08 a2       	std	Y+32, r0	; 0x20
     440:	0e 3d       	cpi	r16, 0xDE	; 222
     442:	3e 57       	subi	r19, 0x7E	; 126
     444:	36 28       	or	r3, r6
     446:	51 12       	cpse	r5, r17
     448:	25 d9       	rcall	.-3510   	; 0xfffff694 <__eeprom_end+0xff7ef694>
     44a:	10 45       	sbci	r17, 0x50	; 80
     44c:	00 a3       	std	Z+32, r16	; 0x20
     44e:	0c 3d       	cpi	r16, 0xDC	; 220
     450:	42 97       	sbiw	r24, 0x12	; 18
     452:	54 c9       	rjmp	.-3416   	; 0xfffff6fc <__eeprom_end+0xff7ef6fc>
     454:	b6 30       	cpi	r27, 0x06	; 6
     456:	52 14       	cp	r5, r2
     458:	00 a4       	ldd	r0, Z+40	; 0x28
     45a:	0b 2d       	mov	r16, r11
     45c:	42 47       	sbci	r20, 0x72	; 114
     45e:	96 4c       	sbci	r25, 0xC6	; 198
     460:	49 b4       	in	r4, 0x29	; 41
     462:	64 01       	movw	r12, r8
     464:	a5 0d       	add	r26, r5
     466:	45 3e       	cpi	r20, 0xE5	; 229
     468:	47 a6       	std	Z+47, r4	; 0x2f
     46a:	25 b5       	in	r18, 0x25	; 37
     46c:	68 90       	.word	0x9068	; ????
     46e:	c2 12       	cpse	r12, r18
     470:	00 a6       	std	Z+40, r0	; 0x28
     472:	06 39       	cpi	r16, 0x96	; 150
     474:	43 c7       	rjmp	.+3718   	; 0x12fc <choiceAdder+0xd2>
     476:	32 a7       	std	Z+42, r19	; 0x2a
     478:	0b 45       	sbci	r16, 0x5B	; 91
     47a:	3e cf       	rjmp	.-388    	; 0x2f8 <__trampolines_end+0x290>
     47c:	12 4e       	sbci	r17, 0xE2	; 226
     47e:	9d c6       	rjmp	.+3386   	; 0x11ba <getTimeToChar+0x9c>
     480:	64 01       	movw	r12, r8
     482:	a8 06       	cpc	r10, r24
     484:	8b 5e       	subi	r24, 0xEB	; 235
     486:	47 12       	cpse	r4, r23
     488:	a9 0d       	add	r26, r9
     48a:	3d 42       	sbci	r19, 0x2D	; 45
     48c:	cf 92       	push	r12
     48e:	29 c9       	rjmp	.-3502   	; 0xfffff6e2 <__eeprom_end+0xff7ef6e2>
     490:	a4 24       	eor	r10, r4
     492:	5a b2       	in	r5, 0x1a	; 26
     494:	00 aa       	std	Z+48, r0	; 0x30
     496:	0a b4       	in	r0, 0x2a	; 42
     498:	46 cf       	rjmp	.-372    	; 0x326 <__trampolines_end+0x2be>
     49a:	10 29       	or	r17, r0
     49c:	4a 71       	andi	r20, 0x1A	; 26
     49e:	08 ab       	std	Y+48, r16	; 0x30
     4a0:	0c 2e       	mov	r0, r28
     4a2:	42 57       	subi	r20, 0x72	; 114
     4a4:	25 4a       	sbci	r18, 0xA5	; 165
     4a6:	a2 2c       	mov	r10, r2
     4a8:	ca a2       	std	Y+34, r12	; 0x22
     4aa:	00 ac       	ldd	r0, Z+56	; 0x38
     4ac:	07 94       	ror	r0
     4ae:	4a c7       	rjmp	.+3732   	; 0x1344 <pageHistory+0x3c>
     4b0:	90 05       	cpc	r25, r0
     4b2:	ad 06       	cpc	r10, r29
     4b4:	8c 4e       	sbci	r24, 0xEC	; 236
     4b6:	c7 10       	cpse	r12, r7
     4b8:	ae 0c       	add	r10, r14
     4ba:	3d 42       	sbci	r19, 0x2D	; 45
     4bc:	cf 92       	push	r12
     4be:	0d c9       	rjmp	.-3558   	; 0xfffff6da <__eeprom_end+0xff7ef6da>
     4c0:	34 69       	ori	r19, 0x94	; 148
     4c2:	c9 02       	muls	r28, r25
     4c4:	af 06       	cpc	r10, r31
     4c6:	0d 5e       	subi	r16, 0xED	; 237
     4c8:	c7 20       	and	r12, r7
     4ca:	b0 07       	cpc	r27, r16
     4cc:	9b 52       	subi	r25, 0x2B	; 43
     4ce:	4f 17       	cp	r20, r31
     4d0:	00 b1       	in	r16, 0x00	; 0
     4d2:	0b 35       	cpi	r16, 0x5B	; 91
     4d4:	42 57       	subi	r20, 0x72	; 114
     4d6:	18 0d       	add	r17, r8
     4d8:	52 18       	sub	r5, r2
     4da:	0d 02       	muls	r16, r29
     4dc:	b2 09       	sbc	r27, r2
     4de:	ac 4e       	sbci	r26, 0xEC	; 236
     4e0:	8f 12       	cpse	r8, r31
     4e2:	35 0d       	add	r19, r5
     4e4:	01 b3       	in	r16, 0x11	; 17
     4e6:	09 ac       	ldd	r0, Y+57	; 0x39
     4e8:	4e c7       	rjmp	.+3740   	; 0x1386 <pageSel+0x18>
     4ea:	98 88       	ldd	r9, Y+16	; 0x10
     4ec:	43 02       	muls	r20, r19
     4ee:	b4 06       	cpc	r11, r20
     4f0:	12 5b       	subi	r17, 0xB2	; 178
     4f2:	8f 02       	muls	r24, r31
     4f4:	b5 0a       	sbc	r11, r21
     4f6:	35 3e       	cpi	r19, 0xE5	; 229
     4f8:	47 66       	ori	r20, 0x67	; 103
     4fa:	9b 14       	cp	r9, r11
     4fc:	25 04       	cpc	r2, r5
     4fe:	b6 0f       	add	r27, r22
     500:	3d 42       	sbci	r19, 0x2D	; 45
     502:	cf 30       	cpi	r28, 0x0F	; 15
     504:	24 43       	sbci	r18, 0x34	; 52
     506:	92 28       	or	r9, r2
     508:	51 12       	cpse	r5, r17
     50a:	25 51       	subi	r18, 0x15	; 21
     50c:	12 b7       	in	r17, 0x32	; 50
     50e:	06 09       	sbc	r16, r6
     510:	4f 47       	sbci	r20, 0x7F	; 127
     512:	00 b8       	out	0x00, r0	; 0
     514:	06 12       	cpse	r0, r22
     516:	3b 8f       	std	Y+27, r19	; 0x1b
     518:	02 b9       	out	0x02, r16	; 2
     51a:	08 ab       	std	Y+48, r16	; 0x30
     51c:	4e 4f       	sbci	r20, 0xFE	; 254
     51e:	22 55       	subi	r18, 0x52	; 82
     520:	06 ba       	out	0x16, r0	; 22
     522:	0a b4       	in	r0, 0x2a	; 42
     524:	46 8f       	std	Z+30, r20	; 0x1e
     526:	12 49       	sbci	r17, 0x92	; 146
     528:	89 3a       	cpi	r24, 0xA9	; 169
     52a:	04 bb       	out	0x14, r16	; 20
     52c:	0d 2e       	mov	r0, r29
     52e:	42 47       	sbci	r20, 0x72	; 114
     530:	94 45       	sbci	r25, 0x54	; 84
     532:	59 94       	.word	0x9459	; ????
     534:	44 49       	sbci	r20, 0x94	; 148
     536:	14 01       	movw	r2, r8
     538:	bc 0d       	add	r27, r12
     53a:	4e 3e       	cpi	r20, 0xEE	; 238
     53c:	4f a8       	ldd	r4, Y+55	; 0x37
     53e:	16 a7       	std	Z+46, r17	; 0x2e
     540:	50 4b       	sbci	r21, 0xB0	; 176
     542:	a2 21       	and	r26, r2
     544:	0d bd       	out	0x2d, r16	; 45
     546:	0c 4e       	sbci	r16, 0xEC	; 236
     548:	3e 4f       	sbci	r19, 0xFE	; 254
     54a:	a8 16       	cp	r10, r24
     54c:	97 30       	cpi	r25, 0x07	; 7
     54e:	49 c3       	rjmp	.+1682   	; 0xbe2 <__stack+0x2e3>
     550:	70 be       	out	0x30, r7	; 48
     552:	0e 4d       	sbci	r16, 0xDE	; 222
     554:	3e 87       	std	Y+14, r19	; 0x0e
     556:	9a a5       	ldd	r25, Y+42	; 0x2a
     558:	91 94       	neg	r9
     55a:	49 49       	sbci	r20, 0x99	; 153
     55c:	32 84       	ldd	r3, Z+10	; 0x0a
     55e:	01 bf       	out	0x31, r16	; 49
     560:	0a 3d       	cpi	r16, 0xDA	; 218
     562:	42 57       	subi	r20, 0x72	; 114
     564:	0e 85       	ldd	r16, Y+14	; 0x0e
     566:	59 cb       	rjmp	.-2382   	; 0xfffffc1a <__eeprom_end+0xff7efc1a>
     568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56a:	0c 45       	sbci	r16, 0x5C	; 92
     56c:	42 4f       	sbci	r20, 0xF2	; 242
     56e:	9a 2d       	mov	r25, r10
     570:	99 36       	cpi	r25, 0x69	; 105
     572:	0c 99       	sbic	0x01, 4	; 1
     574:	16 c1       	rjmp	.+556    	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     576:	0c 45       	sbci	r16, 0x5C	; 92
     578:	42 5f       	subi	r20, 0xF2	; 242
     57a:	6d c9       	rjmp	.-3366   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     57c:	b4 61       	ori	r27, 0x14	; 20
     57e:	c8 b4       	in	r12, 0x28	; 40
     580:	00 c2       	rjmp	.+1024   	; 0x982 <__stack+0x83>
     582:	0d 45       	sbci	r16, 0x5D	; 93
     584:	42 57       	subi	r20, 0x72	; 114
     586:	96 44       	sbci	r25, 0x46	; 70
     588:	4b a6       	std	Y+43, r4	; 0x2b
     58a:	0d 43       	sbci	r16, 0x3D	; 61
     58c:	a6 05       	cpc	r26, r6
     58e:	c3 0d       	add	r28, r3
     590:	45 42       	sbci	r20, 0x25	; 37
     592:	4f a4       	ldd	r4, Y+47	; 0x2f
     594:	48 4b       	sbci	r20, 0xB8	; 184
     596:	a6 0d       	add	r26, r6
     598:	43 a6       	std	Z+43, r4	; 0x2b
     59a:	05 c4       	rjmp	.+2058   	; 0xda6 <__stack+0x4a7>
     59c:	0c 45       	sbci	r16, 0x5C	; 92
     59e:	42 4f       	sbci	r20, 0xF2	; 242
     5a0:	1d 58       	subi	r17, 0x8D	; 141
     5a2:	32 6d       	ori	r19, 0xD2	; 210
     5a4:	18 32       	cpi	r17, 0x28	; 40
     5a6:	2d c5       	rjmp	.+2650   	; 0x1002 <u8g2_setup+0xac>
     5a8:	0d 45       	sbci	r16, 0x5D	; 93
     5aa:	42 57       	subi	r20, 0x72	; 114
     5ac:	96 44       	sbci	r25, 0x46	; 70
     5ae:	4b a6       	std	Y+43, r4	; 0x2b
     5b0:	0d 43       	sbci	r16, 0x3D	; 61
     5b2:	a6 05       	cpc	r26, r6
     5b4:	c6 0c       	add	r12, r6
     5b6:	3e 42       	sbci	r19, 0x2E	; 46
     5b8:	d7 90       	elpm	r13, Z+
     5ba:	94 9a       	sbi	0x12, 4	; 18
     5bc:	86 21       	and	r24, r6
     5be:	6a 1a       	sub	r6, r26
     5c0:	c7 0b       	sbc	r28, r23
     5c2:	4d 3a       	cpi	r20, 0xAD	; 173
     5c4:	cf 92       	push	r12
     5c6:	89 6d       	ori	r24, 0xD9	; 217
     5c8:	c9 56       	subi	r28, 0x69	; 105
     5ca:	03 c8       	rjmp	.-4090   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
     5cc:	0c 45       	sbci	r16, 0x5C	; 92
     5ce:	42 4f       	sbci	r20, 0xF2	; 242
     5d0:	36 8c       	ldd	r3, Z+30	; 0x1e
     5d2:	e1 90       	ld	r14, Z+
     5d4:	84 e1       	ldi	r24, 0x14	; 20
     5d6:	20 c9       	rjmp	.-3520   	; 0xfffff818 <__eeprom_end+0xff7ef818>
     5d8:	0c 45       	sbci	r16, 0x5C	; 92
     5da:	42 5f       	subi	r20, 0xF2	; 242
     5dc:	32 8c       	ldd	r3, Z+26	; 0x1a
     5de:	e1 90       	ld	r14, Z+
     5e0:	84 e1       	ldi	r24, 0x14	; 20
     5e2:	20 ca       	rjmp	.-3008   	; 0xfffffa24 <__eeprom_end+0xff7efa24>
     5e4:	0c 45       	sbci	r16, 0x5C	; 92
     5e6:	42 57       	subi	r20, 0x72	; 114
     5e8:	34 8c       	ldd	r3, Z+28	; 0x1c
     5ea:	e1 90       	ld	r14, Z+
     5ec:	84 e1       	ldi	r24, 0x14	; 20
     5ee:	20 cb       	rjmp	.-2496   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
     5f0:	0c 45       	sbci	r16, 0x5C	; 92
     5f2:	42 4f       	sbci	r20, 0xF2	; 242
     5f4:	65 18       	sub	r6, r5
     5f6:	c3 21       	and	r28, r3
     5f8:	09 c3       	rjmp	.+1554   	; 0xc0c <__stack+0x30d>
     5fa:	41 cc       	rjmp	.-1918   	; 0xfffffe7e <__eeprom_end+0xff7efe7e>
     5fc:	0a c3       	rjmp	.+1556   	; 0xc12 <__stack+0x313>
     5fe:	42 47       	sbci	r20, 0x72	; 114
     600:	96 2c       	mov	r9, r6
     602:	51 cb       	rjmp	.-2398   	; 0xfffffca6 <__eeprom_end+0xff7efca6>
     604:	00 cd       	rjmp	.-1536   	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
     606:	0a c3       	rjmp	.+1556   	; 0xc1c <__stack+0x31d>
     608:	42 57       	subi	r20, 0x72	; 114
     60a:	92 2c       	mov	r9, r2
     60c:	51 cb       	rjmp	.-2398   	; 0xfffffcb0 <__eeprom_end+0xff7efcb0>
     60e:	00 ce       	rjmp	.-1024   	; 0x210 <__trampolines_end+0x1a8>
     610:	0a c3       	rjmp	.+1556   	; 0xc26 <__stack+0x327>
     612:	42 4f       	sbci	r20, 0xF2	; 242
     614:	65 48       	sbci	r22, 0x85	; 133
     616:	a2 96       	adiw	r28, 0x22	; 34
     618:	01 cf       	rjmp	.-510    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     61a:	0a c3       	rjmp	.+1556   	; 0xc30 <__stack+0x331>
     61c:	42 47       	sbci	r20, 0x72	; 114
     61e:	92 2d       	mov	r25, r2
     620:	51 cb       	rjmp	.-2398   	; 0xfffffcc4 <__eeprom_end+0xff7efcc4>
     622:	00 d0       	rcall	.+0      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     624:	0e 3d       	cpi	r16, 0xDE	; 222
     626:	42 c7       	rjmp	.+3716   	; 0x14ac <updateButtons+0x1c>
     628:	10 55       	subi	r17, 0x50	; 80
     62a:	a2 21       	and	r26, r2
     62c:	29 25       	eor	r18, r9
     62e:	d1 a0       	ldd	r13, Z+33	; 0x21
     630:	00 d1       	rcall	.+512    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     632:	0c 45       	sbci	r16, 0x5C	; 92
     634:	42 57       	subi	r20, 0x72	; 114
     636:	d2 6d       	ori	r29, 0xD2	; 210
     638:	52 12       	cpse	r5, r18
     63a:	69 d3       	rcall	.+1746   	; 0xd0e <__stack+0x40f>
     63c:	02 d2       	rcall	.+1028   	; 0xa42 <__stack+0x143>
     63e:	0b 45       	sbci	r16, 0x5B	; 91
     640:	42 4f       	sbci	r20, 0xF2	; 242
     642:	9a 2d       	mov	r25, r10
     644:	99 5b       	subi	r25, 0xB9	; 185
     646:	b2 00       	.word	0x00b2	; ????
     648:	d3 0a       	sbc	r13, r19
     64a:	45 42       	sbci	r20, 0x25	; 37
     64c:	5f 6d       	ori	r21, 0xDF	; 223
     64e:	c9 dc       	rcall	.-1646   	; 0xffffffe2 <__eeprom_end+0xff7effe2>
     650:	92 05       	cpc	r25, r2
     652:	d4 0c       	add	r13, r4
     654:	45 42       	sbci	r20, 0x25	; 37
     656:	57 96       	adiw	r26, 0x17	; 23
     658:	44 4b       	sbci	r20, 0xB4	; 180
     65a:	e6 96       	adiw	r28, 0x36	; 54
     65c:	2c 00       	.word	0x002c	; ????
     65e:	d5 0b       	sbc	r29, r21
     660:	45 42       	sbci	r20, 0x25	; 37
     662:	57 d2       	rcall	.+1198   	; 0xb12 <__stack+0x213>
     664:	b4 64       	ori	r27, 0x44	; 68
     666:	6e c9       	rjmp	.-3364   	; 0xfffff944 <__eeprom_end+0xff7ef944>
     668:	02 d6       	rcall	.+3076   	; 0x126e <choiceAdder+0x44>
     66a:	0b 45       	sbci	r16, 0x5B	; 91
     66c:	42 4f       	sbci	r20, 0xF2	; 242
     66e:	1d 58       	subi	r17, 0x8D	; 141
     670:	32 b7       	in	r19, 0x32	; 50
     672:	64 01       	movw	r12, r8
     674:	d7 0a       	sbc	r13, r23
     676:	2d 42       	sbci	r18, 0x2D	; 45
     678:	47 96       	adiw	r24, 0x17	; 23
     67a:	d4 2a       	or	r13, r20
     67c:	b5 00       	.word	0x00b5	; ????
     67e:	d8 0c       	add	r13, r8
     680:	3d 42       	sbci	r19, 0x2D	; 45
     682:	cf 12       	cpse	r12, r31
     684:	5d 92       	st	X+, r5
     686:	69 4a       	sbci	r22, 0xA9	; 169
     688:	16 00       	.word	0x0016	; ????
     68a:	d9 0a       	sbc	r13, r25
     68c:	45 42       	sbci	r20, 0x25	; 37
     68e:	4f 1a       	sub	r4, r31
     690:	65 de       	rcall	.-822    	; 0x35c <__trampolines_end+0x2f4>
     692:	92 05       	cpc	r25, r2
     694:	da 0a       	sbc	r13, r26
     696:	45 42       	sbci	r20, 0x25	; 37
     698:	5f 29       	or	r21, r15
     69a:	f3 96       	adiw	r30, 0x33	; 51
     69c:	2c 00       	.word	0x002c	; ????
     69e:	db 0b       	sbc	r29, r27
     6a0:	45 42       	sbci	r20, 0x25	; 37
     6a2:	57 96       	adiw	r26, 0x17	; 23
     6a4:	c4 99       	sbic	0x18, 4	; 24
     6a6:	5b b2       	in	r5, 0x1b	; 27
     6a8:	00 dc       	rcall	.-2048   	; 0xfffffeaa <__eeprom_end+0xff7efeaa>
     6aa:	0a 45       	sbci	r16, 0x5A	; 90
     6ac:	42 4f       	sbci	r20, 0xF2	; 242
     6ae:	39 f3       	breq	.-50     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     6b0:	96 2c       	mov	r9, r6
     6b2:	00 dd       	rcall	.-1536   	; 0xb4 <__trampolines_end+0x4c>
     6b4:	0b 45       	sbci	r16, 0x5B	; 91
     6b6:	42 5f       	subi	r20, 0xF2	; 242
     6b8:	29 d3       	rcall	.+1618   	; 0xd0c <__stack+0x40d>
     6ba:	92 5a       	subi	r25, 0xA2	; 162
     6bc:	58 02       	muls	r21, r24
     6be:	de 0c       	add	r13, r14
     6c0:	3d 42       	sbci	r19, 0x2D	; 45
     6c2:	47 38       	cpi	r20, 0x87	; 135
     6c4:	24 d9       	rcall	.-3512   	; 0xfffff90e <__eeprom_end+0xff7ef90e>
     6c6:	a0 84       	ldd	r10, Z+8	; 0x08
     6c8:	45 00       	.word	0x0045	; ????
     6ca:	df 0d       	add	r29, r15
     6cc:	3d 42       	sbci	r19, 0x2D	; 45
     6ce:	cf 92       	push	r12
     6d0:	49 49       	sbci	r20, 0x99	; 153
     6d2:	a9 92       	st	Y+, r10
     6d4:	29 0a       	sbc	r2, r25
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	0c 45       	sbci	r16, 0x5C	; 92
     6da:	42 4f       	sbci	r20, 0xF2	; 242
     6dc:	9a 23       	and	r25, r26
     6de:	6b 32       	cpi	r22, 0x2B	; 43
     6e0:	68 c9       	rjmp	.-3376   	; 0xfffff9b2 <__eeprom_end+0xff7ef9b2>
     6e2:	10 e1       	ldi	r17, 0x10	; 16
     6e4:	0c 45       	sbci	r16, 0x5C	; 92
     6e6:	42 5f       	subi	r20, 0xF2	; 242
     6e8:	1d 59       	subi	r17, 0x9D	; 157
     6ea:	93 41       	sbci	r25, 0x13	; 19
     6ec:	4b 86       	std	Y+11, r4	; 0x0b
     6ee:	00 e2       	ldi	r16, 0x20	; 32
     6f0:	0d 45       	sbci	r16, 0x5D	; 93
     6f2:	42 57       	subi	r20, 0x72	; 114
     6f4:	96 e4       	ldi	r25, 0x46	; 70
     6f6:	c0 9a       	sbi	0x18, 0	; 24
     6f8:	0c 5a       	subi	r16, 0xAC	; 172
     6fa:	32 04       	cpc	r3, r2
     6fc:	e3 0d       	add	r30, r3
     6fe:	45 42       	sbci	r20, 0x25	; 37
     700:	57 d2       	rcall	.+1198   	; 0xbb0 <__stack+0x2b1>
     702:	0e ac       	ldd	r0, Y+62	; 0x3e
     704:	c9 a0       	ldd	r12, Y+33	; 0x21
     706:	25 43       	sbci	r18, 0x35	; 53
     708:	00 e4       	ldi	r16, 0x40	; 64
     70a:	0c 3d       	cpi	r16, 0xDC	; 220
     70c:	42 4f       	sbci	r20, 0xF2	; 242
     70e:	1d 58       	subi	r17, 0x8D	; 141
     710:	93 41       	sbci	r25, 0x13	; 19
     712:	4b 86       	std	Y+11, r4	; 0x0b
     714:	00 e5       	ldi	r16, 0x50	; 80
     716:	0d 45       	sbci	r16, 0x5D	; 93
     718:	42 57       	subi	r20, 0x72	; 114
     71a:	96 64       	ori	r25, 0x46	; 70
     71c:	d9 9a       	sbi	0x1b, 1	; 27
     71e:	0c 5a       	subi	r16, 0xAC	; 172
     720:	32 04       	cpc	r3, r2
     722:	e6 0c       	add	r14, r6
     724:	2e 42       	sbci	r18, 0x2E	; 46
     726:	cf 10       	cpse	r12, r15
     728:	26 c9       	rjmp	.-3508   	; 0xfffff976 <__eeprom_end+0xff7ef976>
     72a:	30 65       	ori	r19, 0x50	; 80
     72c:	83 00       	.word	0x0083	; ????
     72e:	e7 0b       	sbc	r30, r23
     730:	3d 3a       	cpi	r19, 0xAD	; 173
     732:	cf 92       	push	r12
     734:	89 59       	subi	r24, 0x99	; 153
     736:	b2 d5       	rcall	.+2916   	; 0x129c <choiceAdder+0x72>
     738:	00 e8       	ldi	r16, 0x80	; 128
     73a:	0c 45       	sbci	r16, 0x5C	; 92
     73c:	42 4f       	sbci	r20, 0xF2	; 242
     73e:	9a 23       	and	r25, r26
     740:	4b 36       	cpi	r20, 0x6B	; 107
     742:	0c e9       	ldi	r16, 0x9C	; 156
     744:	02 e9       	ldi	r16, 0x92	; 146
     746:	0c 45       	sbci	r16, 0x5C	; 92
     748:	42 5f       	subi	r20, 0xF2	; 242
     74a:	1d 59       	subi	r17, 0x9D	; 157
     74c:	b2 61       	ori	r27, 0x12	; 18
     74e:	48 17       	cp	r20, r24
     750:	00 ea       	ldi	r16, 0xA0	; 160
     752:	0d 45       	sbci	r16, 0x5D	; 93
     754:	42 57       	subi	r20, 0x72	; 114
     756:	96 e4       	ldi	r25, 0x46	; 70
     758:	c0 92 0d 43 	sts	0x430D, r12	; 0x80430d <__bss_end+0x3b7f>
     75c:	ba 00       	.word	0x00ba	; ????
     75e:	eb 0c       	add	r14, r11
     760:	3d 42       	sbci	r19, 0x2D	; 45
     762:	4f 1d       	adc	r20, r15
     764:	58 b2       	in	r5, 0x18	; 24
     766:	61 48       	sbci	r22, 0x81	; 129
     768:	17 00       	.word	0x0017	; ????
     76a:	ec 09       	sbc	r30, r12
     76c:	c3 42       	sbci	r28, 0x23	; 35
     76e:	47 16       	cp	r4, r23
     770:	4a 2d       	mov	r20, r10
     772:	03 ed       	ldi	r16, 0xD3	; 211
     774:	08 c3       	rjmp	.+1552   	; 0xd86 <__stack+0x487>
     776:	42 4f       	sbci	r20, 0xF2	; 242
     778:	55 6a       	ori	r21, 0xA5	; 165
     77a:	19 ee       	ldi	r17, 0xE9	; 233
     77c:	08 c3       	rjmp	.+1552   	; 0xd8e <__stack+0x48f>
     77e:	42 4f       	sbci	r20, 0xF2	; 242
     780:	9b d4       	rcall	.+2358   	; 0x10b8 <__vector_15+0x6e>
     782:	32 ef       	ldi	r19, 0xF2	; 242
     784:	09 bb       	out	0x19, r16	; 25
     786:	42 47       	sbci	r20, 0x72	; 114
     788:	92 49       	sbci	r25, 0x92	; 146
     78a:	2d 03       	fmul	r18, r21
     78c:	f0 0b       	sbc	r31, r16
     78e:	3d 42       	sbci	r19, 0x2D	; 45
     790:	87 2a       	or	r8, r23
     792:	2d 99       	sbic	0x05, 5	; 5
     794:	2d 59       	subi	r18, 0x9D	; 157
     796:	00 f1       	brcs	.+64     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     798:	0b 45       	sbci	r16, 0x5B	; 91
     79a:	42 57       	subi	r20, 0x72	; 114
     79c:	d2 9c       	mul	r13, r2
     79e:	98 34       	cpi	r25, 0x48	; 72
     7a0:	5b 00       	.word	0x005b	; ????
     7a2:	f2 0c       	add	r15, r2
     7a4:	45 42       	sbci	r20, 0x25	; 37
     7a6:	4f 9a       	sbi	0x09, 7	; 9
     7a8:	23 4b       	sbci	r18, 0xB3	; 179
     7aa:	66 4b       	sbci	r22, 0xB6	; 182
     7ac:	16 00       	.word	0x0016	; ????
     7ae:	f3 0b       	sbc	r31, r19
     7b0:	45 42       	sbci	r20, 0x25	; 37
     7b2:	5f 1d       	adc	r21, r15
     7b4:	59 32       	cpi	r21, 0x29	; 41
     7b6:	5b b2       	in	r5, 0x1b	; 27
     7b8:	00 f4       	brcc	.+0      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7ba:	0c 45       	sbci	r16, 0x5C	; 92
     7bc:	42 57       	subi	r20, 0x72	; 114
     7be:	96 e4       	ldi	r25, 0x46	; 70
     7c0:	c0 92 d9 92 	sts	0x92D9, r12	; 0x8092d9 <__bss_end+0x8b4b>
     7c4:	05 f5       	brhc	.+64     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7c6:	0c 45       	sbci	r16, 0x5C	; 92
     7c8:	42 57       	subi	r20, 0x72	; 114
     7ca:	d2 0e       	add	r13, r18
     7cc:	2c 99       	sbic	0x05, 4	; 5
     7ce:	2d 59       	subi	r18, 0x9D	; 157
     7d0:	00 f6       	brcc	.-128    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     7d2:	0b 3d       	cpi	r16, 0xDB	; 219
     7d4:	42 4f       	sbci	r20, 0xF2	; 242
     7d6:	1d 58       	subi	r17, 0x8D	; 141
     7d8:	32 5b       	subi	r19, 0xB2	; 178
     7da:	b2 00       	.word	0x00b2	; ????
     7dc:	f7 0a       	sbc	r15, r23
     7de:	2d 46       	sbci	r18, 0x6D	; 109
     7e0:	57 0e       	add	r5, r23
     7e2:	0c 3a       	cpi	r16, 0xAC	; 172
     7e4:	10 01       	movw	r2, r0
     7e6:	f8 0b       	sbc	r31, r24
     7e8:	2d 42       	sbci	r18, 0x2D	; 45
     7ea:	cf 20       	and	r12, r15
     7ec:	2d c9       	rjmp	.-3494   	; 0xfffffa48 <__eeprom_end+0xff7efa48>
     7ee:	34 28       	or	r3, r4
     7f0:	00 f9       	bld	r16, 0
     7f2:	0b 45       	sbci	r16, 0x5B	; 91
     7f4:	42 4f       	sbci	r20, 0xF2	; 242
     7f6:	9a 03       	fmulsu	r17, r18
     7f8:	99 93       	st	Y+, r25
     7fa:	a2 04       	cpc	r10, r2
     7fc:	fa 0a       	sbc	r15, r26
     7fe:	45 42       	sbci	r20, 0x25	; 37
     800:	5f 1d       	adc	r21, r15
     802:	c8 9c       	mul	r12, r8
     804:	14 25       	eor	r17, r4
     806:	fb 0b       	sbc	r31, r27
     808:	45 42       	sbci	r20, 0x25	; 37
     80a:	57 96       	adiw	r26, 0x17	; 23
     80c:	c4 99       	sbic	0x18, 4	; 24
     80e:	93 a2       	std	Z+35, r9	; 0x23
     810:	04 fc       	sbrc	r0, 4
     812:	0a 3d       	cpi	r16, 0xDA	; 218
     814:	42 4f       	sbci	r20, 0xF2	; 242
     816:	39 73       	andi	r19, 0x39	; 57
     818:	52 94       	swap	r5
     81a:	00 fd       	sbrc	r16, 0
     81c:	0d 4d       	sbci	r16, 0xDD	; 221
     81e:	3a 5f       	subi	r19, 0xFA	; 250
     820:	29 33       	cpi	r18, 0x39	; 57
     822:	29 4a       	sbci	r18, 0xA9	; 169
     824:	a8 25       	eor	r26, r8
     826:	0b 00       	.word	0x000b	; ????
     828:	fe 0c       	add	r15, r14
     82a:	45 3a       	cpi	r20, 0xA5	; 165
     82c:	47 38       	cpi	r20, 0x87	; 135
     82e:	24 99       	sbic	0x04, 4	; 4
     830:	6d 50       	subi	r22, 0x0D	; 13
     832:	c2 10       	cpse	r12, r2
     834:	ff 0d       	add	r31, r15
     836:	4d 3a       	cpi	r20, 0xAD	; 173
     838:	4f 39       	cpi	r20, 0x9F	; 159
     83a:	33 29       	or	r19, r3
     83c:	4a a8       	ldd	r4, Y+50	; 0x32
     83e:	25 0b       	sbc	r18, r21
     840:	00 00       	nop
     842:	00 00       	nop
     844:	04 ff       	sbrs	r16, 4
     846:	ff 00       	.word	0x00ff	; ????
	...

00000849 <u8g2_font_5x7_tf>:
     849:	bf 00 02 02 03 03 03 04 04 05 07 00 ff 06 ff 06     ................
     859:	00 01 12 02 2f 06 70 20 05 00 bd 01 21 06 b1 b1     ..../.p ....!...
     869:	19 29 22 07 5b b7 49 56 00 23 0a 2d b1 ab 86 aa     .)".[.IV.#.-....
     879:	86 aa 00 24 0a 2d b1 5b 35 d8 20 a5 05 25 09 34     ...$.-.[5. ..%.4
     889:	b1 c9 20 f6 06 01 26 09 2c b1 8b 29 56 31 05 27     .. ...&.,..)V1.'
     899:	05 99 b7 19 28 07 72 b1 53 cd 00 29 08 72 b1 89     ....(.r.S..).r..
     8a9:	a9 52 00 2a 07 6b b1 49 d5 6a 2b 0a 2d b1 cd 28     .R.*.k.I.j+.-..(
     8b9:	0e 99 51 04 2c 07 5b af 53 25 00 2d 06 0c b5 19     ..Q.,.[.S%.-....
     8c9:	01 2e 06 52 b1 19 01 2f 07 24 b3 07 b1 0d 30 08     ...R.../.$....0.
     8d9:	73 b1 ab 5c 15 00 31 07 73 b1 4b b2 35 32 0a 34     s..\..1.s.K.52.4
     8e9:	b1 53 31 83 58 8e 00 33 0b 34 b1 19 19 24 8d 64     .S1.X..3.4...$.d
     8f9:	52 00 34 0a 34 b1 8d aa 1a 31 83 04 35 0a 34 b1     R.4.4....1..5.4.
     909:	19 1a 6c 24 93 02 36 0a 34 b1 53 19 ac 28 93 02     ..l$..6.4.S..(..
     919:	37 0b 34 b1 19 19 c4 0c 62 06 11 38 0a 34 b1 53     7.4.....b..8.4.S
     929:	31 a9 28 93 02 39 0a 34 b1 53 51 a6 0d 92 02 3a     1.(..9.4.SQ....:
     939:	07 6a b1 19 71 04 3b 08 33 af b3 91 2a 01 3c 08     .j..q.;.3...*.<.
     949:	6b b1 4d 35 c8 20 3d 08 1c b3 19 19 8d 00 3e 09     k.M5. =.......>.
     959:	6b b1 c9 20 83 54 02 3f 09 73 b1 6b a6 0c 13 00     k.. .T.?.s.k....
     969:	40 09 34 b1 53 51 dd 48 01 41 09 34 b1 53 51 8e     @.4.SQ.H.A.4.SQ.
     979:	29 03 42 0a 34 b1 59 71 a4 28 47 02 43 0b 34 b1     ).B.4.Yq.(G.C.4.
     989:	53 51 83 0c 62 52 00 44 09 34 b1 59 d1 39 12 00     SQ..bR.D.4.Y.9..
     999:	45 0b 34 b1 19 1a ac 0c 32 18 01 46 0b 34 b1 19     E.4.....2..F.4..
     9a9:	1a ac 0c 32 c8 00 47 0a 34 b1 53 51 83 34 d3 00     ...2..G.4.SQ.4..
     9b9:	48 08 34 b1 89 72 4c 33 49 07 73 b1 59 b1 35 4a     H.4..rL3I.s.Y.5J
     9c9:	0b 34 b1 07 19 64 90 81 4c 0a 4b 0a 34 b1 89 2a     .4...d..L.K.4..*
     9d9:	49 99 ca 00 4c 0c 34 b1 c9 20 83 0c 32 c8 60 04     I...L.4.. ..2.`.
     9e9:	4d 09 34 b1 89 e3 88 66 00 4e 08 34 b1 89 6b a9     M.4....f.N.4..k.
     9f9:	33 4f 09 34 b1 53 d1 99 14 00 50 0a 34 b1 59 51     3O.4.S....P.4.YQ
     a09:	8e 94 41 06 51 0a 3c af 53 d1 5c 49 a3 00 52 09     ..A.Q.<.S.\I..R.
     a19:	34 b1 59 51 8e d4 0c 53 0a 34 b1 53 31 65 54 26     4.YQ...S.4.S1eT&
     a29:	05 54 07 73 b1 59 b1 0b 55 08 34 b1 89 9e 49 01     .T.s.Y..U.4...I.
     a39:	56 09 34 b1 89 ce 24 15 00 57 09 34 b1 89 e6 38     V.4...$..W.4...8
     a49:	62 00 58 0a 34 b1 89 32 49 15 65 00 59 08 73 b1     b.X.4..2I.e.Y.s.
     a59:	49 56 59 01 5a 0a 34 b1 19 19 c4 36 18 01 5b 07     IVY.Z.4....6..[.
     a69:	73 b1 19 b1 39 5c 09 24 b3 c9 28 a3 8c 02 5d 07     s...9\.$..(...].
     a79:	73 b1 99 cd 11 5e 05 53 b9 6b 5f 06 0c b1 19 01     s....^.S.k_.....
     a89:	60 06 52 b9 89 01 61 08 24 b1 1b 51 a9 02 62 0b     `.R...a.$..Q..b.
     a99:	34 b1 c9 20 83 15 e5 48 00 63 07 23 b1 9b 19 08     4.. ...H.c.#....
     aa9:	64 0a 34 b1 07 19 a4 11 65 1a 65 09 24 b1 53 69     d.4.....e.e.$.Si
     ab9:	64 a0 00 66 09 34 b1 ad ca 99 41 04 67 09 2c af     d..f.4....A.g.,.
     ac9:	1b 31 a9 8c 06 68 0a 34 b1 c9 20 83 15 cd 00 69     .1...h.4.. ....i
     ad9:	08 73 b1 cb 48 56 03 6a 09 7b af cd b0 54 15 00     .s..HV.j.{...T..
     ae9:	6b 0b 34 b1 c9 20 83 94 64 2a 03 6c 07 73 b1 91     k.4.. ..d*.l.s..
     af9:	5d 03 6d 08 24 b1 49 69 48 19 6e 07 24 b1 59 d1     ].m.$.IiH.n.$.Y.
     b09:	0c 6f 08 24 b1 53 51 26 05 70 09 2c af 59 51 8e     .o.$.SQ&.p.,.YQ.
     b19:	94 01 71 09 2c af 1b 51 a6 0d 02 72 08 24 b1 59     ..q.,..Q...r.$.Y
     b29:	51 83 0c 73 08 24 b1 1b 1a 0d 05 74 0a 34 b1 cb     Q..s.$.....t.4..
     b39:	20 ce 0c 32 12 75 07 24 b1 89 66 1a 76 07 63 b1      ..2.u.$..f.v.c.
     b49:	49 56 05 77 07 24 b1 89 72 1c 78 08 24 b1 89 49     IV.w.$..r.x.$..I
     b59:	aa 18 79 09 2c af 89 32 95 25 00 7a 08 24 b1 19     ..y.,..2.%.z.$..
     b69:	b1 1c 01 7b 08 73 b1 4d 49 d6 20 7c 05 b1 b1 39     ...{.s.MI. |...9
     b79:	7d 0a 73 b1 c9 20 aa 98 22 00 7e 07 14 b9 4b 2a     }.s.. ..".~...K*
     b89:	01 a0 05 00 bd 01 a1 06 b1 b1 49 23 a2 09 34 af     ..........I#..4.
     b99:	8d 23 35 67 02 a3 08 2c b1 55 71 56 02 a4 0b 2d     .#5g...,.UqV...-
     ba9:	b1 c9 20 cd 14 57 06 01 a5 09 73 b1 49 aa 5a 31     .. ..W....s.I.Z1
     bb9:	01 a6 06 a9 b1 51 02 a7 08 7b af 9b aa 92 0b a8     .....Q...{......
     bc9:	06 4b bb 49 01 a9 0d 3d af 5b 19 a8 34 55 d2 20     .K.I...=.[..4U. 
     bd9:	2d 00 aa 06 1b b7 5b 49 ab 07 1d b3 8b b2 01 ac     -.....[I........
     be9:	07 14 b3 19 19 04 ad 05 4b b5 19 ae 0c 3d af 5b     ........K....=.[
     bf9:	19 8c 34 a7 06 69 01 af 06 0c bb 19 01 b0 06 5b     ..4..i.........[
     c09:	b7 eb 02 b1 0b 35 b1 cd 28 0e 99 51 1c 02 b2 06     .....5..(..Q....
     c19:	62 b5 51 06 b3 06 62 b5 19 69 b4 06 52 b9 53 00     b.Q...b..i..R.S.
     c29:	b5 08 2c af 89 e6 48 19 b6 08 34 b1 1b 6a f5 03     ..,...H...4..j..
     c39:	b7 06 52 b5 19 01 b8 06 52 af 53 00 b9 07 63 b5     ..R.....R.S...c.
     c49:	4b 32 0d ba 06 1b b7 eb 02 bb 08 1d b3 89 a5 4c     K2.............L
     c59:	00 bc 0c 3c af c9 20 83 0c 62 54 1b 04 bd 0d 3c     ...<.. ..bT....<
     c69:	af c9 20 83 0c 92 06 31 03 01 be 0b 3c af 91 1a     .. ....1....<...
     c79:	44 15 d5 06 01 bf 09 73 b1 cb 30 c5 54 01 c0 09     D......s..0.T...
     c89:	34 b1 53 51 8e 29 03 c1 09 34 b1 53 51 8e 29 03     4.SQ.)...4.SQ.).
     c99:	c2 09 34 b1 53 51 8e 29 03 c3 09 34 b1 53 51 8e     ..4.SQ.)...4.SQ.
     ca9:	29 03 c4 0a 34 b1 89 49 c5 31 65 00 c5 09 34 b1     )...4..I.1e...4.
     cb9:	93 2a 8e 29 03 c6 09 34 b1 1b a9 1a aa 25 c7 0b     .*.)...4.....%..
     cc9:	3c af 53 51 83 0c 62 92 11 c8 0b 34 b1 19 1a ac     <.SQ..b....4....
     cd9:	0c 32 18 01 c9 0b 34 b1 19 1a ac 0c 32 18 01 ca     .2....4.....2...
     ce9:	0b 34 b1 19 1a ac 0c 32 18 01 cb 0b 34 b1 19 1a     .4.....2....4...
     cf9:	ac 0c 32 18 01 cc 07 73 b1 59 b1 35 cd 07 73 b1     ..2....s.Y.5..s.
     d09:	59 b1 35 ce 07 73 b1 59 b1 35 cf 07 73 b1 59 b1     Y.5..s.Y.5..s.Y.
     d19:	35 d0 09 34 b1 99 69 75 8d 04 d1 08 34 b1 49 73     5..4..iu....4.Is
     d29:	a9 33 d2 09 34 b1 53 d1 99 14 00 d3 09 34 b1 53     .3..4.S......4.S
     d39:	d1 99 14 00 d4 09 34 b1 53 d1 99 14 00 d5 09 34     ......4.S......4
     d49:	b1 53 d1 99 14 00 d6 0a 34 b1 89 49 45 33 29 00     .S......4..IE3).
     d59:	d7 08 24 b1 89 49 aa 18 d8 09 34 b1 1b e9 48 47     ..$..I....4...HG
     d69:	02 d9 08 34 b1 89 9e 49 01 da 08 34 b1 89 9e 49     ...4...I...4...I
     d79:	01 db 08 34 b1 89 9e 49 01 dc 0a 34 b1 89 19 45     ...4...I...4...E
     d89:	33 29 00 dd 08 73 b1 49 56 59 01 de 0b 34 b1 c9     3)...s.IVY...4..
     d99:	60 c5 91 32 c8 00 df 09 34 b1 53 51 95 56 02 e0     `..2....4.SQ.V..
     da9:	0a 34 b1 cb 28 8e a8 54 01 e1 09 34 b1 ad c1 88     .4..(..T...4....
     db9:	4a 15 e2 09 34 b1 ad d2 88 4a 15 e3 0a 34 b1 4b     J...4....J...4.K
     dc9:	2a 8e a8 54 01 e4 09 34 b1 ab e1 88 4a 15 e5 09     *..T...4....J...
     dd9:	34 b1 93 72 44 a5 0a e6 08 24 b1 1b 69 c5 01 e7     4..rD....$..i...
     de9:	08 6b af 9b 19 a8 04 e8 0b 34 b1 cb 28 aa 34 32     .k.......4..(.42
     df9:	50 00 e9 0a 34 b1 ad 81 4a 23 03 05 ea 0b 34 b1     P...4...J#....4.
     e09:	8b 29 aa 34 32 50 00 eb 0b 34 b1 49 99 50 69 64     .).42P...4.I.Pid
     e19:	a0 00 ec 08 73 b1 c9 20 c9 6a ed 07 73 b1 2b 65     ....s.. .j..s.+e
     e29:	35 ee 07 73 b1 ab 66 35 ef 08 73 b1 49 19 c8 6a     5..s..f5..s.I..j
     e39:	f0 0a 34 b1 cb c8 8a 32 29 00 f1 09 34 b1 4b 2a     ..4....2)...4.K*
     e49:	ad 68 06 f2 0a 34 b1 cb 28 aa 28 93 02 f3 0a 34     .h...4..(.(....4
     e59:	b1 ad 81 8a 32 29 00 f4 0a 34 b1 d3 84 8a 32 29     ....2)...4....2)
     e69:	00 f5 0a 34 b1 4b 2a aa 28 93 02 f6 0a 34 b1 ab     ...4.K*.(....4..
     e79:	a1 8a 32 29 00 f7 09 2c b1 d3 70 64 a8 00 f8 09     ..2)...,..pd....
     e89:	24 b1 1b 69 a4 91 00 f9 09 34 b1 cb a8 34 d3 00     $..i.....4...4..
     e99:	fa 07 34 b1 6d 9a 69 fb 08 34 b1 d3 30 9a 69 fc     ..4.m.i..4..0.i.
     ea9:	09 34 b1 ab 51 34 d3 00 fd 09 3c af 6d ca 54 96     .4..Q4....<.m.T.
     eb9:	00 fe 0a 34 af c9 60 45 39 52 06 ff 0a 3c af ab     ...4..`E9R...<..
     ec9:	51 94 a9 2c 01 00 00 00 04 ff ff 00 00              Q..,.........

00000ed6 <__ctors_end>:
     ed6:	11 24       	eor	r1, r1
     ed8:	1f be       	out	0x3f, r1	; 63
     eda:	cf ef       	ldi	r28, 0xFF	; 255
     edc:	d8 e0       	ldi	r29, 0x08	; 8
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	cd bf       	out	0x3d, r28	; 61

00000ee2 <__do_copy_data>:
     ee2:	12 e0       	ldi	r17, 0x02	; 2
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b1 e0       	ldi	r27, 0x01	; 1
     ee8:	e4 eb       	ldi	r30, 0xB4	; 180
     eea:	f1 e4       	ldi	r31, 0x41	; 65
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <__do_copy_data+0x10>
     eee:	05 90       	lpm	r0, Z+
     ef0:	0d 92       	st	X+, r0
     ef2:	a4 3c       	cpi	r26, 0xC4	; 196
     ef4:	b1 07       	cpc	r27, r17
     ef6:	d9 f7       	brne	.-10     	; 0xeee <__do_copy_data+0xc>

00000ef8 <__do_clear_bss>:
     ef8:	27 e0       	ldi	r18, 0x07	; 7
     efa:	a4 ec       	ldi	r26, 0xC4	; 196
     efc:	b2 e0       	ldi	r27, 0x02	; 2
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <.do_clear_bss_start>

00000f00 <.do_clear_bss_loop>:
     f00:	1d 92       	st	X+, r1

00000f02 <.do_clear_bss_start>:
     f02:	ae 38       	cpi	r26, 0x8E	; 142
     f04:	b2 07       	cpc	r27, r18
     f06:	e1 f7       	brne	.-8      	; 0xf00 <.do_clear_bss_loop>
     f08:	0e 94 a5 07 	call	0xf4a	; 0xf4a <main>
     f0c:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <_exit>

00000f10 <__bad_interrupt>:
     f10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f14 <setup_display>:
unsigned int Time_ms = 0;//accuracy is fluctuating
unsigned int Time_min = 0;//accurate

void setup_display(void){
	//screen initialization
	main_currentPage = u8g2_setup(Settings, &speed, &direction, &distance); //save the address of the currentPage
     f14:	2a e0       	ldi	r18, 0x0A	; 10
     f16:	31 e0       	ldi	r19, 0x01	; 1
     f18:	4c e0       	ldi	r20, 0x0C	; 12
     f1a:	51 e0       	ldi	r21, 0x01	; 1
     f1c:	6e e0       	ldi	r22, 0x0E	; 14
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 ab 07 	call	0xf56	; 0xf56 <u8g2_setup>
     f28:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <main_currentPage+0x1>
     f2c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <main_currentPage>
	sys_init();
     f30:	0e 94 0c 08 	call	0x1018	; 0x1018 <sys_init>
	but_init();
     f34:	0e 94 0c 0a 	call	0x1418	; 0x1418 <but_init>
	timeInit(&Time_min, &Time_ms);
     f38:	66 ec       	ldi	r22, 0xC6	; 198
     f3a:	72 e0       	ldi	r23, 0x02	; 2
     f3c:	84 ec       	ldi	r24, 0xC4	; 196
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 12 08 	call	0x1024	; 0x1024 <timeInit>
	ADCinit();
     f44:	0e 94 05 09 	call	0x120a	; 0x120a <ADCinit>
     f48:	08 95       	ret

00000f4a <main>:
}

int main()
{
	setup_display();
     f4a:	0e 94 8a 07 	call	0xf14	; 0xf14 <setup_display>
	
	sei();
     f4e:	78 94       	sei


	while(1){
		screenRoutine();//function for updating the display.
     f50:	0e 94 df 10 	call	0x21be	; 0x21be <screenRoutine>
     f54:	fd cf       	rjmp	.-6      	; 0xf50 <main+0x6>

00000f56 <u8g2_setup>:

#define Time_cal 305 //ms calibration

int8_t * u8g2_setup(int pSettings[settings], int *pSpeed, int *pDirection, int *pDistance)
{
	settingVal = &pSettings[0];
     f56:	90 93 f5 06 	sts	0x06F5, r25	; 0x8006f5 <settingVal+0x1>
     f5a:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <settingVal>
	
	speedHold = pSpeed;
     f5e:	70 93 f7 06 	sts	0x06F7, r23	; 0x8006f7 <speedHold+0x1>
     f62:	60 93 f6 06 	sts	0x06F6, r22	; 0x8006f6 <speedHold>
	directionHold = pDirection;
     f66:	50 93 7b 07 	sts	0x077B, r21	; 0x80077b <directionHold+0x1>
     f6a:	40 93 7a 07 	sts	0x077A, r20	; 0x80077a <directionHold>
	distanceHold = pDistance;
     f6e:	30 93 77 07 	sts	0x0777, r19	; 0x800777 <distanceHold+0x1>
     f72:	20 93 76 07 	sts	0x0776, r18	; 0x800776 <distanceHold>
	
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
     f76:	2e e3       	ldi	r18, 0x3E	; 62
     f78:	3b e1       	ldi	r19, 0x1B	; 27
     f7a:	43 e0       	ldi	r20, 0x03	; 3
     f7c:	5b e1       	ldi	r21, 0x1B	; 27
     f7e:	69 e5       	ldi	r22, 0x59	; 89
     f80:	72 e0       	ldi	r23, 0x02	; 2
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	97 e0       	ldi	r25, 0x07	; 7
     f86:	0e 94 92 14 	call	0x2924	; 0x2924 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
     f8a:	88 e7       	ldi	r24, 0x78	; 120
     f8c:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
     f90:	86 e0       	ldi	r24, 0x06	; 6
     f92:	97 e0       	ldi	r25, 0x07	; 7
     f94:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	86 e0       	ldi	r24, 0x06	; 6
     f9c:	97 e0       	ldi	r25, 0x07	; 7
     f9e:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <u8x8_SetPowerSave>
	
	screenDiv = screenDiv / screenDivholder;//for better resolution
     fa2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <screenDivholder>
     fa6:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <screenDivholder+0x1>
     faa:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <screenDivholder+0x2>
     fae:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <screenDivholder+0x3>
     fb2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
     fb6:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
     fba:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
     fbe:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
     fc2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divsf3>
     fc6:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <screenDiv>
     fca:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <screenDiv+0x1>
     fce:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <screenDiv+0x2>
     fd2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <screenDiv+0x3>

	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);
     fd6:	68 e6       	ldi	r22, 0x68	; 104
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	86 e0       	ldi	r24, 0x06	; 6
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <u8g2_SetFont>
	textHeight = u8g2_GetMaxCharHeight(&u8g2);
     fe2:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <u8g2+0x50>
     fe6:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <textHeight>
	maxCharWidth = u8g2_GetMaxCharWidth(&u8g2);
     fea:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <u8g2+0x4f>
     fee:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <maxCharWidth>
	
	u8g2_SetFontDirection(&u8g2, 0);//0: 0deg 1:90deg 2: 180deg 3: 270deg
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	97 e0       	ldi	r25, 0x07	; 7
     ff8:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <u8g2_SetFontDirection>
	
	selections[MENUPAGE] = menuChoices;
     ffc:	ee e7       	ldi	r30, 0x7E	; 126
     ffe:	f7 e0       	ldi	r31, 0x07	; 7
    1000:	84 e0       	ldi	r24, 0x04	; 4
    1002:	81 83       	std	Z+1, r24	; 0x01
	selections[SETTINGPAGE] = settings;
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	85 83       	std	Z+5, r24	; 0x05
	selectionsVis[MENUPAGE] = menuChoicesVis;
    1008:	ec e6       	ldi	r30, 0x6C	; 108
    100a:	f7 e0       	ldi	r31, 0x07	; 7
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	91 83       	std	Z+1, r25	; 0x01
	selectionsVis[SETTINGPAGE] = settingsVis;
    1010:	85 83       	std	Z+5, r24	; 0x05
	return &currentPage;
}
    1012:	8f ed       	ldi	r24, 0xDF	; 223
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	08 95       	ret

00001018 <sys_init>:

void sys_init(void)
{
	#if defined(__AVR__)
	/* select minimal prescaler (max system speed) */
	CLKPR = 0x80;
    1018:	e1 e6       	ldi	r30, 0x61	; 97
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 e8       	ldi	r24, 0x80	; 128
    101e:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1020:	10 82       	st	Z, r1
    1022:	08 95       	ret

00001024 <timeInit>:
}

//Time________________________________________________________________________________________________________________________________________________

void timeInit(unsigned int *ptime_min, unsigned int *ptime_ms){
	pTime_min = ptime_min;
    1024:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <pTime_min+0x1>
    1028:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <pTime_min>
	pTime_ms = ptime_ms;
    102c:	70 93 05 07 	sts	0x0705, r23	; 0x800705 <pTime_ms+0x1>
    1030:	60 93 04 07 	sts	0x0704, r22	; 0x800704 <pTime_ms>
	TCCR0B |= (1<<CS00) | (1<<CS01);
    1034:	85 b5       	in	r24, 0x25	; 37
    1036:	83 60       	ori	r24, 0x03	; 3
    1038:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0B);
    103a:	ee e6       	ldi	r30, 0x6E	; 110
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	80 83       	st	Z, r24
	OCR0B = 250;//to attain roughly 1 ms for every overflow. this roughness gets calibrated further in the code.
    1044:	8a ef       	ldi	r24, 0xFA	; 250
    1046:	88 bd       	out	0x28, r24	; 40
    1048:	08 95       	ret

0000104a <__vector_15>:
}



ISR(TIMER0_COMPB_vect){
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	//this routine updates the time variables.
	static int rCount = 0;
	
	if (_Time_ms >= 60000){
    1064:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <_Time_ms>
    1068:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <_Time_ms+0x1>
    106c:	80 36       	cpi	r24, 0x60	; 96
    106e:	2a ee       	ldi	r18, 0xEA	; 234
    1070:	92 07       	cpc	r25, r18
    1072:	b8 f0       	brcs	.+46     	; 0x10a2 <__vector_15+0x58>
		_Time_ms = Time_cal-117;//Formula for the minutes. pTime_ms = (Time_cal-c): c = 0.615384615*Time_cal
    1074:	8c eb       	ldi	r24, 0xBC	; 188
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <_Time_ms+0x1>
    107c:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <_Time_ms>
		_Time_min++;
    1080:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_Time_min>
    1084:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <_Time_min+0x1>
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <_Time_min+0x1>
    108e:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <_Time_min>
		rCount = 0;
    1092:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <rCount.9235+0x1>
    1096:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <rCount.9235>
		reDrawRequiredTime = 1; //update the screen so the overlay shows the right minutes.
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <reDrawRequiredTime>
    10a0:	18 c0       	rjmp	.+48     	; 0x10d2 <__vector_15+0x88>
	}else if (rCount++ >= 13000)
    10a2:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <rCount.9235>
    10a6:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <rCount.9235+0x1>
    10aa:	a9 01       	movw	r20, r18
    10ac:	4f 5f       	subi	r20, 0xFF	; 255
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	50 93 da 02 	sts	0x02DA, r21	; 0x8002da <rCount.9235+0x1>
    10b4:	40 93 d9 02 	sts	0x02D9, r20	; 0x8002d9 <rCount.9235>
    10b8:	28 3c       	cpi	r18, 0xC8	; 200
    10ba:	32 43       	sbci	r19, 0x32	; 50
    10bc:	54 f0       	brlt	.+20     	; 0x10d2 <__vector_15+0x88>
	{
		_Time_ms = _Time_ms + Time_cal;
    10be:	8f 5c       	subi	r24, 0xCF	; 207
    10c0:	9e 4f       	sbci	r25, 0xFE	; 254
    10c2:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <_Time_ms+0x1>
    10c6:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <_Time_ms>
		rCount = 0;
    10ca:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <rCount.9235+0x1>
    10ce:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <rCount.9235>
	}

	_Time_ms++;
    10d2:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <_Time_ms>
    10d6:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <_Time_ms+0x1>
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <_Time_ms+0x1>
    10e0:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <_Time_ms>
	
	*pTime_ms = _Time_ms;
    10e4:	e0 91 04 07 	lds	r30, 0x0704	; 0x800704 <pTime_ms>
    10e8:	f0 91 05 07 	lds	r31, 0x0705	; 0x800705 <pTime_ms+0x1>
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
	*pTime_min = _Time_min;
    10f0:	e0 91 f8 06 	lds	r30, 0x06F8	; 0x8006f8 <pTime_min>
    10f4:	f0 91 f9 06 	lds	r31, 0x06F9	; 0x8006f9 <pTime_min+0x1>
    10f8:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_Time_min>
    10fc:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <_Time_min+0x1>
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
}
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	9f 91       	pop	r25
    110a:	8f 91       	pop	r24
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <getTimeToChar>:

void getTimeToChar(char *s, int TemplateOption){
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	00 d0       	rcall	.+0      	; 0x112c <getTimeToChar+0xe>
    112c:	1f 92       	push	r1
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	8c 01       	movw	r16, r24
    1134:	7b 01       	movw	r14, r22
	//pTime_min and pTime_ms are global variables.
	strcpy(s, ""); // empty string s
    1136:	fc 01       	movw	r30, r24
    1138:	10 82       	st	Z, r1
	char Buff[3] = {0, 0, 0};
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	1a 82       	std	Y+2, r1	; 0x02
    113e:	1b 82       	std	Y+3, r1	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1140:	4a e0       	ldi	r20, 0x0A	; 10
    1142:	be 01       	movw	r22, r28
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_Time_min>
    114c:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <_Time_min+0x1>
    1150:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
	
	itoa(_Time_min, Buff, 10);
	
	if(_Time_min < 10){
    1154:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_Time_min>
    1158:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <_Time_min+0x1>
    115c:	0a 97       	sbiw	r24, 0x0a	; 10
    115e:	48 f4       	brcc	.+18     	; 0x1172 <getTimeToChar+0x54>
		strcat(s, "0");
    1160:	f8 01       	movw	r30, r16
    1162:	01 90       	ld	r0, Z+
    1164:	00 20       	and	r0, r0
    1166:	e9 f7       	brne	.-6      	; 0x1162 <getTimeToChar+0x44>
    1168:	31 97       	sbiw	r30, 0x01	; 1
    116a:	80 e3       	ldi	r24, 0x30	; 48
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
	}
	strcat(s, Buff);
    1172:	be 01       	movw	r22, r28
    1174:	6f 5f       	subi	r22, 0xFF	; 255
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	c8 01       	movw	r24, r16
    117a:	0e 94 98 20 	call	0x4130	; 0x4130 <strcat>
    117e:	20 91 7c 07 	lds	r18, 0x077C	; 0x80077c <_Time_ms>
    1182:	30 91 7d 07 	lds	r19, 0x077D	; 0x80077d <_Time_ms+0x1>
    1186:	36 95       	lsr	r19
    1188:	27 95       	ror	r18
    118a:	36 95       	lsr	r19
    118c:	27 95       	ror	r18
    118e:	36 95       	lsr	r19
    1190:	27 95       	ror	r18
    1192:	a5 ec       	ldi	r26, 0xC5	; 197
    1194:	b0 e2       	ldi	r27, 0x20	; 32
    1196:	0e 94 82 20 	call	0x4104	; 0x4104 <__umulhisi3>
    119a:	4a e0       	ldi	r20, 0x0A	; 10
    119c:	be 01       	movw	r22, r28
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	92 95       	swap	r25
    11a4:	82 95       	swap	r24
    11a6:	8f 70       	andi	r24, 0x0F	; 15
    11a8:	89 27       	eor	r24, r25
    11aa:	9f 70       	andi	r25, 0x0F	; 15
    11ac:	89 27       	eor	r24, r25
    11ae:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
	
	itoa((_Time_ms/1000), Buff, 10);
	strcat(s, ":");
    11b2:	f8 01       	movw	r30, r16
    11b4:	01 90       	ld	r0, Z+
    11b6:	00 20       	and	r0, r0
    11b8:	e9 f7       	brne	.-6      	; 0x11b4 <getTimeToChar+0x96>
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	8a e3       	ldi	r24, 0x3A	; 58
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
	
	switch (TemplateOption){
    11c4:	ea 94       	dec	r14
    11c6:	ef 28       	or	r14, r15
    11c8:	b1 f4       	brne	.+44     	; 0x11f6 <getTimeToChar+0xd8>
		//only have the minutes:> 00:
		break;
		
		case 1:
		//include minutes and seconds:> 00:00
		if(_Time_ms/1000 < 10){
    11ca:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <_Time_ms>
    11ce:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <_Time_ms+0x1>
    11d2:	80 31       	cpi	r24, 0x10	; 16
    11d4:	97 42       	sbci	r25, 0x27	; 39
    11d6:	48 f4       	brcc	.+18     	; 0x11ea <getTimeToChar+0xcc>
			strcat(s, "0");
    11d8:	f8 01       	movw	r30, r16
    11da:	01 90       	ld	r0, Z+
    11dc:	00 20       	and	r0, r0
    11de:	e9 f7       	brne	.-6      	; 0x11da <getTimeToChar+0xbc>
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
		}
		strcat(s, Buff);
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 98 20 	call	0x4130	; 0x4130 <strcat>
		break;
	}
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	08 95       	ret

0000120a <ADCinit>:


//Battery_____________________________________________________________________________________________________________________________________________
void ADCinit(void){
	ADMUX |= (1<<REFS0) | (1<<MUX1);
    120a:	ec e7       	ldi	r30, 0x7C	; 124
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	82 64       	ori	r24, 0x42	; 66
    1212:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    1214:	ea e7       	ldi	r30, 0x7A	; 122
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	87 6e       	ori	r24, 0xE7	; 231
    121c:	80 83       	st	Z, r24
    121e:	08 95       	ret

00001220 <updateBatterySens>:
	
}

int updateBatterySens(){
	static int ADCval = 0;
	ADCval = ADC;
    1220:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1224:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	//mimicking a battery voltage by a pot meter.

	return ADCval;
}
    1228:	08 95       	ret

0000122a <choiceAdder>:
		u8g2_SendBuffer(&u8g2);
		reDrawRequiredTime = 0;
	}
}

void choiceAdder(int8_t addValue){ //change the selection in the menu
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
	currentChoice[currentPage] += addValue;
    122e:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <currentPage>
    1232:	02 2e       	mov	r0, r18
    1234:	00 0c       	add	r0, r0
    1236:	33 0b       	sbc	r19, r19
    1238:	f9 01       	movw	r30, r18
    123a:	eb 51       	subi	r30, 0x1B	; 27
    123c:	f9 4f       	sbci	r31, 0xF9	; 249
    123e:	90 81       	ld	r25, Z
    1240:	98 0f       	add	r25, r24
    1242:	90 83       	st	Z, r25
	
	if(selectEnable == 1){
    1244:	40 91 8d 07 	lds	r20, 0x078D	; 0x80078d <selectEnable>
    1248:	44 23       	and	r20, r20
    124a:	09 f4       	brne	.+2      	; 0x124e <choiceAdder+0x24>
    124c:	5a c0       	rjmp	.+180    	; 0x1302 <choiceAdder+0xd8>
		if (currentChoice[currentPage] > selections[currentPage]-1)
    124e:	f9 01       	movw	r30, r18
    1250:	e2 58       	subi	r30, 0x82	; 130
    1252:	f8 4f       	sbci	r31, 0xF8	; 248
    1254:	e0 81       	ld	r30, Z
    1256:	4e 2f       	mov	r20, r30
    1258:	0e 2e       	mov	r0, r30
    125a:	00 0c       	add	r0, r0
    125c:	55 0b       	sbc	r21, r21
    125e:	41 50       	subi	r20, 0x01	; 1
    1260:	51 09       	sbc	r21, r1
    1262:	69 2f       	mov	r22, r25
    1264:	09 2e       	mov	r0, r25
    1266:	00 0c       	add	r0, r0
    1268:	77 0b       	sbc	r23, r23
    126a:	46 17       	cp	r20, r22
    126c:	57 07       	cpc	r21, r23
    126e:	4c f4       	brge	.+18     	; 0x1282 <choiceAdder+0x58>
		{
			currentChoice[currentPage] = 0;
    1270:	f9 01       	movw	r30, r18
    1272:	eb 51       	subi	r30, 0x1B	; 27
    1274:	f9 4f       	sbci	r31, 0xF9	; 249
    1276:	10 82       	st	Z, r1
			Scroll[currentPage] = 0;
    1278:	f9 01       	movw	r30, r18
    127a:	e6 50       	subi	r30, 0x06	; 6
    127c:	f9 4f       	sbci	r31, 0xF9	; 249
    127e:	10 82       	st	Z, r1
    1280:	11 c0       	rjmp	.+34     	; 0x12a4 <choiceAdder+0x7a>
		}
		if (currentChoice[currentPage] < 0)
    1282:	99 23       	and	r25, r25
    1284:	7c f4       	brge	.+30     	; 0x12a4 <choiceAdder+0x7a>
		{
			currentChoice[currentPage] = selections[currentPage]-1;
    1286:	d9 01       	movw	r26, r18
    1288:	ab 51       	subi	r26, 0x1B	; 27
    128a:	b9 4f       	sbci	r27, 0xF9	; 249
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	9e 0f       	add	r25, r30
    1290:	9c 93       	st	X, r25
			Scroll[currentPage] = selectionsVis[currentPage] - selections[currentPage];
    1292:	d9 01       	movw	r26, r18
    1294:	a6 50       	subi	r26, 0x06	; 6
    1296:	b9 4f       	sbci	r27, 0xF9	; 249
    1298:	e9 01       	movw	r28, r18
    129a:	c4 59       	subi	r28, 0x94	; 148
    129c:	d8 4f       	sbci	r29, 0xF8	; 248
    129e:	98 81       	ld	r25, Y
    12a0:	9e 1b       	sub	r25, r30
    12a2:	9c 93       	st	X, r25
		}
		if(currentChoice[currentPage] >= selectionsVis[currentPage] - Scroll[currentPage]){
    12a4:	f9 01       	movw	r30, r18
    12a6:	eb 51       	subi	r30, 0x1B	; 27
    12a8:	f9 4f       	sbci	r31, 0xF9	; 249
    12aa:	60 81       	ld	r22, Z
    12ac:	06 2e       	mov	r0, r22
    12ae:	00 0c       	add	r0, r0
    12b0:	77 0b       	sbc	r23, r23
    12b2:	f9 01       	movw	r30, r18
    12b4:	e6 50       	subi	r30, 0x06	; 6
    12b6:	f9 4f       	sbci	r31, 0xF9	; 249
    12b8:	90 81       	ld	r25, Z
    12ba:	f9 01       	movw	r30, r18
    12bc:	e4 59       	subi	r30, 0x94	; 148
    12be:	f8 4f       	sbci	r31, 0xF8	; 248
    12c0:	40 81       	ld	r20, Z
    12c2:	04 2e       	mov	r0, r20
    12c4:	00 0c       	add	r0, r0
    12c6:	55 0b       	sbc	r21, r21
    12c8:	49 1b       	sub	r20, r25
    12ca:	51 09       	sbc	r21, r1
    12cc:	97 fd       	sbrc	r25, 7
    12ce:	53 95       	inc	r21
    12d0:	64 17       	cp	r22, r20
    12d2:	75 07       	cpc	r23, r21
    12d4:	2c f0       	brlt	.+10     	; 0x12e0 <choiceAdder+0xb6>
			Scroll[currentPage] += -addValue;
    12d6:	f9 01       	movw	r30, r18
    12d8:	e6 50       	subi	r30, 0x06	; 6
    12da:	f9 4f       	sbci	r31, 0xF9	; 249
    12dc:	98 1b       	sub	r25, r24
    12de:	90 83       	st	Z, r25
		}
		if (currentChoice[currentPage] < -Scroll[currentPage]){
    12e0:	f9 01       	movw	r30, r18
    12e2:	e6 50       	subi	r30, 0x06	; 6
    12e4:	f9 4f       	sbci	r31, 0xF9	; 249
    12e6:	90 81       	ld	r25, Z
    12e8:	e9 2f       	mov	r30, r25
    12ea:	ff 27       	eor	r31, r31
    12ec:	e1 95       	neg	r30
    12ee:	0c f4       	brge	.+2      	; 0x12f2 <choiceAdder+0xc8>
    12f0:	f0 95       	com	r31
    12f2:	6e 17       	cp	r22, r30
    12f4:	7f 07       	cpc	r23, r31
    12f6:	2c f4       	brge	.+10     	; 0x1302 <choiceAdder+0xd8>
			Scroll[currentPage] += -addValue;
    12f8:	f9 01       	movw	r30, r18
    12fa:	e6 50       	subi	r30, 0x06	; 6
    12fc:	f9 4f       	sbci	r31, 0xF9	; 249
    12fe:	98 1b       	sub	r25, r24
    1300:	90 83       	st	Z, r25
		}
	}
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <pageHistory>:
int8_t pageHistory(_Bool GetPrevpage, int pageNum){
	#define historyBuff 4
	static short history[historyBuff];//initialize first page in case you don't use the start up screen.
	static short i = -1;
	
	if (!GetPrevpage)
    1308:	81 11       	cpse	r24, r1
    130a:	15 c0       	rjmp	.+42     	; 0x1336 <pageHistory+0x2e>
	{
		if (i < historyBuff-1){
    130c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9264>
    1310:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9264+0x1>
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	44 f5       	brge	.+80     	; 0x136a <pageHistory+0x62>
			history[++i] = pageNum;
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9264+0x1>
    1320:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9264>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	fc 01       	movw	r30, r24
    132a:	ef 52       	subi	r30, 0x2F	; 47
    132c:	fd 4f       	sbci	r31, 0xFD	; 253
    132e:	71 83       	std	Z+1, r23	; 0x01
    1330:	60 83       	st	Z, r22
		}
		return -1;
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	08 95       	ret
		}else{
		
		if (i <= 0)
    1336:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9264>
    133a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9264+0x1>
    133e:	18 16       	cp	r1, r24
    1340:	19 06       	cpc	r1, r25
    1342:	3c f0       	brlt	.+14     	; 0x1352 <pageHistory+0x4a>
		{
			return history[i];
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	fc 01       	movw	r30, r24
    134a:	ef 52       	subi	r30, 0x2F	; 47
    134c:	fd 4f       	sbci	r31, 0xFD	; 253
    134e:	80 81       	ld	r24, Z
    1350:	08 95       	ret
			}else{
			return history[--i];
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9264+0x1>
    1358:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9264>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	fc 01       	movw	r30, r24
    1362:	ef 52       	subi	r30, 0x2F	; 47
    1364:	fd 4f       	sbci	r31, 0xFD	; 253
    1366:	80 81       	ld	r24, Z
    1368:	08 95       	ret
	if (!GetPrevpage)
	{
		if (i < historyBuff-1){
			history[++i] = pageNum;
		}
		return -1;
    136a:	8f ef       	ldi	r24, 0xFF	; 255
			return history[i];
			}else{
			return history[--i];
		}
	}
}
    136c:	08 95       	ret

0000136e <pageSel>:
}

void pageSel(void){
	//code for managing the pageNumbers
	#define firstPage 2
	if (selectEnable){
    136e:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <selectEnable>
    1372:	88 23       	and	r24, r24
    1374:	f9 f0       	breq	.+62     	; 0x13b4 <pageSel+0x46>
		if (currentPage == MENUPAGE){
    1376:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <currentPage>
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	31 f4       	brne	.+12     	; 0x138a <pageSel+0x1c>
			currentPage = currentChoice[MENUPAGE] + firstPage; //increment with two because the menu choice pages start at 2
    137e:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <currentChoice+0x1>
    1382:	8e 5f       	subi	r24, 0xFE	; 254
    1384:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <currentPage>
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <pageSel+0x36>
			}else if(currentPage == 0){
    138a:	81 11       	cpse	r24, r1
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <pageSel+0x28>
			currentPage = MENUPAGE;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <currentPage>
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <pageSel+0x36>
			}else{
			if(currentPage == 5){
    1396:	85 30       	cpi	r24, 0x05	; 5
    1398:	29 f4       	brne	.+10     	; 0x13a4 <pageSel+0x36>
				currentPage = currentChoice[5]+ 1 + 5;
    139a:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <currentChoice+0x5>
    139e:	8a 5f       	subi	r24, 0xFA	; 250
    13a0:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <currentPage>
			}
			
		}
		pageHistory(0, currentPage);//update page history
    13a4:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <currentPage>
    13a8:	06 2e       	mov	r0, r22
    13aa:	00 0c       	add	r0, r0
    13ac:	77 0b       	sbc	r23, r23
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 84 09 	call	0x1308	; 0x1308 <pageHistory>
    13b4:	08 95       	ret

000013b6 <__vector_5>:
}
//Buttons_____________________________________________________________________________________________________________________________________________

//the routine that gets run when the pin change interrupt gets triggered on portD for the enabled pins
ISR (PCINT2_vect)
{
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	11 24       	eor	r1, r1
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
	if ( (BUTTON_PIN & (1<<DOWN)) == 0 )
    13c4:	4c 99       	sbic	0x09, 4	; 9
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <__vector_5+0x20>
	keyPressed = DOWN;
    13c8:	84 e0       	ldi	r24, 0x04	; 4
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <keyPressed+0x1>
    13d0:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <keyPressed>
    13d4:	1a c0       	rjmp	.+52     	; 0x140a <__vector_5+0x54>
	else
	if ( (BUTTON_PIN & (1<<UP)) == 0 )
    13d6:	4d 99       	sbic	0x09, 5	; 9
    13d8:	07 c0       	rjmp	.+14     	; 0x13e8 <__vector_5+0x32>
	keyPressed = UP;
    13da:	85 e0       	ldi	r24, 0x05	; 5
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <keyPressed+0x1>
    13e2:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <keyPressed>
    13e6:	11 c0       	rjmp	.+34     	; 0x140a <__vector_5+0x54>
	else
	if ( (BUTTON_PIN & (1<<BACK)) == 0 )
    13e8:	4e 99       	sbic	0x09, 6	; 9
    13ea:	07 c0       	rjmp	.+14     	; 0x13fa <__vector_5+0x44>
	keyPressed = BACK;
    13ec:	86 e0       	ldi	r24, 0x06	; 6
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <keyPressed+0x1>
    13f4:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <keyPressed>
    13f8:	08 c0       	rjmp	.+16     	; 0x140a <__vector_5+0x54>
	else
	if ( (BUTTON_PIN & (1<<SELECT)) == 0 )
    13fa:	4f 99       	sbic	0x09, 7	; 9
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <__vector_5+0x54>
	keyPressed = SELECT;
    13fe:	87 e0       	ldi	r24, 0x07	; 7
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <keyPressed+0x1>
    1406:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <keyPressed>

}
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <but_init>:

void but_init(void){
	BUTTON_REG &= ~((1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK));     // set pinD 4 5 6 and 7 as an input
    1418:	8a b1       	in	r24, 0x0a	; 10
    141a:	8f 70       	andi	r24, 0x0F	; 15
    141c:	8a b9       	out	0x0a, r24	; 10
	// is now an input
	BUTTON_PORT |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);    // turn On the Pull-up on all those pins
    141e:	8b b1       	in	r24, 0x0b	; 11
    1420:	80 6f       	ori	r24, 0xF0	; 240
    1422:	8b b9       	out	0x0b, r24	; 11
	// is now an input with pull-up enabled

	if (BUTTON_PORT == PORTB){
    1424:	9b b1       	in	r25, 0x0b	; 11
    1426:	85 b1       	in	r24, 0x05	; 5
    1428:	98 13       	cpse	r25, r24
    142a:	0b c0       	rjmp	.+22     	; 0x1442 <but_init+0x2a>
		//interrupt setup
		PCICR |= (1<<PCIE0);
    142c:	e8 e6       	ldi	r30, 0x68	; 104
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	80 83       	st	Z, r24
		PCMSK0 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1436:	eb e6       	ldi	r30, 0x6B	; 107
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 6f       	ori	r24, 0xF0	; 240
    143e:	80 83       	st	Z, r24
    1440:	1d c0       	rjmp	.+58     	; 0x147c <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTC){
    1442:	9b b1       	in	r25, 0x0b	; 11
    1444:	88 b1       	in	r24, 0x08	; 8
    1446:	98 13       	cpse	r25, r24
    1448:	0b c0       	rjmp	.+22     	; 0x1460 <but_init+0x48>
		//interrupt setup
		PCICR |= (1<<PCIE1);
    144a:	e8 e6       	ldi	r30, 0x68	; 104
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	82 60       	ori	r24, 0x02	; 2
    1452:	80 83       	st	Z, r24
		PCMSK1 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1454:	ec e6       	ldi	r30, 0x6C	; 108
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 6f       	ori	r24, 0xF0	; 240
    145c:	80 83       	st	Z, r24
    145e:	0e c0       	rjmp	.+28     	; 0x147c <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTD){
    1460:	9b b1       	in	r25, 0x0b	; 11
    1462:	8b b1       	in	r24, 0x0b	; 11
    1464:	98 13       	cpse	r25, r24
    1466:	0a c0       	rjmp	.+20     	; 0x147c <but_init+0x64>
		//interrupt setup
		PCICR |= (1<<PCIE2);
    1468:	e8 e6       	ldi	r30, 0x68	; 104
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	84 60       	ori	r24, 0x04	; 4
    1470:	80 83       	st	Z, r24
		PCMSK2 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1472:	ed e6       	ldi	r30, 0x6D	; 109
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 6f       	ori	r24, 0xF0	; 240
    147a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    147c:	2f ef       	ldi	r18, 0xFF	; 255
    147e:	83 ec       	ldi	r24, 0xC3	; 195
    1480:	99 e0       	ldi	r25, 0x09	; 9
    1482:	21 50       	subi	r18, 0x01	; 1
    1484:	80 40       	sbci	r24, 0x00	; 0
    1486:	90 40       	sbci	r25, 0x00	; 0
    1488:	e1 f7       	brne	.-8      	; 0x1482 <but_init+0x6a>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <but_init+0x74>
    148c:	00 00       	nop
    148e:	08 95       	ret

00001490 <updateButtons>:

	_delay_ms(200);//to prevent accidental interrupt triggering/ dirty fix
}

void updateButtons(void){
	switch (keyPressed)
    1490:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <keyPressed>
    1494:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <keyPressed+0x1>
    1498:	85 30       	cpi	r24, 0x05	; 5
    149a:	91 05       	cpc	r25, r1
    149c:	19 f1       	breq	.+70     	; 0x14e4 <updateButtons+0x54>
    149e:	1c f4       	brge	.+6      	; 0x14a6 <updateButtons+0x16>
    14a0:	04 97       	sbiw	r24, 0x04	; 4
    14a2:	59 f1       	breq	.+86     	; 0x14fa <updateButtons+0x6a>
    14a4:	08 95       	ret
    14a6:	86 30       	cpi	r24, 0x06	; 6
    14a8:	91 05       	cpc	r25, r1
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <updateButtons+0x22>
    14ac:	07 97       	sbiw	r24, 0x07	; 7
    14ae:	81 f0       	breq	.+32     	; 0x14d0 <updateButtons+0x40>
    14b0:	08 95       	ret
	{
		case BACK:
		currentPage = pageHistory(1, 0);
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 84 09 	call	0x1308	; 0x1308 <pageHistory>
    14bc:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <currentPage>
		reDrawRequired = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;//reset key pressed
    14c6:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <keyPressed+0x1>
    14ca:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <keyPressed>
		break;
    14ce:	08 95       	ret
		
		case SELECT:
		pageSel();
    14d0:	0e 94 b7 09 	call	0x136e	; 0x136e <pageSel>
		reDrawRequired = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    14da:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <keyPressed+0x1>
    14de:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <keyPressed>
		break;
    14e2:	08 95       	ret
		
		case UP:
		choiceAdder(-1);
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	0e 94 15 09 	call	0x122a	; 0x122a <choiceAdder>
		reDrawRequired = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    14f0:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <keyPressed+0x1>
    14f4:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <keyPressed>
		break;
    14f8:	08 95       	ret
		
		case DOWN:
		choiceAdder(+1);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	0e 94 15 09 	call	0x122a	; 0x122a <choiceAdder>
		reDrawRequired = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    1506:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <keyPressed+0x1>
    150a:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <keyPressed>
    150e:	08 95       	ret

00001510 <MenuStyle0>:
}


//pages_______________________________________________________________________________________________________________________________________________

void MenuStyle0(void){
    1510:	2f 92       	push	r2
    1512:	3f 92       	push	r3
    1514:	4f 92       	push	r4
    1516:	5f 92       	push	r5
    1518:	6f 92       	push	r6
    151a:	7f 92       	push	r7
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	0f 93       	push	r16
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	00 d0       	rcall	.+0      	; 0x1532 <MenuStyle0+0x22>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <MenuStyle0+0x24>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	//int yStat = (y+(height/2)+3);
	selectEnable = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <selectEnable>
    153e:	0f 2e       	mov	r0, r31
    1540:	f5 e2       	ldi	r31, 0x25	; 37
    1542:	cf 2e       	mov	r12, r31
    1544:	f1 e0       	ldi	r31, 0x01	; 1
    1546:	df 2e       	mov	r13, r31
    1548:	f0 2d       	mov	r31, r0
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    154a:	1c 82       	std	Y+4, r1	; 0x04
    154c:	1b 82       	std	Y+3, r1	; 0x03
		if(i == currentChoice[currentPage]){
    154e:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <currentPage>
    1552:	0e 2e       	mov	r0, r30
    1554:	00 0c       	add	r0, r0
    1556:	ff 0b       	sbc	r31, r31
    1558:	eb 51       	subi	r30, 0x1B	; 27
    155a:	f9 4f       	sbci	r31, 0xF9	; 249
    155c:	80 81       	ld	r24, Z
    155e:	08 2e       	mov	r0, r24
    1560:	00 0c       	add	r0, r0
    1562:	99 0b       	sbc	r25, r25
    1564:	2b 81       	ldd	r18, Y+3	; 0x03
    1566:	3c 81       	ldd	r19, Y+4	; 0x04
    1568:	82 17       	cp	r24, r18
    156a:	93 07       	cpc	r25, r19
    156c:	09 f0       	breq	.+2      	; 0x1570 <MenuStyle0+0x60>
    156e:	9d c0       	rjmp	.+314    	; 0x16aa <MenuStyle0+0x19a>
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
			height = screenDiv - Margin;
    1570:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1574:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1578:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    157c:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			
			x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1580:	b9 01       	movw	r22, r18
    1582:	33 0f       	add	r19, r19
    1584:	88 0b       	sbc	r24, r24
    1586:	99 0b       	sbc	r25, r25
    1588:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    158c:	a3 01       	movw	r20, r6
    158e:	92 01       	movw	r18, r4
    1590:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e1       	ldi	r20, 0x10	; 16
    159a:	51 e4       	ldi	r21, 0x41	; 65
    159c:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    15a0:	4b 01       	movw	r8, r22
    15a2:	5c 01       	movw	r10, r24
    15a4:	60 91 fb 06 	lds	r22, 0x06FB	; 0x8006fb <Scroll+0x1>
    15a8:	06 2e       	mov	r0, r22
    15aa:	00 0c       	add	r0, r0
    15ac:	77 0b       	sbc	r23, r23
    15ae:	88 0b       	sbc	r24, r24
    15b0:	99 0b       	sbc	r25, r25
    15b2:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    15b6:	a3 01       	movw	r20, r6
    15b8:	92 01       	movw	r18, r4
    15ba:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    15be:	9b 01       	movw	r18, r22
    15c0:	ac 01       	movw	r20, r24
    15c2:	c5 01       	movw	r24, r10
    15c4:	b4 01       	movw	r22, r8
    15c6:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    15ca:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    15ce:	4b 01       	movw	r8, r22
    15d0:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    15d2:	69 30       	cpi	r22, 0x09	; 9
    15d4:	71 05       	cpc	r23, r1
    15d6:	0c f4       	brge	.+2      	; 0x15da <MenuStyle0+0xca>
    15d8:	d6 c0       	rjmp	.+428    	; 0x1786 <MenuStyle0+0x276>
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
		if(i == currentChoice[currentPage]){
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
    15da:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <currentFrame>
    15de:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <currentFrame+0x1>
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	00 24       	eor	r0, r0
    15e8:	36 95       	lsr	r19
    15ea:	27 95       	ror	r18
    15ec:	07 94       	ror	r0
    15ee:	36 95       	lsr	r19
    15f0:	27 95       	ror	r18
    15f2:	07 94       	ror	r0
    15f4:	32 2f       	mov	r19, r18
    15f6:	20 2d       	mov	r18, r0
    15f8:	ab ea       	ldi	r26, 0xAB	; 171
    15fa:	ba ea       	ldi	r27, 0xAA	; 170
    15fc:	0e 94 82 20 	call	0x4104	; 0x4104 <__umulhisi3>
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	1c 01       	movw	r2, r24
    1606:	ef e3       	ldi	r30, 0x3F	; 63
    1608:	2e 0e       	add	r2, r30
    160a:	31 1c       	adc	r3, r1
			height = screenDiv - Margin;
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	50 e4       	ldi	r21, 0x40	; 64
    1614:	c3 01       	movw	r24, r6
    1616:	b2 01       	movw	r22, r4
    1618:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <__subsf3>
    161c:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    1620:	56 2e       	mov	r5, r22
    1622:	47 2e       	mov	r4, r23
			
			x = (screenWidth/2) - width / 2;
    1624:	31 01       	movw	r6, r2
    1626:	33 20       	and	r3, r3
    1628:	1c f4       	brge	.+6      	; 0x1630 <MenuStyle0+0x120>
    162a:	ff ef       	ldi	r31, 0xFF	; 255
    162c:	6f 1a       	sub	r6, r31
    162e:	7f 0a       	sbc	r7, r31
    1630:	75 94       	asr	r7
    1632:	67 94       	ror	r6
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	86 e0       	ldi	r24, 0x06	; 6
    1638:	97 e0       	ldi	r25, 0x07	; 7
    163a:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    163e:	20 e4       	ldi	r18, 0x40	; 64
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	26 19       	sub	r18, r6
    1644:	37 09       	sbc	r19, r7
    1646:	3a 83       	std	Y+2, r19	; 0x02
    1648:	29 83       	std	Y+1, r18	; 0x01
    164a:	0f 2e       	mov	r0, r31
    164c:	f3 e0       	ldi	r31, 0x03	; 3
    164e:	ef 2e       	mov	r14, r31
    1650:	f0 2d       	mov	r31, r0
    1652:	05 2d       	mov	r16, r5
    1654:	22 2d       	mov	r18, r2
    1656:	48 2d       	mov	r20, r8
    1658:	69 81       	ldd	r22, Y+1	; 0x01
    165a:	86 e0       	ldi	r24, 0x06	; 6
    165c:	97 e0       	ldi	r25, 0x07	; 7
    165e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	86 e0       	ldi	r24, 0x06	; 6
    1666:	97 e0       	ldi	r25, 0x07	; 7
    1668:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2 , y+(height/2)+3, menuStrings[i]);
    166c:	45 2d       	mov	r20, r5
    166e:	54 2d       	mov	r21, r4
    1670:	55 23       	and	r21, r21
    1672:	14 f4       	brge	.+4      	; 0x1678 <MenuStyle0+0x168>
    1674:	4f 5f       	subi	r20, 0xFF	; 255
    1676:	5f 4f       	sbci	r21, 0xFF	; 255
    1678:	55 95       	asr	r21
    167a:	47 95       	ror	r20
    167c:	4d 5f       	subi	r20, 0xFD	; 253
    167e:	74 2e       	mov	r7, r20
    1680:	78 0c       	add	r7, r8
    1682:	39 81       	ldd	r19, Y+1	; 0x01
    1684:	63 0e       	add	r6, r19
    1686:	f6 01       	movw	r30, r12
    1688:	40 80       	ld	r4, Z
    168a:	51 80       	ldd	r5, Z+1	; 0x01
    168c:	b2 01       	movw	r22, r4
    168e:	86 e0       	ldi	r24, 0x06	; 6
    1690:	97 e0       	ldi	r25, 0x07	; 7
    1692:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1696:	86 95       	lsr	r24
    1698:	66 2d       	mov	r22, r6
    169a:	68 1b       	sub	r22, r24
    169c:	92 01       	movw	r18, r4
    169e:	47 2d       	mov	r20, r7
    16a0:	86 e0       	ldi	r24, 0x06	; 6
    16a2:	97 e0       	ldi	r25, 0x07	; 7
    16a4:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
    16a8:	6e c0       	rjmp	.+220    	; 0x1786 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    16aa:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    16ae:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    16b2:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    16b6:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	b9 01       	movw	r22, r18
    16c0:	33 0f       	add	r19, r19
    16c2:	88 0b       	sbc	r24, r24
    16c4:	99 0b       	sbc	r25, r25
    16c6:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    16ca:	a3 01       	movw	r20, r6
    16cc:	92 01       	movw	r18, r4
    16ce:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e1       	ldi	r20, 0x10	; 16
    16d8:	51 e4       	ldi	r21, 0x41	; 65
    16da:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    16de:	4b 01       	movw	r8, r22
    16e0:	5c 01       	movw	r10, r24
    16e2:	60 91 fb 06 	lds	r22, 0x06FB	; 0x8006fb <Scroll+0x1>
    16e6:	06 2e       	mov	r0, r22
    16e8:	00 0c       	add	r0, r0
    16ea:	77 0b       	sbc	r23, r23
    16ec:	88 0b       	sbc	r24, r24
    16ee:	99 0b       	sbc	r25, r25
    16f0:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    16f4:	a3 01       	movw	r20, r6
    16f6:	92 01       	movw	r18, r4
    16f8:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    16fc:	9b 01       	movw	r18, r22
    16fe:	ac 01       	movw	r20, r24
    1700:	c5 01       	movw	r24, r10
    1702:	b4 01       	movw	r22, r8
    1704:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    1708:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    170c:	4b 01       	movw	r8, r22
    170e:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    1710:	69 30       	cpi	r22, 0x09	; 9
    1712:	71 05       	cpc	r23, r1
    1714:	c4 f1       	brlt	.+112    	; 0x1786 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e4       	ldi	r21, 0x40	; 64
    171e:	c3 01       	movw	r24, r6
    1720:	b2 01       	movw	r22, r4
    1722:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <__subsf3>
    1726:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    172a:	76 2e       	mov	r7, r22
    172c:	67 2e       	mov	r6, r23
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				//u8g2_SetDefaultForegroundColor(&u8g2);
				u8g2_SetDrawColor(&u8g2, 1);
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	86 e0       	ldi	r24, 0x06	; 6
    1732:	97 e0       	ldi	r25, 0x07	; 7
    1734:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    1738:	0f 2e       	mov	r0, r31
    173a:	f3 e0       	ldi	r31, 0x03	; 3
    173c:	ef 2e       	mov	r14, r31
    173e:	f0 2d       	mov	r31, r0
    1740:	07 2d       	mov	r16, r7
    1742:	20 e4       	ldi	r18, 0x40	; 64
    1744:	48 2d       	mov	r20, r8
    1746:	60 e2       	ldi	r22, 0x20	; 32
    1748:	86 e0       	ldi	r24, 0x06	; 6
    174a:	97 e0       	ldi	r25, 0x07	; 7
    174c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+(height/2)+3, menuStrings[i]);
    1750:	87 2d       	mov	r24, r7
    1752:	96 2d       	mov	r25, r6
    1754:	99 23       	and	r25, r25
    1756:	0c f4       	brge	.+2      	; 0x175a <MenuStyle0+0x24a>
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	95 95       	asr	r25
    175c:	87 95       	ror	r24
    175e:	8d 5f       	subi	r24, 0xFD	; 253
    1760:	78 2e       	mov	r7, r24
    1762:	78 0c       	add	r7, r8
    1764:	f6 01       	movw	r30, r12
    1766:	40 80       	ld	r4, Z
    1768:	51 80       	ldd	r5, Z+1	; 0x01
    176a:	b2 01       	movw	r22, r4
    176c:	86 e0       	ldi	r24, 0x06	; 6
    176e:	97 e0       	ldi	r25, 0x07	; 7
    1770:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1774:	86 95       	lsr	r24
    1776:	60 e4       	ldi	r22, 0x40	; 64
    1778:	68 1b       	sub	r22, r24
    177a:	92 01       	movw	r18, r4
    177c:	47 2d       	mov	r20, r7
    177e:	86 e0       	ldi	r24, 0x06	; 6
    1780:	97 e0       	ldi	r25, 0x07	; 7
    1782:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	3c 83       	std	Y+4, r19	; 0x04
    1790:	2b 83       	std	Y+3, r18	; 0x03
    1792:	32 e0       	ldi	r19, 0x02	; 2
    1794:	c3 0e       	add	r12, r19
    1796:	d1 1c       	adc	r13, r1
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	05 97       	sbiw	r24, 0x05	; 5
    179e:	09 f0       	breq	.+2      	; 0x17a2 <MenuStyle0+0x292>
    17a0:	d6 ce       	rjmp	.-596    	; 0x154e <MenuStyle0+0x3e>
			}
		}
	}
	
	//stop drawing when the animation is done
	if (currentFrame++ >= framesNum)
    17a2:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <currentFrame>
    17a6:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <currentFrame+0x1>
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	91 05       	cpc	r25, r1
    17ae:	30 f4       	brcc	.+12     	; 0x17bc <MenuStyle0+0x2ac>
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <currentFrame+0x1>
    17b6:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <currentFrame>
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <MenuStyle0+0x2b8>
	{
		currentFrame = 0;
    17bc:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <currentFrame+0x1>
    17c0:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <currentFrame>
		reDrawRequired = 0;
    17c4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
	}
	

}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	0f 91       	pop	r16
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	bf 90       	pop	r11
    17de:	af 90       	pop	r10
    17e0:	9f 90       	pop	r9
    17e2:	8f 90       	pop	r8
    17e4:	7f 90       	pop	r7
    17e6:	6f 90       	pop	r6
    17e8:	5f 90       	pop	r5
    17ea:	4f 90       	pop	r4
    17ec:	3f 90       	pop	r3
    17ee:	2f 90       	pop	r2
    17f0:	08 95       	ret

000017f2 <MenuStyle1>:

void MenuStyle1(void){
    17f2:	2f 92       	push	r2
    17f4:	3f 92       	push	r3
    17f6:	4f 92       	push	r4
    17f8:	5f 92       	push	r5
    17fa:	6f 92       	push	r6
    17fc:	7f 92       	push	r7
    17fe:	8f 92       	push	r8
    1800:	9f 92       	push	r9
    1802:	af 92       	push	r10
    1804:	bf 92       	push	r11
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	00 d0       	rcall	.+0      	; 0x1816 <MenuStyle1+0x24>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <MenuStyle1+0x26>
    1818:	00 d0       	rcall	.+0      	; 0x181a <MenuStyle1+0x28>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <selectEnable>
	int width = screenWidth;
	int height = screenDiv;
    1824:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    1828:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    182c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    1830:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    1834:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
	
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
    1838:	4b 01       	movw	r8, r22
    183a:	77 23       	and	r23, r23
    183c:	1c f4       	brge	.+6      	; 0x1844 <MenuStyle1+0x52>
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	82 1a       	sub	r8, r18
    1842:	92 0a       	sbc	r9, r18
    1844:	95 94       	asr	r9
    1846:	87 94       	ror	r8
    1848:	33 e0       	ldi	r19, 0x03	; 3
    184a:	83 0e       	add	r8, r19
    184c:	91 1c       	adc	r9, r1
	height = height - Margin;
    184e:	1b 01       	movw	r2, r22
    1850:	e2 e0       	ldi	r30, 0x02	; 2
    1852:	2e 1a       	sub	r2, r30
    1854:	31 08       	sbc	r3, r1
    1856:	0f 2e       	mov	r0, r31
    1858:	f5 e2       	ldi	r31, 0x25	; 37
    185a:	cf 2e       	mov	r12, r31
    185c:	f1 e0       	ldi	r31, 0x01	; 1
    185e:	df 2e       	mov	r13, r31
    1860:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1862:	1e 82       	std	Y+6, r1	; 0x06
    1864:	1d 82       	std	Y+5, r1	; 0x05
				u8g2_SetDrawColor(&u8g2, 0);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1866:	0f 2e       	mov	r0, r31
    1868:	fa ef       	ldi	r31, 0xFA	; 250
    186a:	af 2e       	mov	r10, r31
    186c:	f6 e0       	ldi	r31, 0x06	; 6
    186e:	bf 2e       	mov	r11, r31
    1870:	f0 2d       	mov	r31, r0
			}*/
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1872:	10 e4       	ldi	r17, 0x40	; 64
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
		if(currentChoice[currentPage] == i){
    1874:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <currentPage>
    1878:	0e 2e       	mov	r0, r30
    187a:	00 0c       	add	r0, r0
    187c:	ff 0b       	sbc	r31, r31
    187e:	eb 51       	subi	r30, 0x1B	; 27
    1880:	f9 4f       	sbci	r31, 0xF9	; 249
    1882:	80 81       	ld	r24, Z
    1884:	08 2e       	mov	r0, r24
    1886:	00 0c       	add	r0, r0
    1888:	99 0b       	sbc	r25, r25
    188a:	2d 81       	ldd	r18, Y+5	; 0x05
    188c:	3e 81       	ldd	r19, Y+6	; 0x06
    188e:	82 17       	cp	r24, r18
    1890:	93 07       	cpc	r25, r19
    1892:	09 f0       	breq	.+2      	; 0x1896 <MenuStyle1+0xa4>
    1894:	62 c0       	rjmp	.+196    	; 0x195a <MenuStyle1+0x168>
			//x and the y of the boxes
			//width = screenWidth;
			//height = screenDiv - Margin;
			
			// 				x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1896:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    189a:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    189e:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    18a2:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    18a6:	b9 01       	movw	r22, r18
    18a8:	33 0f       	add	r19, r19
    18aa:	88 0b       	sbc	r24, r24
    18ac:	99 0b       	sbc	r25, r25
    18ae:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    18b2:	a3 01       	movw	r20, r6
    18b4:	92 01       	movw	r18, r4
    18b6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e1       	ldi	r20, 0x10	; 16
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    18c6:	69 83       	std	Y+1, r22	; 0x01
    18c8:	7a 83       	std	Y+2, r23	; 0x02
    18ca:	8b 83       	std	Y+3, r24	; 0x03
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	f5 01       	movw	r30, r10
    18d0:	61 81       	ldd	r22, Z+1	; 0x01
    18d2:	06 2e       	mov	r0, r22
    18d4:	00 0c       	add	r0, r0
    18d6:	77 0b       	sbc	r23, r23
    18d8:	88 0b       	sbc	r24, r24
    18da:	99 0b       	sbc	r25, r25
    18dc:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    18e0:	a3 01       	movw	r20, r6
    18e2:	92 01       	movw	r18, r4
    18e4:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    18e8:	9b 01       	movw	r18, r22
    18ea:	ac 01       	movw	r20, r24
    18ec:	69 81       	ldd	r22, Y+1	; 0x01
    18ee:	7a 81       	ldd	r23, Y+2	; 0x02
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    18f8:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    18fc:	2b 01       	movw	r4, r22
    18fe:	3c 01       	movw	r6, r24
			/*	if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			
			if (y >= TopMargin)
    1900:	69 30       	cpi	r22, 0x09	; 9
    1902:	71 05       	cpc	r23, r1
    1904:	0c f4       	brge	.+2      	; 0x1908 <MenuStyle1+0x116>
    1906:	86 c0       	rjmp	.+268    	; 0x1a14 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	86 e0       	ldi	r24, 0x06	; 6
    190c:	97 e0       	ldi	r25, 0x07	; 7
    190e:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    1912:	0f 2e       	mov	r0, r31
    1914:	f3 e0       	ldi	r31, 0x03	; 3
    1916:	ef 2e       	mov	r14, r31
    1918:	f0 2d       	mov	r31, r0
    191a:	02 2d       	mov	r16, r2
    191c:	20 e8       	ldi	r18, 0x80	; 128
    191e:	44 2d       	mov	r20, r4
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	86 e0       	ldi	r24, 0x06	; 6
    1924:	97 e0       	ldi	r25, 0x07	; 7
    1926:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	97 e0       	ldi	r25, 0x07	; 7
    1930:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1934:	48 0c       	add	r4, r8
    1936:	f6 01       	movw	r30, r12
    1938:	60 80       	ld	r6, Z
    193a:	71 80       	ldd	r7, Z+1	; 0x01
    193c:	b3 01       	movw	r22, r6
    193e:	86 e0       	ldi	r24, 0x06	; 6
    1940:	97 e0       	ldi	r25, 0x07	; 7
    1942:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1946:	86 95       	lsr	r24
    1948:	61 2f       	mov	r22, r17
    194a:	68 1b       	sub	r22, r24
    194c:	93 01       	movw	r18, r6
    194e:	44 2d       	mov	r20, r4
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
    1958:	5d c0       	rjmp	.+186    	; 0x1a14 <MenuStyle1+0x222>
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    195a:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    195e:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1962:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1966:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    196a:	2d 81       	ldd	r18, Y+5	; 0x05
    196c:	3e 81       	ldd	r19, Y+6	; 0x06
    196e:	b9 01       	movw	r22, r18
    1970:	33 0f       	add	r19, r19
    1972:	88 0b       	sbc	r24, r24
    1974:	99 0b       	sbc	r25, r25
    1976:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    197a:	a3 01       	movw	r20, r6
    197c:	92 01       	movw	r18, r4
    197e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e1       	ldi	r20, 0x10	; 16
    1988:	51 e4       	ldi	r21, 0x41	; 65
    198a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    198e:	69 83       	std	Y+1, r22	; 0x01
    1990:	7a 83       	std	Y+2, r23	; 0x02
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	f5 01       	movw	r30, r10
    1998:	61 81       	ldd	r22, Z+1	; 0x01
    199a:	06 2e       	mov	r0, r22
    199c:	00 0c       	add	r0, r0
    199e:	77 0b       	sbc	r23, r23
    19a0:	88 0b       	sbc	r24, r24
    19a2:	99 0b       	sbc	r25, r25
    19a4:	0e 94 67 1f 	call	0x3ece	; 0x3ece <__floatsisf>
    19a8:	a3 01       	movw	r20, r6
    19aa:	92 01       	movw	r18, r4
    19ac:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsf3>
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	69 81       	ldd	r22, Y+1	; 0x01
    19b6:	7a 81       	ldd	r23, Y+2	; 0x02
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__addsf3>
    19c0:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    19c4:	2b 01       	movw	r4, r22
    19c6:	3c 01       	movw	r6, r24
			/*
			if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			if (y >= TopMargin)
    19c8:	69 30       	cpi	r22, 0x09	; 9
    19ca:	71 05       	cpc	r23, r1
    19cc:	1c f1       	brlt	.+70     	; 0x1a14 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	86 e0       	ldi	r24, 0x06	; 6
    19d2:	97 e0       	ldi	r25, 0x07	; 7
    19d4:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    19d8:	0f 2e       	mov	r0, r31
    19da:	f3 e0       	ldi	r31, 0x03	; 3
    19dc:	ef 2e       	mov	r14, r31
    19de:	f0 2d       	mov	r31, r0
    19e0:	02 2d       	mov	r16, r2
    19e2:	20 e8       	ldi	r18, 0x80	; 128
    19e4:	44 2d       	mov	r20, r4
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	86 e0       	ldi	r24, 0x06	; 6
    19ea:	97 e0       	ldi	r25, 0x07	; 7
    19ec:	0e 94 50 12 	call	0x24a0	; 0x24a0 <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    19f0:	48 0c       	add	r4, r8
    19f2:	f6 01       	movw	r30, r12
    19f4:	60 80       	ld	r6, Z
    19f6:	71 80       	ldd	r7, Z+1	; 0x01
    19f8:	b3 01       	movw	r22, r6
    19fa:	86 e0       	ldi	r24, 0x06	; 6
    19fc:	97 e0       	ldi	r25, 0x07	; 7
    19fe:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1a02:	86 95       	lsr	r24
    1a04:	61 2f       	mov	r22, r17
    1a06:	68 1b       	sub	r22, r24
    1a08:	93 01       	movw	r18, r6
    1a0a:	44 2d       	mov	r20, r4
    1a0c:	86 e0       	ldi	r24, 0x06	; 6
    1a0e:	97 e0       	ldi	r25, 0x07	; 7
    1a10:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1a14:	2d 81       	ldd	r18, Y+5	; 0x05
    1a16:	3e 81       	ldd	r19, Y+6	; 0x06
    1a18:	2f 5f       	subi	r18, 0xFF	; 255
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	3e 83       	std	Y+6, r19	; 0x06
    1a1e:	2d 83       	std	Y+5, r18	; 0x05
    1a20:	32 e0       	ldi	r19, 0x02	; 2
    1a22:	c3 0e       	add	r12, r19
    1a24:	d1 1c       	adc	r13, r1
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	05 97       	sbiw	r24, 0x05	; 5
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <MenuStyle1+0x23e>
    1a2e:	22 cf       	rjmp	.-444    	; 0x1874 <MenuStyle1+0x82>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
		}
	}
	reDrawRequired = 0;
    1a30:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    1a34:	26 96       	adiw	r28, 0x06	; 6
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	bf 90       	pop	r11
    1a50:	af 90       	pop	r10
    1a52:	9f 90       	pop	r9
    1a54:	8f 90       	pop	r8
    1a56:	7f 90       	pop	r7
    1a58:	6f 90       	pop	r6
    1a5a:	5f 90       	pop	r5
    1a5c:	4f 90       	pop	r4
    1a5e:	3f 90       	pop	r3
    1a60:	2f 90       	pop	r2
    1a62:	08 95       	ret

00001a64 <StartPage>:

void StartPage(void){
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	28 97       	sbiw	r28, 0x08	; 8
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <selectEnable>
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
    1a84:	88 e0       	ldi	r24, 0x08	; 8
    1a86:	ee e2       	ldi	r30, 0x2E	; 46
    1a88:	f1 e0       	ldi	r31, 0x01	; 1
    1a8a:	de 01       	movw	r26, r28
    1a8c:	11 96       	adiw	r26, 0x01	; 1
    1a8e:	01 90       	ld	r0, Z+
    1a90:	0d 92       	st	X+, r0
    1a92:	8a 95       	dec	r24
    1a94:	e1 f7       	brne	.-8      	; 0x1a8e <StartPage+0x2a>
    1a96:	ce 01       	movw	r24, r28
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	7c 01       	movw	r14, r24
    1a9c:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i = 0; i < lineNum; i++)
	{
		u8g2_DrawStr(&u8g2, 0, textHeight * (i + 1), text[i]);
    1a9e:	f7 01       	movw	r30, r14
    1aa0:	21 91       	ld	r18, Z+
    1aa2:	31 91       	ld	r19, Z+
    1aa4:	7f 01       	movw	r14, r30
    1aa6:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1aaa:	14 9f       	mul	r17, r20
    1aac:	40 2d       	mov	r20, r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	86 e0       	ldi	r24, 0x06	; 6
    1ab4:	97 e0       	ldi	r25, 0x07	; 7
    1ab6:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
    1aba:	1f 5f       	subi	r17, 0xFF	; 255
void StartPage(void){
	selectEnable = 1;
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
	
	for (int i = 0; i < lineNum; i++)
    1abc:	15 30       	cpi	r17, 0x05	; 5
    1abe:	79 f7       	brne	.-34     	; 0x1a9e <StartPage+0x3a>
	char *text2[2] = {
		"Press \"Select\"",
		" to continue!"
	};
	
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[0]) / 2, realScreenHeight-textHeight, text2[0]);
    1ac0:	10 e4       	ldi	r17, 0x40	; 64
    1ac2:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <textHeight>
    1ac6:	f1 2e       	mov	r15, r17
    1ac8:	f8 1a       	sub	r15, r24
    1aca:	66 e3       	ldi	r22, 0x36	; 54
    1acc:	71 e0       	ldi	r23, 0x01	; 1
    1ace:	86 e0       	ldi	r24, 0x06	; 6
    1ad0:	97 e0       	ldi	r25, 0x07	; 7
    1ad2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1ad6:	86 95       	lsr	r24
    1ad8:	61 2f       	mov	r22, r17
    1ada:	68 1b       	sub	r22, r24
    1adc:	26 e3       	ldi	r18, 0x36	; 54
    1ade:	31 e0       	ldi	r19, 0x01	; 1
    1ae0:	4f 2d       	mov	r20, r15
    1ae2:	86 e0       	ldi	r24, 0x06	; 6
    1ae4:	97 e0       	ldi	r25, 0x07	; 7
    1ae6:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[1]) / 2, realScreenHeight, text2[1]);
    1aea:	65 e4       	ldi	r22, 0x45	; 69
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	86 e0       	ldi	r24, 0x06	; 6
    1af0:	97 e0       	ldi	r25, 0x07	; 7
    1af2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1af6:	86 95       	lsr	r24
    1af8:	61 2f       	mov	r22, r17
    1afa:	68 1b       	sub	r22, r24
    1afc:	25 e4       	ldi	r18, 0x45	; 69
    1afe:	31 e0       	ldi	r19, 0x01	; 1
    1b00:	40 e4       	ldi	r20, 0x40	; 64
    1b02:	86 e0       	ldi	r24, 0x06	; 6
    1b04:	97 e0       	ldi	r25, 0x07	; 7
    1b06:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	reDrawRequired = 0;
    1b0a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    1b0e:	28 96       	adiw	r28, 0x08	; 8
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	08 95       	ret

00001b26 <nopage>:

void nopage(void){
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, "No content yet!");
    1b26:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1b2a:	47 5f       	subi	r20, 0xF7	; 247
    1b2c:	27 e9       	ldi	r18, 0x97	; 151
    1b2e:	31 e0       	ldi	r19, 0x01	; 1
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	86 e0       	ldi	r24, 0x06	; 6
    1b34:	97 e0       	ldi	r25, 0x07	; 7
    1b36:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	selectEnable = 0;
    1b3a:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <selectEnable>
	reDrawRequired = 0;
    1b3e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    1b42:	08 95       	ret

00001b44 <ScreenOverlay>:
}


void ScreenOverlay(void){
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	28 97       	sbiw	r28, 0x08	; 8
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
	int y2 = height2/2;
	
	int width3 = width1/3 - 2;
	int height3 = height1 - 4;
	
	u8g2_DrawFrame(&u8g2, x1, y1, width1, height1);
    1b60:	08 e0       	ldi	r16, 0x08	; 8
    1b62:	2f e0       	ldi	r18, 0x0F	; 15
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	69 e3       	ldi	r22, 0x39	; 57
    1b68:	86 e0       	ldi	r24, 0x06	; 6
    1b6a:	97 e0       	ldi	r25, 0x07	; 7
    1b6c:	0e 94 9a 11 	call	0x2334	; 0x2334 <u8g2_DrawFrame>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
    1b70:	04 e0       	ldi	r16, 0x04	; 4
    1b72:	23 e0       	ldi	r18, 0x03	; 3
    1b74:	42 e0       	ldi	r20, 0x02	; 2
    1b76:	67 e4       	ldi	r22, 0x47	; 71
    1b78:	86 e0       	ldi	r24, 0x06	; 6
    1b7a:	97 e0       	ldi	r25, 0x07	; 7
    1b7c:	0e 94 9a 11 	call	0x2334	; 0x2334 <u8g2_DrawFrame>
	
	unsigned int ADCval = updateBatterySens();
    1b80:	0e 94 10 09 	call	0x1220	; 0x1220 <updateBatterySens>
	if (ADCval<=256){
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	92 07       	cpc	r25, r18
    1b8a:	68 f4       	brcc	.+26     	; 0x1ba6 <ScreenOverlay+0x62>
		batteryBars = 0;
    1b8c:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <batteryBars+0x1>
    1b90:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <batteryBars>
    1b94:	3d c0       	rjmp	.+122    	; 0x1c10 <ScreenOverlay+0xcc>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    1b96:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <batteryBars>
    1b9a:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <batteryBars+0x1>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	19 06       	cpc	r1, r25
    1ba2:	04 f1       	brlt	.+64     	; 0x1be4 <ScreenOverlay+0xa0>
    1ba4:	35 c0       	rjmp	.+106    	; 0x1c10 <ScreenOverlay+0xcc>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
	
	unsigned int ADCval = updateBatterySens();
	if (ADCval<=256){
		batteryBars = 0;
		}else if (ADCval <= 512){
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	22 e0       	ldi	r18, 0x02	; 2
    1baa:	92 07       	cpc	r25, r18
    1bac:	38 f4       	brcc	.+14     	; 0x1bbc <ScreenOverlay+0x78>
		batteryBars = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <batteryBars+0x1>
    1bb6:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <batteryBars>
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <ScreenOverlay+0xa0>
		}else if (ADCval <= 786){
    1bbc:	83 31       	cpi	r24, 0x13	; 19
    1bbe:	23 e0       	ldi	r18, 0x03	; 3
    1bc0:	92 07       	cpc	r25, r18
    1bc2:	38 f4       	brcc	.+14     	; 0x1bd2 <ScreenOverlay+0x8e>
		batteryBars = 2;
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <batteryBars+0x1>
    1bcc:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <batteryBars>
    1bd0:	09 c0       	rjmp	.+18     	; 0x1be4 <ScreenOverlay+0xa0>
		}else if (ADCval <= 1024){
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	94 40       	sbci	r25, 0x04	; 4
    1bd6:	f8 f6       	brcc	.-66     	; 0x1b96 <ScreenOverlay+0x52>
		batteryBars = 3;
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <batteryBars+0x1>
    1be0:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <batteryBars>
	selectEnable = 0;
	reDrawRequired = 0;
}


void ScreenOverlay(void){
    1be4:	1b e3       	ldi	r17, 0x3B	; 59
    1be6:	e1 2c       	mov	r14, r1
    1be8:	f1 2c       	mov	r15, r1
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
	{
		u8g2_DrawBox(&u8g2, x1 + 2 + (width3+1) * i, y1 + 2, width3, height3);
    1bea:	04 e0       	ldi	r16, 0x04	; 4
    1bec:	23 e0       	ldi	r18, 0x03	; 3
    1bee:	42 e0       	ldi	r20, 0x02	; 2
    1bf0:	61 2f       	mov	r22, r17
    1bf2:	86 e0       	ldi	r24, 0x06	; 6
    1bf4:	97 e0       	ldi	r25, 0x07	; 7
    1bf6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <u8g2_DrawBox>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	e8 1a       	sub	r14, r24
    1bfe:	f8 0a       	sbc	r15, r24
    1c00:	1c 5f       	subi	r17, 0xFC	; 252
    1c02:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <batteryBars>
    1c06:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <batteryBars+0x1>
    1c0a:	e8 16       	cp	r14, r24
    1c0c:	f9 06       	cpc	r15, r25
    1c0e:	6c f3       	brlt	.-38     	; 0x1bea <ScreenOverlay+0xa6>
	}
	
	
	
	//Mode:
	char modeTxt[7] = "Mode: ";
    1c10:	87 e0       	ldi	r24, 0x07	; 7
    1c12:	e7 ea       	ldi	r30, 0xA7	; 167
    1c14:	f1 e0       	ldi	r31, 0x01	; 1
    1c16:	de 01       	movw	r26, r28
    1c18:	11 96       	adiw	r26, 0x01	; 1
    1c1a:	01 90       	ld	r0, Z+
    1c1c:	0d 92       	st	X+, r0
    1c1e:	8a 95       	dec	r24
    1c20:	e1 f7       	brne	.-8      	; 0x1c1a <ScreenOverlay+0xd6>
	char modeTxthold[1];
	itoa(*(settingVal+0), modeTxthold, 10);
    1c22:	e0 91 f4 06 	lds	r30, 0x06F4	; 0x8006f4 <settingVal>
    1c26:	f0 91 f5 06 	lds	r31, 0x06F5	; 0x8006f5 <settingVal+0x1>
    1c2a:	4a e0       	ldi	r20, 0x0A	; 10
    1c2c:	be 01       	movw	r22, r28
    1c2e:	68 5f       	subi	r22, 0xF8	; 248
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
	strcat(modeTxt, modeTxthold);
    1c3a:	be 01       	movw	r22, r28
    1c3c:	68 5f       	subi	r22, 0xF8	; 248
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	0e 94 98 20 	call	0x4130	; 0x4130 <strcat>
	
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    1c48:	69 e4       	ldi	r22, 0x49	; 73
    1c4a:	78 e0       	ldi	r23, 0x08	; 8
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	97 e0       	ldi	r25, 0x07	; 7
    1c50:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, screenWidth - u8g2_GetStrWidth(&u8g2, modeTxt), textHeight-3, modeTxt);
    1c54:	10 91 6b 07 	lds	r17, 0x076B	; 0x80076b <textHeight>
    1c58:	13 50       	subi	r17, 0x03	; 3
    1c5a:	be 01       	movw	r22, r28
    1c5c:	6f 5f       	subi	r22, 0xFF	; 255
    1c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c60:	86 e0       	ldi	r24, 0x06	; 6
    1c62:	97 e0       	ldi	r25, 0x07	; 7
    1c64:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1c68:	60 e8       	ldi	r22, 0x80	; 128
    1c6a:	68 1b       	sub	r22, r24
    1c6c:	9e 01       	movw	r18, r28
    1c6e:	2f 5f       	subi	r18, 0xFF	; 255
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	41 2f       	mov	r20, r17
    1c74:	86 e0       	ldi	r24, 0x06	; 6
    1c76:	97 e0       	ldi	r25, 0x07	; 7
    1c78:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	
	
	//Time
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    1c7c:	69 e4       	ldi	r22, 0x49	; 73
    1c7e:	78 e0       	ldi	r23, 0x08	; 8
    1c80:	86 e0       	ldi	r24, 0x06	; 6
    1c82:	97 e0       	ldi	r25, 0x07	; 7
    1c84:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <u8g2_SetFont>
	static char timeTxt[7] = {0,0,0,0,0,0,0};
	getTimeToChar(timeTxt, 0);
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	8a ec       	ldi	r24, 0xCA	; 202
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	0e 94 8f 08 	call	0x111e	; 0x111e <getTimeToChar>
	
	u8g2_DrawStr(&u8g2, 0, textHeight-3, timeTxt);
    1c94:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1c98:	43 50       	subi	r20, 0x03	; 3
    1c9a:	2a ec       	ldi	r18, 0xCA	; 202
    1c9c:	32 e0       	ldi	r19, 0x02	; 2
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	86 e0       	ldi	r24, 0x06	; 6
    1ca2:	97 e0       	ldi	r25, 0x07	; 7
    1ca4:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	
	
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);//reset font to the main font.
    1ca8:	68 e6       	ldi	r22, 0x68	; 104
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	86 e0       	ldi	r24, 0x06	; 6
    1cae:	97 e0       	ldi	r25, 0x07	; 7
    1cb0:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <u8g2_SetFont>
}
    1cb4:	28 96       	adiw	r28, 0x08	; 8
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	08 95       	ret

00001cce <Page_2>:

void Page_2(void){
    1cce:	7f 92       	push	r7
    1cd0:	8f 92       	push	r8
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	a8 97       	sbiw	r28, 0x28	; 40
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
	#define Lines 4
	#define digAmount 8
	
	#define startLine_Data 3
	selectEnable = 0;
    1cf8:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <selectEnable>
		"Direction:> ",
		"Distance:> ",
		"runTime:> "
	};
	
	int maxPrefixWidth = u8g2_GetStrWidth(&u8g2, text2[1]);
    1cfc:	6e ea       	ldi	r22, 0xAE	; 174
    1cfe:	71 e0       	ldi	r23, 0x01	; 1
    1d00:	86 e0       	ldi	r24, 0x06	; 6
    1d02:	97 e0       	ldi	r25, 0x07	; 7
    1d04:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1d08:	78 2e       	mov	r7, r24
	//placeholders for the data
	char d1[digAmount];
	char d2[digAmount];
	char d3[digAmount];
	char d4[digAmount];
	char *Data[Lines] = { d1, d2, d3, d4};
    1d0a:	be 01       	movw	r22, r28
    1d0c:	6f 5f       	subi	r22, 0xFF	; 255
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	7a a3       	std	Y+34, r23	; 0x22
    1d12:	69 a3       	std	Y+33, r22	; 0x21
    1d14:	6e 01       	movw	r12, r28
    1d16:	89 e0       	ldi	r24, 0x09	; 9
    1d18:	c8 0e       	add	r12, r24
    1d1a:	d1 1c       	adc	r13, r1
    1d1c:	dc a2       	std	Y+36, r13	; 0x24
    1d1e:	cb a2       	std	Y+35, r12	; 0x23
    1d20:	7e 01       	movw	r14, r28
    1d22:	e1 e1       	ldi	r30, 0x11	; 17
    1d24:	ee 0e       	add	r14, r30
    1d26:	f1 1c       	adc	r15, r1
    1d28:	fe a2       	std	Y+38, r15	; 0x26
    1d2a:	ed a2       	std	Y+37, r14	; 0x25
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	07 5e       	subi	r16, 0xE7	; 231
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	18 a7       	std	Y+40, r17	; 0x28
    1d34:	0f a3       	std	Y+39, r16	; 0x27
		
	itoa(*speedHold, Data[0], 10);
    1d36:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <speedHold>
    1d3a:	f0 91 f7 06 	lds	r31, 0x06F7	; 0x8006f7 <speedHold+0x1>
    1d3e:	4a e0       	ldi	r20, 0x0A	; 10
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
	itoa(*directionHold, Data[1], 10);
    1d48:	e0 91 7a 07 	lds	r30, 0x077A	; 0x80077a <directionHold>
    1d4c:	f0 91 7b 07 	lds	r31, 0x077B	; 0x80077b <directionHold+0x1>
    1d50:	4a e0       	ldi	r20, 0x0A	; 10
    1d52:	b6 01       	movw	r22, r12
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
	itoa(*distanceHold, Data[2], 10);
    1d5c:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <distanceHold>
    1d60:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <distanceHold+0x1>
    1d64:	4a e0       	ldi	r20, 0x0A	; 10
    1d66:	b7 01       	movw	r22, r14
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
	
	//little bit of code to make a typical digital watch look for the time String
	getTimeToChar(Data[3], 1);
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	c8 01       	movw	r24, r16
    1d76:	0e 94 8f 08 	call	0x111e	; 0x111e <getTimeToChar>
	
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    1d7a:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <currentChoice+0x1>
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 0b       	sbc	r31, r31
    1d82:	eb 5d       	subi	r30, 0xDB	; 219
    1d84:	fe 4f       	sbci	r31, 0xFE	; 254
    1d86:	20 81       	ld	r18, Z
    1d88:	31 81       	ldd	r19, Z+1	; 0x01
    1d8a:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1d8e:	47 5f       	subi	r20, 0xF7	; 247
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	86 e0       	ldi	r24, 0x06	; 6
    1d94:	97 e0       	ldi	r25, 0x07	; 7
    1d96:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
    1d9a:	5e 01       	movw	r10, r28
    1d9c:	f1 e2       	ldi	r31, 0x21	; 33
    1d9e:	af 0e       	add	r10, r31
    1da0:	b1 1c       	adc	r11, r1
    1da2:	0f 2e       	mov	r0, r31
    1da4:	f1 e5       	ldi	r31, 0x51	; 81
    1da6:	cf 2e       	mov	r12, r31
    1da8:	f2 e0       	ldi	r31, 0x02	; 2
    1daa:	df 2e       	mov	r13, r31
    1dac:	f0 2d       	mov	r31, r0
    1dae:	0f 2e       	mov	r0, r31
    1db0:	f9 e4       	ldi	r31, 0x49	; 73
    1db2:	ef 2e       	mov	r14, r31
    1db4:	f2 e0       	ldi	r31, 0x02	; 2
    1db6:	ff 2e       	mov	r15, r31
    1db8:	f0 2d       	mov	r31, r0
    1dba:	13 e0       	ldi	r17, 0x03	; 3

	for (int i = 0; i < Lines; i++)
	{
		int dataWidth = u8g2_GetStrWidth(&u8g2, Data[i]);
    1dbc:	f5 01       	movw	r30, r10
    1dbe:	81 90       	ld	r8, Z+
    1dc0:	91 90       	ld	r9, Z+
    1dc2:	5f 01       	movw	r10, r30
    1dc4:	b4 01       	movw	r22, r8
    1dc6:	86 e0       	ldi	r24, 0x06	; 6
    1dc8:	97 e0       	ldi	r25, 0x07	; 7
    1dca:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    1dce:	08 2f       	mov	r16, r24
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
    1dd0:	f6 01       	movw	r30, r12
    1dd2:	21 91       	ld	r18, Z+
    1dd4:	31 91       	ld	r19, Z+
    1dd6:	6f 01       	movw	r12, r30
    1dd8:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1ddc:	14 9f       	mul	r17, r20
    1dde:	40 2d       	mov	r20, r0
    1de0:	11 24       	eor	r1, r1
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	86 e0       	ldi	r24, 0x06	; 6
    1de6:	97 e0       	ldi	r25, 0x07	; 7
    1de8:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
    1dec:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1df0:	14 9f       	mul	r17, r20
    1df2:	40 2d       	mov	r20, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	94 01       	movw	r18, r8
    1df8:	67 2d       	mov	r22, r7
    1dfa:	86 e0       	ldi	r24, 0x06	; 6
    1dfc:	97 e0       	ldi	r25, 0x07	; 7
    1dfe:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
    1e02:	f7 01       	movw	r30, r14
    1e04:	21 91       	ld	r18, Z+
    1e06:	31 91       	ld	r19, Z+
    1e08:	7f 01       	movw	r14, r30
    1e0a:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1e0e:	14 9f       	mul	r17, r20
    1e10:	40 2d       	mov	r20, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	60 91 e4 06 	lds	r22, 0x06E4	; 0x8006e4 <maxCharWidth>
    1e18:	66 95       	lsr	r22
    1e1a:	67 0d       	add	r22, r7
    1e1c:	60 0f       	add	r22, r16
    1e1e:	86 e0       	ldi	r24, 0x06	; 6
    1e20:	97 e0       	ldi	r25, 0x07	; 7
    1e22:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
    1e26:	1f 5f       	subi	r17, 0xFF	; 255
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);

	for (int i = 0; i < Lines; i++)
    1e28:	17 30       	cpi	r17, 0x07	; 7
    1e2a:	41 f6       	brne	.-112    	; 0x1dbc <Page_2+0xee>
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
	}
	
	reDrawRequired = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    1e32:	a8 96       	adiw	r28, 0x28	; 40
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	9f 90       	pop	r9
    1e54:	8f 90       	pop	r8
    1e56:	7f 90       	pop	r7
    1e58:	08 95       	ret

00001e5a <Page_3>:

void Page_3(void){
	selectEnable = 0;
    1e5a:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);//the titles needs to be the same as the titles of the choices in the menu
    1e5e:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <currentChoice+0x1>
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 0b       	sbc	r31, r31
    1e66:	eb 5d       	subi	r30, 0xDB	; 219
    1e68:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6a:	20 81       	ld	r18, Z
    1e6c:	31 81       	ldd	r19, Z+1	; 0x01
    1e6e:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1e72:	47 5f       	subi	r20, 0xF7	; 247
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	86 e0       	ldi	r24, 0x06	; 6
    1e78:	97 e0       	ldi	r25, 0x07	; 7
    1e7a:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
	reDrawRequired = 0;
    1e7e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    1e82:	08 95       	ret

00001e84 <Page_4>:
}

void Page_4(void){
	selectEnable = 0;
    1e84:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    1e88:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <currentChoice+0x1>
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 0b       	sbc	r31, r31
    1e90:	eb 5d       	subi	r30, 0xDB	; 219
    1e92:	fe 4f       	sbci	r31, 0xFE	; 254
    1e94:	20 81       	ld	r18, Z
    1e96:	31 81       	ldd	r19, Z+1	; 0x01
    1e98:	40 91 6b 07 	lds	r20, 0x076B	; 0x80076b <textHeight>
    1e9c:	47 5f       	subi	r20, 0xF7	; 247
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	86 e0       	ldi	r24, 0x06	; 6
    1ea2:	97 e0       	ldi	r25, 0x07	; 7
    1ea4:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>

	reDrawRequired = 0;
    1ea8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    1eac:	08 95       	ret

00001eae <Page_5>:
}

void Page_5(void){//settings
    1eae:	2f 92       	push	r2
    1eb0:	3f 92       	push	r3
    1eb2:	4f 92       	push	r4
    1eb4:	5f 92       	push	r5
    1eb6:	6f 92       	push	r6
    1eb8:	7f 92       	push	r7
    1eba:	8f 92       	push	r8
    1ebc:	9f 92       	push	r9
    1ebe:	af 92       	push	r10
    1ec0:	bf 92       	push	r11
    1ec2:	cf 92       	push	r12
    1ec4:	df 92       	push	r13
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <Page_5+0x26>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <Page_5+0x28>
    1ed6:	1f 92       	push	r1
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <selectEnable>
	#define selector "-> "
	

	int height = screenDiv;
	
	int x = selectorWidth;
    1ee2:	10 91 e4 06 	lds	r17, 0x06E4	; 0x8006e4 <maxCharWidth>
    1ee6:	81 2f       	mov	r24, r17
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 01       	movw	r18, r24
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	12 2f       	mov	r17, r18
    1ef2:	18 0f       	add	r17, r24
	int y;
	int yStat = (height/2)+3;
    1ef4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    1ef8:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    1efc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    1f00:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    1f04:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    1f08:	3b 01       	movw	r6, r22
    1f0a:	77 23       	and	r23, r23
    1f0c:	1c f4       	brge	.+6      	; 0x1f14 <Page_5+0x66>
    1f0e:	2f ef       	ldi	r18, 0xFF	; 255
    1f10:	62 1a       	sub	r6, r18
    1f12:	72 0a       	sbc	r7, r18
    1f14:	75 94       	asr	r7
    1f16:	67 94       	ror	r6
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	68 0e       	add	r6, r24
    1f1c:	71 1c       	adc	r7, r1
	height = height - Margin;
	_Bool highlightChoice = 0;
	
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
    1f1e:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <currentPage>
    1f22:	8a ef       	ldi	r24, 0xFA	; 250
    1f24:	8e 0f       	add	r24, r30
    1f26:	85 30       	cpi	r24, 0x05	; 5
    1f28:	30 f5       	brcc	.+76     	; 0x1f76 <Page_5+0xc8>
		selectEnable = 0;
    1f2a:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <selectEnable>
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
    1f2e:	a0 91 ea 06 	lds	r26, 0x06EA	; 0x8006ea <currentChoice+0x5>
    1f32:	aa 0f       	add	r26, r26
    1f34:	bb 0b       	sbc	r27, r27
    1f36:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <settingVal>
    1f3a:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <settingVal+0x1>
    1f3e:	a8 0f       	add	r26, r24
    1f40:	b9 1f       	adc	r27, r25
    1f42:	0e 2e       	mov	r0, r30
    1f44:	00 0c       	add	r0, r0
    1f46:	ff 0b       	sbc	r31, r31
    1f48:	eb 51       	subi	r30, 0x1B	; 27
    1f4a:	f9 4f       	sbci	r31, 0xF9	; 249
    1f4c:	20 81       	ld	r18, Z
    1f4e:	8d 91       	ld	r24, X+
    1f50:	9c 91       	ld	r25, X
    1f52:	11 97       	sbiw	r26, 0x01	; 1
    1f54:	82 1b       	sub	r24, r18
    1f56:	91 09       	sbc	r25, r1
    1f58:	27 fd       	sbrc	r18, 7
    1f5a:	93 95       	inc	r25
    1f5c:	8d 93       	st	X+, r24
    1f5e:	9c 93       	st	X, r25
		currentChoice[currentPage] = 0;
    1f60:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <currentPage>
    1f64:	0e 2e       	mov	r0, r30
    1f66:	00 0c       	add	r0, r0
    1f68:	ff 0b       	sbc	r31, r31
    1f6a:	eb 51       	subi	r30, 0x1B	; 27
    1f6c:	f9 4f       	sbci	r31, 0xF9	; 249
    1f6e:	10 82       	st	Z, r1
		highlightChoice = 1;
    1f70:	e1 e0       	ldi	r30, 0x01	; 1
    1f72:	ed 83       	std	Y+5, r30	; 0x05
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <Page_5+0xca>
	
	int x = selectorWidth;
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	_Bool highlightChoice = 0;
    1f76:	1d 82       	std	Y+5, r1	; 0x05
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	fb e1       	ldi	r31, 0x1B	; 27
    1f7c:	af 2e       	mov	r10, r31
    1f7e:	f1 e0       	ldi	r31, 0x01	; 1
    1f80:	bf 2e       	mov	r11, r31
    1f82:	f0 2d       	mov	r31, r0
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
		selectEnable = 0;
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
    1f84:	81 2c       	mov	r8, r1
    1f86:	91 2c       	mov	r9, r1
	}
	
	for (int i = 0; i < settings; i++){
    1f88:	c1 2c       	mov	r12, r1
    1f8a:	d1 2c       	mov	r13, r1
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;

		if(currentChoice[5] == i){
    1f8c:	0f 2e       	mov	r0, r31
    1f8e:	f5 ee       	ldi	r31, 0xE5	; 229
    1f90:	4f 2e       	mov	r4, r31
    1f92:	f6 e0       	ldi	r31, 0x06	; 6
    1f94:	5f 2e       	mov	r5, r31
    1f96:	f0 2d       	mov	r31, r0
			u8g2_SetDrawColor(&u8g2, 1);
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
			if(highlightChoice){
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    1f98:	0f 2e       	mov	r0, r31
    1f9a:	fe ef       	ldi	r31, 0xFE	; 254
    1f9c:	3f 2e       	mov	r3, r31
    1f9e:	f0 2d       	mov	r31, r0
    1fa0:	31 0e       	add	r3, r17
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;
    1fa2:	20 91 6b 07 	lds	r18, 0x076B	; 0x80076b <textHeight>
    1fa6:	2c 9d       	mul	r18, r12
    1fa8:	c0 01       	movw	r24, r0
    1faa:	2d 9d       	mul	r18, r13
    1fac:	90 0d       	add	r25, r0
    1fae:	11 24       	eor	r1, r1
    1fb0:	7c 01       	movw	r14, r24
    1fb2:	f9 e0       	ldi	r31, 0x09	; 9
    1fb4:	ef 0e       	add	r14, r31
    1fb6:	f1 1c       	adc	r15, r1

		if(currentChoice[5] == i){
    1fb8:	f2 01       	movw	r30, r4
    1fba:	85 81       	ldd	r24, Z+5	; 0x05
    1fbc:	08 2e       	mov	r0, r24
    1fbe:	00 0c       	add	r0, r0
    1fc0:	99 0b       	sbc	r25, r25
    1fc2:	8c 15       	cp	r24, r12
    1fc4:	9d 05       	cpc	r25, r13
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <Page_5+0x11c>
    1fc8:	6c c0       	rjmp	.+216    	; 0x20a2 <Page_5+0x1f4>
			
			u8g2_SetDrawColor(&u8g2, 1);
    1fca:	61 e0       	ldi	r22, 0x01	; 1
    1fcc:	86 e0       	ldi	r24, 0x06	; 6
    1fce:	97 e0       	ldi	r25, 0x07	; 7
    1fd0:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
    1fd4:	2e 2c       	mov	r2, r14
    1fd6:	26 0c       	add	r2, r6
    1fd8:	2b eb       	ldi	r18, 0xBB	; 187
    1fda:	31 e0       	ldi	r19, 0x01	; 1
    1fdc:	42 2d       	mov	r20, r2
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	86 e0       	ldi	r24, 0x06	; 6
    1fe2:	97 e0       	ldi	r25, 0x07	; 7
    1fe4:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
			if(highlightChoice){
    1fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fea:	ff 23       	and	r31, r31
    1fec:	89 f1       	breq	.+98     	; 0x2050 <Page_5+0x1a2>
				u8g2_SetDrawColor(&u8g2, 1);
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	86 e0       	ldi	r24, 0x06	; 6
    1ff2:	97 e0       	ldi	r25, 0x07	; 7
    1ff4:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    1ff8:	00 91 6b 07 	lds	r16, 0x076B	; 0x80076b <textHeight>
    1ffc:	0f 5f       	subi	r16, 0xFF	; 255
    1ffe:	f5 01       	movw	r30, r10
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	86 e0       	ldi	r24, 0x06	; 6
    2006:	97 e0       	ldi	r25, 0x07	; 7
    2008:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    200c:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <textHeight>
    2010:	42 2d       	mov	r20, r2
    2012:	49 1b       	sub	r20, r25
    2014:	4f 5f       	subi	r20, 0xFF	; 255
    2016:	68 94       	set
    2018:	ee 24       	eor	r14, r14
    201a:	e1 f8       	bld	r14, 1
    201c:	28 2f       	mov	r18, r24
    201e:	63 2d       	mov	r22, r3
    2020:	86 e0       	ldi	r24, 0x06	; 6
    2022:	97 e0       	ldi	r25, 0x07	; 7
    2024:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <u8g2_DrawRBox>
				u8g2_SetDrawColor(&u8g2, 0);
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	86 e0       	ldi	r24, 0x06	; 6
    202c:	97 e0       	ldi	r25, 0x07	; 7
    202e:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2032:	f5 01       	movw	r30, r10
    2034:	20 81       	ld	r18, Z
    2036:	31 81       	ldd	r19, Z+1	; 0x01
    2038:	42 2d       	mov	r20, r2
    203a:	61 2f       	mov	r22, r17
    203c:	86 e0       	ldi	r24, 0x06	; 6
    203e:	97 e0       	ldi	r25, 0x07	; 7
    2040:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
				u8g2_SetDrawColor(&u8g2, 1);
    2044:	61 e0       	ldi	r22, 0x01	; 1
    2046:	86 e0       	ldi	r24, 0x06	; 6
    2048:	97 e0       	ldi	r25, 0x07	; 7
    204a:	0e 94 93 19 	call	0x3326	; 0x3326 <u8g2_SetDrawColor>
    204e:	09 c0       	rjmp	.+18     	; 0x2062 <Page_5+0x1b4>
				}else{
				
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2050:	f5 01       	movw	r30, r10
    2052:	20 81       	ld	r18, Z
    2054:	31 81       	ldd	r19, Z+1	; 0x01
    2056:	42 2d       	mov	r20, r2
    2058:	61 2f       	mov	r22, r17
    205a:	86 e0       	ldi	r24, 0x06	; 6
    205c:	97 e0       	ldi	r25, 0x07	; 7
    205e:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
			}
			
			
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    2062:	e0 91 f4 06 	lds	r30, 0x06F4	; 0x8006f4 <settingVal>
    2066:	f0 91 f5 06 	lds	r31, 0x06F5	; 0x8006f5 <settingVal+0x1>
    206a:	e8 0d       	add	r30, r8
    206c:	f9 1d       	adc	r31, r9
    206e:	4a e0       	ldi	r20, 0x0A	; 10
    2070:	be 01       	movw	r22, r28
    2072:	6f 5f       	subi	r22, 0xFF	; 255
    2074:	7f 4f       	sbci	r23, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    207e:	f5 01       	movw	r30, r10
    2080:	60 81       	ld	r22, Z
    2082:	71 81       	ldd	r23, Z+1	; 0x01
    2084:	86 e0       	ldi	r24, 0x06	; 6
    2086:	97 e0       	ldi	r25, 0x07	; 7
    2088:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    208c:	68 2f       	mov	r22, r24
    208e:	61 0f       	add	r22, r17
    2090:	9e 01       	movw	r18, r28
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	42 2d       	mov	r20, r2
    2098:	86 e0       	ldi	r24, 0x06	; 6
    209a:	97 e0       	ldi	r25, 0x07	; 7
    209c:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
    20a0:	2a c0       	rjmp	.+84     	; 0x20f6 <Page_5+0x248>
			}else{
			u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    20a2:	0e 2d       	mov	r16, r14
    20a4:	06 0d       	add	r16, r6
    20a6:	f5 01       	movw	r30, r10
    20a8:	20 81       	ld	r18, Z
    20aa:	31 81       	ldd	r19, Z+1	; 0x01
    20ac:	40 2f       	mov	r20, r16
    20ae:	61 2f       	mov	r22, r17
    20b0:	86 e0       	ldi	r24, 0x06	; 6
    20b2:	97 e0       	ldi	r25, 0x07	; 7
    20b4:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    20b8:	e0 91 f4 06 	lds	r30, 0x06F4	; 0x8006f4 <settingVal>
    20bc:	f0 91 f5 06 	lds	r31, 0x06F5	; 0x8006f5 <settingVal+0x1>
    20c0:	e8 0d       	add	r30, r8
    20c2:	f9 1d       	adc	r31, r9
    20c4:	4a e0       	ldi	r20, 0x0A	; 10
    20c6:	be 01       	movw	r22, r28
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	0e 94 a3 20 	call	0x4146	; 0x4146 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    20d4:	f5 01       	movw	r30, r10
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	86 e0       	ldi	r24, 0x06	; 6
    20dc:	97 e0       	ldi	r25, 0x07	; 7
    20de:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_GetStrWidth>
    20e2:	61 2f       	mov	r22, r17
    20e4:	68 0f       	add	r22, r24
    20e6:	9e 01       	movw	r18, r28
    20e8:	2f 5f       	subi	r18, 0xFF	; 255
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	40 2f       	mov	r20, r16
    20ee:	86 e0       	ldi	r24, 0x06	; 6
    20f0:	97 e0       	ldi	r25, 0x07	; 7
    20f2:	0e 94 81 18 	call	0x3102	; 0x3102 <u8g2_DrawStr>
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
    20f6:	ff ef       	ldi	r31, 0xFF	; 255
    20f8:	cf 1a       	sub	r12, r31
    20fa:	df 0a       	sbc	r13, r31
    20fc:	22 e0       	ldi	r18, 0x02	; 2
    20fe:	82 0e       	add	r8, r18
    2100:	91 1c       	adc	r9, r1
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	a8 0e       	add	r10, r24
    2106:	b1 1c       	adc	r11, r1
    2108:	e5 e0       	ldi	r30, 0x05	; 5
    210a:	ce 16       	cp	r12, r30
    210c:	d1 04       	cpc	r13, r1
    210e:	09 f0       	breq	.+2      	; 0x2112 <Page_5+0x264>
    2110:	48 cf       	rjmp	.-368    	; 0x1fa2 <Page_5+0xf4>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
		}
	}


	reDrawRequired = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	df 90       	pop	r13
    2130:	cf 90       	pop	r12
    2132:	bf 90       	pop	r11
    2134:	af 90       	pop	r10
    2136:	9f 90       	pop	r9
    2138:	8f 90       	pop	r8
    213a:	7f 90       	pop	r7
    213c:	6f 90       	pop	r6
    213e:	5f 90       	pop	r5
    2140:	4f 90       	pop	r4
    2142:	3f 90       	pop	r3
    2144:	2f 90       	pop	r2
    2146:	08 95       	ret

00002148 <draw>:
		}
	}
}

void draw(void){
	switch(currentPage){
    2148:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <currentPage>
    214c:	82 30       	cpi	r24, 0x02	; 2
    214e:	e9 f0       	breq	.+58     	; 0x218a <draw+0x42>
    2150:	2c f4       	brge	.+10     	; 0x215c <draw+0x14>
    2152:	88 23       	and	r24, r24
    2154:	41 f0       	breq	.+16     	; 0x2166 <draw+0x1e>
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	49 f0       	breq	.+18     	; 0x216c <draw+0x24>
    215a:	26 c0       	rjmp	.+76     	; 0x21a8 <draw+0x60>
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	d1 f0       	breq	.+52     	; 0x2194 <draw+0x4c>
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	e9 f0       	breq	.+58     	; 0x219e <draw+0x56>
    2164:	21 c0       	rjmp	.+66     	; 0x21a8 <draw+0x60>
		case 0:// page 0 start
		StartPage();
    2166:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <StartPage>
		break;//end page0
    216a:	08 95       	ret
		
		case 1://page 1 menu
		ScreenOverlay();//remove this if you don't want the overlay
    216c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ScreenOverlay>
		
		switch (MenuAnim)//for switching between menu animations
    2170:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MenuAnim>
    2174:	88 23       	and	r24, r24
    2176:	19 f0       	breq	.+6      	; 0x217e <draw+0x36>
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	21 f0       	breq	.+8      	; 0x2184 <draw+0x3c>
    217c:	08 95       	ret
		{
			case 0://animation 0
			MenuStyle0();
    217e:	0e 94 88 0a 	call	0x1510	; 0x1510 <MenuStyle0>
			break;//end animation 0
    2182:	08 95       	ret
			
			case 1://animation 1
			MenuStyle1();
    2184:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <MenuStyle1>
			break;//end animation 1
    2188:	08 95       	ret
		}
		break;//end page 1
		
		case 2:
		ScreenOverlay();
    218a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ScreenOverlay>
		Page_2();
    218e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <Page_2>
		break;
    2192:	08 95       	ret

		case 3:
		ScreenOverlay();
    2194:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ScreenOverlay>
		Page_3();
    2198:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Page_3>
		break;
    219c:	08 95       	ret
		
		case 4:
		ScreenOverlay();
    219e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ScreenOverlay>
		Page_4();
    21a2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Page_4>
		break;
    21a6:	08 95       	ret
		
		default:
		if (currentPage >= SETTINGPAGE && currentPage <= SETTINGPAGE + settings){
    21a8:	85 50       	subi	r24, 0x05	; 5
    21aa:	86 30       	cpi	r24, 0x06	; 6
    21ac:	28 f4       	brcc	.+10     	; 0x21b8 <draw+0x70>
			ScreenOverlay();
    21ae:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ScreenOverlay>
			Page_5();
    21b2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Page_5>
    21b6:	08 95       	ret
			}else{
			nopage();
    21b8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <nopage>
    21bc:	08 95       	ret

000021be <screenRoutine>:

	return ADCval;
}
//--------------------------------------
void screenRoutine(void){
	updateButtons();
    21be:	0e 94 48 0a 	call	0x1490	; 0x1490 <updateButtons>
	updateBatterySens();
    21c2:	0e 94 10 09 	call	0x1220	; 0x1220 <updateBatterySens>
	if (reDrawRequired || reDrawRequiredTime)
    21c6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <reDrawRequired>
    21ca:	81 11       	cpse	r24, r1
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <screenRoutine+0x18>
    21ce:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <reDrawRequiredTime>
    21d2:	88 23       	and	r24, r24
    21d4:	79 f0       	breq	.+30     	; 0x21f4 <screenRoutine+0x36>
	{
		reDrawRequired = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		u8g2_ClearBuffer(&u8g2);
    21dc:	86 e0       	ldi	r24, 0x06	; 6
    21de:	97 e0       	ldi	r25, 0x07	; 7
    21e0:	0e 94 17 13 	call	0x262e	; 0x262e <u8g2_ClearBuffer>
		draw();
    21e4:	0e 94 a4 10 	call	0x2148	; 0x2148 <draw>
		u8g2_SendBuffer(&u8g2);
    21e8:	86 e0       	ldi	r24, 0x06	; 6
    21ea:	97 e0       	ldi	r25, 0x07	; 7
    21ec:	0e 94 2d 13 	call	0x265a	; 0x265a <u8g2_SendBuffer>
		reDrawRequiredTime = 0;
    21f0:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <reDrawRequiredTime>
    21f4:	08 95       	ret

000021f6 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    21f6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    21fa:	88 e4       	ldi	r24, 0x48	; 72
    21fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2200:	08 95       	ret

00002202 <i2c_start_wait>:
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	ec eb       	ldi	r30, 0xBC	; 188
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	44 ea       	ldi	r20, 0xA4	; 164
    220c:	a9 eb       	ldi	r26, 0xB9	; 185
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	cb eb       	ldi	r28, 0xBB	; 187
    2212:	d0 e0       	ldi	r29, 0x00	; 0
    2214:	54 e8       	ldi	r21, 0x84	; 132
    2216:	64 e9       	ldi	r22, 0x94	; 148
    2218:	40 83       	st	Z, r20
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	90 81       	ld	r25, Z
    2220:	99 23       	and	r25, r25
    2222:	34 f0       	brlt	.+12     	; 0x2230 <i2c_start_wait+0x2e>
    2224:	2f 5f       	subi	r18, 0xFF	; 255
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	21 15       	cp	r18, r1
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	39 07       	cpc	r19, r25
    222e:	b9 f7       	brne	.-18     	; 0x221e <i2c_start_wait+0x1c>
    2230:	9c 91       	ld	r25, X
    2232:	98 7f       	andi	r25, 0xF8	; 248
    2234:	98 30       	cpi	r25, 0x08	; 8
    2236:	11 f0       	breq	.+4      	; 0x223c <i2c_start_wait+0x3a>
    2238:	90 31       	cpi	r25, 0x10	; 16
    223a:	71 f7       	brne	.-36     	; 0x2218 <i2c_start_wait+0x16>
    223c:	88 83       	st	Y, r24
    223e:	50 83       	st	Z, r21
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	90 81       	ld	r25, Z
    2246:	99 23       	and	r25, r25
    2248:	34 f0       	brlt	.+12     	; 0x2256 <i2c_start_wait+0x54>
    224a:	2f 5f       	subi	r18, 0xFF	; 255
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
    224e:	21 15       	cp	r18, r1
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	39 07       	cpc	r19, r25
    2254:	b9 f7       	brne	.-18     	; 0x2244 <i2c_start_wait+0x42>
    2256:	9c 91       	ld	r25, X
    2258:	98 7f       	andi	r25, 0xF8	; 248
    225a:	90 32       	cpi	r25, 0x20	; 32
    225c:	11 f0       	breq	.+4      	; 0x2262 <i2c_start_wait+0x60>
    225e:	98 35       	cpi	r25, 0x58	; 88
    2260:	69 f4       	brne	.+26     	; 0x227c <i2c_start_wait+0x7a>
    2262:	60 83       	st	Z, r22
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	90 81       	ld	r25, Z
    226a:	94 ff       	sbrs	r25, 4
    226c:	d5 cf       	rjmp	.-86     	; 0x2218 <i2c_start_wait+0x16>
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	21 15       	cp	r18, r1
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	39 07       	cpc	r19, r25
    2278:	b9 f7       	brne	.-18     	; 0x2268 <i2c_start_wait+0x66>
    227a:	ce cf       	rjmp	.-100    	; 0x2218 <i2c_start_wait+0x16>
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2282:	84 e9       	ldi	r24, 0x94	; 148
    2284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	ec eb       	ldi	r30, 0xBC	; 188
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	20 81       	ld	r18, Z
    2292:	24 ff       	sbrs	r18, 4
    2294:	05 c0       	rjmp	.+10     	; 0x22a0 <i2c_stop+0x1e>
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	81 15       	cp	r24, r1
    229a:	21 e0       	ldi	r18, 0x01	; 1
    229c:	92 07       	cpc	r25, r18
    229e:	c1 f7       	brne	.-16     	; 0x2290 <i2c_stop+0xe>
    22a0:	08 95       	ret

000022a2 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    22a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
    22a6:	84 e8       	ldi	r24, 0x84	; 132
    22a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    22ac:	8f ef       	ldi	r24, 0xFF	; 255
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a0 e0       	ldi	r26, 0x00	; 0
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    22b4:	ec eb       	ldi	r30, 0xBC	; 188
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	20 81       	ld	r18, Z
    22ba:	22 23       	and	r18, r18
    22bc:	2c f0       	brlt	.+10     	; 0x22c8 <i2c_write+0x26>
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	a1 09       	sbc	r26, r1
    22c2:	b1 09       	sbc	r27, r1
    22c4:	c8 f7       	brcc	.-14     	; 0x22b8 <i2c_write+0x16>
    22c6:	04 c0       	rjmp	.+8      	; 0x22d0 <i2c_write+0x2e>
	if(i2c_timer == 0)
    22c8:	89 2b       	or	r24, r25
    22ca:	8a 2b       	or	r24, r26
    22cc:	8b 2b       	or	r24, r27
    22ce:	41 f0       	breq	.+16     	; 0x22e0 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    22d0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    22d4:	98 7f       	andi	r25, 0xF8	; 248
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	98 32       	cpi	r25, 0x28	; 40
    22da:	19 f4       	brne	.+6      	; 0x22e2 <i2c_write+0x40>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	08 95       	ret
    22e0:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    22e2:	08 95       	ret

000022e4 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    22e4:	df 92       	push	r13
    22e6:	ef 92       	push	r14
    22e8:	ff 92       	push	r15
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	7c 01       	movw	r14, r24
    22f4:	16 2f       	mov	r17, r22
    22f6:	c4 2f       	mov	r28, r20
    22f8:	d2 2e       	mov	r13, r18
    22fa:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    22fc:	04 2f       	mov	r16, r20
    22fe:	0d 0f       	add	r16, r29
    2300:	26 2f       	mov	r18, r22
    2302:	2d 0d       	add	r18, r13
    2304:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    2308:	88 23       	and	r24, r24
    230a:	61 f0       	breq	.+24     	; 0x2324 <u8g2_DrawBox+0x40>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    230c:	dd 23       	and	r29, r29
    230e:	51 f0       	breq	.+20     	; 0x2324 <u8g2_DrawBox+0x40>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    2310:	00 e0       	ldi	r16, 0x00	; 0
    2312:	2d 2d       	mov	r18, r13
    2314:	4c 2f       	mov	r20, r28
    2316:	61 2f       	mov	r22, r17
    2318:	c7 01       	movw	r24, r14
    231a:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
    y++;    
    231e:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
    2320:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    2322:	b1 f7       	brne	.-20     	; 0x2310 <u8g2_DrawBox+0x2c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	df 90       	pop	r13
    2332:	08 95       	ret

00002334 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	7c 01       	movw	r14, r24
    2346:	d6 2f       	mov	r29, r22
    2348:	c4 2f       	mov	r28, r20
    234a:	d2 2e       	mov	r13, r18
    234c:	10 2f       	mov	r17, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    234e:	c6 2e       	mov	r12, r22
    2350:	c2 0e       	add	r12, r18
    2352:	04 2f       	mov	r16, r20
    2354:	01 0f       	add	r16, r17
    2356:	2c 2d       	mov	r18, r12
    2358:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    235c:	88 23       	and	r24, r24
    235e:	19 f1       	breq	.+70     	; 0x23a6 <u8g2_DrawFrame+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    2360:	00 e0       	ldi	r16, 0x00	; 0
    2362:	2d 2d       	mov	r18, r13
    2364:	4c 2f       	mov	r20, r28
    2366:	6d 2f       	mov	r22, r29
    2368:	c7 01       	movw	r24, r14
    236a:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
  if (h >= 2) {
    236e:	12 30       	cpi	r17, 0x02	; 2
    2370:	d0 f0       	brcs	.+52     	; 0x23a6 <u8g2_DrawFrame+0x72>
    h-=2;
    2372:	12 50       	subi	r17, 0x02	; 2
    y++;
    2374:	cf 5f       	subi	r28, 0xFF	; 255
    if (h > 0) {
    2376:	11 23       	and	r17, r17
    2378:	79 f0       	breq	.+30     	; 0x2398 <u8g2_DrawFrame+0x64>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    237a:	01 e0       	ldi	r16, 0x01	; 1
    237c:	21 2f       	mov	r18, r17
    237e:	4c 2f       	mov	r20, r28
    2380:	6d 2f       	mov	r22, r29
    2382:	c7 01       	movw	r24, r14
    2384:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    2388:	6f ef       	ldi	r22, 0xFF	; 255
    238a:	6c 0d       	add	r22, r12
    238c:	21 2f       	mov	r18, r17
    238e:	4c 2f       	mov	r20, r28
    2390:	c7 01       	movw	r24, r14
    2392:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
      y+=h;
    2396:	c1 0f       	add	r28, r17
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    2398:	00 e0       	ldi	r16, 0x00	; 0
    239a:	2d 2d       	mov	r18, r13
    239c:	4c 2f       	mov	r20, r28
    239e:	6d 2f       	mov	r22, r29
    23a0:	c7 01       	movw	r24, r14
    23a2:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
  }
}
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	08 95       	ret

000023b8 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    23b8:	7f 92       	push	r7
    23ba:	8f 92       	push	r8
    23bc:	9f 92       	push	r9
    23be:	af 92       	push	r10
    23c0:	bf 92       	push	r11
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	6c 01       	movw	r12, r24
    23d4:	16 2f       	mov	r17, r22
    23d6:	f4 2e       	mov	r15, r20
    23d8:	b2 2e       	mov	r11, r18
    23da:	c0 2f       	mov	r28, r16
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    23dc:	a4 2e       	mov	r10, r20
    23de:	a0 0e       	add	r10, r16
    23e0:	d6 2f       	mov	r29, r22
    23e2:	d2 0f       	add	r29, r18
    23e4:	0a 2d       	mov	r16, r10
    23e6:	2d 2f       	mov	r18, r29
    23e8:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    23ec:	88 23       	and	r24, r24
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <u8g2_DrawRBox+0x3a>
    23f0:	49 c0       	rjmp	.+146    	; 0x2484 <u8g2_DrawRBox+0xcc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    23f2:	81 2e       	mov	r8, r17
    23f4:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    23f6:	9f 2c       	mov	r9, r15
    23f8:	9e 0c       	add	r9, r14
    23fa:	8e 2d       	mov	r24, r14
    23fc:	80 95       	com	r24
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
    23fe:	d8 0f       	add	r29, r24
  
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;
    2400:	a8 0e       	add	r10, r24

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    2402:	02 e0       	ldi	r16, 0x02	; 2
    2404:	2e 2d       	mov	r18, r14
    2406:	49 2d       	mov	r20, r9
    2408:	68 2d       	mov	r22, r8
    240a:	c6 01       	movw	r24, r12
    240c:	0e 94 3a 14 	call	0x2874	; 0x2874 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    2410:	01 e0       	ldi	r16, 0x01	; 1
    2412:	2e 2d       	mov	r18, r14
    2414:	49 2d       	mov	r20, r9
    2416:	6d 2f       	mov	r22, r29
    2418:	c6 01       	movw	r24, r12
    241a:	0e 94 3a 14 	call	0x2874	; 0x2874 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    241e:	04 e0       	ldi	r16, 0x04	; 4
    2420:	2e 2d       	mov	r18, r14
    2422:	4a 2d       	mov	r20, r10
    2424:	68 2d       	mov	r22, r8
    2426:	c6 01       	movw	r24, r12
    2428:	0e 94 3a 14 	call	0x2874	; 0x2874 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    242c:	08 e0       	ldi	r16, 0x08	; 8
    242e:	2e 2d       	mov	r18, r14
    2430:	4a 2d       	mov	r20, r10
    2432:	6d 2f       	mov	r22, r29
    2434:	c6 01       	movw	r24, r12
    2436:	0e 94 3a 14 	call	0x2874	; 0x2874 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    243a:	2b 2d       	mov	r18, r11
    243c:	2e 19       	sub	r18, r14
    ww -= r;
    243e:	2e 19       	sub	r18, r14
    xl++;
    yu++;
    
    if ( ww >= 3 )
    2440:	23 30       	cpi	r18, 0x03	; 3
    2442:	98 f0       	brcs	.+38     	; 0x246a <u8g2_DrawRBox+0xb2>
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
    2444:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    2446:	de ef       	ldi	r29, 0xFE	; 254
    2448:	d2 0f       	add	r29, r18
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
    244a:	77 24       	eor	r7, r7
    244c:	73 94       	inc	r7
    244e:	7e 0c       	add	r7, r14
    2450:	07 2d       	mov	r16, r7
    2452:	2d 2f       	mov	r18, r29
    2454:	4f 2d       	mov	r20, r15
    2456:	68 2d       	mov	r22, r8
    2458:	c6 01       	movw	r24, r12
    245a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
    245e:	2d 2f       	mov	r18, r29
    2460:	4a 2d       	mov	r20, r10
    2462:	68 2d       	mov	r22, r8
    2464:	c6 01       	movw	r24, r12
    2466:	0e 94 72 11 	call	0x22e4	; 0x22e4 <u8g2_DrawBox>
    }
    
    hh = h;
    hh -= r;
    246a:	ce 19       	sub	r28, r14
    hh -= r;
    246c:	ce 19       	sub	r28, r14
    //h--;
    if ( hh >= 3 )
    246e:	c3 30       	cpi	r28, 0x03	; 3
    2470:	48 f0       	brcs	.+18     	; 0x2484 <u8g2_DrawRBox+0xcc>
    {
      hh -= 2;
      u8g2_DrawBox(u8g2, x, yu, w, hh);
    2472:	0e ef       	ldi	r16, 0xFE	; 254
    2474:	0c 0f       	add	r16, r28
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	49 0d       	add	r20, r9
    247a:	2b 2d       	mov	r18, r11
    247c:	61 2f       	mov	r22, r17
    247e:	c6 01       	movw	r24, r12
    2480:	0e 94 72 11 	call	0x22e4	; 0x22e4 <u8g2_DrawBox>
    }
  }
}
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	df 90       	pop	r13
    2492:	cf 90       	pop	r12
    2494:	bf 90       	pop	r11
    2496:	af 90       	pop	r10
    2498:	9f 90       	pop	r9
    249a:	8f 90       	pop	r8
    249c:	7f 90       	pop	r7
    249e:	08 95       	ret

000024a0 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    24a0:	8f 92       	push	r8
    24a2:	9f 92       	push	r9
    24a4:	af 92       	push	r10
    24a6:	bf 92       	push	r11
    24a8:	cf 92       	push	r12
    24aa:	df 92       	push	r13
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ec 01       	movw	r28, r24
    24ba:	16 2f       	mov	r17, r22
    24bc:	f4 2e       	mov	r15, r20
    24be:	c2 2e       	mov	r12, r18
    24c0:	b0 2e       	mov	r11, r16
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    24c2:	a4 2e       	mov	r10, r20
    24c4:	a0 0e       	add	r10, r16
    24c6:	d6 2e       	mov	r13, r22
    24c8:	d2 0e       	add	r13, r18
    24ca:	0a 2d       	mov	r16, r10
    24cc:	2d 2d       	mov	r18, r13
    24ce:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    24d2:	88 23       	and	r24, r24
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <u8g2_DrawRFrame+0x38>
    24d6:	52 c0       	rjmp	.+164    	; 0x257c <u8g2_DrawRFrame+0xdc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    24d8:	81 2e       	mov	r8, r17
    24da:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    24dc:	9f 2c       	mov	r9, r15
    24de:	9e 0c       	add	r9, r14
    24e0:	8e 2d       	mov	r24, r14
    24e2:	80 95       	com	r24
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
    24e4:	d8 0e       	add	r13, r24
    
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;
    24e6:	a8 0e       	add	r10, r24

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    24e8:	02 e0       	ldi	r16, 0x02	; 2
    24ea:	2e 2d       	mov	r18, r14
    24ec:	49 2d       	mov	r20, r9
    24ee:	68 2d       	mov	r22, r8
    24f0:	ce 01       	movw	r24, r28
    24f2:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    24f6:	01 e0       	ldi	r16, 0x01	; 1
    24f8:	2e 2d       	mov	r18, r14
    24fa:	49 2d       	mov	r20, r9
    24fc:	6d 2d       	mov	r22, r13
    24fe:	ce 01       	movw	r24, r28
    2500:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    2504:	04 e0       	ldi	r16, 0x04	; 4
    2506:	2e 2d       	mov	r18, r14
    2508:	4a 2d       	mov	r20, r10
    250a:	68 2d       	mov	r22, r8
    250c:	ce 01       	movw	r24, r28
    250e:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    2512:	08 e0       	ldi	r16, 0x08	; 8
    2514:	2e 2d       	mov	r18, r14
    2516:	4a 2d       	mov	r20, r10
    2518:	6d 2d       	mov	r22, r13
    251a:	ce 01       	movw	r24, r28
    251c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <u8g2_DrawCircle>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    2520:	2c 2d       	mov	r18, r12
    2522:	2e 19       	sub	r18, r14
    ww -= r;
    2524:	2e 19       	sub	r18, r14
    hh = h;
    hh -= r;
    2526:	0b 2d       	mov	r16, r11
    2528:	0e 19       	sub	r16, r14
    hh -= r;
    252a:	0e 19       	sub	r16, r14
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
    252c:	23 30       	cpi	r18, 0x03	; 3
    252e:	a0 f0       	brcs	.+40     	; 0x2558 <u8g2_DrawRFrame+0xb8>
    ww -= r;
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    2530:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    2532:	0f 2e       	mov	r0, r31
    2534:	fe ef       	ldi	r31, 0xFE	; 254
    2536:	ef 2e       	mov	r14, r31
    2538:	f0 2d       	mov	r31, r0
    253a:	e2 0e       	add	r14, r18
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
    253c:	2e 2d       	mov	r18, r14
    253e:	4f 2d       	mov	r20, r15
    2540:	68 2d       	mov	r22, r8
    2542:	ce 01       	movw	r24, r28
    2544:	0e 94 72 19 	call	0x32e4	; 0x32e4 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    2548:	4f ef       	ldi	r20, 0xFF	; 255
    254a:	4b 0d       	add	r20, r11
    254c:	4f 0d       	add	r20, r15
    254e:	2e 2d       	mov	r18, r14
    2550:	68 2d       	mov	r22, r8
    2552:	ce 01       	movw	r24, r28
    2554:	0e 94 72 19 	call	0x32e4	; 0x32e4 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
    2558:	03 30       	cpi	r16, 0x03	; 3
    255a:	80 f0       	brcs	.+32     	; 0x257c <u8g2_DrawRFrame+0xdc>
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
    255c:	93 94       	inc	r9
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
    255e:	02 50       	subi	r16, 0x02	; 2
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
    2560:	20 2f       	mov	r18, r16
    2562:	49 2d       	mov	r20, r9
    2564:	61 2f       	mov	r22, r17
    2566:	ce 01       	movw	r24, r28
    2568:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
    256c:	6f ef       	ldi	r22, 0xFF	; 255
    256e:	6c 0d       	add	r22, r12
    2570:	61 0f       	add	r22, r17
    2572:	20 2f       	mov	r18, r16
    2574:	49 2d       	mov	r20, r9
    2576:	ce 01       	movw	r24, r28
    2578:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    }
  }
}
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
    258c:	bf 90       	pop	r11
    258e:	af 90       	pop	r10
    2590:	9f 90       	pop	r9
    2592:	8f 90       	pop	r8
    2594:	08 95       	ret

00002596 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    2596:	af 92       	push	r10
    2598:	bf 92       	push	r11
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    25ac:	dc 01       	movw	r26, r24
    25ae:	94 96       	adiw	r26, 0x24	; 36
    25b0:	bc 90       	ld	r11, X
    25b2:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    25b4:	95 96       	adiw	r26, 0x25	; 37
    25b6:	dc 91       	ld	r29, X
    25b8:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    25ba:	ed 91       	ld	r30, X+
    25bc:	fc 91       	ld	r31, X
    25be:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    25c0:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    25c2:	c1 2c       	mov	r12, r1
    25c4:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    25c6:	d7 01       	movw	r26, r14
    25c8:	ed 91       	ld	r30, X+
    25ca:	fc 91       	ld	r31, X
    25cc:	11 97       	sbiw	r26, 0x01	; 1
    25ce:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    25d0:	92 96       	adiw	r26, 0x22	; 34
    25d2:	0d 91       	ld	r16, X+
    25d4:	1c 91       	ld	r17, X
    25d6:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    25d8:	42 2f       	mov	r20, r18
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	44 0f       	add	r20, r20
    25de:	55 1f       	adc	r21, r21
    25e0:	44 0f       	add	r20, r20
    25e2:	55 1f       	adc	r21, r21
    25e4:	44 0f       	add	r20, r20
    25e6:	55 1f       	adc	r21, r21
    25e8:	4c 9d       	mul	r20, r12
    25ea:	c0 01       	movw	r24, r0
    25ec:	4d 9d       	mul	r20, r13
    25ee:	90 0d       	add	r25, r0
    25f0:	5c 9d       	mul	r21, r12
    25f2:	90 0d       	add	r25, r0
    25f4:	11 24       	eor	r1, r1
    25f6:	08 0f       	add	r16, r24
    25f8:	19 1f       	adc	r17, r25
    25fa:	4c 2f       	mov	r20, r28
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	c7 01       	movw	r24, r14
    2600:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    2604:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    2606:	8c 2f       	mov	r24, r28
    2608:	8d 1b       	sub	r24, r29
    260a:	8b 15       	cp	r24, r11
    260c:	28 f4       	brcc	.+10     	; 0x2618 <u8g2_send_buffer+0x82>
    260e:	bf ef       	ldi	r27, 0xFF	; 255
    2610:	cb 1a       	sub	r12, r27
    2612:	db 0a       	sbc	r13, r27
    2614:	ca 15       	cp	r28, r10
    2616:	b8 f2       	brcs	.-82     	; 0x25c6 <u8g2_send_buffer+0x30>
}
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	08 95       	ret

0000262e <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    262e:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2630:	a0 81       	ld	r26, Z
    2632:	b1 81       	ldd	r27, Z+1	; 0x01
    2634:	50 96       	adiw	r26, 0x10	; 16
    2636:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    2638:	44 a1       	ldd	r20, Z+36	; 0x24
    263a:	94 9f       	mul	r25, r20
    263c:	a0 01       	movw	r20, r0
    263e:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    2640:	44 0f       	add	r20, r20
    2642:	55 1f       	adc	r21, r21
    2644:	44 0f       	add	r20, r20
    2646:	55 1f       	adc	r21, r21
    2648:	44 0f       	add	r20, r20
    264a:	55 1f       	adc	r21, r21
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	82 a1       	ldd	r24, Z+34	; 0x22
    2652:	93 a1       	ldd	r25, Z+35	; 0x23
    2654:	0e 94 91 20 	call	0x4122	; 0x4122 <memset>
    2658:	08 95       	ret

0000265a <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    2660:	0e 94 cb 12 	call	0x2596	; 0x2596 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    2664:	ce 01       	movw	r24, r28
    2666:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <u8x8_RefreshDisplay>
}
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	08 95       	ret

00002670 <u8g2_draw_circle_section>:
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
    }
}
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	6c 01       	movw	r12, r24
    2680:	d6 2f       	mov	r29, r22
    2682:	14 2f       	mov	r17, r20
    2684:	c2 2f       	mov	r28, r18
    2686:	e0 fe       	sbrs	r14, 0
    2688:	0d c0       	rjmp	.+26     	; 0x26a4 <u8g2_draw_circle_section+0x34>
    268a:	40 2f       	mov	r20, r16
    268c:	41 1b       	sub	r20, r17
    268e:	62 2f       	mov	r22, r18
    2690:	6d 0f       	add	r22, r29
    2692:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    2696:	40 2f       	mov	r20, r16
    2698:	4d 1b       	sub	r20, r29
    269a:	61 2f       	mov	r22, r17
    269c:	6c 0f       	add	r22, r28
    269e:	c6 01       	movw	r24, r12
    26a0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    26a4:	e1 fe       	sbrs	r14, 1
    26a6:	0e c0       	rjmp	.+28     	; 0x26c4 <u8g2_draw_circle_section+0x54>
    26a8:	40 2f       	mov	r20, r16
    26aa:	41 1b       	sub	r20, r17
    26ac:	6c 2f       	mov	r22, r28
    26ae:	6d 1b       	sub	r22, r29
    26b0:	c6 01       	movw	r24, r12
    26b2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    26b6:	40 2f       	mov	r20, r16
    26b8:	4d 1b       	sub	r20, r29
    26ba:	6c 2f       	mov	r22, r28
    26bc:	61 1b       	sub	r22, r17
    26be:	c6 01       	movw	r24, r12
    26c0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    26c4:	e3 fe       	sbrs	r14, 3
    26c6:	0e c0       	rjmp	.+28     	; 0x26e4 <u8g2_draw_circle_section+0x74>
    26c8:	40 2f       	mov	r20, r16
    26ca:	41 0f       	add	r20, r17
    26cc:	6c 2f       	mov	r22, r28
    26ce:	6d 0f       	add	r22, r29
    26d0:	c6 01       	movw	r24, r12
    26d2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    26d6:	40 2f       	mov	r20, r16
    26d8:	4d 0f       	add	r20, r29
    26da:	61 2f       	mov	r22, r17
    26dc:	6c 0f       	add	r22, r28
    26de:	c6 01       	movw	r24, r12
    26e0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    26e4:	e2 fe       	sbrs	r14, 2
    26e6:	0e c0       	rjmp	.+28     	; 0x2704 <u8g2_draw_circle_section+0x94>
    26e8:	40 2f       	mov	r20, r16
    26ea:	41 0f       	add	r20, r17
    26ec:	6c 2f       	mov	r22, r28
    26ee:	6d 1b       	sub	r22, r29
    26f0:	c6 01       	movw	r24, r12
    26f2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    26f6:	40 2f       	mov	r20, r16
    26f8:	4d 0f       	add	r20, r29
    26fa:	6c 2f       	mov	r22, r28
    26fc:	61 1b       	sub	r22, r17
    26fe:	c6 01       	movw	r24, r12
    2700:	0e 94 7e 19 	call	0x32fc	; 0x32fc <u8g2_DrawPixel>
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	ef 90       	pop	r14
    270e:	df 90       	pop	r13
    2710:	cf 90       	pop	r12
    2712:	08 95       	ret

00002714 <u8g2_draw_disc_section>:
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	6c 01       	movw	r12, r24
    2724:	c6 2f       	mov	r28, r22
    2726:	14 2f       	mov	r17, r20
    2728:	d2 2f       	mov	r29, r18
    272a:	e0 fe       	sbrs	r14, 0
    272c:	11 c0       	rjmp	.+34     	; 0x2750 <u8g2_draw_disc_section+0x3c>
    272e:	21 e0       	ldi	r18, 0x01	; 1
    2730:	24 0f       	add	r18, r20
    2732:	40 2f       	mov	r20, r16
    2734:	41 1b       	sub	r20, r17
    2736:	6d 2f       	mov	r22, r29
    2738:	6c 0f       	add	r22, r28
    273a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    273e:	21 e0       	ldi	r18, 0x01	; 1
    2740:	2c 0f       	add	r18, r28
    2742:	40 2f       	mov	r20, r16
    2744:	4c 1b       	sub	r20, r28
    2746:	61 2f       	mov	r22, r17
    2748:	6d 0f       	add	r22, r29
    274a:	c6 01       	movw	r24, r12
    274c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    2750:	e1 fe       	sbrs	r14, 1
    2752:	12 c0       	rjmp	.+36     	; 0x2778 <u8g2_draw_disc_section+0x64>
    2754:	21 e0       	ldi	r18, 0x01	; 1
    2756:	21 0f       	add	r18, r17
    2758:	40 2f       	mov	r20, r16
    275a:	41 1b       	sub	r20, r17
    275c:	6d 2f       	mov	r22, r29
    275e:	6c 1b       	sub	r22, r28
    2760:	c6 01       	movw	r24, r12
    2762:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    2766:	21 e0       	ldi	r18, 0x01	; 1
    2768:	2c 0f       	add	r18, r28
    276a:	40 2f       	mov	r20, r16
    276c:	4c 1b       	sub	r20, r28
    276e:	6d 2f       	mov	r22, r29
    2770:	61 1b       	sub	r22, r17
    2772:	c6 01       	movw	r24, r12
    2774:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    2778:	e3 fe       	sbrs	r14, 3
    277a:	10 c0       	rjmp	.+32     	; 0x279c <u8g2_draw_disc_section+0x88>
    277c:	21 e0       	ldi	r18, 0x01	; 1
    277e:	21 0f       	add	r18, r17
    2780:	40 2f       	mov	r20, r16
    2782:	6d 2f       	mov	r22, r29
    2784:	6c 0f       	add	r22, r28
    2786:	c6 01       	movw	r24, r12
    2788:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	2c 0f       	add	r18, r28
    2790:	40 2f       	mov	r20, r16
    2792:	61 2f       	mov	r22, r17
    2794:	6d 0f       	add	r22, r29
    2796:	c6 01       	movw	r24, r12
    2798:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    279c:	e2 fe       	sbrs	r14, 2
    279e:	10 c0       	rjmp	.+32     	; 0x27c0 <u8g2_draw_disc_section+0xac>
    27a0:	21 e0       	ldi	r18, 0x01	; 1
    27a2:	21 0f       	add	r18, r17
    27a4:	6d 2f       	mov	r22, r29
    27a6:	6c 1b       	sub	r22, r28
    27a8:	40 2f       	mov	r20, r16
    27aa:	c6 01       	movw	r24, r12
    27ac:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    27b0:	21 e0       	ldi	r18, 0x01	; 1
    27b2:	2c 0f       	add	r18, r28
    27b4:	6d 2f       	mov	r22, r29
    27b6:	61 1b       	sub	r22, r17
    27b8:	40 2f       	mov	r20, r16
    27ba:	c6 01       	movw	r24, r12
    27bc:	0e 94 78 19 	call	0x32f0	; 0x32f0 <u8g2_DrawVLine>
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	cf 90       	pop	r12
    27ce:	08 95       	ret

000027d0 <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    27d0:	8f 92       	push	r8
    27d2:	9f 92       	push	r9
    27d4:	af 92       	push	r10
    27d6:	bf 92       	push	r11
    27d8:	cf 92       	push	r12
    27da:	df 92       	push	r13
    27dc:	ef 92       	push	r14
    27de:	ff 92       	push	r15
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	5c 01       	movw	r10, r24
    27ea:	c6 2e       	mov	r12, r22
    27ec:	94 2e       	mov	r9, r20
    27ee:	c2 2f       	mov	r28, r18
    27f0:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    27f2:	01 e0       	ldi	r16, 0x01	; 1
    27f4:	02 0f       	add	r16, r18
    27f6:	04 0f       	add	r16, r20
    27f8:	21 e0       	ldi	r18, 0x01	; 1
    27fa:	26 0f       	add	r18, r22
    27fc:	2c 0f       	add	r18, r28
    27fe:	4c 1b       	sub	r20, r28
    2800:	6c 1b       	sub	r22, r28
    2802:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    2806:	88 23       	and	r24, r24
    2808:	41 f1       	breq	.+80     	; 0x285a <u8g2_DrawCircle+0x8a>
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    280a:	d1 e0       	ldi	r29, 0x01	; 1
    280c:	dc 1b       	sub	r29, r28
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    280e:	dc 2e       	mov	r13, r28
    2810:	d1 94       	neg	r13
    2812:	dd 0c       	add	r13, r13
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    2814:	e8 2c       	mov	r14, r8
    2816:	09 2d       	mov	r16, r9
    2818:	2c 2d       	mov	r18, r12
    281a:	4c 2f       	mov	r20, r28
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	c5 01       	movw	r24, r10
    2820:	0e 94 38 13 	call	0x2670	; 0x2670 <u8g2_draw_circle_section>
    
    while ( x < y )
    2824:	cc 23       	and	r28, r28
    2826:	c9 f0       	breq	.+50     	; 0x285a <u8g2_DrawCircle+0x8a>
    2828:	0f 2e       	mov	r0, r31
    282a:	f3 e0       	ldi	r31, 0x03	; 3
    282c:	ff 2e       	mov	r15, r31
    282e:	f0 2d       	mov	r31, r0
    2830:	10 e0       	ldi	r17, 0x00	; 0
    {
      if (f >= 0) 
    2832:	dd 23       	and	r29, r29
    2834:	24 f0       	brlt	.+8      	; 0x283e <u8g2_DrawCircle+0x6e>
      {
        y--;
    2836:	c1 50       	subi	r28, 0x01	; 1
        ddF_y += 2;
    2838:	d3 94       	inc	r13
    283a:	d3 94       	inc	r13
        f += ddF_y;
    283c:	dd 0d       	add	r29, r13
      }
      x++;
    283e:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;
    2840:	df 0d       	add	r29, r15

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    2842:	e8 2c       	mov	r14, r8
    2844:	09 2d       	mov	r16, r9
    2846:	2c 2d       	mov	r18, r12
    2848:	4c 2f       	mov	r20, r28
    284a:	61 2f       	mov	r22, r17
    284c:	c5 01       	movw	r24, r10
    284e:	0e 94 38 13 	call	0x2670	; 0x2670 <u8g2_draw_circle_section>
    2852:	f3 94       	inc	r15
    2854:	f3 94       	inc	r15
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    2856:	1c 17       	cp	r17, r28
    2858:	60 f3       	brcs	.-40     	; 0x2832 <u8g2_DrawCircle+0x62>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	cf 90       	pop	r12
    286a:	bf 90       	pop	r11
    286c:	af 90       	pop	r10
    286e:	9f 90       	pop	r9
    2870:	8f 90       	pop	r8
    2872:	08 95       	ret

00002874 <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    2874:	8f 92       	push	r8
    2876:	9f 92       	push	r9
    2878:	af 92       	push	r10
    287a:	bf 92       	push	r11
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	5c 01       	movw	r10, r24
    288e:	c6 2e       	mov	r12, r22
    2890:	94 2e       	mov	r9, r20
    2892:	c2 2f       	mov	r28, r18
    2894:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    2896:	01 e0       	ldi	r16, 0x01	; 1
    2898:	02 0f       	add	r16, r18
    289a:	04 0f       	add	r16, r20
    289c:	21 e0       	ldi	r18, 0x01	; 1
    289e:	26 0f       	add	r18, r22
    28a0:	2c 0f       	add	r18, r28
    28a2:	4c 1b       	sub	r20, r28
    28a4:	6c 1b       	sub	r22, r28
    28a6:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    28aa:	88 23       	and	r24, r24
    28ac:	41 f1       	breq	.+80     	; 0x28fe <u8g2_DrawDisc+0x8a>
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
  f -= rad;
    28ae:	d1 e0       	ldi	r29, 0x01	; 1
    28b0:	dc 1b       	sub	r29, r28
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
  ddF_y *= 2;
    28b2:	dc 2e       	mov	r13, r28
    28b4:	d1 94       	neg	r13
    28b6:	dd 0c       	add	r13, r13
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
    28b8:	e8 2c       	mov	r14, r8
    28ba:	09 2d       	mov	r16, r9
    28bc:	2c 2d       	mov	r18, r12
    28be:	4c 2f       	mov	r20, r28
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	c5 01       	movw	r24, r10
    28c4:	0e 94 8a 13 	call	0x2714	; 0x2714 <u8g2_draw_disc_section>
  
  while ( x < y )
    28c8:	cc 23       	and	r28, r28
    28ca:	c9 f0       	breq	.+50     	; 0x28fe <u8g2_DrawDisc+0x8a>
    28cc:	0f 2e       	mov	r0, r31
    28ce:	f3 e0       	ldi	r31, 0x03	; 3
    28d0:	ff 2e       	mov	r15, r31
    28d2:	f0 2d       	mov	r31, r0
    28d4:	10 e0       	ldi	r17, 0x00	; 0
  {
    if (f >= 0) 
    28d6:	dd 23       	and	r29, r29
    28d8:	24 f0       	brlt	.+8      	; 0x28e2 <u8g2_DrawDisc+0x6e>
    {
      y--;
    28da:	c1 50       	subi	r28, 0x01	; 1
      ddF_y += 2;
    28dc:	d3 94       	inc	r13
    28de:	d3 94       	inc	r13
      f += ddF_y;
    28e0:	dd 0d       	add	r29, r13
    }
    x++;
    28e2:	1f 5f       	subi	r17, 0xFF	; 255
    ddF_x += 2;
    f += ddF_x;
    28e4:	df 0d       	add	r29, r15

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
    28e6:	e8 2c       	mov	r14, r8
    28e8:	09 2d       	mov	r16, r9
    28ea:	2c 2d       	mov	r18, r12
    28ec:	4c 2f       	mov	r20, r28
    28ee:	61 2f       	mov	r22, r17
    28f0:	c5 01       	movw	r24, r10
    28f2:	0e 94 8a 13 	call	0x2714	; 0x2714 <u8g2_draw_disc_section>
    28f6:	f3 94       	inc	r15
    28f8:	f3 94       	inc	r15
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
  
  while ( x < y )
    28fa:	1c 17       	cp	r17, r28
    28fc:	60 f3       	brcs	.-40     	; 0x28d6 <u8g2_DrawDisc+0x62>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	bf 90       	pop	r11
    2910:	af 90       	pop	r10
    2912:	9f 90       	pop	r9
    2914:	8f 90       	pop	r8
    2916:	08 95       	ret

00002918 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    2918:	28 e0       	ldi	r18, 0x08	; 8
    291a:	fc 01       	movw	r30, r24
    291c:	20 83       	st	Z, r18
  return buf;
  #endif
}
    291e:	81 ee       	ldi	r24, 0xE1	; 225
    2920:	92 e0       	ldi	r25, 0x02	; 2
    2922:	08 95       	ret

00002924 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	1f 92       	push	r1
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	7c 01       	movw	r14, r24
    293c:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    293e:	89 01       	movw	r16, r18
    2940:	9a 01       	movw	r18, r20
    2942:	42 e5       	ldi	r20, 0x52	; 82
    2944:	5c e1       	ldi	r21, 0x1C	; 28
    2946:	65 ee       	ldi	r22, 0xE5	; 229
    2948:	7d e1       	ldi	r23, 0x1D	; 29
    294a:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    294e:	ce 01       	movw	r24, r28
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	0e 94 8c 14 	call	0x2918	; 0x2918 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    2956:	86 01       	movw	r16, r12
    2958:	2f ec       	ldi	r18, 0xCF	; 207
    295a:	39 e1       	ldi	r19, 0x19	; 25
    295c:	49 81       	ldd	r20, Y+1	; 0x01
    295e:	bc 01       	movw	r22, r24
    2960:	c7 01       	movw	r24, r14
    2962:	0e 94 c6 1a 	call	0x358c	; 0x358c <u8g2_SetupBuffer>
}
    2966:	0f 90       	pop	r0
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
    2978:	08 95       	ret

0000297a <u8g2_font_get_word>:
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  return u8g2_string_width(u8g2, str);
}
    297a:	fc 01       	movw	r30, r24
    297c:	e6 0f       	add	r30, r22
    297e:	f1 1d       	adc	r31, r1
    2980:	84 91       	lpm	r24, Z
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	98 2f       	mov	r25, r24
    2986:	88 27       	eor	r24, r24
    2988:	31 96       	adiw	r30, 0x01	; 1
    298a:	e4 91       	lpm	r30, Z
    298c:	8e 0f       	add	r24, r30
    298e:	91 1d       	adc	r25, r1
    2990:	08 95       	ret

00002992 <u8g2_font_calc_vref_font>:
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	08 95       	ret

00002996 <u8g2_read_font_info>:
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	ec 01       	movw	r28, r24
    29a0:	8b 01       	movw	r16, r22
    29a2:	fb 01       	movw	r30, r22
    29a4:	84 91       	lpm	r24, Z
    29a6:	88 83       	st	Y, r24
    29a8:	31 96       	adiw	r30, 0x01	; 1
    29aa:	e4 91       	lpm	r30, Z
    29ac:	e9 83       	std	Y+1, r30	; 0x01
    29ae:	fb 01       	movw	r30, r22
    29b0:	32 96       	adiw	r30, 0x02	; 2
    29b2:	e4 91       	lpm	r30, Z
    29b4:	ea 83       	std	Y+2, r30	; 0x02
    29b6:	fb 01       	movw	r30, r22
    29b8:	33 96       	adiw	r30, 0x03	; 3
    29ba:	e4 91       	lpm	r30, Z
    29bc:	eb 83       	std	Y+3, r30	; 0x03
    29be:	fb 01       	movw	r30, r22
    29c0:	34 96       	adiw	r30, 0x04	; 4
    29c2:	e4 91       	lpm	r30, Z
    29c4:	ec 83       	std	Y+4, r30	; 0x04
    29c6:	fb 01       	movw	r30, r22
    29c8:	35 96       	adiw	r30, 0x05	; 5
    29ca:	e4 91       	lpm	r30, Z
    29cc:	ed 83       	std	Y+5, r30	; 0x05
    29ce:	fb 01       	movw	r30, r22
    29d0:	36 96       	adiw	r30, 0x06	; 6
    29d2:	e4 91       	lpm	r30, Z
    29d4:	ee 83       	std	Y+6, r30	; 0x06
    29d6:	fb 01       	movw	r30, r22
    29d8:	37 96       	adiw	r30, 0x07	; 7
    29da:	e4 91       	lpm	r30, Z
    29dc:	ef 83       	std	Y+7, r30	; 0x07
    29de:	fb 01       	movw	r30, r22
    29e0:	38 96       	adiw	r30, 0x08	; 8
    29e2:	e4 91       	lpm	r30, Z
    29e4:	e8 87       	std	Y+8, r30	; 0x08
    29e6:	fb 01       	movw	r30, r22
    29e8:	39 96       	adiw	r30, 0x09	; 9
    29ea:	e4 91       	lpm	r30, Z
    29ec:	e9 87       	std	Y+9, r30	; 0x09
    29ee:	fb 01       	movw	r30, r22
    29f0:	3a 96       	adiw	r30, 0x0a	; 10
    29f2:	e4 91       	lpm	r30, Z
    29f4:	ea 87       	std	Y+10, r30	; 0x0a
    29f6:	fb 01       	movw	r30, r22
    29f8:	3b 96       	adiw	r30, 0x0b	; 11
    29fa:	e4 91       	lpm	r30, Z
    29fc:	eb 87       	std	Y+11, r30	; 0x0b
    29fe:	fb 01       	movw	r30, r22
    2a00:	3c 96       	adiw	r30, 0x0c	; 12
    2a02:	e4 91       	lpm	r30, Z
    2a04:	ec 87       	std	Y+12, r30	; 0x0c
    2a06:	fb 01       	movw	r30, r22
    2a08:	3d 96       	adiw	r30, 0x0d	; 13
    2a0a:	e4 91       	lpm	r30, Z
    2a0c:	ed 87       	std	Y+13, r30	; 0x0d
    2a0e:	fb 01       	movw	r30, r22
    2a10:	3e 96       	adiw	r30, 0x0e	; 14
    2a12:	e4 91       	lpm	r30, Z
    2a14:	ee 87       	std	Y+14, r30	; 0x0e
    2a16:	fb 01       	movw	r30, r22
    2a18:	3f 96       	adiw	r30, 0x0f	; 15
    2a1a:	e4 91       	lpm	r30, Z
    2a1c:	ef 87       	std	Y+15, r30	; 0x0f
    2a1e:	fb 01       	movw	r30, r22
    2a20:	70 96       	adiw	r30, 0x10	; 16
    2a22:	e4 91       	lpm	r30, Z
    2a24:	e8 8b       	std	Y+16, r30	; 0x10
    2a26:	61 e1       	ldi	r22, 0x11	; 17
    2a28:	c8 01       	movw	r24, r16
    2a2a:	0e 94 bd 14 	call	0x297a	; 0x297a <u8g2_font_get_word>
    2a2e:	9a 8b       	std	Y+18, r25	; 0x12
    2a30:	89 8b       	std	Y+17, r24	; 0x11
    2a32:	63 e1       	ldi	r22, 0x13	; 19
    2a34:	c8 01       	movw	r24, r16
    2a36:	0e 94 bd 14 	call	0x297a	; 0x297a <u8g2_font_get_word>
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	65 e1       	ldi	r22, 0x15	; 21
    2a40:	c8 01       	movw	r24, r16
    2a42:	0e 94 bd 14 	call	0x297a	; 0x297a <u8g2_font_get_word>
    2a46:	9e 8b       	std	Y+22, r25	; 0x16
    2a48:	8d 8b       	std	Y+21, r24	; 0x15
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	08 95       	ret

00002a54 <u8g2_font_decode_get_unsigned_bits>:
    2a54:	dc 01       	movw	r26, r24
    2a56:	18 96       	adiw	r26, 0x08	; 8
    2a58:	9c 91       	ld	r25, X
    2a5a:	18 97       	sbiw	r26, 0x08	; 8
    2a5c:	ed 91       	ld	r30, X+
    2a5e:	fc 91       	ld	r31, X
    2a60:	11 97       	sbiw	r26, 0x01	; 1
    2a62:	24 91       	lpm	r18, Z
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	09 2e       	mov	r0, r25
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <u8g2_font_decode_get_unsigned_bits+0x1a>
    2a6a:	35 95       	asr	r19
    2a6c:	27 95       	ror	r18
    2a6e:	0a 94       	dec	r0
    2a70:	e2 f7       	brpl	.-8      	; 0x2a6a <u8g2_font_decode_get_unsigned_bits+0x16>
    2a72:	89 2f       	mov	r24, r25
    2a74:	86 0f       	add	r24, r22
    2a76:	88 30       	cpi	r24, 0x08	; 8
    2a78:	10 f4       	brcc	.+4      	; 0x2a7e <u8g2_font_decode_get_unsigned_bits+0x2a>
    2a7a:	e2 2f       	mov	r30, r18
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <u8g2_font_decode_get_unsigned_bits+0x48>
    2a7e:	31 96       	adiw	r30, 0x01	; 1
    2a80:	11 96       	adiw	r26, 0x01	; 1
    2a82:	fc 93       	st	X, r31
    2a84:	ee 93       	st	-X, r30
    2a86:	e4 91       	lpm	r30, Z
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	38 e0       	ldi	r19, 0x08	; 8
    2a8c:	39 1b       	sub	r19, r25
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <u8g2_font_decode_get_unsigned_bits+0x40>
    2a90:	ee 0f       	add	r30, r30
    2a92:	ff 1f       	adc	r31, r31
    2a94:	3a 95       	dec	r19
    2a96:	e2 f7       	brpl	.-8      	; 0x2a90 <u8g2_font_decode_get_unsigned_bits+0x3c>
    2a98:	e2 2b       	or	r30, r18
    2a9a:	88 50       	subi	r24, 0x08	; 8
    2a9c:	18 96       	adiw	r26, 0x08	; 8
    2a9e:	8c 93       	st	X, r24
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <u8g2_font_decode_get_unsigned_bits+0x56>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	6a 95       	dec	r22
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <u8g2_font_decode_get_unsigned_bits+0x52>
    2aae:	81 50       	subi	r24, 0x01	; 1
    2ab0:	8e 23       	and	r24, r30
    2ab2:	08 95       	ret

00002ab4 <u8g2_font_setup_decode>:
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	ec 01       	movw	r28, r24
    2abe:	8c 01       	movw	r16, r24
    2ac0:	07 5c       	subi	r16, 0xC7	; 199
    2ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac4:	7a af       	std	Y+58, r23	; 0x3a
    2ac6:	69 af       	std	Y+57, r22	; 0x39
    2ac8:	fc 01       	movw	r30, r24
    2aca:	ef 5b       	subi	r30, 0xBF	; 191
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	10 82       	st	Z, r1
    2ad0:	39 96       	adiw	r30, 0x09	; 9
    2ad2:	60 81       	ld	r22, Z
    2ad4:	c8 01       	movw	r24, r16
    2ad6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <u8g2_font_decode_get_unsigned_bits>
    2ada:	8f af       	std	Y+63, r24	; 0x3f
    2adc:	fe 01       	movw	r30, r28
    2ade:	e5 5b       	subi	r30, 0xB5	; 181
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	c8 01       	movw	r24, r16
    2ae6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <u8g2_font_decode_get_unsigned_bits>
    2aea:	fe 01       	movw	r30, r28
    2aec:	e0 5c       	subi	r30, 0xC0	; 192
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 83       	st	Z, r24
    2af2:	b3 96       	adiw	r30, 0x23	; 35
    2af4:	80 81       	ld	r24, Z
    2af6:	b0 97       	sbiw	r30, 0x20	; 32
    2af8:	80 83       	st	Z, r24
    2afa:	cc 5b       	subi	r28, 0xBC	; 188
    2afc:	df 4f       	sbci	r29, 0xFF	; 255
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	81 11       	cpse	r24, r1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	98 83       	st	Y, r25
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	08 95       	ret

00002b10 <u8g2_font_decode_get_signed_bits>:
    2b10:	cf 93       	push	r28
    2b12:	c6 2f       	mov	r28, r22
    2b14:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <u8g2_font_decode_get_unsigned_bits>
    2b18:	c1 50       	subi	r28, 0x01	; 1
    2b1a:	21 e0       	ldi	r18, 0x01	; 1
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <u8g2_font_decode_get_signed_bits+0x14>
    2b20:	22 0f       	add	r18, r18
    2b22:	33 1f       	adc	r19, r19
    2b24:	ca 95       	dec	r28
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <u8g2_font_decode_get_signed_bits+0x10>
    2b28:	82 1b       	sub	r24, r18
    2b2a:	cf 91       	pop	r28
    2b2c:	08 95       	ret

00002b2e <u8g2_add_vector_y>:
    2b2e:	21 30       	cpi	r18, 0x01	; 1
    2b30:	31 f0       	breq	.+12     	; 0x2b3e <u8g2_add_vector_y+0x10>
    2b32:	18 f0       	brcs	.+6      	; 0x2b3a <u8g2_add_vector_y+0xc>
    2b34:	22 30       	cpi	r18, 0x02	; 2
    2b36:	29 f0       	breq	.+10     	; 0x2b42 <u8g2_add_vector_y+0x14>
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <u8g2_add_vector_y+0x18>
    2b3a:	84 0f       	add	r24, r20
    2b3c:	08 95       	ret
    2b3e:	86 0f       	add	r24, r22
    2b40:	08 95       	ret
    2b42:	84 1b       	sub	r24, r20
    2b44:	08 95       	ret
    2b46:	86 1b       	sub	r24, r22
    2b48:	08 95       	ret

00002b4a <u8g2_add_vector_x>:
    2b4a:	21 30       	cpi	r18, 0x01	; 1
    2b4c:	31 f0       	breq	.+12     	; 0x2b5a <u8g2_add_vector_x+0x10>
    2b4e:	18 f0       	brcs	.+6      	; 0x2b56 <u8g2_add_vector_x+0xc>
    2b50:	22 30       	cpi	r18, 0x02	; 2
    2b52:	29 f0       	breq	.+10     	; 0x2b5e <u8g2_add_vector_x+0x14>
    2b54:	06 c0       	rjmp	.+12     	; 0x2b62 <u8g2_add_vector_x+0x18>
    2b56:	86 0f       	add	r24, r22
    2b58:	08 95       	ret
    2b5a:	84 1b       	sub	r24, r20
    2b5c:	08 95       	ret
    2b5e:	86 1b       	sub	r24, r22
    2b60:	08 95       	ret
    2b62:	84 0f       	add	r24, r20
    2b64:	08 95       	ret

00002b66 <u8g2_font_decode_len>:
    2b66:	2f 92       	push	r2
    2b68:	3f 92       	push	r3
    2b6a:	4f 92       	push	r4
    2b6c:	5f 92       	push	r5
    2b6e:	6f 92       	push	r6
    2b70:	7f 92       	push	r7
    2b72:	8f 92       	push	r8
    2b74:	9f 92       	push	r9
    2b76:	af 92       	push	r10
    2b78:	bf 92       	push	r11
    2b7a:	cf 92       	push	r12
    2b7c:	df 92       	push	r13
    2b7e:	ef 92       	push	r14
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <u8g2_font_decode_len+0x26>
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <u8g2_font_decode_len+0x28>
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <u8g2_font_decode_len+0x2a>
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	7c 01       	movw	r14, r24
    2b96:	6e 83       	std	Y+6, r22	; 0x06
    2b98:	34 2e       	mov	r3, r20
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	75 ac       	ldd	r7, Z+61	; 0x3d
    2b9e:	16 ad       	ldd	r17, Z+62	; 0x3e
    2ba0:	6c 01       	movw	r12, r24
    2ba2:	f5 e4       	ldi	r31, 0x45	; 69
    2ba4:	cf 0e       	add	r12, r31
    2ba6:	d1 1c       	adc	r13, r1
    2ba8:	5c 01       	movw	r10, r24
    2baa:	82 e4       	ldi	r24, 0x42	; 66
    2bac:	a8 0e       	add	r10, r24
    2bae:	b1 1c       	adc	r11, r1
    2bb0:	47 01       	movw	r8, r14
    2bb2:	93 e6       	ldi	r25, 0x63	; 99
    2bb4:	89 0e       	add	r8, r25
    2bb6:	91 1c       	adc	r9, r1
    2bb8:	f7 01       	movw	r30, r14
    2bba:	ec 5b       	subi	r30, 0xBC	; 188
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	fc 83       	std	Y+4, r31	; 0x04
    2bc0:	eb 83       	std	Y+3, r30	; 0x03
    2bc2:	c7 01       	movw	r24, r14
    2bc4:	8d 5b       	subi	r24, 0xBD	; 189
    2bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc8:	9a 83       	std	Y+2, r25	; 0x02
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	f7 01       	movw	r30, r14
    2bce:	f7 ad       	ldd	r31, Z+63	; 0x3f
    2bd0:	f7 19       	sub	r31, r7
    2bd2:	fd 83       	std	Y+5, r31	; 0x05
    2bd4:	5e 80       	ldd	r5, Y+6	; 0x06
    2bd6:	f5 15       	cp	r31, r5
    2bd8:	08 f4       	brcc	.+2      	; 0x2bdc <u8g2_font_decode_len+0x76>
    2bda:	5f 2e       	mov	r5, r31
    2bdc:	f7 01       	movw	r30, r14
    2bde:	64 ac       	ldd	r6, Z+60	; 0x3c
    2be0:	f6 01       	movw	r30, r12
    2be2:	00 81       	ld	r16, Z
    2be4:	21 2e       	mov	r2, r17
    2be6:	20 2f       	mov	r18, r16
    2be8:	41 2f       	mov	r20, r17
    2bea:	67 2d       	mov	r22, r7
    2bec:	f7 01       	movw	r30, r14
    2bee:	83 ad       	ldd	r24, Z+59	; 0x3b
    2bf0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <u8g2_add_vector_x>
    2bf4:	48 2e       	mov	r4, r24
    2bf6:	20 2f       	mov	r18, r16
    2bf8:	41 2f       	mov	r20, r17
    2bfa:	67 2d       	mov	r22, r7
    2bfc:	86 2d       	mov	r24, r6
    2bfe:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <u8g2_add_vector_y>
    2c02:	33 20       	and	r3, r3
    2c04:	61 f0       	breq	.+24     	; 0x2c1e <u8g2_font_decode_len+0xb8>
    2c06:	e9 81       	ldd	r30, Y+1	; 0x01
    2c08:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0a:	90 81       	ld	r25, Z
    2c0c:	f4 01       	movw	r30, r8
    2c0e:	90 83       	st	Z, r25
    2c10:	25 2d       	mov	r18, r5
    2c12:	48 2f       	mov	r20, r24
    2c14:	64 2d       	mov	r22, r4
    2c16:	c7 01       	movw	r24, r14
    2c18:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
    2c1c:	0f c0       	rjmp	.+30     	; 0x2c3c <u8g2_font_decode_len+0xd6>
    2c1e:	f5 01       	movw	r30, r10
    2c20:	90 81       	ld	r25, Z
    2c22:	91 11       	cpse	r25, r1
    2c24:	0b c0       	rjmp	.+22     	; 0x2c3c <u8g2_font_decode_len+0xd6>
    2c26:	eb 81       	ldd	r30, Y+3	; 0x03
    2c28:	fc 81       	ldd	r31, Y+4	; 0x04
    2c2a:	90 81       	ld	r25, Z
    2c2c:	f4 01       	movw	r30, r8
    2c2e:	90 83       	st	Z, r25
    2c30:	25 2d       	mov	r18, r5
    2c32:	48 2f       	mov	r20, r24
    2c34:	64 2d       	mov	r22, r4
    2c36:	c7 01       	movw	r24, r14
    2c38:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
    2c3c:	fe 81       	ldd	r31, Y+6	; 0x06
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	f8 17       	cp	r31, r24
    2c42:	28 f0       	brcs	.+10     	; 0x2c4e <u8g2_font_decode_len+0xe8>
    2c44:	f8 1b       	sub	r31, r24
    2c46:	fe 83       	std	Y+6, r31	; 0x06
    2c48:	1f 5f       	subi	r17, 0xFF	; 255
    2c4a:	71 2c       	mov	r7, r1
    2c4c:	bf cf       	rjmp	.-130    	; 0x2bcc <u8g2_font_decode_len+0x66>
    2c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c50:	87 0d       	add	r24, r7
    2c52:	f7 01       	movw	r30, r14
    2c54:	85 af       	std	Z+61, r24	; 0x3d
    2c56:	26 ae       	std	Z+62, r2	; 0x3e
    2c58:	26 96       	adiw	r28, 0x06	; 6
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	ff 90       	pop	r15
    2c6e:	ef 90       	pop	r14
    2c70:	df 90       	pop	r13
    2c72:	cf 90       	pop	r12
    2c74:	bf 90       	pop	r11
    2c76:	af 90       	pop	r10
    2c78:	9f 90       	pop	r9
    2c7a:	8f 90       	pop	r8
    2c7c:	7f 90       	pop	r7
    2c7e:	6f 90       	pop	r6
    2c80:	5f 90       	pop	r5
    2c82:	4f 90       	pop	r4
    2c84:	3f 90       	pop	r3
    2c86:	2f 90       	pop	r2
    2c88:	08 95       	ret

00002c8a <u8g2_font_decode_glyph>:
    2c8a:	8f 92       	push	r8
    2c8c:	9f 92       	push	r9
    2c8e:	af 92       	push	r10
    2c90:	bf 92       	push	r11
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	ec 01       	movw	r28, r24
    2ca4:	7c 01       	movw	r14, r24
    2ca6:	89 e3       	ldi	r24, 0x39	; 57
    2ca8:	e8 0e       	add	r14, r24
    2caa:	f1 1c       	adc	r15, r1
    2cac:	ce 01       	movw	r24, r28
    2cae:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <u8g2_font_setup_decode>
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e0 5c       	subi	r30, 0xC0	; 192
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	90 80       	ld	r9, Z
    2cba:	3c 96       	adiw	r30, 0x0c	; 12
    2cbc:	60 81       	ld	r22, Z
    2cbe:	c7 01       	movw	r24, r14
    2cc0:	0e 94 88 15 	call	0x2b10	; 0x2b10 <u8g2_font_decode_get_signed_bits>
    2cc4:	b8 2e       	mov	r11, r24
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e3 5b       	subi	r30, 0xB3	; 179
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	60 81       	ld	r22, Z
    2cce:	c7 01       	movw	r24, r14
    2cd0:	0e 94 88 15 	call	0x2b10	; 0x2b10 <u8g2_font_decode_get_signed_bits>
    2cd4:	18 2f       	mov	r17, r24
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	e2 5b       	subi	r30, 0xB2	; 178
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	60 81       	ld	r22, Z
    2cde:	c7 01       	movw	r24, r14
    2ce0:	0e 94 88 15 	call	0x2b10	; 0x2b10 <u8g2_font_decode_get_signed_bits>
    2ce4:	88 2e       	mov	r8, r24
    2ce6:	df ac       	ldd	r13, Y+63	; 0x3f
    2ce8:	1d 14       	cp	r1, r13
    2cea:	0c f0       	brlt	.+2      	; 0x2cee <u8g2_font_decode_glyph+0x64>
    2cec:	79 c0       	rjmp	.+242    	; 0x2de0 <u8g2_font_decode_glyph+0x156>
    2cee:	fe 01       	movw	r30, r28
    2cf0:	eb 5b       	subi	r30, 0xBB	; 187
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	00 81       	ld	r16, Z
    2cf6:	19 0d       	add	r17, r9
    2cf8:	11 95       	neg	r17
    2cfa:	20 2f       	mov	r18, r16
    2cfc:	41 2f       	mov	r20, r17
    2cfe:	6b 2d       	mov	r22, r11
    2d00:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d02:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <u8g2_add_vector_x>
    2d06:	c8 2e       	mov	r12, r24
    2d08:	8b af       	std	Y+59, r24	; 0x3b
    2d0a:	20 2f       	mov	r18, r16
    2d0c:	41 2f       	mov	r20, r17
    2d0e:	6b 2d       	mov	r22, r11
    2d10:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d12:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <u8g2_add_vector_y>
    2d16:	8c af       	std	Y+60, r24	; 0x3c
    2d18:	01 30       	cpi	r16, 0x01	; 1
    2d1a:	59 f0       	breq	.+22     	; 0x2d32 <u8g2_font_decode_glyph+0xa8>
    2d1c:	28 f0       	brcs	.+10     	; 0x2d28 <u8g2_font_decode_glyph+0x9e>
    2d1e:	02 30       	cpi	r16, 0x02	; 2
    2d20:	91 f0       	breq	.+36     	; 0x2d46 <u8g2_font_decode_glyph+0xbc>
    2d22:	03 30       	cpi	r16, 0x03	; 3
    2d24:	d9 f0       	breq	.+54     	; 0x2d5c <u8g2_font_decode_glyph+0xd2>
    2d26:	23 c0       	rjmp	.+70     	; 0x2d6e <u8g2_font_decode_glyph+0xe4>
    2d28:	2d 2d       	mov	r18, r13
    2d2a:	2c 0d       	add	r18, r12
    2d2c:	09 2d       	mov	r16, r9
    2d2e:	08 0f       	add	r16, r24
    2d30:	20 c0       	rjmp	.+64     	; 0x2d72 <u8g2_font_decode_glyph+0xe8>
    2d32:	9c 2d       	mov	r25, r12
    2d34:	99 19       	sub	r25, r9
    2d36:	21 e0       	ldi	r18, 0x01	; 1
    2d38:	2c 0d       	add	r18, r12
    2d3a:	0d 2d       	mov	r16, r13
    2d3c:	08 0f       	add	r16, r24
    2d3e:	cc 24       	eor	r12, r12
    2d40:	c3 94       	inc	r12
    2d42:	c9 0e       	add	r12, r25
    2d44:	16 c0       	rjmp	.+44     	; 0x2d72 <u8g2_font_decode_glyph+0xe8>
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	39 2f       	mov	r19, r25
    2d4a:	3d 19       	sub	r19, r13
    2d4c:	21 e0       	ldi	r18, 0x01	; 1
    2d4e:	2c 0d       	add	r18, r12
    2d50:	99 19       	sub	r25, r9
    2d52:	01 e0       	ldi	r16, 0x01	; 1
    2d54:	08 0f       	add	r16, r24
    2d56:	89 0f       	add	r24, r25
    2d58:	c3 0e       	add	r12, r19
    2d5a:	0b c0       	rjmp	.+22     	; 0x2d72 <u8g2_font_decode_glyph+0xe8>
    2d5c:	29 2d       	mov	r18, r9
    2d5e:	2c 0d       	add	r18, r12
    2d60:	98 2f       	mov	r25, r24
    2d62:	9d 19       	sub	r25, r13
    2d64:	01 e0       	ldi	r16, 0x01	; 1
    2d66:	08 0f       	add	r16, r24
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	89 0f       	add	r24, r25
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <u8g2_font_decode_glyph+0xe8>
    2d6e:	08 2f       	mov	r16, r24
    2d70:	2c 2d       	mov	r18, r12
    2d72:	48 2f       	mov	r20, r24
    2d74:	6c 2d       	mov	r22, r12
    2d76:	ce 01       	movw	r24, r28
    2d78:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    2d7c:	88 23       	and	r24, r24
    2d7e:	81 f1       	breq	.+96     	; 0x2de0 <u8g2_font_decode_glyph+0x156>
    2d80:	1d ae       	std	Y+61, r1	; 0x3d
    2d82:	1e ae       	std	Y+62, r1	; 0x3e
    2d84:	5e 01       	movw	r10, r28
    2d86:	e8 e4       	ldi	r30, 0x48	; 72
    2d88:	ae 0e       	add	r10, r30
    2d8a:	b1 1c       	adc	r11, r1
    2d8c:	6e 01       	movw	r12, r28
    2d8e:	f9 e4       	ldi	r31, 0x49	; 73
    2d90:	cf 0e       	add	r12, r31
    2d92:	d1 1c       	adc	r13, r1
    2d94:	f5 01       	movw	r30, r10
    2d96:	60 81       	ld	r22, Z
    2d98:	c7 01       	movw	r24, r14
    2d9a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <u8g2_font_decode_get_unsigned_bits>
    2d9e:	08 2f       	mov	r16, r24
    2da0:	f6 01       	movw	r30, r12
    2da2:	60 81       	ld	r22, Z
    2da4:	c7 01       	movw	r24, r14
    2da6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <u8g2_font_decode_get_unsigned_bits>
    2daa:	18 2f       	mov	r17, r24
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	60 2f       	mov	r22, r16
    2db0:	ce 01       	movw	r24, r28
    2db2:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <u8g2_font_decode_len>
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	61 2f       	mov	r22, r17
    2dba:	ce 01       	movw	r24, r28
    2dbc:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <u8g2_font_decode_len>
    2dc0:	61 e0       	ldi	r22, 0x01	; 1
    2dc2:	c7 01       	movw	r24, r14
    2dc4:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <u8g2_font_decode_get_unsigned_bits>
    2dc8:	81 11       	cpse	r24, r1
    2dca:	f0 cf       	rjmp	.-32     	; 0x2dac <u8g2_font_decode_glyph+0x122>
    2dcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dce:	89 15       	cp	r24, r9
    2dd0:	0c f3       	brlt	.-62     	; 0x2d94 <u8g2_font_decode_glyph+0x10a>
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	ed 59       	subi	r30, 0x9D	; 157
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	cd 5b       	subi	r28, 0xBD	; 189
    2dda:	df 4f       	sbci	r29, 0xFF	; 255
    2ddc:	88 81       	ld	r24, Y
    2dde:	80 83       	st	Z, r24
    2de0:	88 2d       	mov	r24, r8
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	1f 91       	pop	r17
    2de8:	0f 91       	pop	r16
    2dea:	ff 90       	pop	r15
    2dec:	ef 90       	pop	r14
    2dee:	df 90       	pop	r13
    2df0:	cf 90       	pop	r12
    2df2:	bf 90       	pop	r11
    2df4:	af 90       	pop	r10
    2df6:	9f 90       	pop	r9
    2df8:	8f 90       	pop	r8
    2dfa:	08 95       	ret

00002dfc <u8g2_font_get_glyph_data>:
    2dfc:	ef 92       	push	r14
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	fc 01       	movw	r30, r24
    2e0a:	c5 a9       	ldd	r28, Z+53	; 0x35
    2e0c:	d6 a9       	ldd	r29, Z+54	; 0x36
    2e0e:	67 96       	adiw	r28, 0x17	; 23
    2e10:	6f 3f       	cpi	r22, 0xFF	; 255
    2e12:	71 05       	cpc	r23, r1
    2e14:	11 f0       	breq	.+4      	; 0x2e1a <u8g2_font_get_glyph_data+0x1e>
    2e16:	08 f0       	brcs	.+2      	; 0x2e1a <u8g2_font_get_glyph_data+0x1e>
    2e18:	36 c0       	rjmp	.+108    	; 0x2e86 <u8g2_font_get_glyph_data+0x8a>
    2e1a:	61 36       	cpi	r22, 0x61	; 97
    2e1c:	71 05       	cpc	r23, r1
    2e1e:	38 f0       	brcs	.+14     	; 0x2e2e <u8g2_font_get_glyph_data+0x32>
    2e20:	e7 5a       	subi	r30, 0xA7	; 167
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	c8 0f       	add	r28, r24
    2e2a:	d9 1f       	adc	r29, r25
    2e2c:	0a c0       	rjmp	.+20     	; 0x2e42 <u8g2_font_get_glyph_data+0x46>
    2e2e:	61 34       	cpi	r22, 0x41	; 65
    2e30:	71 05       	cpc	r23, r1
    2e32:	38 f0       	brcs	.+14     	; 0x2e42 <u8g2_font_get_glyph_data+0x46>
    2e34:	fc 01       	movw	r30, r24
    2e36:	e9 5a       	subi	r30, 0xA9	; 169
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	c8 0f       	add	r28, r24
    2e40:	d9 1f       	adc	r29, r25
    2e42:	ce 01       	movw	r24, r28
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	fc 01       	movw	r30, r24
    2e48:	24 91       	lpm	r18, Z
    2e4a:	22 23       	and	r18, r18
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <u8g2_font_get_glyph_data+0x54>
    2e4e:	5a c0       	rjmp	.+180    	; 0x2f04 <u8g2_font_get_glyph_data+0x108>
    2e50:	fe 01       	movw	r30, r28
    2e52:	24 91       	lpm	r18, Z
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	62 17       	cp	r22, r18
    2e58:	73 07       	cpc	r23, r19
    2e5a:	51 f4       	brne	.+20     	; 0x2e70 <u8g2_font_get_glyph_data+0x74>
    2e5c:	06 c0       	rjmp	.+12     	; 0x2e6a <u8g2_font_get_glyph_data+0x6e>
    2e5e:	fe 01       	movw	r30, r28
    2e60:	24 91       	lpm	r18, Z
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	62 17       	cp	r22, r18
    2e66:	73 07       	cpc	r23, r19
    2e68:	19 f4       	brne	.+6      	; 0x2e70 <u8g2_font_get_glyph_data+0x74>
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	02 96       	adiw	r24, 0x02	; 2
    2e6e:	52 c0       	rjmp	.+164    	; 0x2f14 <u8g2_font_get_glyph_data+0x118>
    2e70:	fc 01       	movw	r30, r24
    2e72:	84 91       	lpm	r24, Z
    2e74:	c8 0f       	add	r28, r24
    2e76:	d1 1d       	adc	r29, r1
    2e78:	ce 01       	movw	r24, r28
    2e7a:	01 96       	adiw	r24, 0x01	; 1
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	24 91       	lpm	r18, Z
    2e80:	21 11       	cpse	r18, r1
    2e82:	ed cf       	rjmp	.-38     	; 0x2e5e <u8g2_font_get_glyph_data+0x62>
    2e84:	42 c0       	rjmp	.+132    	; 0x2f0a <u8g2_font_get_glyph_data+0x10e>
    2e86:	8b 01       	movw	r16, r22
    2e88:	fc 01       	movw	r30, r24
    2e8a:	e5 5a       	subi	r30, 0xA5	; 165
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	c8 0f       	add	r28, r24
    2e94:	d9 1f       	adc	r29, r25
    2e96:	7e 01       	movw	r14, r28
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	c7 01       	movw	r24, r14
    2e9c:	0e 94 bd 14 	call	0x297a	; 0x297a <u8g2_font_get_word>
    2ea0:	c8 0f       	add	r28, r24
    2ea2:	d9 1f       	adc	r29, r25
    2ea4:	62 e0       	ldi	r22, 0x02	; 2
    2ea6:	c7 01       	movw	r24, r14
    2ea8:	0e 94 bd 14 	call	0x297a	; 0x297a <u8g2_font_get_word>
    2eac:	f4 e0       	ldi	r31, 0x04	; 4
    2eae:	ef 0e       	add	r14, r31
    2eb0:	f1 1c       	adc	r15, r1
    2eb2:	80 17       	cp	r24, r16
    2eb4:	91 07       	cpc	r25, r17
    2eb6:	80 f3       	brcs	.-32     	; 0x2e98 <u8g2_font_get_glyph_data+0x9c>
    2eb8:	fe 01       	movw	r30, r28
    2eba:	84 91       	lpm	r24, Z
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	98 2f       	mov	r25, r24
    2ec0:	88 27       	eor	r24, r24
    2ec2:	31 96       	adiw	r30, 0x01	; 1
    2ec4:	e4 91       	lpm	r30, Z
    2ec6:	8e 2b       	or	r24, r30
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	11 f1       	breq	.+68     	; 0x2f10 <u8g2_font_get_glyph_data+0x114>
    2ecc:	08 17       	cp	r16, r24
    2ece:	19 07       	cpc	r17, r25
    2ed0:	39 f4       	brne	.+14     	; 0x2ee0 <u8g2_font_get_glyph_data+0xe4>
    2ed2:	03 c0       	rjmp	.+6      	; 0x2eda <u8g2_font_get_glyph_data+0xde>
    2ed4:	08 17       	cp	r16, r24
    2ed6:	19 07       	cpc	r17, r25
    2ed8:	19 f4       	brne	.+6      	; 0x2ee0 <u8g2_font_get_glyph_data+0xe4>
    2eda:	ce 01       	movw	r24, r28
    2edc:	03 96       	adiw	r24, 0x03	; 3
    2ede:	1a c0       	rjmp	.+52     	; 0x2f14 <u8g2_font_get_glyph_data+0x118>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	32 96       	adiw	r30, 0x02	; 2
    2ee4:	e4 91       	lpm	r30, Z
    2ee6:	ce 0f       	add	r28, r30
    2ee8:	d1 1d       	adc	r29, r1
    2eea:	fe 01       	movw	r30, r28
    2eec:	84 91       	lpm	r24, Z
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	98 2f       	mov	r25, r24
    2ef2:	88 27       	eor	r24, r24
    2ef4:	31 96       	adiw	r30, 0x01	; 1
    2ef6:	e4 91       	lpm	r30, Z
    2ef8:	8e 2b       	or	r24, r30
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	59 f7       	brne	.-42     	; 0x2ed4 <u8g2_font_get_glyph_data+0xd8>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	08 c0       	rjmp	.+16     	; 0x2f14 <u8g2_font_get_glyph_data+0x118>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	05 c0       	rjmp	.+10     	; 0x2f14 <u8g2_font_get_glyph_data+0x118>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	02 c0       	rjmp	.+4      	; 0x2f14 <u8g2_font_get_glyph_data+0x118>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	ff 90       	pop	r15
    2f1e:	ef 90       	pop	r14
    2f20:	08 95       	ret

00002f22 <u8g2_GetGlyphWidth>:
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	ec 01       	movw	r28, r24
    2f2c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <u8g2_font_get_glyph_data>
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	f1 f0       	breq	.+60     	; 0x2f70 <u8g2_GetGlyphWidth+0x4e>
    2f34:	bc 01       	movw	r22, r24
    2f36:	ce 01       	movw	r24, r28
    2f38:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <u8g2_font_setup_decode>
    2f3c:	8e 01       	movw	r16, r28
    2f3e:	07 5c       	subi	r16, 0xC7	; 199
    2f40:	1f 4f       	sbci	r17, 0xFF	; 255
    2f42:	fe 01       	movw	r30, r28
    2f44:	e4 5b       	subi	r30, 0xB4	; 180
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	60 81       	ld	r22, Z
    2f4a:	c8 01       	movw	r24, r16
    2f4c:	0e 94 88 15 	call	0x2b10	; 0x2b10 <u8g2_font_decode_get_signed_bits>
    2f50:	fe 01       	movw	r30, r28
    2f52:	ef 59       	subi	r30, 0x9F	; 159
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 83       	st	Z, r24
    2f58:	74 97       	sbiw	r30, 0x14	; 20
    2f5a:	60 81       	ld	r22, Z
    2f5c:	c8 01       	movw	r24, r16
    2f5e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <u8g2_font_decode_get_signed_bits>
    2f62:	c2 5b       	subi	r28, 0xB2	; 178
    2f64:	df 4f       	sbci	r29, 0xFF	; 255
    2f66:	68 81       	ld	r22, Y
    2f68:	c8 01       	movw	r24, r16
    2f6a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <u8g2_font_decode_get_signed_bits>
    2f6e:	01 c0       	rjmp	.+2      	; 0x2f72 <u8g2_GetGlyphWidth+0x50>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	df 91       	pop	r29
    2f74:	cf 91       	pop	r28
    2f76:	1f 91       	pop	r17
    2f78:	0f 91       	pop	r16
    2f7a:	08 95       	ret

00002f7c <u8g2_string_width>:
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	ec 01       	movw	r28, r24
    2f8a:	e6 2e       	mov	r14, r22
    2f8c:	f7 2e       	mov	r15, r23
    2f8e:	1f ae       	std	Y+63, r1	; 0x3f
    2f90:	0e 94 00 1b 	call	0x3600	; 0x3600 <u8x8_utf8_init>
    2f94:	0e 2d       	mov	r16, r14
    2f96:	1f 2d       	mov	r17, r15
    2f98:	e1 2c       	mov	r14, r1
    2f9a:	f1 2c       	mov	r15, r1
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	61 91       	ld	r22, Z+
    2fa0:	8f 01       	movw	r16, r30
    2fa2:	ea 81       	ldd	r30, Y+2	; 0x02
    2fa4:	fb 81       	ldd	r31, Y+3	; 0x03
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	09 95       	icall
    2faa:	8f 3f       	cpi	r24, 0xFF	; 255
    2fac:	ff ef       	ldi	r31, 0xFF	; 255
    2fae:	9f 07       	cpc	r25, r31
    2fb0:	59 f0       	breq	.+22     	; 0x2fc8 <u8g2_string_width+0x4c>
    2fb2:	8e 3f       	cpi	r24, 0xFE	; 254
    2fb4:	2f ef       	ldi	r18, 0xFF	; 255
    2fb6:	92 07       	cpc	r25, r18
    2fb8:	89 f3       	breq	.-30     	; 0x2f9c <u8g2_string_width+0x20>
    2fba:	bc 01       	movw	r22, r24
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	0e 94 91 17 	call	0x2f22	; 0x2f22 <u8g2_GetGlyphWidth>
    2fc2:	e8 2e       	mov	r14, r24
    2fc4:	f8 0e       	add	r15, r24
    2fc6:	ea cf       	rjmp	.-44     	; 0x2f9c <u8g2_string_width+0x20>
    2fc8:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fca:	88 23       	and	r24, r24
    2fcc:	31 f0       	breq	.+12     	; 0x2fda <u8g2_string_width+0x5e>
    2fce:	cf 59       	subi	r28, 0x9F	; 159
    2fd0:	df 4f       	sbci	r29, 0xFF	; 255
    2fd2:	98 81       	ld	r25, Y
    2fd4:	89 0f       	add	r24, r25
    2fd6:	f8 0e       	add	r15, r24
    2fd8:	fe 18       	sub	r15, r14
    2fda:	8f 2d       	mov	r24, r15
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	1f 91       	pop	r17
    2fe2:	0f 91       	pop	r16
    2fe4:	ff 90       	pop	r15
    2fe6:	ef 90       	pop	r14
    2fe8:	08 95       	ret

00002fea <u8g2_DrawGlyph>:
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	ec 01       	movw	r28, r24
    2ff8:	06 2f       	mov	r16, r22
    2ffa:	14 2f       	mov	r17, r20
    2ffc:	79 01       	movw	r14, r18
    2ffe:	fc 01       	movw	r30, r24
    3000:	eb 5b       	subi	r30, 0xBB	; 187
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 81       	ld	r24, Z
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	61 f0       	breq	.+24     	; 0x3022 <u8g2_DrawGlyph+0x38>
    300a:	28 f0       	brcs	.+10     	; 0x3016 <u8g2_DrawGlyph+0x2c>
    300c:	82 30       	cpi	r24, 0x02	; 2
    300e:	79 f0       	breq	.+30     	; 0x302e <u8g2_DrawGlyph+0x44>
    3010:	83 30       	cpi	r24, 0x03	; 3
    3012:	99 f0       	breq	.+38     	; 0x303a <u8g2_DrawGlyph+0x50>
    3014:	17 c0       	rjmp	.+46     	; 0x3044 <u8g2_DrawGlyph+0x5a>
    3016:	ef a9       	ldd	r30, Y+55	; 0x37
    3018:	f8 ad       	ldd	r31, Y+56	; 0x38
    301a:	ce 01       	movw	r24, r28
    301c:	09 95       	icall
    301e:	18 0f       	add	r17, r24
    3020:	11 c0       	rjmp	.+34     	; 0x3044 <u8g2_DrawGlyph+0x5a>
    3022:	ef a9       	ldd	r30, Y+55	; 0x37
    3024:	f8 ad       	ldd	r31, Y+56	; 0x38
    3026:	ce 01       	movw	r24, r28
    3028:	09 95       	icall
    302a:	08 1b       	sub	r16, r24
    302c:	0b c0       	rjmp	.+22     	; 0x3044 <u8g2_DrawGlyph+0x5a>
    302e:	ef a9       	ldd	r30, Y+55	; 0x37
    3030:	f8 ad       	ldd	r31, Y+56	; 0x38
    3032:	ce 01       	movw	r24, r28
    3034:	09 95       	icall
    3036:	18 1b       	sub	r17, r24
    3038:	05 c0       	rjmp	.+10     	; 0x3044 <u8g2_DrawGlyph+0x5a>
    303a:	ef a9       	ldd	r30, Y+55	; 0x37
    303c:	f8 ad       	ldd	r31, Y+56	; 0x38
    303e:	ce 01       	movw	r24, r28
    3040:	09 95       	icall
    3042:	08 0f       	add	r16, r24
    3044:	0b af       	std	Y+59, r16	; 0x3b
    3046:	1c af       	std	Y+60, r17	; 0x3c
    3048:	b7 01       	movw	r22, r14
    304a:	ce 01       	movw	r24, r28
    304c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <u8g2_font_get_glyph_data>
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	29 f0       	breq	.+10     	; 0x305e <u8g2_DrawGlyph+0x74>
    3054:	bc 01       	movw	r22, r24
    3056:	ce 01       	movw	r24, r28
    3058:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <u8g2_font_decode_glyph>
    305c:	01 c0       	rjmp	.+2      	; 0x3060 <u8g2_DrawGlyph+0x76>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	1f 91       	pop	r17
    3066:	0f 91       	pop	r16
    3068:	ff 90       	pop	r15
    306a:	ef 90       	pop	r14
    306c:	08 95       	ret

0000306e <u8g2_draw_string>:
    306e:	bf 92       	push	r11
    3070:	cf 92       	push	r12
    3072:	df 92       	push	r13
    3074:	ef 92       	push	r14
    3076:	ff 92       	push	r15
    3078:	0f 93       	push	r16
    307a:	1f 93       	push	r17
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	ec 01       	movw	r28, r24
    3082:	b6 2e       	mov	r11, r22
    3084:	c4 2e       	mov	r12, r20
    3086:	e2 2e       	mov	r14, r18
    3088:	f3 2e       	mov	r15, r19
    308a:	0e 94 00 1b 	call	0x3600	; 0x3600 <u8x8_utf8_init>
    308e:	0e 2d       	mov	r16, r14
    3090:	1f 2d       	mov	r17, r15
    3092:	d1 2c       	mov	r13, r1
    3094:	7e 01       	movw	r14, r28
    3096:	25 e4       	ldi	r18, 0x45	; 69
    3098:	e2 0e       	add	r14, r18
    309a:	f1 1c       	adc	r15, r1
    309c:	f8 01       	movw	r30, r16
    309e:	61 91       	ld	r22, Z+
    30a0:	8f 01       	movw	r16, r30
    30a2:	ea 81       	ldd	r30, Y+2	; 0x02
    30a4:	fb 81       	ldd	r31, Y+3	; 0x03
    30a6:	ce 01       	movw	r24, r28
    30a8:	09 95       	icall
    30aa:	8f 3f       	cpi	r24, 0xFF	; 255
    30ac:	ff ef       	ldi	r31, 0xFF	; 255
    30ae:	9f 07       	cpc	r25, r31
    30b0:	e9 f0       	breq	.+58     	; 0x30ec <u8g2_draw_string+0x7e>
    30b2:	8e 3f       	cpi	r24, 0xFE	; 254
    30b4:	2f ef       	ldi	r18, 0xFF	; 255
    30b6:	92 07       	cpc	r25, r18
    30b8:	89 f3       	breq	.-30     	; 0x309c <u8g2_draw_string+0x2e>
    30ba:	9c 01       	movw	r18, r24
    30bc:	4c 2d       	mov	r20, r12
    30be:	6b 2d       	mov	r22, r11
    30c0:	ce 01       	movw	r24, r28
    30c2:	0e 94 f5 17 	call	0x2fea	; 0x2fea <u8g2_DrawGlyph>
    30c6:	f7 01       	movw	r30, r14
    30c8:	90 81       	ld	r25, Z
    30ca:	91 30       	cpi	r25, 0x01	; 1
    30cc:	41 f0       	breq	.+16     	; 0x30de <u8g2_draw_string+0x70>
    30ce:	28 f0       	brcs	.+10     	; 0x30da <u8g2_draw_string+0x6c>
    30d0:	92 30       	cpi	r25, 0x02	; 2
    30d2:	39 f0       	breq	.+14     	; 0x30e2 <u8g2_draw_string+0x74>
    30d4:	93 30       	cpi	r25, 0x03	; 3
    30d6:	39 f0       	breq	.+14     	; 0x30e6 <u8g2_draw_string+0x78>
    30d8:	07 c0       	rjmp	.+14     	; 0x30e8 <u8g2_draw_string+0x7a>
    30da:	b8 0e       	add	r11, r24
    30dc:	05 c0       	rjmp	.+10     	; 0x30e8 <u8g2_draw_string+0x7a>
    30de:	c8 0e       	add	r12, r24
    30e0:	03 c0       	rjmp	.+6      	; 0x30e8 <u8g2_draw_string+0x7a>
    30e2:	b8 1a       	sub	r11, r24
    30e4:	01 c0       	rjmp	.+2      	; 0x30e8 <u8g2_draw_string+0x7a>
    30e6:	c8 1a       	sub	r12, r24
    30e8:	d8 0e       	add	r13, r24
    30ea:	d8 cf       	rjmp	.-80     	; 0x309c <u8g2_draw_string+0x2e>
    30ec:	8d 2d       	mov	r24, r13
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	ff 90       	pop	r15
    30f8:	ef 90       	pop	r14
    30fa:	df 90       	pop	r13
    30fc:	cf 90       	pop	r12
    30fe:	bf 90       	pop	r11
    3100:	08 95       	ret

00003102 <u8g2_DrawStr>:
    3102:	e3 ef       	ldi	r30, 0xF3	; 243
    3104:	fa e1       	ldi	r31, 0x1A	; 26
    3106:	dc 01       	movw	r26, r24
    3108:	13 96       	adiw	r26, 0x03	; 3
    310a:	fc 93       	st	X, r31
    310c:	ee 93       	st	-X, r30
    310e:	12 97       	sbiw	r26, 0x02	; 2
    3110:	0e 94 37 18 	call	0x306e	; 0x306e <u8g2_draw_string>
    3114:	08 95       	ret

00003116 <u8g2_UpdateRefHeight>:
    3116:	fc 01       	movw	r30, r24
    3118:	25 a9       	ldd	r18, Z+53	; 0x35
    311a:	36 a9       	ldd	r19, Z+54	; 0x36
    311c:	23 2b       	or	r18, r19
    311e:	e9 f1       	breq	.+122    	; 0x319a <u8g2_UpdateRefHeight+0x84>
    3120:	ed 5a       	subi	r30, 0xAD	; 173
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	20 81       	ld	r18, Z
    3126:	3c 96       	adiw	r30, 0x0c	; 12
    3128:	20 83       	st	Z, r18
    312a:	3b 97       	sbiw	r30, 0x0b	; 11
    312c:	40 81       	ld	r20, Z
    312e:	3c 96       	adiw	r30, 0x0c	; 12
    3130:	40 83       	st	Z, r20
    3132:	32 97       	sbiw	r30, 0x02	; 2
    3134:	30 81       	ld	r19, Z
    3136:	33 23       	and	r19, r19
    3138:	81 f1       	breq	.+96     	; 0x319a <u8g2_UpdateRefHeight+0x84>
    313a:	31 30       	cpi	r19, 0x01	; 1
    313c:	79 f4       	brne	.+30     	; 0x315c <u8g2_UpdateRefHeight+0x46>
    313e:	39 97       	sbiw	r30, 0x09	; 9
    3140:	30 81       	ld	r19, Z
    3142:	23 17       	cp	r18, r19
    3144:	14 f4       	brge	.+4      	; 0x314a <u8g2_UpdateRefHeight+0x34>
    3146:	3a 96       	adiw	r30, 0x0a	; 10
    3148:	30 83       	st	Z, r19
    314a:	fc 01       	movw	r30, r24
    314c:	ea 5a       	subi	r30, 0xAA	; 170
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	20 81       	ld	r18, Z
    3152:	24 17       	cp	r18, r20
    3154:	14 f5       	brge	.+68     	; 0x319a <u8g2_UpdateRefHeight+0x84>
    3156:	3a 96       	adiw	r30, 0x0a	; 10
    3158:	20 83       	st	Z, r18
    315a:	08 95       	ret
    315c:	fc 01       	movw	r30, r24
    315e:	e0 5b       	subi	r30, 0xB0	; 176
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	e0 81       	ld	r30, Z
    3164:	dc 01       	movw	r26, r24
    3166:	ae 5a       	subi	r26, 0xAE	; 174
    3168:	bf 4f       	sbci	r27, 0xFF	; 255
    316a:	5c 91       	ld	r21, X
    316c:	02 2e       	mov	r0, r18
    316e:	00 0c       	add	r0, r0
    3170:	33 0b       	sbc	r19, r19
    3172:	65 2f       	mov	r22, r21
    3174:	05 2e       	mov	r0, r21
    3176:	00 0c       	add	r0, r0
    3178:	77 0b       	sbc	r23, r23
    317a:	6e 0f       	add	r22, r30
    317c:	71 1d       	adc	r23, r1
    317e:	e7 fd       	sbrc	r30, 7
    3180:	7a 95       	dec	r23
    3182:	26 17       	cp	r18, r22
    3184:	37 07       	cpc	r19, r23
    3186:	1c f4       	brge	.+6      	; 0x318e <u8g2_UpdateRefHeight+0x78>
    3188:	1d 96       	adiw	r26, 0x0d	; 13
    318a:	e5 0f       	add	r30, r21
    318c:	ec 93       	st	X, r30
    318e:	54 17       	cp	r21, r20
    3190:	24 f4       	brge	.+8      	; 0x319a <u8g2_UpdateRefHeight+0x84>
    3192:	fc 01       	movw	r30, r24
    3194:	e0 5a       	subi	r30, 0xA0	; 160
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	50 83       	st	Z, r21
    319a:	08 95       	ret

0000319c <u8g2_SetFontPosBaseline>:
    319c:	29 ec       	ldi	r18, 0xC9	; 201
    319e:	34 e1       	ldi	r19, 0x14	; 20
    31a0:	fc 01       	movw	r30, r24
    31a2:	30 af       	std	Z+56, r19	; 0x38
    31a4:	27 ab       	std	Z+55, r18	; 0x37
    31a6:	08 95       	ret

000031a8 <u8g2_SetFont>:
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	fc 01       	movw	r30, r24
    31ae:	25 a9       	ldd	r18, Z+53	; 0x35
    31b0:	36 a9       	ldd	r19, Z+54	; 0x36
    31b2:	26 17       	cp	r18, r22
    31b4:	37 07       	cpc	r19, r23
    31b6:	51 f0       	breq	.+20     	; 0x31cc <u8g2_SetFont+0x24>
    31b8:	ec 01       	movw	r28, r24
    31ba:	76 ab       	std	Z+54, r23	; 0x36
    31bc:	65 ab       	std	Z+53, r22	; 0x35
    31be:	8a 5b       	subi	r24, 0xBA	; 186
    31c0:	9f 4f       	sbci	r25, 0xFF	; 255
    31c2:	0e 94 cb 14 	call	0x2996	; 0x2996 <u8g2_read_font_info>
    31c6:	ce 01       	movw	r24, r28
    31c8:	0e 94 8b 18 	call	0x3116	; 0x3116 <u8g2_UpdateRefHeight>
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	08 95       	ret

000031d2 <u8g2_GetStrWidth>:
    31d2:	23 ef       	ldi	r18, 0xF3	; 243
    31d4:	3a e1       	ldi	r19, 0x1A	; 26
    31d6:	fc 01       	movw	r30, r24
    31d8:	33 83       	std	Z+3, r19	; 0x03
    31da:	22 83       	std	Z+2, r18	; 0x02
    31dc:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <u8g2_string_width>
    31e0:	08 95       	ret

000031e2 <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    31e2:	8b 5b       	subi	r24, 0xBB	; 187
    31e4:	9f 4f       	sbci	r25, 0xFF	; 255
    31e6:	fc 01       	movw	r30, r24
    31e8:	60 83       	st	Z, r22
    31ea:	08 95       	ret

000031ec <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    31ec:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    31ee:	dc 01       	movw	r26, r24
    31f0:	98 96       	adiw	r26, 0x28	; 40
    31f2:	3c 91       	ld	r19, X
    31f4:	98 97       	sbiw	r26, 0x28	; 40
    31f6:	43 1b       	sub	r20, r19
    31f8:	5e 96       	adiw	r26, 0x1e	; 30
    31fa:	ed 91       	ld	r30, X+
    31fc:	fc 91       	ld	r31, X
    31fe:	5f 97       	sbiw	r26, 0x1f	; 31
    3200:	09 95       	icall
}
    3202:	0f 91       	pop	r16
    3204:	08 95       	ret

00003206 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3206:	0f 93       	push	r16
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    3208:	fc 01       	movw	r30, r24
    320a:	e3 5a       	subi	r30, 0xA3	; 163
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	30 81       	ld	r19, Z
    3210:	33 23       	and	r19, r19
    3212:	09 f4       	brne	.+2      	; 0x3216 <u8g2_DrawHVLine+0x10>
    3214:	65 c0       	rjmp	.+202    	; 0x32e0 <u8g2_DrawHVLine+0xda>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    3216:	22 23       	and	r18, r18
    3218:	09 f4       	brne	.+2      	; 0x321c <u8g2_DrawHVLine+0x16>
    321a:	62 c0       	rjmp	.+196    	; 0x32e0 <u8g2_DrawHVLine+0xda>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    321c:	22 30       	cpi	r18, 0x02	; 2
    321e:	58 f0       	brcs	.+22     	; 0x3236 <u8g2_DrawHVLine+0x30>
      {
	if ( dir == 2 )
    3220:	02 30       	cpi	r16, 0x02	; 2
    3222:	19 f4       	brne	.+6      	; 0x322a <u8g2_DrawHVLine+0x24>
    3224:	6f 5f       	subi	r22, 0xFF	; 255
	{
	  x -= len;
	  x++;
    3226:	62 1b       	sub	r22, r18
    3228:	0a c0       	rjmp	.+20     	; 0x323e <u8g2_DrawHVLine+0x38>
	}
	else if ( dir == 3 )
    322a:	03 30       	cpi	r16, 0x03	; 3
    322c:	21 f4       	brne	.+8      	; 0x3236 <u8g2_DrawHVLine+0x30>
    322e:	4f 5f       	subi	r20, 0xFF	; 255
	{
	  y -= len;
	  y++;
    3230:	42 1b       	sub	r20, r18
	}
      }
      dir &= 1;  
    3232:	51 e0       	ldi	r21, 0x01	; 1
    3234:	2d c0       	rjmp	.+90     	; 0x3290 <u8g2_DrawHVLine+0x8a>
      
      /* clip against the user window */
      if ( dir == 0 )
    3236:	50 2f       	mov	r21, r16
    3238:	51 70       	andi	r21, 0x01	; 1
    323a:	00 fd       	sbrc	r16, 0
    323c:	29 c0       	rjmp	.+82     	; 0x3290 <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
    323e:	dc 01       	movw	r26, r24
    3240:	9f 96       	adiw	r26, 0x2f	; 47
    3242:	3c 91       	ld	r19, X
    3244:	9f 97       	sbiw	r26, 0x2f	; 47
    3246:	43 17       	cp	r20, r19
    3248:	08 f4       	brcc	.+2      	; 0x324c <u8g2_DrawHVLine+0x46>
    324a:	4a c0       	rjmp	.+148    	; 0x32e0 <u8g2_DrawHVLine+0xda>
	  return;
	if ( y >= u8g2->user_y1 )
    324c:	d0 96       	adiw	r26, 0x30	; 48
    324e:	3c 91       	ld	r19, X
    3250:	d0 97       	sbiw	r26, 0x30	; 48
    3252:	43 17       	cp	r20, r19
    3254:	08 f0       	brcs	.+2      	; 0x3258 <u8g2_DrawHVLine+0x52>
    3256:	44 c0       	rjmp	.+136    	; 0x32e0 <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    3258:	9e 96       	adiw	r26, 0x2e	; 46
    325a:	3c 91       	ld	r19, X
    325c:	9e 97       	sbiw	r26, 0x2e	; 46
    325e:	9d 96       	adiw	r26, 0x2d	; 45
    3260:	5c 91       	ld	r21, X
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    3262:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    3264:	26 17       	cp	r18, r22
    3266:	30 f4       	brcc	.+12     	; 0x3274 <u8g2_DrawHVLine+0x6e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    3268:	63 17       	cp	r22, r19
    326a:	18 f4       	brcc	.+6      	; 0x3272 <u8g2_DrawHVLine+0x6c>
    {
      b = d;
      b--;
    326c:	2f ef       	ldi	r18, 0xFF	; 255
    326e:	23 0f       	add	r18, r19
    3270:	03 c0       	rjmp	.+6      	; 0x3278 <u8g2_DrawHVLine+0x72>
    }
    else
    {
      a = c;
    3272:	65 2f       	mov	r22, r21
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    3274:	63 17       	cp	r22, r19
    3276:	a0 f5       	brcc	.+104    	; 0x32e0 <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    3278:	52 17       	cp	r21, r18
    327a:	90 f5       	brcc	.+100    	; 0x32e0 <u8g2_DrawHVLine+0xda>
    327c:	65 17       	cp	r22, r21
    327e:	08 f4       	brcc	.+2      	; 0x3282 <u8g2_DrawHVLine+0x7c>
    3280:	65 2f       	mov	r22, r21
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    3282:	23 17       	cp	r18, r19
    3284:	08 f4       	brcc	.+2      	; 0x3288 <u8g2_DrawHVLine+0x82>
    3286:	32 2f       	mov	r19, r18
    3288:	23 2f       	mov	r18, r19
    328a:	26 1b       	sub	r18, r22
    328c:	50 e0       	ldi	r21, 0x00	; 0
    328e:	1e c0       	rjmp	.+60     	; 0x32cc <u8g2_DrawHVLine+0xc6>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    3290:	fc 01       	movw	r30, r24
    3292:	35 a5       	ldd	r19, Z+45	; 0x2d
    3294:	63 17       	cp	r22, r19
    3296:	20 f1       	brcs	.+72     	; 0x32e0 <u8g2_DrawHVLine+0xda>
	  return;
	if ( x >= u8g2->user_x1 )
    3298:	36 a5       	ldd	r19, Z+46	; 0x2e
    329a:	63 17       	cp	r22, r19
    329c:	08 f5       	brcc	.+66     	; 0x32e0 <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    329e:	30 a9       	ldd	r19, Z+48	; 0x30
    32a0:	77 a5       	ldd	r23, Z+47	; 0x2f
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    32a2:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    32a4:	24 17       	cp	r18, r20
    32a6:	30 f4       	brcc	.+12     	; 0x32b4 <u8g2_DrawHVLine+0xae>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    32a8:	43 17       	cp	r20, r19
    32aa:	18 f4       	brcc	.+6      	; 0x32b2 <u8g2_DrawHVLine+0xac>
    {
      b = d;
      b--;
    32ac:	2f ef       	ldi	r18, 0xFF	; 255
    32ae:	23 0f       	add	r18, r19
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <u8g2_DrawHVLine+0xb2>
    }
    else
    {
      a = c;
    32b2:	47 2f       	mov	r20, r23
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    32b4:	43 17       	cp	r20, r19
    32b6:	a0 f4       	brcc	.+40     	; 0x32e0 <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    32b8:	72 17       	cp	r23, r18
    32ba:	90 f4       	brcc	.+36     	; 0x32e0 <u8g2_DrawHVLine+0xda>
    32bc:	47 17       	cp	r20, r23
    32be:	08 f4       	brcc	.+2      	; 0x32c2 <u8g2_DrawHVLine+0xbc>
    32c0:	47 2f       	mov	r20, r23
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    32c2:	23 17       	cp	r18, r19
    32c4:	08 f4       	brcc	.+2      	; 0x32c8 <u8g2_DrawHVLine+0xc2>
    32c6:	32 2f       	mov	r19, r18
    32c8:	23 2f       	mov	r18, r19
    32ca:	24 1b       	sub	r18, r20
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    32cc:	dc 01       	movw	r26, r24
    32ce:	90 96       	adiw	r26, 0x20	; 32
    32d0:	ed 91       	ld	r30, X+
    32d2:	fc 91       	ld	r31, X
    32d4:	91 97       	sbiw	r26, 0x21	; 33
    32d6:	04 80       	ldd	r0, Z+4	; 0x04
    32d8:	f5 81       	ldd	r31, Z+5	; 0x05
    32da:	e0 2d       	mov	r30, r0
    32dc:	05 2f       	mov	r16, r21
    32de:	09 95       	icall
    }
}
    32e0:	0f 91       	pop	r16
    32e2:	08 95       	ret

000032e4 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    32e4:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    32e6:	00 e0       	ldi	r16, 0x00	; 0
    32e8:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
}
    32ec:	0f 91       	pop	r16
    32ee:	08 95       	ret

000032f0 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    32f0:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
    32f2:	01 e0       	ldi	r16, 0x01	; 1
    32f4:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
}
    32f8:	0f 91       	pop	r16
    32fa:	08 95       	ret

000032fc <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    32fc:	0f 93       	push	r16
    32fe:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    3300:	87 a5       	ldd	r24, Z+47	; 0x2f
    3302:	48 17       	cp	r20, r24
    3304:	70 f0       	brcs	.+28     	; 0x3322 <u8g2_DrawPixel+0x26>
    return;
  if ( y >= u8g2->user_y1 )
    3306:	80 a9       	ldd	r24, Z+48	; 0x30
    3308:	48 17       	cp	r20, r24
    330a:	58 f4       	brcc	.+22     	; 0x3322 <u8g2_DrawPixel+0x26>
    return;
  if ( x < u8g2->user_x0 )
    330c:	85 a5       	ldd	r24, Z+45	; 0x2d
    330e:	68 17       	cp	r22, r24
    3310:	40 f0       	brcs	.+16     	; 0x3322 <u8g2_DrawPixel+0x26>
    return;
  if ( x >= u8g2->user_x1 )
    3312:	86 a5       	ldd	r24, Z+46	; 0x2e
    3314:	68 17       	cp	r22, r24
    3316:	28 f4       	brcc	.+10     	; 0x3322 <u8g2_DrawPixel+0x26>
    3318:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    331a:	00 e0       	ldi	r16, 0x00	; 0
    331c:	21 e0       	ldi	r18, 0x01	; 1
    331e:	0e 94 03 19 	call	0x3206	; 0x3206 <u8g2_DrawHVLine>
}
    3322:	0f 91       	pop	r16
    3324:	08 95       	ret

00003326 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    3326:	63 30       	cpi	r22, 0x03	; 3
    3328:	28 f4       	brcc	.+10     	; 0x3334 <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    332a:	fc 01       	movw	r30, r24
    332c:	ed 59       	subi	r30, 0x9D	; 157
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	60 83       	st	Z, r22
    3332:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    3334:	fc 01       	movw	r30, r24
    3336:	ed 59       	subi	r30, 0x9D	; 157
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	21 e0       	ldi	r18, 0x01	; 1
    333c:	20 83       	st	Z, r18
    333e:	08 95       	ret

00003340 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    3340:	46 17       	cp	r20, r22
    3342:	38 f4       	brcc	.+14     	; 0x3352 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
    3344:	82 17       	cp	r24, r18
    3346:	60 f0       	brcs	.+24     	; 0x3360 <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	24 17       	cp	r18, r20
    334c:	60 f0       	brcs	.+24     	; 0x3366 <u8g2_is_intersection_decision_tree+0x26>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    3352:	82 17       	cp	r24, r18
    3354:	38 f4       	brcc	.+14     	; 0x3364 <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	24 17       	cp	r18, r20
    335a:	28 f0       	brcs	.+10     	; 0x3366 <u8g2_is_intersection_decision_tree+0x26>
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	08 95       	ret
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    3364:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    3366:	08 95       	ret

00003368 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	ec 01       	movw	r28, r24
    3374:	16 2f       	mov	r17, r22
    3376:	f2 2e       	mov	r15, r18
    3378:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    337a:	68 a9       	ldd	r22, Y+48	; 0x30
    337c:	8f a5       	ldd	r24, Y+47	; 0x2f
    337e:	0e 94 a0 19 	call	0x3340	; 0x3340 <u8g2_is_intersection_decision_tree>
    3382:	88 23       	and	r24, r24
    3384:	31 f0       	breq	.+12     	; 0x3392 <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    3386:	2f 2d       	mov	r18, r15
    3388:	41 2f       	mov	r20, r17
    338a:	6e a5       	ldd	r22, Y+46	; 0x2e
    338c:	8d a5       	ldd	r24, Y+45	; 0x2d
    338e:	0e 94 a0 19 	call	0x3340	; 0x3340 <u8g2_is_intersection_decision_tree>
}
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	ff 90       	pop	r15
    339c:	08 95       	ret

0000339e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    339e:	ef 92       	push	r14
    33a0:	ff 92       	push	r15
    33a2:	0f 93       	push	r16
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    33aa:	34 2f       	mov	r19, r20
    33ac:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	03 2e       	mov	r0, r19
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    33b6:	88 0f       	add	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	0a 94       	dec	r0
    33bc:	e2 f7       	brpl	.-8      	; 0x33b6 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    33be:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    33c0:	f7 01       	movw	r30, r14
    33c2:	ed 59       	subi	r30, 0x9D	; 157
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	50 81       	ld	r21, Z
    33c8:	52 30       	cpi	r21, 0x02	; 2
    33ca:	20 f4       	brcc	.+8      	; 0x33d4 <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    33cc:	51 30       	cpi	r21, 0x01	; 1
    33ce:	21 f0       	breq	.+8      	; 0x33d8 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    33d0:	78 2f       	mov	r23, r24
    33d2:	04 c0       	rjmp	.+8      	; 0x33dc <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    33d4:	70 e0       	ldi	r23, 0x00	; 0
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    33d8:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    33da:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    33dc:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    33de:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    33e0:	d7 01       	movw	r26, r14
    33e2:	92 96       	adiw	r26, 0x22	; 34
    33e4:	8d 91       	ld	r24, X+
    33e6:	9c 91       	ld	r25, X
    33e8:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    33ea:	ed 91       	ld	r30, X+
    33ec:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    33ee:	d0 89       	ldd	r29, Z+16	; 0x10
    33f0:	d4 9f       	mul	r29, r20
    33f2:	f0 01       	movw	r30, r0
    33f4:	d5 9f       	mul	r29, r21
    33f6:	f0 0d       	add	r31, r0
    33f8:	11 24       	eor	r1, r1
    33fa:	e6 0f       	add	r30, r22
    33fc:	f1 1d       	adc	r31, r1
    33fe:	e8 0f       	add	r30, r24
    3400:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    3402:	01 11       	cpse	r16, r1
    3404:	07 c0       	rjmp	.+14     	; 0x3414 <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    3406:	80 81       	ld	r24, Z
    3408:	87 2b       	or	r24, r23
    340a:	8c 27       	eor	r24, r28
    340c:	81 93       	st	Z+, r24
	ptr++;
	len--;
    340e:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    3410:	d1 f7       	brne	.-12     	; 0x3406 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    3412:	22 c0       	rjmp	.+68     	; 0x3458 <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    3414:	a7 01       	movw	r20, r14
    3416:	4d 59       	subi	r20, 0x9D	; 157
    3418:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    341a:	90 81       	ld	r25, Z
    341c:	97 2b       	or	r25, r23
    341e:	9c 27       	eor	r25, r28
    3420:	90 83       	st	Z, r25
      
      bit_pos++;
    3422:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    3424:	37 70       	andi	r19, 0x07	; 7

      len--;
    3426:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    3428:	31 11       	cpse	r19, r1
    342a:	0e c0       	rjmp	.+28     	; 0x3448 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    342c:	d7 01       	movw	r26, r14
    342e:	96 96       	adiw	r26, 0x26	; 38
    3430:	8c 91       	ld	r24, X
    3432:	e8 0f       	add	r30, r24
    3434:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    3436:	da 01       	movw	r26, r20
    3438:	8c 91       	ld	r24, X
    343a:	82 30       	cpi	r24, 0x02	; 2
    343c:	40 f4       	brcc	.+16     	; 0x344e <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    343e:	81 30       	cpi	r24, 0x01	; 1
    3440:	41 f0       	breq	.+16     	; 0x3452 <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    3442:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3444:	71 e0       	ldi	r23, 0x01	; 1
    3446:	06 c0       	rjmp	.+12     	; 0x3454 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    3448:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    344a:	cc 0f       	add	r28, r28
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    344e:	c1 e0       	ldi	r28, 0x01	; 1
    3450:	01 c0       	rjmp	.+2      	; 0x3454 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3452:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    3454:	21 11       	cpse	r18, r1
    3456:	e1 cf       	rjmp	.-62     	; 0x341a <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	ef 90       	pop	r14
    3462:	08 95       	ret

00003464 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    3464:	fc 01       	movw	r30, r24
    3466:	a0 81       	ld	r26, Z
    3468:	b1 81       	ldd	r27, Z+1	; 0x01
    346a:	84 a1       	ldd	r24, Z+36	; 0x24
    346c:	98 2f       	mov	r25, r24
    346e:	99 0f       	add	r25, r25
    3470:	99 0f       	add	r25, r25
    3472:	99 0f       	add	r25, r25
    3474:	97 a3       	std	Z+39, r25	; 0x27
    3476:	50 96       	adiw	r26, 0x10	; 16
    3478:	9c 91       	ld	r25, X
    347a:	50 97       	sbiw	r26, 0x10	; 16
    347c:	90 32       	cpi	r25, 0x20	; 32
    347e:	08 f0       	brcs	.+2      	; 0x3482 <u8g2_update_dimension_common+0x1e>
    3480:	9f e1       	ldi	r25, 0x1F	; 31
    3482:	99 0f       	add	r25, r25
    3484:	99 0f       	add	r25, r25
    3486:	99 0f       	add	r25, r25
    3488:	96 a3       	std	Z+38, r25	; 0x26
    348a:	45 a1       	ldd	r20, Z+37	; 0x25
    348c:	94 2f       	mov	r25, r20
    348e:	99 0f       	add	r25, r25
    3490:	99 0f       	add	r25, r25
    3492:	99 0f       	add	r25, r25
    3494:	90 a7       	std	Z+40, r25	; 0x28
    3496:	51 96       	adiw	r26, 0x11	; 17
    3498:	5c 91       	ld	r21, X
    349a:	51 97       	sbiw	r26, 0x11	; 17
    349c:	24 2f       	mov	r18, r20
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	28 0f       	add	r18, r24
    34a2:	31 1d       	adc	r19, r1
    34a4:	65 2f       	mov	r22, r21
    34a6:	70 e0       	ldi	r23, 0x00	; 0
    34a8:	62 17       	cp	r22, r18
    34aa:	73 07       	cpc	r23, r19
    34ac:	14 f4       	brge	.+4      	; 0x34b2 <u8g2_update_dimension_common+0x4e>
    34ae:	85 2f       	mov	r24, r21
    34b0:	84 1b       	sub	r24, r20
    34b2:	91 a7       	std	Z+41, r25	; 0x29
    34b4:	88 0f       	add	r24, r24
    34b6:	88 0f       	add	r24, r24
    34b8:	88 0f       	add	r24, r24
    34ba:	89 0f       	add	r24, r25
    34bc:	82 a7       	std	Z+42, r24	; 0x2a
    34be:	80 ef       	ldi	r24, 0xF0	; 240
    34c0:	83 a7       	std	Z+43, r24	; 0x2b
    34c2:	54 96       	adiw	r26, 0x14	; 20
    34c4:	8d 91       	ld	r24, X+
    34c6:	9c 91       	ld	r25, X
    34c8:	55 97       	sbiw	r26, 0x15	; 21
    34ca:	81 3f       	cpi	r24, 0xF1	; 241
    34cc:	91 05       	cpc	r25, r1
    34ce:	08 f4       	brcc	.+2      	; 0x34d2 <u8g2_update_dimension_common+0x6e>
    34d0:	83 a7       	std	Z+43, r24	; 0x2b
    34d2:	56 96       	adiw	r26, 0x16	; 22
    34d4:	8c 91       	ld	r24, X
    34d6:	84 a7       	std	Z+44, r24	; 0x2c
    34d8:	08 95       	ret

000034da <u8g2_update_dimension_r0>:
    34da:	0e 94 32 1a 	call	0x3464	; 0x3464 <u8g2_update_dimension_common>
    34de:	08 95       	ret

000034e0 <u8g2_apply_clip_window>:
    34e0:	0f 93       	push	r16
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	ec 01       	movw	r28, r24
    34e8:	0c a9       	ldd	r16, Y+52	; 0x34
    34ea:	2a a9       	ldd	r18, Y+50	; 0x32
    34ec:	4b a9       	ldd	r20, Y+51	; 0x33
    34ee:	69 a9       	ldd	r22, Y+49	; 0x31
    34f0:	0e 94 b4 19 	call	0x3368	; 0x3368 <u8g2_IsIntersection>
    34f4:	81 11       	cpse	r24, r1
    34f6:	04 c0       	rjmp	.+8      	; 0x3500 <u8g2_apply_clip_window+0x20>
    34f8:	c3 5a       	subi	r28, 0xA3	; 163
    34fa:	df 4f       	sbci	r29, 0xFF	; 255
    34fc:	18 82       	st	Y, r1
    34fe:	19 c0       	rjmp	.+50     	; 0x3532 <u8g2_apply_clip_window+0x52>
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	fe 01       	movw	r30, r28
    3504:	e3 5a       	subi	r30, 0xA3	; 163
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 83       	st	Z, r24
    350a:	89 a9       	ldd	r24, Y+49	; 0x31
    350c:	9d a5       	ldd	r25, Y+45	; 0x2d
    350e:	98 17       	cp	r25, r24
    3510:	08 f4       	brcc	.+2      	; 0x3514 <u8g2_apply_clip_window+0x34>
    3512:	8d a7       	std	Y+45, r24	; 0x2d
    3514:	8a a9       	ldd	r24, Y+50	; 0x32
    3516:	9e a5       	ldd	r25, Y+46	; 0x2e
    3518:	89 17       	cp	r24, r25
    351a:	08 f4       	brcc	.+2      	; 0x351e <u8g2_apply_clip_window+0x3e>
    351c:	8e a7       	std	Y+46, r24	; 0x2e
    351e:	8b a9       	ldd	r24, Y+51	; 0x33
    3520:	9f a5       	ldd	r25, Y+47	; 0x2f
    3522:	98 17       	cp	r25, r24
    3524:	08 f4       	brcc	.+2      	; 0x3528 <u8g2_apply_clip_window+0x48>
    3526:	8f a7       	std	Y+47, r24	; 0x2f
    3528:	8c a9       	ldd	r24, Y+52	; 0x34
    352a:	98 a9       	ldd	r25, Y+48	; 0x30
    352c:	89 17       	cp	r24, r25
    352e:	08 f4       	brcc	.+2      	; 0x3532 <u8g2_apply_clip_window+0x52>
    3530:	88 ab       	std	Y+48, r24	; 0x30
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	0f 91       	pop	r16
    3538:	08 95       	ret

0000353a <u8g2_update_page_win_r0>:
    353a:	fc 01       	movw	r30, r24
    353c:	15 a6       	std	Z+45, r1	; 0x2d
    353e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3540:	86 a7       	std	Z+46, r24	; 0x2e
    3542:	81 a5       	ldd	r24, Z+41	; 0x29
    3544:	87 a7       	std	Z+47, r24	; 0x2f
    3546:	82 a5       	ldd	r24, Z+42	; 0x2a
    3548:	80 ab       	std	Z+48, r24	; 0x30
    354a:	cf 01       	movw	r24, r30
    354c:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <u8g2_apply_clip_window>
    3550:	08 95       	ret

00003552 <u8g2_draw_l90_r0>:
    3552:	0f 93       	push	r16
    3554:	0e 94 f6 18 	call	0x31ec	; 0x31ec <u8g2_draw_hv_line_2dir>
    3558:	0f 91       	pop	r16
    355a:	08 95       	ret

0000355c <u8g2_SetMaxClipWindow>:
    355c:	dc 01       	movw	r26, r24
    355e:	d1 96       	adiw	r26, 0x31	; 49
    3560:	1c 92       	st	X, r1
    3562:	d1 97       	sbiw	r26, 0x31	; 49
    3564:	d3 96       	adiw	r26, 0x33	; 51
    3566:	1c 92       	st	X, r1
    3568:	d3 97       	sbiw	r26, 0x33	; 51
    356a:	8f ef       	ldi	r24, 0xFF	; 255
    356c:	d2 96       	adiw	r26, 0x32	; 50
    356e:	8c 93       	st	X, r24
    3570:	d2 97       	sbiw	r26, 0x32	; 50
    3572:	d4 96       	adiw	r26, 0x34	; 52
    3574:	8c 93       	st	X, r24
    3576:	d4 97       	sbiw	r26, 0x34	; 52
    3578:	90 96       	adiw	r26, 0x20	; 32
    357a:	ed 91       	ld	r30, X+
    357c:	fc 91       	ld	r31, X
    357e:	91 97       	sbiw	r26, 0x21	; 33
    3580:	02 80       	ldd	r0, Z+2	; 0x02
    3582:	f3 81       	ldd	r31, Z+3	; 0x03
    3584:	e0 2d       	mov	r30, r0
    3586:	cd 01       	movw	r24, r26
    3588:	09 95       	icall
    358a:	08 95       	ret

0000358c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    3596:	1e aa       	std	Y+54, r1	; 0x36
    3598:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    359a:	3f 8f       	std	Y+31, r19	; 0x1f
    359c:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    359e:	7b a3       	std	Y+35, r23	; 0x23
    35a0:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    35a2:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    35a4:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    35a6:	fc 01       	movw	r30, r24
    35a8:	ee 5b       	subi	r30, 0xBE	; 190
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    35ae:	b0 96       	adiw	r30, 0x20	; 32
    35b0:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    35b2:	31 96       	adiw	r30, 0x01	; 1
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    35b8:	31 96       	adiw	r30, 0x01	; 1
    35ba:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    35bc:	19 a3       	std	Y+33, r17	; 0x21
    35be:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    35c0:	d8 01       	movw	r26, r16
    35c2:	ed 91       	ld	r30, X+
    35c4:	fc 91       	ld	r31, X
    35c6:	ce 01       	movw	r24, r28
    35c8:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    35ca:	ce 01       	movw	r24, r28
    35cc:	0e 94 ae 1a 	call	0x355c	; 0x355c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    35d0:	ce 01       	movw	r24, r28
    35d2:	0e 94 ce 18 	call	0x319c	; 0x319c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    35d6:	cb 5b       	subi	r28, 0xBB	; 187
    35d8:	df 4f       	sbci	r29, 0xFF	; 255
    35da:	18 82       	st	Y, r1
#endif
}
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
    35e4:	08 95       	ret

000035e6 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    35e6:	66 23       	and	r22, r22
    35e8:	29 f0       	breq	.+10     	; 0x35f4 <u8x8_ascii_next+0xe>
    35ea:	6a 30       	cpi	r22, 0x0A	; 10
    35ec:	31 f0       	breq	.+12     	; 0x35fa <u8x8_ascii_next+0x14>
    35ee:	86 2f       	mov	r24, r22
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	08 95       	ret
    35f4:	8f ef       	ldi	r24, 0xFF	; 255
    35f6:	9f ef       	ldi	r25, 0xFF	; 255
    35f8:	08 95       	ret
    35fa:	8f ef       	ldi	r24, 0xFF	; 255
    35fc:	9f ef       	ldi	r25, 0xFF	; 255
    35fe:	08 95       	ret

00003600 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    3600:	fc 01       	movw	r30, r24
    3602:	10 8e       	std	Z+24, r1	; 0x18
    3604:	08 95       	ret

00003606 <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
	uint8_t *data;
	switch(msg){
    360e:	68 31       	cpi	r22, 0x18	; 24
    3610:	19 f1       	breq	.+70     	; 0x3658 <u8x8_byte_avr_hw_i2c+0x52>
    3612:	28 f4       	brcc	.+10     	; 0x361e <u8x8_byte_avr_hw_i2c+0x18>
    3614:	64 31       	cpi	r22, 0x14	; 20
    3616:	e1 f0       	breq	.+56     	; 0x3650 <u8x8_byte_avr_hw_i2c+0x4a>
    3618:	67 31       	cpi	r22, 0x17	; 23
    361a:	39 f0       	breq	.+14     	; 0x362a <u8x8_byte_avr_hw_i2c+0x24>
    361c:	27 c0       	rjmp	.+78     	; 0x366c <u8x8_byte_avr_hw_i2c+0x66>
    361e:	69 31       	cpi	r22, 0x19	; 25
    3620:	09 f1       	breq	.+66     	; 0x3664 <u8x8_byte_avr_hw_i2c+0x5e>
    3622:	60 32       	cpi	r22, 0x20	; 32
    3624:	19 f5       	brne	.+70     	; 0x366c <u8x8_byte_avr_hw_i2c+0x66>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	24 c0       	rjmp	.+72     	; 0x3672 <u8x8_byte_avr_hw_i2c+0x6c>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    362a:	8f ef       	ldi	r24, 0xFF	; 255
    362c:	84 0f       	add	r24, r20
    362e:	44 23       	and	r20, r20
    3630:	f9 f0       	breq	.+62     	; 0x3670 <u8x8_byte_avr_hw_i2c+0x6a>
    3632:	e9 01       	movw	r28, r18
    3634:	08 2f       	mov	r16, r24
    3636:	10 e0       	ldi	r17, 0x00	; 0
    3638:	0f 5f       	subi	r16, 0xFF	; 255
    363a:	1f 4f       	sbci	r17, 0xFF	; 255
    363c:	02 0f       	add	r16, r18
    363e:	13 1f       	adc	r17, r19
				i2c_write(*data++);
    3640:	89 91       	ld	r24, Y+
    3642:	0e 94 51 11 	call	0x22a2	; 0x22a2 <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    3646:	0c 17       	cp	r16, r28
    3648:	1d 07       	cpc	r17, r29
    364a:	d1 f7       	brne	.-12     	; 0x3640 <u8x8_byte_avr_hw_i2c+0x3a>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	11 c0       	rjmp	.+34     	; 0x3672 <u8x8_byte_avr_hw_i2c+0x6c>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    3650:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3654:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    3656:	0d c0       	rjmp	.+26     	; 0x3672 <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    3658:	fc 01       	movw	r30, r24
    365a:	86 89       	ldd	r24, Z+22	; 0x16
    365c:	0e 94 01 11 	call	0x2202	; 0x2202 <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    3662:	07 c0       	rjmp	.+14     	; 0x3672 <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    3664:	0e 94 41 11 	call	0x2282	; 0x2282 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    3668:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    366a:	03 c0       	rjmp	.+6      	; 0x3672 <u8x8_byte_avr_hw_i2c+0x6c>
		default:
			return 0;
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	01 c0       	rjmp	.+2      	; 0x3672 <u8x8_byte_avr_hw_i2c+0x6c>
	}
	return 1;
    3670:	81 e0       	ldi	r24, 0x01	; 1
}
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	08 95       	ret

0000367c <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    367c:	6a 32       	cpi	r22, 0x2A	; 42
    367e:	51 f0       	breq	.+20     	; 0x3694 <u8x8_avr_delay+0x18>
    3680:	18 f4       	brcc	.+6      	; 0x3688 <u8x8_avr_delay+0xc>
    3682:	69 32       	cpi	r22, 0x29	; 41
    3684:	59 f0       	breq	.+22     	; 0x369c <u8x8_avr_delay+0x20>
    3686:	33 c0       	rjmp	.+102    	; 0x36ee <u8x8_avr_delay+0x72>
    3688:	6b 32       	cpi	r22, 0x2B	; 43
    368a:	61 f0       	breq	.+24     	; 0x36a4 <u8x8_avr_delay+0x28>
    368c:	6c 32       	cpi	r22, 0x2C	; 44
    368e:	79 f5       	brne	.+94     	; 0x36ee <u8x8_avr_delay+0x72>
			break;
		default:
			return 0;
	}

	return 1;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	08 95       	ret
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3694:	41 11       	cpse	r20, r1
    3696:	19 c0       	rjmp	.+50     	; 0x36ca <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    369c:	41 11       	cpse	r20, r1
    369e:	1d c0       	rjmp	.+58     	; 0x36da <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    36a4:	24 2f       	mov	r18, r20
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	a4 e6       	ldi	r26, 0x64	; 100
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	0e 94 82 20 	call	0x4104	; 0x4104 <__umulhisi3>
    36b0:	20 ea       	ldi	r18, 0xA0	; 160
    36b2:	3f e0       	ldi	r19, 0x0F	; 15
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    36bc:	23 32       	cpi	r18, 0x23	; 35
    36be:	c8 f4       	brcc	.+50     	; 0x36f2 <u8x8_avr_delay+0x76>
				break;

			__asm__ __volatile__ (
    36c0:	82 2f       	mov	r24, r18
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <u8x8_avr_delay+0x46>
			break;
		default:
			return 0;
	}

	return 1;
    36c6:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    36c8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36ca:	83 e0       	ldi	r24, 0x03	; 3
    36cc:	8a 95       	dec	r24
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <u8x8_avr_delay+0x50>
    36d0:	00 00       	nop
    36d2:	41 50       	subi	r20, 0x01	; 1
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    36d4:	d1 f7       	brne	.-12     	; 0x36ca <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36da:	89 ef       	ldi	r24, 0xF9	; 249
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	f1 f7       	brne	.-4      	; 0x36de <u8x8_avr_delay+0x62>
    36e2:	00 c0       	rjmp	.+0      	; 0x36e4 <u8x8_avr_delay+0x68>
    36e4:	00 00       	nop
    36e6:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    36e8:	c1 f7       	brne	.-16     	; 0x36da <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	08 95       	ret
	}

	return 1;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
}
    36f4:	08 95       	ret

000036f6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    36f6:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    36f8:	dc 01       	movw	r26, r24
    36fa:	18 96       	adiw	r26, 0x08	; 8
    36fc:	ed 91       	ld	r30, X+
    36fe:	fc 91       	ld	r31, X
    3700:	19 97       	sbiw	r26, 0x09	; 9
    3702:	46 2f       	mov	r20, r22
    3704:	67 e1       	ldi	r22, 0x17	; 23
    3706:	09 95       	icall
}
    3708:	08 95       	ret

0000370a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	1f 92       	push	r1
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    3716:	ae 01       	movw	r20, r28
    3718:	4f 5f       	subi	r20, 0xFF	; 255
    371a:	5f 4f       	sbci	r21, 0xFF	; 255
    371c:	61 e0       	ldi	r22, 0x01	; 1
    371e:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <u8x8_byte_SendBytes>
}
    3722:	0f 90       	pop	r0
    3724:	df 91       	pop	r29
    3726:	cf 91       	pop	r28
    3728:	08 95       	ret

0000372a <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    372a:	dc 01       	movw	r26, r24
    372c:	18 96       	adiw	r26, 0x08	; 8
    372e:	ed 91       	ld	r30, X+
    3730:	fc 91       	ld	r31, X
    3732:	19 97       	sbiw	r26, 0x09	; 9
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	68 e1       	ldi	r22, 0x18	; 24
    373c:	09 95       	icall
}
    373e:	08 95       	ret

00003740 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    3740:	dc 01       	movw	r26, r24
    3742:	18 96       	adiw	r26, 0x08	; 8
    3744:	ed 91       	ld	r30, X+
    3746:	fc 91       	ld	r31, X
    3748:	19 97       	sbiw	r26, 0x09	; 9
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	69 e1       	ldi	r22, 0x19	; 25
    3752:	09 95       	icall
}
    3754:	08 95       	ret

00003756 <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    3756:	ef 92       	push	r14
    3758:	ff 92       	push	r15
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	ec 01       	movw	r28, r24
    3762:	16 2f       	mov	r17, r22
    3764:	7a 01       	movw	r14, r20
    3766:	0e 94 95 1b 	call	0x372a	; 0x372a <u8x8_byte_StartTransfer>
    376a:	60 e4       	ldi	r22, 0x40	; 64
    376c:	ce 01       	movw	r24, r28
    376e:	0e 94 85 1b 	call	0x370a	; 0x370a <u8x8_byte_SendByte>
    3772:	e8 85       	ldd	r30, Y+8	; 0x08
    3774:	f9 85       	ldd	r31, Y+9	; 0x09
    3776:	97 01       	movw	r18, r14
    3778:	41 2f       	mov	r20, r17
    377a:	67 e1       	ldi	r22, 0x17	; 23
    377c:	ce 01       	movw	r24, r28
    377e:	09 95       	icall
    3780:	ce 01       	movw	r24, r28
    3782:	0e 94 a0 1b 	call	0x3740	; 0x3740 <u8x8_byte_EndTransfer>
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	1f 91       	pop	r17
    378c:	ff 90       	pop	r15
    378e:	ef 90       	pop	r14
    3790:	08 95       	ret

00003792 <u8x8_cad_SendCmd>:
    3792:	46 2f       	mov	r20, r22
    3794:	dc 01       	movw	r26, r24
    3796:	16 96       	adiw	r26, 0x06	; 6
    3798:	ed 91       	ld	r30, X+
    379a:	fc 91       	ld	r31, X
    379c:	17 97       	sbiw	r26, 0x07	; 7
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	65 e1       	ldi	r22, 0x15	; 21
    37a4:	09 95       	icall
    37a6:	08 95       	ret

000037a8 <u8x8_cad_SendArg>:
    37a8:	46 2f       	mov	r20, r22
    37aa:	dc 01       	movw	r26, r24
    37ac:	16 96       	adiw	r26, 0x06	; 6
    37ae:	ed 91       	ld	r30, X+
    37b0:	fc 91       	ld	r31, X
    37b2:	17 97       	sbiw	r26, 0x07	; 7
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	66 e1       	ldi	r22, 0x16	; 22
    37ba:	09 95       	icall
    37bc:	08 95       	ret

000037be <u8x8_cad_SendData>:
    37be:	9a 01       	movw	r18, r20
    37c0:	dc 01       	movw	r26, r24
    37c2:	16 96       	adiw	r26, 0x06	; 6
    37c4:	ed 91       	ld	r30, X+
    37c6:	fc 91       	ld	r31, X
    37c8:	17 97       	sbiw	r26, 0x07	; 7
    37ca:	46 2f       	mov	r20, r22
    37cc:	67 e1       	ldi	r22, 0x17	; 23
    37ce:	09 95       	icall
    37d0:	08 95       	ret

000037d2 <u8x8_cad_StartTransfer>:
    37d2:	dc 01       	movw	r26, r24
    37d4:	16 96       	adiw	r26, 0x06	; 6
    37d6:	ed 91       	ld	r30, X+
    37d8:	fc 91       	ld	r31, X
    37da:	17 97       	sbiw	r26, 0x07	; 7
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	40 e0       	ldi	r20, 0x00	; 0
    37e2:	68 e1       	ldi	r22, 0x18	; 24
    37e4:	09 95       	icall
    37e6:	08 95       	ret

000037e8 <u8x8_cad_EndTransfer>:
    37e8:	dc 01       	movw	r26, r24
    37ea:	16 96       	adiw	r26, 0x06	; 6
    37ec:	ed 91       	ld	r30, X+
    37ee:	fc 91       	ld	r31, X
    37f0:	17 97       	sbiw	r26, 0x07	; 7
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	69 e1       	ldi	r22, 0x19	; 25
    37fa:	09 95       	icall
    37fc:	08 95       	ret

000037fe <u8x8_cad_SendSequence>:
    37fe:	ef 92       	push	r14
    3800:	ff 92       	push	r15
    3802:	0f 93       	push	r16
    3804:	1f 93       	push	r17
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	1f 92       	push	r1
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	7c 01       	movw	r14, r24
    3812:	8b 01       	movw	r16, r22
    3814:	d8 01       	movw	r26, r16
    3816:	6c 91       	ld	r22, X
    3818:	67 31       	cpi	r22, 0x17	; 23
    381a:	c1 f0       	breq	.+48     	; 0x384c <u8x8_cad_SendSequence+0x4e>
    381c:	18 f4       	brcc	.+6      	; 0x3824 <u8x8_cad_SendSequence+0x26>
    381e:	65 31       	cpi	r22, 0x15	; 21
    3820:	30 f4       	brcc	.+12     	; 0x382e <u8x8_cad_SendSequence+0x30>
    3822:	38 c0       	rjmp	.+112    	; 0x3894 <u8x8_cad_SendSequence+0x96>
    3824:	6a 31       	cpi	r22, 0x1A	; 26
    3826:	f8 f0       	brcs	.+62     	; 0x3866 <u8x8_cad_SendSequence+0x68>
    3828:	6e 3f       	cpi	r22, 0xFE	; 254
    382a:	51 f1       	breq	.+84     	; 0x3880 <u8x8_cad_SendSequence+0x82>
    382c:	33 c0       	rjmp	.+102    	; 0x3894 <u8x8_cad_SendSequence+0x96>
    382e:	f8 01       	movw	r30, r16
    3830:	41 81       	ldd	r20, Z+1	; 0x01
    3832:	49 83       	std	Y+1, r20	; 0x01
    3834:	d7 01       	movw	r26, r14
    3836:	16 96       	adiw	r26, 0x06	; 6
    3838:	ed 91       	ld	r30, X+
    383a:	fc 91       	ld	r31, X
    383c:	17 97       	sbiw	r26, 0x07	; 7
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	c7 01       	movw	r24, r14
    3844:	09 95       	icall
    3846:	0e 5f       	subi	r16, 0xFE	; 254
    3848:	1f 4f       	sbci	r17, 0xFF	; 255
    384a:	e4 cf       	rjmp	.-56     	; 0x3814 <u8x8_cad_SendSequence+0x16>
    384c:	f8 01       	movw	r30, r16
    384e:	81 81       	ldd	r24, Z+1	; 0x01
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	ae 01       	movw	r20, r28
    3854:	4f 5f       	subi	r20, 0xFF	; 255
    3856:	5f 4f       	sbci	r21, 0xFF	; 255
    3858:	61 e0       	ldi	r22, 0x01	; 1
    385a:	c7 01       	movw	r24, r14
    385c:	0e 94 df 1b 	call	0x37be	; 0x37be <u8x8_cad_SendData>
    3860:	0e 5f       	subi	r16, 0xFE	; 254
    3862:	1f 4f       	sbci	r17, 0xFF	; 255
    3864:	d7 cf       	rjmp	.-82     	; 0x3814 <u8x8_cad_SendSequence+0x16>
    3866:	0f 5f       	subi	r16, 0xFF	; 255
    3868:	1f 4f       	sbci	r17, 0xFF	; 255
    386a:	d7 01       	movw	r26, r14
    386c:	16 96       	adiw	r26, 0x06	; 6
    386e:	ed 91       	ld	r30, X+
    3870:	fc 91       	ld	r31, X
    3872:	17 97       	sbiw	r26, 0x07	; 7
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	40 e0       	ldi	r20, 0x00	; 0
    387a:	c7 01       	movw	r24, r14
    387c:	09 95       	icall
    387e:	ca cf       	rjmp	.-108    	; 0x3814 <u8x8_cad_SendSequence+0x16>
    3880:	f8 01       	movw	r30, r16
    3882:	41 81       	ldd	r20, Z+1	; 0x01
    3884:	49 83       	std	Y+1, r20	; 0x01
    3886:	69 e2       	ldi	r22, 0x29	; 41
    3888:	c7 01       	movw	r24, r14
    388a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <u8x8_gpio_call>
    388e:	0e 5f       	subi	r16, 0xFE	; 254
    3890:	1f 4f       	sbci	r17, 0xFF	; 255
    3892:	c0 cf       	rjmp	.-128    	; 0x3814 <u8x8_cad_SendSequence+0x16>
    3894:	0f 90       	pop	r0
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	1f 91       	pop	r17
    389c:	0f 91       	pop	r16
    389e:	ff 90       	pop	r15
    38a0:	ef 90       	pop	r14
    38a2:	08 95       	ret

000038a4 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    38a4:	ef 92       	push	r14
    38a6:	ff 92       	push	r15
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	7c 01       	movw	r14, r24
    38b0:	c4 2f       	mov	r28, r20
    38b2:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    38b4:	66 31       	cpi	r22, 0x16	; 22
    38b6:	29 f1       	breq	.+74     	; 0x3902 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    38b8:	30 f4       	brcc	.+12     	; 0x38c6 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    38ba:	64 31       	cpi	r22, 0x14	; 20
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    38be:	42 c0       	rjmp	.+132    	; 0x3944 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    38c0:	65 31       	cpi	r22, 0x15	; 21
    38c2:	49 f0       	breq	.+18     	; 0x38d6 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    38c4:	62 c0       	rjmp	.+196    	; 0x398a <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    38c6:	68 31       	cpi	r22, 0x18	; 24
    38c8:	09 f4       	brne	.+2      	; 0x38cc <u8x8_cad_ssd13xx_fast_i2c+0x28>
    38ca:	50 c0       	rjmp	.+160    	; 0x396c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    38cc:	f8 f0       	brcs	.+62     	; 0x390c <u8x8_cad_ssd13xx_fast_i2c+0x68>
    38ce:	69 31       	cpi	r22, 0x19	; 25
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    38d2:	50 c0       	rjmp	.+160    	; 0x3974 <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    38d4:	5a c0       	rjmp	.+180    	; 0x398a <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    38d6:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <in_transfer.3298>
    38da:	88 23       	and	r24, r24
    38dc:	19 f0       	breq	.+6      	; 0x38e4 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    38de:	c7 01       	movw	r24, r14
    38e0:	0e 94 a0 1b 	call	0x3740	; 0x3740 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    38e4:	c7 01       	movw	r24, r14
    38e6:	0e 94 95 1b 	call	0x372a	; 0x372a <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	c7 01       	movw	r24, r14
    38ee:	0e 94 85 1b 	call	0x370a	; 0x370a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    38f2:	6c 2f       	mov	r22, r28
    38f4:	c7 01       	movw	r24, r14
    38f6:	0e 94 85 1b 	call	0x370a	; 0x370a <u8x8_byte_SendByte>
      in_transfer = 1;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <in_transfer.3298>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    3900:	45 c0       	rjmp	.+138    	; 0x398c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    3902:	64 2f       	mov	r22, r20
    3904:	0e 94 85 1b 	call	0x370a	; 0x370a <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3908:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    390a:	40 c0       	rjmp	.+128    	; 0x398c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    390c:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <in_transfer.3298>
    3910:	88 23       	and	r24, r24
    3912:	19 f0       	breq	.+6      	; 0x391a <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    3914:	c7 01       	movw	r24, r14
    3916:	0e 94 a0 1b 	call	0x3740	; 0x3740 <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    391a:	c9 31       	cpi	r28, 0x19	; 25
    391c:	50 f0       	brcs	.+20     	; 0x3932 <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    391e:	a8 01       	movw	r20, r16
    3920:	68 e1       	ldi	r22, 0x18	; 24
    3922:	c7 01       	movw	r24, r14
    3924:	0e 94 ab 1b 	call	0x3756	; 0x3756 <u8x8_i2c_data_transfer>
	arg_int-=24;
    3928:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    392a:	08 5e       	subi	r16, 0xE8	; 232
    392c:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    392e:	c9 31       	cpi	r28, 0x19	; 25
    3930:	b0 f7       	brcc	.-20     	; 0x391e <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    3932:	a8 01       	movw	r20, r16
    3934:	6c 2f       	mov	r22, r28
    3936:	c7 01       	movw	r24, r14
    3938:	0e 94 ab 1b 	call	0x3756	; 0x3756 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    393c:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3940:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    3942:	24 c0       	rjmp	.+72     	; 0x398c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    3944:	dc 01       	movw	r26, r24
    3946:	56 96       	adiw	r26, 0x16	; 22
    3948:	8c 91       	ld	r24, X
    394a:	56 97       	sbiw	r26, 0x16	; 22
    394c:	8f 3f       	cpi	r24, 0xFF	; 255
    394e:	19 f4       	brne	.+6      	; 0x3956 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    3950:	88 e7       	ldi	r24, 0x78	; 120
    3952:	56 96       	adiw	r26, 0x16	; 22
    3954:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    3956:	d7 01       	movw	r26, r14
    3958:	18 96       	adiw	r26, 0x08	; 8
    395a:	ed 91       	ld	r30, X+
    395c:	fc 91       	ld	r31, X
    395e:	19 97       	sbiw	r26, 0x09	; 9
    3960:	98 01       	movw	r18, r16
    3962:	4c 2f       	mov	r20, r28
    3964:	64 e1       	ldi	r22, 0x14	; 20
    3966:	c7 01       	movw	r24, r14
    3968:	09 95       	icall
    396a:	10 c0       	rjmp	.+32     	; 0x398c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    396c:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3970:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    3972:	0c c0       	rjmp	.+24     	; 0x398c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    3974:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <in_transfer.3298>
    3978:	88 23       	and	r24, r24
    397a:	19 f0       	breq	.+6      	; 0x3982 <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    397c:	c7 01       	movw	r24, r14
    397e:	0e 94 a0 1b 	call	0x3740	; 0x3740 <u8x8_byte_EndTransfer>
      in_transfer = 0;
    3982:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <in_transfer.3298>
      break;
    default:
      return 0;
  }
  return 1;
    3986:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    3988:	01 c0       	rjmp	.+2      	; 0x398c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    398a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    398c:	cf 91       	pop	r28
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	ff 90       	pop	r15
    3994:	ef 90       	pop	r14
    3996:	08 95       	ret

00003998 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    3998:	fc 01       	movw	r30, r24
    399a:	71 83       	std	Z+1, r23	; 0x01
    399c:	60 83       	st	Z, r22
    399e:	fb 01       	movw	r30, r22
    39a0:	22 89       	ldd	r18, Z+18	; 0x12
    39a2:	fc 01       	movw	r30, r24
    39a4:	24 8b       	std	Z+20, r18	; 0x14
    39a6:	08 95       	ret

000039a8 <u8x8_d_helper_display_init>:
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
    39ac:	ec 01       	movw	r28, r24
    39ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    39b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e0       	ldi	r20, 0x00	; 0
    39b8:	68 e2       	ldi	r22, 0x28	; 40
    39ba:	09 95       	icall
    39bc:	ee 81       	ldd	r30, Y+6	; 0x06
    39be:	ff 81       	ldd	r31, Y+7	; 0x07
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e0       	ldi	r20, 0x00	; 0
    39c6:	64 e1       	ldi	r22, 0x14	; 20
    39c8:	ce 01       	movw	r24, r28
    39ca:	09 95       	icall
    39cc:	41 e0       	ldi	r20, 0x01	; 1
    39ce:	6b e4       	ldi	r22, 0x4B	; 75
    39d0:	ce 01       	movw	r24, r28
    39d2:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <u8x8_gpio_call>
    39d6:	e8 81       	ld	r30, Y
    39d8:	f9 81       	ldd	r31, Y+1	; 0x01
    39da:	44 81       	ldd	r20, Z+4	; 0x04
    39dc:	69 e2       	ldi	r22, 0x29	; 41
    39de:	ce 01       	movw	r24, r28
    39e0:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <u8x8_gpio_call>
    39e4:	40 e0       	ldi	r20, 0x00	; 0
    39e6:	6b e4       	ldi	r22, 0x4B	; 75
    39e8:	ce 01       	movw	r24, r28
    39ea:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <u8x8_gpio_call>
    39ee:	e8 81       	ld	r30, Y
    39f0:	f9 81       	ldd	r31, Y+1	; 0x01
    39f2:	44 81       	ldd	r20, Z+4	; 0x04
    39f4:	69 e2       	ldi	r22, 0x29	; 41
    39f6:	ce 01       	movw	r24, r28
    39f8:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <u8x8_gpio_call>
    39fc:	41 e0       	ldi	r20, 0x01	; 1
    39fe:	6b e4       	ldi	r22, 0x4B	; 75
    3a00:	ce 01       	movw	r24, r28
    3a02:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <u8x8_gpio_call>
    3a06:	e8 81       	ld	r30, Y
    3a08:	f9 81       	ldd	r31, Y+1	; 0x01
    3a0a:	45 81       	ldd	r20, Z+5	; 0x05
    3a0c:	69 e2       	ldi	r22, 0x29	; 41
    3a0e:	ce 01       	movw	r24, r28
    3a10:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <u8x8_gpio_call>
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	08 95       	ret

00003a1a <u8x8_DrawTile>:
    3a1a:	0f 93       	push	r16
    3a1c:	1f 93       	push	r17
    3a1e:	cf 93       	push	r28
    3a20:	df 93       	push	r29
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <u8x8_DrawTile+0xa>
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <u8x8_DrawTile+0xc>
    3a26:	1f 92       	push	r1
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	6c 83       	std	Y+4, r22	; 0x04
    3a2e:	4d 83       	std	Y+5, r20	; 0x05
    3a30:	2b 83       	std	Y+3, r18	; 0x03
    3a32:	1a 83       	std	Y+2, r17	; 0x02
    3a34:	09 83       	std	Y+1, r16	; 0x01
    3a36:	dc 01       	movw	r26, r24
    3a38:	14 96       	adiw	r26, 0x04	; 4
    3a3a:	ed 91       	ld	r30, X+
    3a3c:	fc 91       	ld	r31, X
    3a3e:	15 97       	sbiw	r26, 0x05	; 5
    3a40:	9e 01       	movw	r18, r28
    3a42:	2f 5f       	subi	r18, 0xFF	; 255
    3a44:	3f 4f       	sbci	r19, 0xFF	; 255
    3a46:	41 e0       	ldi	r20, 0x01	; 1
    3a48:	6f e0       	ldi	r22, 0x0F	; 15
    3a4a:	09 95       	icall
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	df 91       	pop	r29
    3a58:	cf 91       	pop	r28
    3a5a:	1f 91       	pop	r17
    3a5c:	0f 91       	pop	r16
    3a5e:	08 95       	ret

00003a60 <u8x8_SetupMemory>:
    3a60:	dc 01       	movw	r26, r24
    3a62:	14 96       	adiw	r26, 0x04	; 4
    3a64:	ed 91       	ld	r30, X+
    3a66:	fc 91       	ld	r31, X
    3a68:	15 97       	sbiw	r26, 0x05	; 5
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e0       	ldi	r20, 0x00	; 0
    3a70:	69 e0       	ldi	r22, 0x09	; 9
    3a72:	09 95       	icall
    3a74:	08 95       	ret

00003a76 <u8x8_InitDisplay>:
    3a76:	dc 01       	movw	r26, r24
    3a78:	14 96       	adiw	r26, 0x04	; 4
    3a7a:	ed 91       	ld	r30, X+
    3a7c:	fc 91       	ld	r31, X
    3a7e:	15 97       	sbiw	r26, 0x05	; 5
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e0       	ldi	r20, 0x00	; 0
    3a86:	6a e0       	ldi	r22, 0x0A	; 10
    3a88:	09 95       	icall
    3a8a:	08 95       	ret

00003a8c <u8x8_SetPowerSave>:
    3a8c:	46 2f       	mov	r20, r22
    3a8e:	dc 01       	movw	r26, r24
    3a90:	14 96       	adiw	r26, 0x04	; 4
    3a92:	ed 91       	ld	r30, X+
    3a94:	fc 91       	ld	r31, X
    3a96:	15 97       	sbiw	r26, 0x05	; 5
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	6b e0       	ldi	r22, 0x0B	; 11
    3a9e:	09 95       	icall
    3aa0:	08 95       	ret

00003aa2 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	14 96       	adiw	r26, 0x04	; 4
    3aa6:	ed 91       	ld	r30, X+
    3aa8:	fc 91       	ld	r31, X
    3aaa:	15 97       	sbiw	r26, 0x05	; 5
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	60 e1       	ldi	r22, 0x10	; 16
    3ab4:	09 95       	icall
    3ab6:	08 95       	ret

00003ab8 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3ab8:	ef 92       	push	r14
    3aba:	ff 92       	push	r15
    3abc:	0f 93       	push	r16
    3abe:	1f 93       	push	r17
    3ac0:	cf 93       	push	r28
    3ac2:	df 93       	push	r29
    3ac4:	8c 01       	movw	r16, r24
    3ac6:	c4 2f       	mov	r28, r20
    3ac8:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    3aca:	6d 30       	cpi	r22, 0x0D	; 13
    3acc:	b9 f0       	breq	.+46     	; 0x3afc <u8x8_d_ssd1306_sh1106_generic+0x44>
    3ace:	18 f4       	brcc	.+6      	; 0x3ad6 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    3ad0:	6b 30       	cpi	r22, 0x0B	; 11
    3ad2:	31 f0       	breq	.+12     	; 0x3ae0 <u8x8_d_ssd1306_sh1106_generic+0x28>
    3ad4:	72 c0       	rjmp	.+228    	; 0x3bba <u8x8_d_ssd1306_sh1106_generic+0x102>
    3ad6:	6e 30       	cpi	r22, 0x0E	; 14
    3ad8:	69 f1       	breq	.+90     	; 0x3b34 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    3ada:	6f 30       	cpi	r22, 0x0F	; 15
    3adc:	d1 f1       	breq	.+116    	; 0x3b52 <u8x8_d_ssd1306_sh1106_generic+0x9a>
    3ade:	6d c0       	rjmp	.+218    	; 0x3bba <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    3ae0:	41 11       	cpse	r20, r1
    3ae2:	06 c0       	rjmp	.+12     	; 0x3af0 <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    3ae4:	6a e8       	ldi	r22, 0x8A	; 138
    3ae6:	72 e0       	ldi	r23, 0x02	; 2
    3ae8:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	66 c0       	rjmp	.+204    	; 0x3bbc <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    3af0:	65 e8       	ldi	r22, 0x85	; 133
    3af2:	72 e0       	ldi	r23, 0x02	; 2
    3af4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	60 c0       	rjmp	.+192    	; 0x3bbc <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    3afc:	41 11       	cpse	r20, r1
    3afe:	0d c0       	rjmp	.+26     	; 0x3b1a <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    3b00:	6e e7       	ldi	r22, 0x7E	; 126
    3b02:	72 e0       	ldi	r23, 0x02	; 2
    3b04:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    3b08:	d8 01       	movw	r26, r16
    3b0a:	ed 91       	ld	r30, X+
    3b0c:	fc 91       	ld	r31, X
    3b0e:	11 97       	sbiw	r26, 0x01	; 1
    3b10:	82 89       	ldd	r24, Z+18	; 0x12
    3b12:	54 96       	adiw	r26, 0x14	; 20
    3b14:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	51 c0       	rjmp	.+162    	; 0x3bbc <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    3b1a:	67 e7       	ldi	r22, 0x77	; 119
    3b1c:	72 e0       	ldi	r23, 0x02	; 2
    3b1e:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    3b22:	d8 01       	movw	r26, r16
    3b24:	ed 91       	ld	r30, X+
    3b26:	fc 91       	ld	r31, X
    3b28:	11 97       	sbiw	r26, 0x01	; 1
    3b2a:	83 89       	ldd	r24, Z+19	; 0x13
    3b2c:	54 96       	adiw	r26, 0x14	; 20
    3b2e:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	44 c0       	rjmp	.+136    	; 0x3bbc <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    3b34:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    3b38:	61 e8       	ldi	r22, 0x81	; 129
    3b3a:	c8 01       	movw	r24, r16
    3b3c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    3b40:	6c 2f       	mov	r22, r28
    3b42:	c8 01       	movw	r24, r16
    3b44:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    3b48:	c8 01       	movw	r24, r16
    3b4a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    3b50:	35 c0       	rjmp	.+106    	; 0x3bbc <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    3b52:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    3b56:	f7 01       	movw	r30, r14
    3b58:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    3b5a:	dd 0f       	add	r29, r29
    3b5c:	dd 0f       	add	r29, r29
    3b5e:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    3b60:	d8 01       	movw	r26, r16
    3b62:	54 96       	adiw	r26, 0x14	; 20
    3b64:	8c 91       	ld	r24, X
    3b66:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    3b68:	60 e4       	ldi	r22, 0x40	; 64
    3b6a:	c8 01       	movw	r24, r16
    3b6c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    3b70:	6d 2f       	mov	r22, r29
    3b72:	62 95       	swap	r22
    3b74:	6f 70       	andi	r22, 0x0F	; 15
    3b76:	60 61       	ori	r22, 0x10	; 16
    3b78:	c8 01       	movw	r24, r16
    3b7a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    3b7e:	6d 2f       	mov	r22, r29
    3b80:	6f 70       	andi	r22, 0x0F	; 15
    3b82:	c8 01       	movw	r24, r16
    3b84:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    3b88:	f7 01       	movw	r30, r14
    3b8a:	64 81       	ldd	r22, Z+4	; 0x04
    3b8c:	60 6b       	ori	r22, 0xB0	; 176
    3b8e:	c8 01       	movw	r24, r16
    3b90:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    3b94:	d7 01       	movw	r26, r14
    3b96:	4d 91       	ld	r20, X+
    3b98:	5c 91       	ld	r21, X
    3b9a:	11 97       	sbiw	r26, 0x01	; 1
    3b9c:	12 96       	adiw	r26, 0x02	; 2
    3b9e:	6c 91       	ld	r22, X
    3ba0:	66 0f       	add	r22, r22
    3ba2:	66 0f       	add	r22, r22
    3ba4:	66 0f       	add	r22, r22
    3ba6:	c8 01       	movw	r24, r16
    3ba8:	0e 94 df 1b 	call	0x37be	; 0x37be <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    3bac:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    3bae:	91 f7       	brne	.-28     	; 0x3b94 <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    3bb0:	c8 01       	movw	r24, r16
    3bb2:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    3bb8:	01 c0       	rjmp	.+2      	; 0x3bbc <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    3bba:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	08 95       	ret

00003bca <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	8c 01       	movw	r16, r24
    3bd2:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    3bd4:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <u8x8_d_ssd1306_sh1106_generic>
    3bd8:	81 11       	cpse	r24, r1
    3bda:	15 c0       	rjmp	.+42     	; 0x3c06 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    3bdc:	c9 30       	cpi	r28, 0x09	; 9
    3bde:	61 f0       	breq	.+24     	; 0x3bf8 <u8x8_d_ssd1306_128x64_noname+0x2e>
    3be0:	ca 30       	cpi	r28, 0x0A	; 10
    3be2:	91 f4       	brne	.+36     	; 0x3c08 <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    3be4:	c8 01       	movw	r24, r16
    3be6:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    3bea:	6f e8       	ldi	r22, 0x8F	; 143
    3bec:	72 e0       	ldi	r23, 0x02	; 2
    3bee:	c8 01       	movw	r24, r16
    3bf0:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    3bf6:	08 c0       	rjmp	.+16     	; 0x3c08 <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    3bf8:	6f e5       	ldi	r22, 0x5F	; 95
    3bfa:	72 e0       	ldi	r23, 0x02	; 2
    3bfc:	c8 01       	movw	r24, r16
    3bfe:	0e 94 cc 1c 	call	0x3998	; 0x3998 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    3c04:	01 c0       	rjmp	.+2      	; 0x3c08 <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    3c08:	cf 91       	pop	r28
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	08 95       	ret

00003c10 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    3c10:	dc 01       	movw	r26, r24
    3c12:	1a 96       	adiw	r26, 0x0a	; 10
    3c14:	ed 91       	ld	r30, X+
    3c16:	fc 91       	ld	r31, X
    3c18:	1b 97       	sbiw	r26, 0x0b	; 11
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	09 95       	icall
    3c20:	08 95       	ret

00003c22 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	08 95       	ret

00003c26 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    3c26:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    3c28:	11 82       	std	Z+1, r1	; 0x01
    3c2a:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    3c2c:	81 e1       	ldi	r24, 0x11	; 17
    3c2e:	9e e1       	ldi	r25, 0x1E	; 30
    3c30:	95 83       	std	Z+5, r25	; 0x05
    3c32:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    3c34:	97 83       	std	Z+7, r25	; 0x07
    3c36:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    3c38:	91 87       	std	Z+9, r25	; 0x09
    3c3a:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    3c3c:	93 87       	std	Z+11, r25	; 0x0b
    3c3e:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    3c40:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    3c42:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    3c44:	14 86       	std	Z+12, r1	; 0x0c
    3c46:	15 86       	std	Z+13, r1	; 0x0d
    3c48:	16 86       	std	Z+14, r1	; 0x0e
    3c4a:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    3c4c:	8f ef       	ldi	r24, 0xFF	; 255
    3c4e:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    3c50:	82 8f       	std	Z+26, r24	; 0x1a
    3c52:	08 95       	ret

00003c54 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    3c54:	af 92       	push	r10
    3c56:	bf 92       	push	r11
    3c58:	cf 92       	push	r12
    3c5a:	df 92       	push	r13
    3c5c:	ef 92       	push	r14
    3c5e:	ff 92       	push	r15
    3c60:	0f 93       	push	r16
    3c62:	1f 93       	push	r17
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	ec 01       	movw	r28, r24
    3c6a:	5b 01       	movw	r10, r22
    3c6c:	6a 01       	movw	r12, r20
    3c6e:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    3c70:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    3c74:	bd 82       	std	Y+5, r11	; 0x05
    3c76:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    3c78:	df 82       	std	Y+7, r13	; 0x07
    3c7a:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    3c7c:	f9 86       	std	Y+9, r15	; 0x09
    3c7e:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    3c80:	1b 87       	std	Y+11, r17	; 0x0b
    3c82:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    3c84:	ce 01       	movw	r24, r28
    3c86:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <u8x8_SetupMemory>
}
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	08 95       	ret

00003ca0 <__subsf3>:
    3ca0:	50 58       	subi	r21, 0x80	; 128

00003ca2 <__addsf3>:
    3ca2:	bb 27       	eor	r27, r27
    3ca4:	aa 27       	eor	r26, r26
    3ca6:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <__addsf3x>
    3caa:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <__fp_round>
    3cae:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__fp_pscA>
    3cb2:	38 f0       	brcs	.+14     	; 0x3cc2 <__addsf3+0x20>
    3cb4:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <__fp_pscB>
    3cb8:	20 f0       	brcs	.+8      	; 0x3cc2 <__addsf3+0x20>
    3cba:	39 f4       	brne	.+14     	; 0x3cca <__addsf3+0x28>
    3cbc:	9f 3f       	cpi	r25, 0xFF	; 255
    3cbe:	19 f4       	brne	.+6      	; 0x3cc6 <__addsf3+0x24>
    3cc0:	26 f4       	brtc	.+8      	; 0x3cca <__addsf3+0x28>
    3cc2:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <__fp_nan>
    3cc6:	0e f4       	brtc	.+2      	; 0x3cca <__addsf3+0x28>
    3cc8:	e0 95       	com	r30
    3cca:	e7 fb       	bst	r30, 7
    3ccc:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__fp_inf>

00003cd0 <__addsf3x>:
    3cd0:	e9 2f       	mov	r30, r25
    3cd2:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__fp_split3>
    3cd6:	58 f3       	brcs	.-42     	; 0x3cae <__addsf3+0xc>
    3cd8:	ba 17       	cp	r27, r26
    3cda:	62 07       	cpc	r22, r18
    3cdc:	73 07       	cpc	r23, r19
    3cde:	84 07       	cpc	r24, r20
    3ce0:	95 07       	cpc	r25, r21
    3ce2:	20 f0       	brcs	.+8      	; 0x3cec <__addsf3x+0x1c>
    3ce4:	79 f4       	brne	.+30     	; 0x3d04 <__addsf3x+0x34>
    3ce6:	a6 f5       	brtc	.+104    	; 0x3d50 <__addsf3x+0x80>
    3ce8:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__fp_zero>
    3cec:	0e f4       	brtc	.+2      	; 0x3cf0 <__addsf3x+0x20>
    3cee:	e0 95       	com	r30
    3cf0:	0b 2e       	mov	r0, r27
    3cf2:	ba 2f       	mov	r27, r26
    3cf4:	a0 2d       	mov	r26, r0
    3cf6:	0b 01       	movw	r0, r22
    3cf8:	b9 01       	movw	r22, r18
    3cfa:	90 01       	movw	r18, r0
    3cfc:	0c 01       	movw	r0, r24
    3cfe:	ca 01       	movw	r24, r20
    3d00:	a0 01       	movw	r20, r0
    3d02:	11 24       	eor	r1, r1
    3d04:	ff 27       	eor	r31, r31
    3d06:	59 1b       	sub	r21, r25
    3d08:	99 f0       	breq	.+38     	; 0x3d30 <__addsf3x+0x60>
    3d0a:	59 3f       	cpi	r21, 0xF9	; 249
    3d0c:	50 f4       	brcc	.+20     	; 0x3d22 <__addsf3x+0x52>
    3d0e:	50 3e       	cpi	r21, 0xE0	; 224
    3d10:	68 f1       	brcs	.+90     	; 0x3d6c <__addsf3x+0x9c>
    3d12:	1a 16       	cp	r1, r26
    3d14:	f0 40       	sbci	r31, 0x00	; 0
    3d16:	a2 2f       	mov	r26, r18
    3d18:	23 2f       	mov	r18, r19
    3d1a:	34 2f       	mov	r19, r20
    3d1c:	44 27       	eor	r20, r20
    3d1e:	58 5f       	subi	r21, 0xF8	; 248
    3d20:	f3 cf       	rjmp	.-26     	; 0x3d08 <__addsf3x+0x38>
    3d22:	46 95       	lsr	r20
    3d24:	37 95       	ror	r19
    3d26:	27 95       	ror	r18
    3d28:	a7 95       	ror	r26
    3d2a:	f0 40       	sbci	r31, 0x00	; 0
    3d2c:	53 95       	inc	r21
    3d2e:	c9 f7       	brne	.-14     	; 0x3d22 <__addsf3x+0x52>
    3d30:	7e f4       	brtc	.+30     	; 0x3d50 <__addsf3x+0x80>
    3d32:	1f 16       	cp	r1, r31
    3d34:	ba 0b       	sbc	r27, r26
    3d36:	62 0b       	sbc	r22, r18
    3d38:	73 0b       	sbc	r23, r19
    3d3a:	84 0b       	sbc	r24, r20
    3d3c:	ba f0       	brmi	.+46     	; 0x3d6c <__addsf3x+0x9c>
    3d3e:	91 50       	subi	r25, 0x01	; 1
    3d40:	a1 f0       	breq	.+40     	; 0x3d6a <__addsf3x+0x9a>
    3d42:	ff 0f       	add	r31, r31
    3d44:	bb 1f       	adc	r27, r27
    3d46:	66 1f       	adc	r22, r22
    3d48:	77 1f       	adc	r23, r23
    3d4a:	88 1f       	adc	r24, r24
    3d4c:	c2 f7       	brpl	.-16     	; 0x3d3e <__addsf3x+0x6e>
    3d4e:	0e c0       	rjmp	.+28     	; 0x3d6c <__addsf3x+0x9c>
    3d50:	ba 0f       	add	r27, r26
    3d52:	62 1f       	adc	r22, r18
    3d54:	73 1f       	adc	r23, r19
    3d56:	84 1f       	adc	r24, r20
    3d58:	48 f4       	brcc	.+18     	; 0x3d6c <__addsf3x+0x9c>
    3d5a:	87 95       	ror	r24
    3d5c:	77 95       	ror	r23
    3d5e:	67 95       	ror	r22
    3d60:	b7 95       	ror	r27
    3d62:	f7 95       	ror	r31
    3d64:	9e 3f       	cpi	r25, 0xFE	; 254
    3d66:	08 f0       	brcs	.+2      	; 0x3d6a <__addsf3x+0x9a>
    3d68:	b0 cf       	rjmp	.-160    	; 0x3cca <__addsf3+0x28>
    3d6a:	93 95       	inc	r25
    3d6c:	88 0f       	add	r24, r24
    3d6e:	08 f0       	brcs	.+2      	; 0x3d72 <__addsf3x+0xa2>
    3d70:	99 27       	eor	r25, r25
    3d72:	ee 0f       	add	r30, r30
    3d74:	97 95       	ror	r25
    3d76:	87 95       	ror	r24
    3d78:	08 95       	ret

00003d7a <__divsf3>:
    3d7a:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <__divsf3x>
    3d7e:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <__fp_round>
    3d82:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <__fp_pscB>
    3d86:	58 f0       	brcs	.+22     	; 0x3d9e <__divsf3+0x24>
    3d88:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__fp_pscA>
    3d8c:	40 f0       	brcs	.+16     	; 0x3d9e <__divsf3+0x24>
    3d8e:	29 f4       	brne	.+10     	; 0x3d9a <__divsf3+0x20>
    3d90:	5f 3f       	cpi	r21, 0xFF	; 255
    3d92:	29 f0       	breq	.+10     	; 0x3d9e <__divsf3+0x24>
    3d94:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__fp_inf>
    3d98:	51 11       	cpse	r21, r1
    3d9a:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_szero>
    3d9e:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <__fp_nan>

00003da2 <__divsf3x>:
    3da2:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__fp_split3>
    3da6:	68 f3       	brcs	.-38     	; 0x3d82 <__divsf3+0x8>

00003da8 <__divsf3_pse>:
    3da8:	99 23       	and	r25, r25
    3daa:	b1 f3       	breq	.-20     	; 0x3d98 <__divsf3+0x1e>
    3dac:	55 23       	and	r21, r21
    3dae:	91 f3       	breq	.-28     	; 0x3d94 <__divsf3+0x1a>
    3db0:	95 1b       	sub	r25, r21
    3db2:	55 0b       	sbc	r21, r21
    3db4:	bb 27       	eor	r27, r27
    3db6:	aa 27       	eor	r26, r26
    3db8:	62 17       	cp	r22, r18
    3dba:	73 07       	cpc	r23, r19
    3dbc:	84 07       	cpc	r24, r20
    3dbe:	38 f0       	brcs	.+14     	; 0x3dce <__divsf3_pse+0x26>
    3dc0:	9f 5f       	subi	r25, 0xFF	; 255
    3dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc4:	22 0f       	add	r18, r18
    3dc6:	33 1f       	adc	r19, r19
    3dc8:	44 1f       	adc	r20, r20
    3dca:	aa 1f       	adc	r26, r26
    3dcc:	a9 f3       	breq	.-22     	; 0x3db8 <__divsf3_pse+0x10>
    3dce:	35 d0       	rcall	.+106    	; 0x3e3a <__divsf3_pse+0x92>
    3dd0:	0e 2e       	mov	r0, r30
    3dd2:	3a f0       	brmi	.+14     	; 0x3de2 <__divsf3_pse+0x3a>
    3dd4:	e0 e8       	ldi	r30, 0x80	; 128
    3dd6:	32 d0       	rcall	.+100    	; 0x3e3c <__divsf3_pse+0x94>
    3dd8:	91 50       	subi	r25, 0x01	; 1
    3dda:	50 40       	sbci	r21, 0x00	; 0
    3ddc:	e6 95       	lsr	r30
    3dde:	00 1c       	adc	r0, r0
    3de0:	ca f7       	brpl	.-14     	; 0x3dd4 <__divsf3_pse+0x2c>
    3de2:	2b d0       	rcall	.+86     	; 0x3e3a <__divsf3_pse+0x92>
    3de4:	fe 2f       	mov	r31, r30
    3de6:	29 d0       	rcall	.+82     	; 0x3e3a <__divsf3_pse+0x92>
    3de8:	66 0f       	add	r22, r22
    3dea:	77 1f       	adc	r23, r23
    3dec:	88 1f       	adc	r24, r24
    3dee:	bb 1f       	adc	r27, r27
    3df0:	26 17       	cp	r18, r22
    3df2:	37 07       	cpc	r19, r23
    3df4:	48 07       	cpc	r20, r24
    3df6:	ab 07       	cpc	r26, r27
    3df8:	b0 e8       	ldi	r27, 0x80	; 128
    3dfa:	09 f0       	breq	.+2      	; 0x3dfe <__divsf3_pse+0x56>
    3dfc:	bb 0b       	sbc	r27, r27
    3dfe:	80 2d       	mov	r24, r0
    3e00:	bf 01       	movw	r22, r30
    3e02:	ff 27       	eor	r31, r31
    3e04:	93 58       	subi	r25, 0x83	; 131
    3e06:	5f 4f       	sbci	r21, 0xFF	; 255
    3e08:	3a f0       	brmi	.+14     	; 0x3e18 <__divsf3_pse+0x70>
    3e0a:	9e 3f       	cpi	r25, 0xFE	; 254
    3e0c:	51 05       	cpc	r21, r1
    3e0e:	78 f0       	brcs	.+30     	; 0x3e2e <__divsf3_pse+0x86>
    3e10:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__fp_inf>
    3e14:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_szero>
    3e18:	5f 3f       	cpi	r21, 0xFF	; 255
    3e1a:	e4 f3       	brlt	.-8      	; 0x3e14 <__divsf3_pse+0x6c>
    3e1c:	98 3e       	cpi	r25, 0xE8	; 232
    3e1e:	d4 f3       	brlt	.-12     	; 0x3e14 <__divsf3_pse+0x6c>
    3e20:	86 95       	lsr	r24
    3e22:	77 95       	ror	r23
    3e24:	67 95       	ror	r22
    3e26:	b7 95       	ror	r27
    3e28:	f7 95       	ror	r31
    3e2a:	9f 5f       	subi	r25, 0xFF	; 255
    3e2c:	c9 f7       	brne	.-14     	; 0x3e20 <__divsf3_pse+0x78>
    3e2e:	88 0f       	add	r24, r24
    3e30:	91 1d       	adc	r25, r1
    3e32:	96 95       	lsr	r25
    3e34:	87 95       	ror	r24
    3e36:	97 f9       	bld	r25, 7
    3e38:	08 95       	ret
    3e3a:	e1 e0       	ldi	r30, 0x01	; 1
    3e3c:	66 0f       	add	r22, r22
    3e3e:	77 1f       	adc	r23, r23
    3e40:	88 1f       	adc	r24, r24
    3e42:	bb 1f       	adc	r27, r27
    3e44:	62 17       	cp	r22, r18
    3e46:	73 07       	cpc	r23, r19
    3e48:	84 07       	cpc	r24, r20
    3e4a:	ba 07       	cpc	r27, r26
    3e4c:	20 f0       	brcs	.+8      	; 0x3e56 <__divsf3_pse+0xae>
    3e4e:	62 1b       	sub	r22, r18
    3e50:	73 0b       	sbc	r23, r19
    3e52:	84 0b       	sbc	r24, r20
    3e54:	ba 0b       	sbc	r27, r26
    3e56:	ee 1f       	adc	r30, r30
    3e58:	88 f7       	brcc	.-30     	; 0x3e3c <__divsf3_pse+0x94>
    3e5a:	e0 95       	com	r30
    3e5c:	08 95       	ret

00003e5e <__fixsfsi>:
    3e5e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__fixunssfsi>
    3e62:	68 94       	set
    3e64:	b1 11       	cpse	r27, r1
    3e66:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_szero>
    3e6a:	08 95       	ret

00003e6c <__fixunssfsi>:
    3e6c:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <__fp_splitA>
    3e70:	88 f0       	brcs	.+34     	; 0x3e94 <__fixunssfsi+0x28>
    3e72:	9f 57       	subi	r25, 0x7F	; 127
    3e74:	98 f0       	brcs	.+38     	; 0x3e9c <__fixunssfsi+0x30>
    3e76:	b9 2f       	mov	r27, r25
    3e78:	99 27       	eor	r25, r25
    3e7a:	b7 51       	subi	r27, 0x17	; 23
    3e7c:	b0 f0       	brcs	.+44     	; 0x3eaa <__fixunssfsi+0x3e>
    3e7e:	e1 f0       	breq	.+56     	; 0x3eb8 <__fixunssfsi+0x4c>
    3e80:	66 0f       	add	r22, r22
    3e82:	77 1f       	adc	r23, r23
    3e84:	88 1f       	adc	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	1a f0       	brmi	.+6      	; 0x3e90 <__fixunssfsi+0x24>
    3e8a:	ba 95       	dec	r27
    3e8c:	c9 f7       	brne	.-14     	; 0x3e80 <__fixunssfsi+0x14>
    3e8e:	14 c0       	rjmp	.+40     	; 0x3eb8 <__fixunssfsi+0x4c>
    3e90:	b1 30       	cpi	r27, 0x01	; 1
    3e92:	91 f0       	breq	.+36     	; 0x3eb8 <__fixunssfsi+0x4c>
    3e94:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__fp_zero>
    3e98:	b1 e0       	ldi	r27, 0x01	; 1
    3e9a:	08 95       	ret
    3e9c:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__fp_zero>
    3ea0:	67 2f       	mov	r22, r23
    3ea2:	78 2f       	mov	r23, r24
    3ea4:	88 27       	eor	r24, r24
    3ea6:	b8 5f       	subi	r27, 0xF8	; 248
    3ea8:	39 f0       	breq	.+14     	; 0x3eb8 <__fixunssfsi+0x4c>
    3eaa:	b9 3f       	cpi	r27, 0xF9	; 249
    3eac:	cc f3       	brlt	.-14     	; 0x3ea0 <__fixunssfsi+0x34>
    3eae:	86 95       	lsr	r24
    3eb0:	77 95       	ror	r23
    3eb2:	67 95       	ror	r22
    3eb4:	b3 95       	inc	r27
    3eb6:	d9 f7       	brne	.-10     	; 0x3eae <__fixunssfsi+0x42>
    3eb8:	3e f4       	brtc	.+14     	; 0x3ec8 <__fixunssfsi+0x5c>
    3eba:	90 95       	com	r25
    3ebc:	80 95       	com	r24
    3ebe:	70 95       	com	r23
    3ec0:	61 95       	neg	r22
    3ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec8:	08 95       	ret

00003eca <__floatunsisf>:
    3eca:	e8 94       	clt
    3ecc:	09 c0       	rjmp	.+18     	; 0x3ee0 <__floatsisf+0x12>

00003ece <__floatsisf>:
    3ece:	97 fb       	bst	r25, 7
    3ed0:	3e f4       	brtc	.+14     	; 0x3ee0 <__floatsisf+0x12>
    3ed2:	90 95       	com	r25
    3ed4:	80 95       	com	r24
    3ed6:	70 95       	com	r23
    3ed8:	61 95       	neg	r22
    3eda:	7f 4f       	sbci	r23, 0xFF	; 255
    3edc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ede:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee0:	99 23       	and	r25, r25
    3ee2:	a9 f0       	breq	.+42     	; 0x3f0e <__floatsisf+0x40>
    3ee4:	f9 2f       	mov	r31, r25
    3ee6:	96 e9       	ldi	r25, 0x96	; 150
    3ee8:	bb 27       	eor	r27, r27
    3eea:	93 95       	inc	r25
    3eec:	f6 95       	lsr	r31
    3eee:	87 95       	ror	r24
    3ef0:	77 95       	ror	r23
    3ef2:	67 95       	ror	r22
    3ef4:	b7 95       	ror	r27
    3ef6:	f1 11       	cpse	r31, r1
    3ef8:	f8 cf       	rjmp	.-16     	; 0x3eea <__floatsisf+0x1c>
    3efa:	fa f4       	brpl	.+62     	; 0x3f3a <__floatsisf+0x6c>
    3efc:	bb 0f       	add	r27, r27
    3efe:	11 f4       	brne	.+4      	; 0x3f04 <__floatsisf+0x36>
    3f00:	60 ff       	sbrs	r22, 0
    3f02:	1b c0       	rjmp	.+54     	; 0x3f3a <__floatsisf+0x6c>
    3f04:	6f 5f       	subi	r22, 0xFF	; 255
    3f06:	7f 4f       	sbci	r23, 0xFF	; 255
    3f08:	8f 4f       	sbci	r24, 0xFF	; 255
    3f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0c:	16 c0       	rjmp	.+44     	; 0x3f3a <__floatsisf+0x6c>
    3f0e:	88 23       	and	r24, r24
    3f10:	11 f0       	breq	.+4      	; 0x3f16 <__floatsisf+0x48>
    3f12:	96 e9       	ldi	r25, 0x96	; 150
    3f14:	11 c0       	rjmp	.+34     	; 0x3f38 <__floatsisf+0x6a>
    3f16:	77 23       	and	r23, r23
    3f18:	21 f0       	breq	.+8      	; 0x3f22 <__floatsisf+0x54>
    3f1a:	9e e8       	ldi	r25, 0x8E	; 142
    3f1c:	87 2f       	mov	r24, r23
    3f1e:	76 2f       	mov	r23, r22
    3f20:	05 c0       	rjmp	.+10     	; 0x3f2c <__floatsisf+0x5e>
    3f22:	66 23       	and	r22, r22
    3f24:	71 f0       	breq	.+28     	; 0x3f42 <__floatsisf+0x74>
    3f26:	96 e8       	ldi	r25, 0x86	; 134
    3f28:	86 2f       	mov	r24, r22
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	2a f0       	brmi	.+10     	; 0x3f3a <__floatsisf+0x6c>
    3f30:	9a 95       	dec	r25
    3f32:	66 0f       	add	r22, r22
    3f34:	77 1f       	adc	r23, r23
    3f36:	88 1f       	adc	r24, r24
    3f38:	da f7       	brpl	.-10     	; 0x3f30 <__floatsisf+0x62>
    3f3a:	88 0f       	add	r24, r24
    3f3c:	96 95       	lsr	r25
    3f3e:	87 95       	ror	r24
    3f40:	97 f9       	bld	r25, 7
    3f42:	08 95       	ret

00003f44 <__fp_inf>:
    3f44:	97 f9       	bld	r25, 7
    3f46:	9f 67       	ori	r25, 0x7F	; 127
    3f48:	80 e8       	ldi	r24, 0x80	; 128
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	08 95       	ret

00003f50 <__fp_nan>:
    3f50:	9f ef       	ldi	r25, 0xFF	; 255
    3f52:	80 ec       	ldi	r24, 0xC0	; 192
    3f54:	08 95       	ret

00003f56 <__fp_pscA>:
    3f56:	00 24       	eor	r0, r0
    3f58:	0a 94       	dec	r0
    3f5a:	16 16       	cp	r1, r22
    3f5c:	17 06       	cpc	r1, r23
    3f5e:	18 06       	cpc	r1, r24
    3f60:	09 06       	cpc	r0, r25
    3f62:	08 95       	ret

00003f64 <__fp_pscB>:
    3f64:	00 24       	eor	r0, r0
    3f66:	0a 94       	dec	r0
    3f68:	12 16       	cp	r1, r18
    3f6a:	13 06       	cpc	r1, r19
    3f6c:	14 06       	cpc	r1, r20
    3f6e:	05 06       	cpc	r0, r21
    3f70:	08 95       	ret

00003f72 <__fp_round>:
    3f72:	09 2e       	mov	r0, r25
    3f74:	03 94       	inc	r0
    3f76:	00 0c       	add	r0, r0
    3f78:	11 f4       	brne	.+4      	; 0x3f7e <__fp_round+0xc>
    3f7a:	88 23       	and	r24, r24
    3f7c:	52 f0       	brmi	.+20     	; 0x3f92 <__fp_round+0x20>
    3f7e:	bb 0f       	add	r27, r27
    3f80:	40 f4       	brcc	.+16     	; 0x3f92 <__fp_round+0x20>
    3f82:	bf 2b       	or	r27, r31
    3f84:	11 f4       	brne	.+4      	; 0x3f8a <__fp_round+0x18>
    3f86:	60 ff       	sbrs	r22, 0
    3f88:	04 c0       	rjmp	.+8      	; 0x3f92 <__fp_round+0x20>
    3f8a:	6f 5f       	subi	r22, 0xFF	; 255
    3f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f90:	9f 4f       	sbci	r25, 0xFF	; 255
    3f92:	08 95       	ret

00003f94 <__fp_split3>:
    3f94:	57 fd       	sbrc	r21, 7
    3f96:	90 58       	subi	r25, 0x80	; 128
    3f98:	44 0f       	add	r20, r20
    3f9a:	55 1f       	adc	r21, r21
    3f9c:	59 f0       	breq	.+22     	; 0x3fb4 <__fp_splitA+0x10>
    3f9e:	5f 3f       	cpi	r21, 0xFF	; 255
    3fa0:	71 f0       	breq	.+28     	; 0x3fbe <__fp_splitA+0x1a>
    3fa2:	47 95       	ror	r20

00003fa4 <__fp_splitA>:
    3fa4:	88 0f       	add	r24, r24
    3fa6:	97 fb       	bst	r25, 7
    3fa8:	99 1f       	adc	r25, r25
    3faa:	61 f0       	breq	.+24     	; 0x3fc4 <__fp_splitA+0x20>
    3fac:	9f 3f       	cpi	r25, 0xFF	; 255
    3fae:	79 f0       	breq	.+30     	; 0x3fce <__fp_splitA+0x2a>
    3fb0:	87 95       	ror	r24
    3fb2:	08 95       	ret
    3fb4:	12 16       	cp	r1, r18
    3fb6:	13 06       	cpc	r1, r19
    3fb8:	14 06       	cpc	r1, r20
    3fba:	55 1f       	adc	r21, r21
    3fbc:	f2 cf       	rjmp	.-28     	; 0x3fa2 <__fp_split3+0xe>
    3fbe:	46 95       	lsr	r20
    3fc0:	f1 df       	rcall	.-30     	; 0x3fa4 <__fp_splitA>
    3fc2:	08 c0       	rjmp	.+16     	; 0x3fd4 <__fp_splitA+0x30>
    3fc4:	16 16       	cp	r1, r22
    3fc6:	17 06       	cpc	r1, r23
    3fc8:	18 06       	cpc	r1, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	f1 cf       	rjmp	.-30     	; 0x3fb0 <__fp_splitA+0xc>
    3fce:	86 95       	lsr	r24
    3fd0:	71 05       	cpc	r23, r1
    3fd2:	61 05       	cpc	r22, r1
    3fd4:	08 94       	sec
    3fd6:	08 95       	ret

00003fd8 <__fp_zero>:
    3fd8:	e8 94       	clt

00003fda <__fp_szero>:
    3fda:	bb 27       	eor	r27, r27
    3fdc:	66 27       	eor	r22, r22
    3fde:	77 27       	eor	r23, r23
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	97 f9       	bld	r25, 7
    3fe4:	08 95       	ret

00003fe6 <__mulsf3>:
    3fe6:	0e 94 06 20 	call	0x400c	; 0x400c <__mulsf3x>
    3fea:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <__fp_round>
    3fee:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__fp_pscA>
    3ff2:	38 f0       	brcs	.+14     	; 0x4002 <__mulsf3+0x1c>
    3ff4:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <__fp_pscB>
    3ff8:	20 f0       	brcs	.+8      	; 0x4002 <__mulsf3+0x1c>
    3ffa:	95 23       	and	r25, r21
    3ffc:	11 f0       	breq	.+4      	; 0x4002 <__mulsf3+0x1c>
    3ffe:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__fp_inf>
    4002:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <__fp_nan>
    4006:	11 24       	eor	r1, r1
    4008:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_szero>

0000400c <__mulsf3x>:
    400c:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__fp_split3>
    4010:	70 f3       	brcs	.-36     	; 0x3fee <__mulsf3+0x8>

00004012 <__mulsf3_pse>:
    4012:	95 9f       	mul	r25, r21
    4014:	c1 f3       	breq	.-16     	; 0x4006 <__mulsf3+0x20>
    4016:	95 0f       	add	r25, r21
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	55 1f       	adc	r21, r21
    401c:	62 9f       	mul	r22, r18
    401e:	f0 01       	movw	r30, r0
    4020:	72 9f       	mul	r23, r18
    4022:	bb 27       	eor	r27, r27
    4024:	f0 0d       	add	r31, r0
    4026:	b1 1d       	adc	r27, r1
    4028:	63 9f       	mul	r22, r19
    402a:	aa 27       	eor	r26, r26
    402c:	f0 0d       	add	r31, r0
    402e:	b1 1d       	adc	r27, r1
    4030:	aa 1f       	adc	r26, r26
    4032:	64 9f       	mul	r22, r20
    4034:	66 27       	eor	r22, r22
    4036:	b0 0d       	add	r27, r0
    4038:	a1 1d       	adc	r26, r1
    403a:	66 1f       	adc	r22, r22
    403c:	82 9f       	mul	r24, r18
    403e:	22 27       	eor	r18, r18
    4040:	b0 0d       	add	r27, r0
    4042:	a1 1d       	adc	r26, r1
    4044:	62 1f       	adc	r22, r18
    4046:	73 9f       	mul	r23, r19
    4048:	b0 0d       	add	r27, r0
    404a:	a1 1d       	adc	r26, r1
    404c:	62 1f       	adc	r22, r18
    404e:	83 9f       	mul	r24, r19
    4050:	a0 0d       	add	r26, r0
    4052:	61 1d       	adc	r22, r1
    4054:	22 1f       	adc	r18, r18
    4056:	74 9f       	mul	r23, r20
    4058:	33 27       	eor	r19, r19
    405a:	a0 0d       	add	r26, r0
    405c:	61 1d       	adc	r22, r1
    405e:	23 1f       	adc	r18, r19
    4060:	84 9f       	mul	r24, r20
    4062:	60 0d       	add	r22, r0
    4064:	21 1d       	adc	r18, r1
    4066:	82 2f       	mov	r24, r18
    4068:	76 2f       	mov	r23, r22
    406a:	6a 2f       	mov	r22, r26
    406c:	11 24       	eor	r1, r1
    406e:	9f 57       	subi	r25, 0x7F	; 127
    4070:	50 40       	sbci	r21, 0x00	; 0
    4072:	9a f0       	brmi	.+38     	; 0x409a <__mulsf3_pse+0x88>
    4074:	f1 f0       	breq	.+60     	; 0x40b2 <__mulsf3_pse+0xa0>
    4076:	88 23       	and	r24, r24
    4078:	4a f0       	brmi	.+18     	; 0x408c <__mulsf3_pse+0x7a>
    407a:	ee 0f       	add	r30, r30
    407c:	ff 1f       	adc	r31, r31
    407e:	bb 1f       	adc	r27, r27
    4080:	66 1f       	adc	r22, r22
    4082:	77 1f       	adc	r23, r23
    4084:	88 1f       	adc	r24, r24
    4086:	91 50       	subi	r25, 0x01	; 1
    4088:	50 40       	sbci	r21, 0x00	; 0
    408a:	a9 f7       	brne	.-22     	; 0x4076 <__mulsf3_pse+0x64>
    408c:	9e 3f       	cpi	r25, 0xFE	; 254
    408e:	51 05       	cpc	r21, r1
    4090:	80 f0       	brcs	.+32     	; 0x40b2 <__mulsf3_pse+0xa0>
    4092:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__fp_inf>
    4096:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__fp_szero>
    409a:	5f 3f       	cpi	r21, 0xFF	; 255
    409c:	e4 f3       	brlt	.-8      	; 0x4096 <__mulsf3_pse+0x84>
    409e:	98 3e       	cpi	r25, 0xE8	; 232
    40a0:	d4 f3       	brlt	.-12     	; 0x4096 <__mulsf3_pse+0x84>
    40a2:	86 95       	lsr	r24
    40a4:	77 95       	ror	r23
    40a6:	67 95       	ror	r22
    40a8:	b7 95       	ror	r27
    40aa:	f7 95       	ror	r31
    40ac:	e7 95       	ror	r30
    40ae:	9f 5f       	subi	r25, 0xFF	; 255
    40b0:	c1 f7       	brne	.-16     	; 0x40a2 <__mulsf3_pse+0x90>
    40b2:	fe 2b       	or	r31, r30
    40b4:	88 0f       	add	r24, r24
    40b6:	91 1d       	adc	r25, r1
    40b8:	96 95       	lsr	r25
    40ba:	87 95       	ror	r24
    40bc:	97 f9       	bld	r25, 7
    40be:	08 95       	ret

000040c0 <__udivmodsi4>:
    40c0:	a1 e2       	ldi	r26, 0x21	; 33
    40c2:	1a 2e       	mov	r1, r26
    40c4:	aa 1b       	sub	r26, r26
    40c6:	bb 1b       	sub	r27, r27
    40c8:	fd 01       	movw	r30, r26
    40ca:	0d c0       	rjmp	.+26     	; 0x40e6 <__udivmodsi4_ep>

000040cc <__udivmodsi4_loop>:
    40cc:	aa 1f       	adc	r26, r26
    40ce:	bb 1f       	adc	r27, r27
    40d0:	ee 1f       	adc	r30, r30
    40d2:	ff 1f       	adc	r31, r31
    40d4:	a2 17       	cp	r26, r18
    40d6:	b3 07       	cpc	r27, r19
    40d8:	e4 07       	cpc	r30, r20
    40da:	f5 07       	cpc	r31, r21
    40dc:	20 f0       	brcs	.+8      	; 0x40e6 <__udivmodsi4_ep>
    40de:	a2 1b       	sub	r26, r18
    40e0:	b3 0b       	sbc	r27, r19
    40e2:	e4 0b       	sbc	r30, r20
    40e4:	f5 0b       	sbc	r31, r21

000040e6 <__udivmodsi4_ep>:
    40e6:	66 1f       	adc	r22, r22
    40e8:	77 1f       	adc	r23, r23
    40ea:	88 1f       	adc	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	1a 94       	dec	r1
    40f0:	69 f7       	brne	.-38     	; 0x40cc <__udivmodsi4_loop>
    40f2:	60 95       	com	r22
    40f4:	70 95       	com	r23
    40f6:	80 95       	com	r24
    40f8:	90 95       	com	r25
    40fa:	9b 01       	movw	r18, r22
    40fc:	ac 01       	movw	r20, r24
    40fe:	bd 01       	movw	r22, r26
    4100:	cf 01       	movw	r24, r30
    4102:	08 95       	ret

00004104 <__umulhisi3>:
    4104:	a2 9f       	mul	r26, r18
    4106:	b0 01       	movw	r22, r0
    4108:	b3 9f       	mul	r27, r19
    410a:	c0 01       	movw	r24, r0
    410c:	a3 9f       	mul	r26, r19
    410e:	70 0d       	add	r23, r0
    4110:	81 1d       	adc	r24, r1
    4112:	11 24       	eor	r1, r1
    4114:	91 1d       	adc	r25, r1
    4116:	b2 9f       	mul	r27, r18
    4118:	70 0d       	add	r23, r0
    411a:	81 1d       	adc	r24, r1
    411c:	11 24       	eor	r1, r1
    411e:	91 1d       	adc	r25, r1
    4120:	08 95       	ret

00004122 <memset>:
    4122:	dc 01       	movw	r26, r24
    4124:	01 c0       	rjmp	.+2      	; 0x4128 <memset+0x6>
    4126:	6d 93       	st	X+, r22
    4128:	41 50       	subi	r20, 0x01	; 1
    412a:	50 40       	sbci	r21, 0x00	; 0
    412c:	e0 f7       	brcc	.-8      	; 0x4126 <memset+0x4>
    412e:	08 95       	ret

00004130 <strcat>:
    4130:	fb 01       	movw	r30, r22
    4132:	dc 01       	movw	r26, r24
    4134:	0d 90       	ld	r0, X+
    4136:	00 20       	and	r0, r0
    4138:	e9 f7       	brne	.-6      	; 0x4134 <strcat+0x4>
    413a:	11 97       	sbiw	r26, 0x01	; 1
    413c:	01 90       	ld	r0, Z+
    413e:	0d 92       	st	X+, r0
    4140:	00 20       	and	r0, r0
    4142:	e1 f7       	brne	.-8      	; 0x413c <strcat+0xc>
    4144:	08 95       	ret

00004146 <__itoa_ncheck>:
    4146:	bb 27       	eor	r27, r27
    4148:	4a 30       	cpi	r20, 0x0A	; 10
    414a:	31 f4       	brne	.+12     	; 0x4158 <__itoa_ncheck+0x12>
    414c:	99 23       	and	r25, r25
    414e:	22 f4       	brpl	.+8      	; 0x4158 <__itoa_ncheck+0x12>
    4150:	bd e2       	ldi	r27, 0x2D	; 45
    4152:	90 95       	com	r25
    4154:	81 95       	neg	r24
    4156:	9f 4f       	sbci	r25, 0xFF	; 255
    4158:	0c 94 af 20 	jmp	0x415e	; 0x415e <__utoa_common>

0000415c <__utoa_ncheck>:
    415c:	bb 27       	eor	r27, r27

0000415e <__utoa_common>:
    415e:	fb 01       	movw	r30, r22
    4160:	55 27       	eor	r21, r21
    4162:	aa 27       	eor	r26, r26
    4164:	88 0f       	add	r24, r24
    4166:	99 1f       	adc	r25, r25
    4168:	aa 1f       	adc	r26, r26
    416a:	a4 17       	cp	r26, r20
    416c:	10 f0       	brcs	.+4      	; 0x4172 <__utoa_common+0x14>
    416e:	a4 1b       	sub	r26, r20
    4170:	83 95       	inc	r24
    4172:	50 51       	subi	r21, 0x10	; 16
    4174:	b9 f7       	brne	.-18     	; 0x4164 <__utoa_common+0x6>
    4176:	a0 5d       	subi	r26, 0xD0	; 208
    4178:	aa 33       	cpi	r26, 0x3A	; 58
    417a:	08 f0       	brcs	.+2      	; 0x417e <__utoa_common+0x20>
    417c:	a9 5d       	subi	r26, 0xD9	; 217
    417e:	a1 93       	st	Z+, r26
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	79 f7       	brne	.-34     	; 0x4162 <__utoa_common+0x4>
    4184:	b1 11       	cpse	r27, r1
    4186:	b1 93       	st	Z+, r27
    4188:	11 92       	st	Z+, r1
    418a:	cb 01       	movw	r24, r22
    418c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <strrev>

00004190 <strrev>:
    4190:	dc 01       	movw	r26, r24
    4192:	fc 01       	movw	r30, r24
    4194:	67 2f       	mov	r22, r23
    4196:	71 91       	ld	r23, Z+
    4198:	77 23       	and	r23, r23
    419a:	e1 f7       	brne	.-8      	; 0x4194 <strrev+0x4>
    419c:	32 97       	sbiw	r30, 0x02	; 2
    419e:	04 c0       	rjmp	.+8      	; 0x41a8 <strrev+0x18>
    41a0:	7c 91       	ld	r23, X
    41a2:	6d 93       	st	X+, r22
    41a4:	70 83       	st	Z, r23
    41a6:	62 91       	ld	r22, -Z
    41a8:	ae 17       	cp	r26, r30
    41aa:	bf 07       	cpc	r27, r31
    41ac:	c8 f3       	brcs	.-14     	; 0x41a0 <strrev+0x10>
    41ae:	08 95       	ret

000041b0 <_exit>:
    41b0:	f8 94       	cli

000041b2 <__stop_program>:
    41b2:	ff cf       	rjmp	.-2      	; 0x41b2 <__stop_program>

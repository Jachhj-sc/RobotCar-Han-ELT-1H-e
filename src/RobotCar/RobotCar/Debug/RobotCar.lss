
RobotCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  0000489a  0000492e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000489a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fe  008002c4  008002c4  00004af2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004af2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002148  00000000  00000000  00004b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00048d16  00000000  00000000  00006cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000301c  00000000  00000000  0004f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cfdc  00000000  00000000  000529de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000c6b8  00000000  00000000  0005f9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010f20  00000000  00000000  0006c074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004e9f6  00000000  00000000  0007cf94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000020f0  00000000  00000000  000cb98a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__ctors_end>
       4:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
       8:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
       c:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_3>
      10:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      14:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_5>
      18:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      1c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      20:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      24:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      28:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      2c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      30:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      34:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      38:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      3c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_15>
      40:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      44:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      48:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      4c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      50:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      54:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      58:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      5c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      60:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      64:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	bf 00       	.word	0x00bf	; ????
      98:	03 02       	muls	r16, r19
      9a:	03 04       	cpc	r0, r3
      9c:	03 05       	cpc	r16, r3
      9e:	04 06       	cpc	r0, r20
      a0:	0a 00       	.word	0x000a	; ????
      a2:	fe 07       	cpc	r31, r30
      a4:	fe 07       	cpc	r31, r30
      a6:	00 01       	movw	r0, r0
      a8:	42 02       	muls	r20, r18
      aa:	88 07       	cpc	r24, r24
      ac:	c4 20       	and	r12, r4
      ae:	05 00       	.word	0x0005	; ????
      b0:	62 07       	cpc	r22, r18
      b2:	21 07       	cpc	r18, r17
      b4:	39 43       	sbci	r19, 0x39	; 57
      b6:	c7 a0       	ldd	r12, Z+39	; 0x27
      b8:	04 22       	and	r0, r20
      ba:	07 9b       	sbis	0x00, 7	; 0
      bc:	52 47       	sbci	r21, 0x72	; 114
      be:	62 09       	sbc	r22, r2
      c0:	23 0e       	add	r2, r19
      c2:	3d 42       	sbci	r19, 0x2D	; 45
      c4:	4f 29       	or	r20, r15
      c6:	49 06       	cpc	r4, r25
      c8:	a5 32       	cpi	r26, 0x25	; 37
      ca:	28 a5       	ldd	r18, Y+40	; 0x28
      cc:	24 01       	movw	r4, r8
      ce:	24 0c       	add	r2, r4
      d0:	3d 42       	sbci	r19, 0x2D	; 45
      d2:	57 b6       	in	r5, 0x37	; 55
      d4:	d4 b6       	in	r13, 0x34	; 52
      d6:	24 d9       	rcall	.-3512   	; 0xfffff320 <__eeprom_end+0xff7ef320>
      d8:	22 00       	.word	0x0022	; ????
      da:	25 0c       	add	r2, r5
      dc:	3d 42       	sbci	r19, 0x2D	; 45
      de:	4f a4       	ldd	r4, Y+47	; 0x2f
      e0:	74 ab       	std	Z+52, r23	; 0x34
      e2:	b4 48       	sbci	r27, 0x84	; 132
      e4:	09 00       	.word	0x0009	; ????
      e6:	26 0d       	add	r18, r6
      e8:	3d 42       	sbci	r19, 0x2D	; 45
      ea:	4f 96       	adiw	r24, 0x1f	; 31
      ec:	44 49       	sbci	r20, 0x94	; 148
      ee:	56 49       	sbci	r21, 0x96	; 150
      f0:	a4 48       	sbci	r26, 0x84	; 132
      f2:	09 27       	eor	r16, r25
      f4:	06 19       	sub	r16, r6
      f6:	53 c7       	rjmp	.+3750   	; 0xf9e <sendTriggPulse+0x24>
      f8:	00 28       	or	r0, r0
      fa:	08 bb       	out	0x18, r16	; 24
      fc:	42 57       	subi	r20, 0x72	; 114
      fe:	52 aa       	std	Z+50, r5	; 0x32
     100:	15 29       	or	r17, r5
     102:	09 bb       	out	0x19, r16	; 25
     104:	42 47       	sbci	r20, 0x72	; 114
     106:	56 aa       	std	Z+54, r5	; 0x36
     108:	94 00       	.word	0x0094	; ????
     10a:	2a 0a       	sbc	r2, r26
     10c:	2d 46       	sbci	r18, 0x6D	; 109
     10e:	47 96       	adiw	r24, 0x17	; 23
     110:	54 06       	cpc	r5, r20
     112:	a5 2d       	mov	r26, r5
     114:	2b 0a       	sbc	r2, r27
     116:	2d 46       	sbci	r18, 0x6D	; 109
     118:	57 18       	sub	r5, r7
     11a:	0d 52       	subi	r16, 0x2D	; 45
     11c:	18 01       	movw	r2, r16
     11e:	2c 07       	cpc	r18, r28
     120:	9b 3e       	cpi	r25, 0xEB	; 235
     122:	8f 52       	subi	r24, 0x2F	; 47
     124:	02 2d       	mov	r16, r2
     126:	06 0d       	add	r16, r6
     128:	4e c7       	rjmp	.+3740   	; 0xfc6 <angleCalculator+0x14>
     12a:	20 2e       	mov	r2, r16
     12c:	08 9b       	sbis	0x01, 0	; 1
     12e:	3e 4f       	sbci	r19, 0xFE	; 254
     130:	b2 24       	eor	r11, r2
     132:	00 2f       	mov	r16, r16
     134:	08 3d       	cpi	r16, 0xD8	; 216
     136:	42 67       	ori	r20, 0x72	; 114
     138:	ad 63       	ori	r26, 0x3D	; 61
     13a:	08 30       	cpi	r16, 0x08	; 8
     13c:	0b 3d       	cpi	r16, 0xDB	; 219
     13e:	42 57       	subi	r20, 0x72	; 114
     140:	96 d4       	rcall	.+2348   	; 0xa6e <__stack+0x16f>
     142:	6c 49       	sbci	r22, 0x9C	; 156
     144:	2d 02       	muls	r18, r29
     146:	31 0a       	sbc	r3, r17
     148:	3d 42       	sbci	r19, 0x2D	; 45
     14a:	57 26       	eor	r5, r23
     14c:	25 61       	ori	r18, 0x15	; 21
     14e:	d3 20       	and	r13, r3
     150:	32 0c       	add	r3, r2
     152:	3d 42       	sbci	r19, 0x2D	; 45
     154:	cf 92       	push	r12
     156:	85 91       	lpm	r24, Z+
     158:	94 85       	ldd	r25, Z+12	; 0x0c
     15a:	83 00       	.word	0x0083	; ????
     15c:	33 0c       	add	r3, r3
     15e:	3d 42       	sbci	r19, 0x2D	; 45
     160:	c7 20       	and	r12, r7
     162:	66 99       	sbic	0x0c, 6	; 12
     164:	aa 25       	eor	r26, r10
     166:	0b 00       	.word	0x000b	; ????
     168:	34 0c       	add	r3, r4
     16a:	3d 42       	sbci	r19, 0x2D	; 45
     16c:	5f 26       	eor	r5, r31
     16e:	25 a5       	ldd	r18, Z+45	; 0x2d
     170:	64 d0       	rcall	.+200    	; 0x23a <__trampolines_end+0x1a4>
     172:	c2 04       	cpc	r12, r2
     174:	35 0b       	sbc	r19, r21
     176:	3d 42       	sbci	r19, 0x2D	; 45
     178:	c7 31       	cpi	r28, 0x17	; 23
     17a:	31 85       	ldd	r19, Z+9	; 0x09
     17c:	5a b2       	in	r5, 0x1a	; 26
     17e:	00 36       	cpi	r16, 0x60	; 96
     180:	0c 3d       	cpi	r16, 0xDC	; 220
     182:	42 97       	sbiw	r24, 0x12	; 18
     184:	94 85       	ldd	r25, Z+12	; 0x0c
     186:	89 49       	sbci	r24, 0x99	; 153
     188:	4b 16       	cp	r4, r27
     18a:	00 37       	cpi	r16, 0x70	; 112
     18c:	0b 3d       	cpi	r16, 0xDB	; 219
     18e:	42 c7       	rjmp	.+3716   	; 0x1014 <angleCalculator+0x62>
     190:	20 66       	ori	r18, 0x60	; 96
     192:	61 56       	subi	r22, 0x61	; 97
     194:	cc 00       	.word	0x00cc	; ????
     196:	38 0c       	add	r3, r8
     198:	3d 42       	sbci	r19, 0x2D	; 45
     19a:	cf 92       	push	r12
     19c:	69 c9       	rjmp	.-3374   	; 0xfffff470 <__eeprom_end+0xff7ef470>
     19e:	92 69       	ori	r25, 0x92	; 146
     1a0:	c9 02       	muls	r28, r25
     1a2:	39 0c       	add	r3, r9
     1a4:	3d 42       	sbci	r19, 0x2D	; 45
     1a6:	cf 92       	push	r12
     1a8:	49 8a       	std	Y+17, r4	; 0x11
     1aa:	12 66       	ori	r17, 0x62	; 98
     1ac:	91 04       	cpc	r9, r1
     1ae:	3a 0a       	sbc	r3, r26
     1b0:	bb 3e       	cpi	r27, 0xEB	; 235
     1b2:	4f b2       	in	r4, 0x1f	; 31
     1b4:	a4 c9       	rjmp	.-3256   	; 0xfffff4fe <__eeprom_end+0xff7ef4fe>
     1b6:	92 00       	.word	0x0092	; ????
     1b8:	3b 09       	sbc	r19, r11
     1ba:	bb 3e       	cpi	r27, 0xEB	; 235
     1bc:	4f b2       	in	r4, 0x1f	; 31
     1be:	a4 4a       	sbci	r26, 0xA4	; 164
     1c0:	09 3c       	cpi	r16, 0xC9	; 201
     1c2:	08 bc       	out	0x28, r0	; 40
     1c4:	42 5f       	subi	r20, 0xF2	; 242
     1c6:	d4 d8       	rcall	.-3672   	; 0xfffff370 <__eeprom_end+0xff7ef370>
     1c8:	00 3d       	cpi	r16, 0xD0	; 208
     1ca:	08 1d       	adc	r16, r8
     1cc:	4a c7       	rjmp	.+3732   	; 0x1062 <angleCalculator+0xb0>
     1ce:	a0 0e       	add	r10, r16
     1d0:	02 3e       	cpi	r16, 0xE2	; 226
     1d2:	08 bc       	out	0x28, r0	; 40
     1d4:	42 47       	sbci	r20, 0x72	; 114
     1d6:	d8 d4       	rcall	.+2480   	; 0xb88 <__stack+0x289>
     1d8:	06 3f       	cpi	r16, 0xF6	; 246
     1da:	0a 3d       	cpi	r16, 0xDA	; 218
     1dc:	42 cf       	rjmp	.-380    	; 0x62 <__SREG__+0x23>
     1de:	92 35       	cpi	r25, 0x52	; 82
     1e0:	e6 50       	subi	r30, 0x06	; 6
     1e2:	04 40       	sbci	r16, 0x04	; 4
     1e4:	0c 3d       	cpi	r16, 0xDC	; 220
     1e6:	42 cf       	rjmp	.-380    	; 0x6c <__SREG__+0x2d>
     1e8:	92 49       	sbci	r25, 0x92	; 146
     1ea:	4b 62       	ori	r20, 0x2B	; 43
     1ec:	49 17       	cp	r20, r25
     1ee:	00 41       	sbci	r16, 0x10	; 16
     1f0:	0c 3d       	cpi	r16, 0xDC	; 220
     1f2:	42 57       	subi	r20, 0x72	; 114
     1f4:	96 d4       	rcall	.+2348   	; 0xb22 <__stack+0x223>
     1f6:	b4 61       	ori	r27, 0x14	; 20
     1f8:	c8 b4       	in	r12, 0x28	; 40
     1fa:	00 42       	sbci	r16, 0x20	; 32
     1fc:	0d 3d       	cpi	r16, 0xDD	; 221
     1fe:	42 c7       	rjmp	.+3716   	; 0x1084 <angleCalculator+0xd2>
     200:	10 55       	subi	r17, 0x50	; 80
     202:	a2 64       	ori	r26, 0x42	; 66
     204:	aa 44       	sbci	r26, 0x4A	; 74
     206:	83 02       	muls	r24, r19
     208:	43 0a       	sbc	r4, r19
     20a:	3d 42       	sbci	r19, 0x2D	; 45
     20c:	cf 92       	push	r12
     20e:	89 6d       	ori	r24, 0xD9	; 217
     210:	c9 02       	muls	r28, r25
     212:	44 0f       	add	r20, r20
     214:	3d 42       	sbci	r19, 0x2D	; 45
     216:	c7 10       	cpse	r12, r7
     218:	55 a2       	std	Z+37, r5	; 0x25
     21a:	24 4a       	sbci	r18, 0xA4	; 164
     21c:	a2 24       	eor	r10, r2
     21e:	1a 14       	cp	r1, r10
     220:	00 45       	sbci	r16, 0x50	; 80
     222:	0b 3d       	cpi	r16, 0xDB	; 219
     224:	42 c7       	rjmp	.+3716   	; 0x10aa <angleCalculator+0xf8>
     226:	31 1c       	adc	r3, r1
     228:	92 30       	cpi	r25, 0x02	; 2
     22a:	1c 04       	cpc	r1, r12
     22c:	46 0a       	sbc	r4, r22
     22e:	3d 42       	sbci	r19, 0x2D	; 45
     230:	c7 31       	cpi	r28, 0x17	; 23
     232:	1c 92       	st	X, r1
     234:	b0 08       	sbc	r11, r0
     236:	47 0b       	sbc	r20, r23
     238:	3d 42       	sbci	r19, 0x2D	; 45
     23a:	cf 92       	push	r12
     23c:	89 a5       	ldd	r24, Y+41	; 0x29
     23e:	2d 59       	subi	r18, 0x9D	; 157
     240:	00 48       	sbci	r16, 0x80	; 128
     242:	0a 3d       	cpi	r16, 0xDA	; 218
     244:	42 47       	sbci	r20, 0x72	; 114
     246:	66 1b       	sub	r22, r22
     248:	86 cc       	rjmp	.-1780   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     24a:	16 49       	sbci	r17, 0x96	; 150
     24c:	08 bb       	out	0x18, r16	; 24
     24e:	42 c7       	rjmp	.+3716   	; 0x10d4 <angleCalculator+0x122>
     250:	12 75       	andi	r17, 0x52	; 82
     252:	19 4a       	sbci	r17, 0xA9	; 169
     254:	0a 3d       	cpi	r16, 0xDA	; 218
     256:	42 d7       	rcall	.+3716   	; 0x10dc <angleCalculator+0x12a>
     258:	16 b6       	in	r1, 0x36	; 54
     25a:	44 91       	lpm	r20, Z
     25c:	04 4b       	sbci	r16, 0xB4	; 180
     25e:	0d 3d       	cpi	r16, 0xDD	; 221
     260:	42 47       	sbci	r20, 0x72	; 114
     262:	26 25       	eor	r18, r6
     264:	25 2d       	mov	r18, r5
     266:	89 2a       	or	r8, r25
     268:	59 00       	.word	0x0059	; ????
     26a:	4c 08       	sbc	r4, r12
     26c:	3d 42       	sbci	r19, 0x2D	; 45
     26e:	47 d8       	rcall	.-3954   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
     270:	e3 20       	and	r14, r3
     272:	4d 0b       	sbc	r20, r29
     274:	3d 42       	sbci	r19, 0x2D	; 45
     276:	47 a6       	std	Z+47, r4	; 0x2f
     278:	2d 4b       	sbci	r18, 0xBD	; 189
     27a:	a2 d9       	rcall	.-3260   	; 0xfffff5c0 <__eeprom_end+0xff7ef5c0>
     27c:	02 4e       	sbci	r16, 0xE2	; 226
     27e:	0c 3d       	cpi	r16, 0xDC	; 220
     280:	42 47       	sbci	r20, 0x72	; 114
     282:	a6 4d       	sbci	r26, 0xD6	; 214
     284:	4a 22       	and	r4, r26
     286:	6d 5a       	subi	r22, 0xAD	; 173
     288:	00 4f       	sbci	r16, 0xF0	; 240
     28a:	0a 3d       	cpi	r16, 0xDA	; 218
     28c:	42 cf       	rjmp	.-380    	; 0x112 <__trampolines_end+0x7c>
     28e:	92 79       	andi	r25, 0x92	; 146
     290:	4b 16       	cp	r4, r27
     292:	00 50       	subi	r16, 0x00	; 0
     294:	0c 3d       	cpi	r16, 0xDC	; 220
     296:	42 c7       	rjmp	.+3716   	; 0x111c <angleCalculator+0x16a>
     298:	90 64       	ori	r25, 0x40	; 64
     29a:	da a0       	ldd	r13, Y+34	; 0x22
     29c:	84 45       	sbci	r24, 0x54	; 84
     29e:	00 51       	subi	r16, 0x10	; 16
     2a0:	0a 45       	sbci	r16, 0x5A	; 90
     2a2:	3e cf       	rjmp	.-388    	; 0x120 <__trampolines_end+0x8a>
     2a4:	92 79       	andi	r25, 0x92	; 146
     2a6:	a9 ac       	ldd	r10, Y+57	; 0x39
     2a8:	01 52       	subi	r16, 0x21	; 33
     2aa:	0d 3d       	cpi	r16, 0xDD	; 221
     2ac:	42 c7       	rjmp	.+3716   	; 0x1132 <angleCalculator+0x180>
     2ae:	90 64       	ori	r25, 0x40	; 64
     2b0:	da a0       	ldd	r13, Y+34	; 0x22
     2b2:	94 2a       	or	r9, r20
     2b4:	59 00       	.word	0x0059	; ????
     2b6:	53 0b       	sbc	r21, r19
     2b8:	3d 42       	sbci	r19, 0x2D	; 45
     2ba:	cf 92       	push	r12
     2bc:	a9 ab       	std	Y+49, r26	; 0x31
     2be:	96 2c       	mov	r9, r6
     2c0:	00 54       	subi	r16, 0x40	; 64
     2c2:	09 3d       	cpi	r16, 0xD9	; 217
     2c4:	42 c7       	rjmp	.+3716   	; 0x114a <angleCalculator+0x198>
     2c6:	20 85       	ldd	r18, Z+8	; 0x08
     2c8:	3d 01       	movw	r6, r26
     2ca:	55 09       	sbc	r21, r5
     2cc:	3d 42       	sbci	r19, 0x2D	; 45
     2ce:	47 e6       	ldi	r20, 0x67	; 103
     2d0:	5b b2       	in	r5, 0x1b	; 27
     2d2:	00 56       	subi	r16, 0x60	; 96
     2d4:	0d 3d       	cpi	r16, 0xDD	; 221
     2d6:	42 47       	sbci	r20, 0x72	; 114
     2d8:	66 4b       	sbci	r22, 0xB6	; 182
     2da:	4a 49       	sbci	r20, 0x9A	; 154
     2dc:	94 64       	ori	r25, 0x44	; 68
     2de:	11 00       	.word	0x0011	; ????
     2e0:	57 0a       	sbc	r5, r23
     2e2:	3d 42       	sbci	r19, 0x2D	; 45
     2e4:	47 e6       	ldi	r20, 0x67	; 103
     2e6:	92 28       	or	r9, r2
     2e8:	c9 2d       	mov	r28, r9
     2ea:	58 0b       	sbc	r21, r24
     2ec:	3d 42       	sbci	r19, 0x2D	; 45
     2ee:	47 a6       	std	Z+47, r4	; 0x2f
     2f0:	25 b5       	in	r18, 0x25	; 37
     2f2:	4a 4d       	sbci	r20, 0xDA	; 218
     2f4:	0b 59       	subi	r16, 0x9B	; 155
     2f6:	0a 3d       	cpi	r16, 0xDA	; 218
     2f8:	42 47       	sbci	r20, 0x72	; 114
     2fa:	a6 25       	eor	r26, r6
     2fc:	b5 b0       	in	r11, 0x05	; 5
     2fe:	09 5a       	subi	r16, 0xA9	; 169
     300:	0a 3d       	cpi	r16, 0xDA	; 218
     302:	42 c7       	rjmp	.+3716   	; 0x1188 <__vector_3+0x26>
     304:	20 66       	ori	r18, 0x60	; 96
     306:	1d 07       	cpc	r17, r29
     308:	01 5b       	subi	r16, 0xB1	; 177
     30a:	08 bb       	out	0x18, r16	; 24
     30c:	42 c7       	rjmp	.+3716   	; 0x1192 <__vector_3+0x30>
     30e:	10 75       	andi	r17, 0x50	; 80
     310:	1a 5c       	subi	r17, 0xCA	; 202
     312:	08 3d       	cpi	r16, 0xD8	; 216
     314:	42 47       	sbci	r20, 0x72	; 114
     316:	98 76       	andi	r25, 0x68	; 104
     318:	0c 5d       	subi	r16, 0xDC	; 220
     31a:	08 bb       	out	0x18, r16	; 24
     31c:	42 c7       	rjmp	.+3716   	; 0x11a2 <__vector_3+0x40>
     31e:	d4 69       	ori	r29, 0x94	; 148
     320:	08 5e       	subi	r16, 0xE8	; 232
     322:	08 1d       	adc	r16, r8
     324:	52 57       	subi	r21, 0x72	; 114
     326:	96 d4       	rcall	.+2348   	; 0xc54 <__stack+0x355>
     328:	02 5f       	subi	r16, 0xF2	; 242
     32a:	06 0d       	add	r16, r6
     32c:	3e c7       	rjmp	.+3708   	; 0x11aa <__vector_3+0x48>
     32e:	20 60       	ori	r18, 0x00	; 0
     330:	06 12       	cpse	r0, r22
     332:	5b 47       	sbci	r21, 0x7B	; 123
     334:	14 61       	ori	r17, 0x14	; 20
     336:	0a 2d       	mov	r16, r10
     338:	42 cf       	rjmp	.-380    	; 0x1be <__trampolines_end+0x128>
     33a:	9a 0c       	add	r9, r10
     33c:	5a 32       	cpi	r21, 0x2A	; 42
     33e:	04 62       	ori	r16, 0x24	; 36
     340:	0b 3d       	cpi	r16, 0xDB	; 219
     342:	42 47       	sbci	r20, 0x72	; 114
     344:	58 31       	cpi	r21, 0x18	; 24
     346:	69 93       	st	Y+, r22
     348:	a2 00       	.word	0x00a2	; ????
     34a:	63 0a       	sbc	r6, r19
     34c:	2d 42       	sbci	r18, 0x2D	; 45
     34e:	cf 92       	push	r12
     350:	89 59       	subi	r24, 0x99	; 153
     352:	b2 00       	.word	0x00b2	; ????
     354:	64 0a       	sbc	r6, r20
     356:	3d 42       	sbci	r19, 0x2D	; 45
     358:	67 c5       	rjmp	.+2766   	; 0xe28 <__stack+0x529>
     35a:	b4 49       	sbci	r27, 0x94	; 148
     35c:	8a 12       	cpse	r8, r26
     35e:	65 0a       	sbc	r6, r21
     360:	2d 42       	sbci	r18, 0x2D	; 45
     362:	cf 92       	push	r12
     364:	0d 43       	sbci	r16, 0x3D	; 61
     366:	ba 00       	.word	0x00ba	; ????
     368:	66 0b       	sbc	r22, r22
     36a:	3d 42       	sbci	r19, 0x2D	; 45
     36c:	97 54       	subi	r25, 0x47	; 71
     36e:	c9 86       	std	Y+9, r12	; 0x09
     370:	28 ac       	ldd	r2, Y+56	; 0x38
     372:	01 67       	ori	r16, 0x71	; 113
     374:	0c 3d       	cpi	r16, 0xDC	; 220
     376:	3a cf       	rjmp	.-396    	; 0x1ec <__trampolines_end+0x156>
     378:	a0 69       	ori	r26, 0x90	; 144
     37a:	c9 10       	cpse	r12, r9
     37c:	6a c9       	rjmp	.-3372   	; 0xfffff652 <__eeprom_end+0xff7ef652>
     37e:	02 68       	ori	r16, 0x82	; 130
     380:	0a 3d       	cpi	r16, 0xDA	; 218
     382:	42 47       	sbci	r20, 0x72	; 114
     384:	58 31       	cpi	r21, 0x18	; 24
     386:	69 b6       	in	r6, 0x39	; 57
     388:	00 69       	ori	r16, 0x90	; 144
     38a:	08 bb       	out	0x18, r16	; 24
     38c:	42 4f       	sbci	r20, 0xF2	; 242
     38e:	28 b5       	in	r18, 0x28	; 40
     390:	0c 6a       	ori	r16, 0xAC	; 172
     392:	0b cc       	rjmp	.-2026   	; 0xfffffbaa <__eeprom_end+0xff7efbaa>
     394:	3a 5f       	subi	r19, 0xFA	; 250
     396:	ac d5       	rcall	.+2904   	; 0xef0 <__stack+0x5f1>
     398:	24 29       	or	r18, r4
     39a:	51 00       	.word	0x0051	; ????
     39c:	6b 0b       	sbc	r22, r27
     39e:	3d 42       	sbci	r19, 0x2D	; 45
     3a0:	47 58       	subi	r20, 0x87	; 135
     3a2:	93 92       	.word	0x9293	; ????
     3a4:	a9 92       	st	Y+, r10
     3a6:	05 6c       	ori	r16, 0xC5	; 197
     3a8:	08 bb       	out	0x18, r16	; 24
     3aa:	42 87       	std	Z+10, r20	; 0x0a
     3ac:	d4 cb       	rjmp	.-2136   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3ae:	00 6d       	ori	r16, 0xD0	; 208
     3b0:	0b 2d       	mov	r16, r11
     3b2:	42 87       	std	Z+10, r20	; 0x0a
     3b4:	d2 a2       	std	Z+34, r13	; 0x22
     3b6:	24 4a       	sbci	r18, 0xA4	; 164
     3b8:	a2 05       	cpc	r26, r2
     3ba:	6e 09       	sbc	r22, r14
     3bc:	2d 42       	sbci	r18, 0x2D	; 45
     3be:	47 62       	ori	r20, 0x27	; 39
     3c0:	d2 6c       	ori	r29, 0xC2	; 194
     3c2:	01 6f       	ori	r16, 0xF1	; 241
     3c4:	09 2d       	mov	r16, r9
     3c6:	42 cf       	rjmp	.-380    	; 0x24c <__trampolines_end+0x1b6>
     3c8:	92 d9       	rcall	.-3292   	; 0xfffff6ee <__eeprom_end+0xff7ef6ee>
     3ca:	92 05       	cpc	r25, r2
     3cc:	70 0c       	add	r7, r0
     3ce:	3d 3a       	cpi	r19, 0xAD	; 173
     3d0:	47 62       	ori	r20, 0x27	; 39
     3d2:	d2 26       	eor	r13, r18
     3d4:	45 09       	sbc	r20, r5
     3d6:	43 00       	.word	0x0043	; ????
     3d8:	71 0a       	sbc	r7, r17
     3da:	3d 3a       	cpi	r19, 0xAD	; 173
     3dc:	8f 69       	ori	r24, 0x9F	; 159
     3de:	93 14       	cp	r9, r3
     3e0:	25 2c       	mov	r2, r5
     3e2:	72 09       	sbc	r23, r2
     3e4:	2d 42       	sbci	r18, 0x2D	; 45
     3e6:	47 62       	ori	r20, 0x27	; 39
     3e8:	12 8b       	std	Z+18, r17	; 0x12
     3ea:	00 73       	andi	r16, 0x30	; 48
     3ec:	09 2d       	mov	r16, r9
     3ee:	42 cf       	rjmp	.-380    	; 0x274 <__trampolines_end+0x1de>
     3f0:	92 1e       	adc	r9, r18
     3f2:	14 00       	.word	0x0014	; ????
     3f4:	74 0c       	add	r7, r4
     3f6:	3d 42       	sbci	r19, 0x2D	; 45
     3f8:	4f 98       	cbi	0x09, 7	; 9
     3fa:	0d 51       	subi	r16, 0x1D	; 29
     3fc:	58 8a       	std	Y+16, r5	; 0x10
     3fe:	14 00       	.word	0x0014	; ????
     400:	75 09       	sbc	r23, r5
     402:	2d 42       	sbci	r18, 0x2D	; 45
     404:	47 e6       	ldi	r20, 0x67	; 103
     406:	a4 28       	or	r10, r4
     408:	01 76       	andi	r16, 0x61	; 97
     40a:	0b 2d       	mov	r16, r11
     40c:	42 47       	sbci	r20, 0x72	; 114
     40e:	a6 25       	eor	r26, r6
     410:	a5 24       	eor	r10, r5
     412:	8b 00       	.word	0x008b	; ????
     414:	77 0a       	sbc	r7, r23
     416:	2d 42       	sbci	r18, 0x2D	; 45
     418:	47 66       	ori	r20, 0x67	; 103
     41a:	49 94       	.word	0x9449	; ????
     41c:	2e 00       	.word	0x002e	; ????
     41e:	78 0a       	sbc	r7, r24
     420:	2d 42       	sbci	r18, 0x2D	; 45
     422:	47 96       	adiw	r24, 0x17	; 23
     424:	d4 2a       	or	r13, r20
     426:	b5 00       	.word	0x00b5	; ????
     428:	79 0c       	add	r7, r9
     42a:	3d 3a       	cpi	r19, 0xAD	; 173
     42c:	47 66       	ori	r20, 0x67	; 103
     42e:	52 94       	swap	r5
     430:	50 4b       	sbci	r21, 0xB0	; 176
     432:	16 00       	.word	0x0016	; ????
     434:	7a 09       	sbc	r23, r10
     436:	2d 42       	sbci	r18, 0x2D	; 45
     438:	c7 a0       	ldd	r12, Z+39	; 0x27
     43a:	b5 0d       	add	r27, r5
     43c:	02 7b       	andi	r16, 0xB2	; 178
     43e:	0a bc       	out	0x2a, r0	; 42
     440:	42 97       	sbiw	r24, 0x12	; 18
     442:	12 26       	eor	r1, r18
     444:	62 14       	cp	r6, r2
     446:	0a 7c       	andi	r16, 0xCA	; 202
     448:	06 39       	cpi	r16, 0x96	; 150
     44a:	43 c7       	rjmp	.+3718   	; 0x12d2 <__vector_3+0x170>
     44c:	21 7d       	andi	r18, 0xD1	; 209
     44e:	0b bc       	out	0x2b, r0	; 43
     450:	42 87       	std	Z+10, r20	; 0x0a
     452:	18 85       	ldd	r17, Y+8	; 0x08
     454:	4a 98       	cbi	0x09, 2	; 9
     456:	48 00       	.word	0x0048	; ????
     458:	7e 09       	sbc	r23, r14
     45a:	1d 52       	subi	r17, 0x2D	; 45
     45c:	4f a4       	ldd	r4, Y+47	; 0x2f
     45e:	24 52       	subi	r18, 0x24	; 36
     460:	02 a0       	ldd	r0, Z+34	; 0x22
     462:	05 00       	.word	0x0005	; ????
     464:	62 07       	cpc	r22, r18
     466:	a1 07       	cpc	r26, r17
     468:	39 43       	sbci	r19, 0x39	; 57
     46a:	47 32       	cpi	r20, 0x27	; 39
     46c:	08 a2       	std	Y+32, r0	; 0x20
     46e:	0e 3d       	cpi	r16, 0xDE	; 222
     470:	3e 57       	subi	r19, 0x7E	; 126
     472:	36 28       	or	r3, r6
     474:	51 12       	cpse	r5, r17
     476:	25 d9       	rcall	.-3510   	; 0xfffff6c2 <__eeprom_end+0xff7ef6c2>
     478:	10 45       	sbci	r17, 0x50	; 80
     47a:	00 a3       	std	Z+32, r16	; 0x20
     47c:	0c 3d       	cpi	r16, 0xDC	; 220
     47e:	42 97       	sbiw	r24, 0x12	; 18
     480:	54 c9       	rjmp	.-3416   	; 0xfffff72a <__eeprom_end+0xff7ef72a>
     482:	b6 30       	cpi	r27, 0x06	; 6
     484:	52 14       	cp	r5, r2
     486:	00 a4       	ldd	r0, Z+40	; 0x28
     488:	0b 2d       	mov	r16, r11
     48a:	42 47       	sbci	r20, 0x72	; 114
     48c:	96 4c       	sbci	r25, 0xC6	; 198
     48e:	49 b4       	in	r4, 0x29	; 41
     490:	64 01       	movw	r12, r8
     492:	a5 0d       	add	r26, r5
     494:	45 3e       	cpi	r20, 0xE5	; 229
     496:	47 a6       	std	Z+47, r4	; 0x2f
     498:	25 b5       	in	r18, 0x25	; 37
     49a:	68 90       	.word	0x9068	; ????
     49c:	c2 12       	cpse	r12, r18
     49e:	00 a6       	std	Z+40, r0	; 0x28
     4a0:	06 39       	cpi	r16, 0x96	; 150
     4a2:	43 c7       	rjmp	.+3718   	; 0x132a <__vector_3+0x1c8>
     4a4:	32 a7       	std	Z+42, r19	; 0x2a
     4a6:	0b 45       	sbci	r16, 0x5B	; 91
     4a8:	3e cf       	rjmp	.-388    	; 0x326 <__trampolines_end+0x290>
     4aa:	12 4e       	sbci	r17, 0xE2	; 226
     4ac:	9d c6       	rjmp	.+3386   	; 0x11e8 <__vector_3+0x86>
     4ae:	64 01       	movw	r12, r8
     4b0:	a8 06       	cpc	r10, r24
     4b2:	8b 5e       	subi	r24, 0xEB	; 235
     4b4:	47 12       	cpse	r4, r23
     4b6:	a9 0d       	add	r26, r9
     4b8:	3d 42       	sbci	r19, 0x2D	; 45
     4ba:	cf 92       	push	r12
     4bc:	29 c9       	rjmp	.-3502   	; 0xfffff710 <__eeprom_end+0xff7ef710>
     4be:	a4 24       	eor	r10, r4
     4c0:	5a b2       	in	r5, 0x1a	; 26
     4c2:	00 aa       	std	Z+48, r0	; 0x30
     4c4:	0a b4       	in	r0, 0x2a	; 42
     4c6:	46 cf       	rjmp	.-372    	; 0x354 <__trampolines_end+0x2be>
     4c8:	10 29       	or	r17, r0
     4ca:	4a 71       	andi	r20, 0x1A	; 26
     4cc:	08 ab       	std	Y+48, r16	; 0x30
     4ce:	0c 2e       	mov	r0, r28
     4d0:	42 57       	subi	r20, 0x72	; 114
     4d2:	25 4a       	sbci	r18, 0xA5	; 165
     4d4:	a2 2c       	mov	r10, r2
     4d6:	ca a2       	std	Y+34, r12	; 0x22
     4d8:	00 ac       	ldd	r0, Z+56	; 0x38
     4da:	07 94       	ror	r0
     4dc:	4a c7       	rjmp	.+3732   	; 0x1372 <__vector_3+0x210>
     4de:	90 05       	cpc	r25, r0
     4e0:	ad 06       	cpc	r10, r29
     4e2:	8c 4e       	sbci	r24, 0xEC	; 236
     4e4:	c7 10       	cpse	r12, r7
     4e6:	ae 0c       	add	r10, r14
     4e8:	3d 42       	sbci	r19, 0x2D	; 45
     4ea:	cf 92       	push	r12
     4ec:	0d c9       	rjmp	.-3558   	; 0xfffff708 <__eeprom_end+0xff7ef708>
     4ee:	34 69       	ori	r19, 0x94	; 148
     4f0:	c9 02       	muls	r28, r25
     4f2:	af 06       	cpc	r10, r31
     4f4:	0d 5e       	subi	r16, 0xED	; 237
     4f6:	c7 20       	and	r12, r7
     4f8:	b0 07       	cpc	r27, r16
     4fa:	9b 52       	subi	r25, 0x2B	; 43
     4fc:	4f 17       	cp	r20, r31
     4fe:	00 b1       	in	r16, 0x00	; 0
     500:	0b 35       	cpi	r16, 0x5B	; 91
     502:	42 57       	subi	r20, 0x72	; 114
     504:	18 0d       	add	r17, r8
     506:	52 18       	sub	r5, r2
     508:	0d 02       	muls	r16, r29
     50a:	b2 09       	sbc	r27, r2
     50c:	ac 4e       	sbci	r26, 0xEC	; 236
     50e:	8f 12       	cpse	r8, r31
     510:	35 0d       	add	r19, r5
     512:	01 b3       	in	r16, 0x11	; 17
     514:	09 ac       	ldd	r0, Y+57	; 0x39
     516:	4e c7       	rjmp	.+3740   	; 0x13b4 <__vector_3+0x252>
     518:	98 88       	ldd	r9, Y+16	; 0x10
     51a:	43 02       	muls	r20, r19
     51c:	b4 06       	cpc	r11, r20
     51e:	12 5b       	subi	r17, 0xB2	; 178
     520:	8f 02       	muls	r24, r31
     522:	b5 0a       	sbc	r11, r21
     524:	35 3e       	cpi	r19, 0xE5	; 229
     526:	47 66       	ori	r20, 0x67	; 103
     528:	9b 14       	cp	r9, r11
     52a:	25 04       	cpc	r2, r5
     52c:	b6 0f       	add	r27, r22
     52e:	3d 42       	sbci	r19, 0x2D	; 45
     530:	cf 30       	cpi	r28, 0x0F	; 15
     532:	24 43       	sbci	r18, 0x34	; 52
     534:	92 28       	or	r9, r2
     536:	51 12       	cpse	r5, r17
     538:	25 51       	subi	r18, 0x15	; 21
     53a:	12 b7       	in	r17, 0x32	; 50
     53c:	06 09       	sbc	r16, r6
     53e:	4f 47       	sbci	r20, 0x7F	; 127
     540:	00 b8       	out	0x00, r0	; 0
     542:	06 12       	cpse	r0, r22
     544:	3b 8f       	std	Y+27, r19	; 0x1b
     546:	02 b9       	out	0x02, r16	; 2
     548:	08 ab       	std	Y+48, r16	; 0x30
     54a:	4e 4f       	sbci	r20, 0xFE	; 254
     54c:	22 55       	subi	r18, 0x52	; 82
     54e:	06 ba       	out	0x16, r0	; 22
     550:	0a b4       	in	r0, 0x2a	; 42
     552:	46 8f       	std	Z+30, r20	; 0x1e
     554:	12 49       	sbci	r17, 0x92	; 146
     556:	89 3a       	cpi	r24, 0xA9	; 169
     558:	04 bb       	out	0x14, r16	; 20
     55a:	0d 2e       	mov	r0, r29
     55c:	42 47       	sbci	r20, 0x72	; 114
     55e:	94 45       	sbci	r25, 0x54	; 84
     560:	59 94       	.word	0x9459	; ????
     562:	44 49       	sbci	r20, 0x94	; 148
     564:	14 01       	movw	r2, r8
     566:	bc 0d       	add	r27, r12
     568:	4e 3e       	cpi	r20, 0xEE	; 238
     56a:	4f a8       	ldd	r4, Y+55	; 0x37
     56c:	16 a7       	std	Z+46, r17	; 0x2e
     56e:	50 4b       	sbci	r21, 0xB0	; 176
     570:	a2 21       	and	r26, r2
     572:	0d bd       	out	0x2d, r16	; 45
     574:	0c 4e       	sbci	r16, 0xEC	; 236
     576:	3e 4f       	sbci	r19, 0xFE	; 254
     578:	a8 16       	cp	r10, r24
     57a:	97 30       	cpi	r25, 0x07	; 7
     57c:	49 c3       	rjmp	.+1682   	; 0xc10 <__stack+0x311>
     57e:	70 be       	out	0x30, r7	; 48
     580:	0e 4d       	sbci	r16, 0xDE	; 222
     582:	3e 87       	std	Y+14, r19	; 0x0e
     584:	9a a5       	ldd	r25, Y+42	; 0x2a
     586:	91 94       	neg	r9
     588:	49 49       	sbci	r20, 0x99	; 153
     58a:	32 84       	ldd	r3, Z+10	; 0x0a
     58c:	01 bf       	out	0x31, r16	; 49
     58e:	0a 3d       	cpi	r16, 0xDA	; 218
     590:	42 57       	subi	r20, 0x72	; 114
     592:	0e 85       	ldd	r16, Y+14	; 0x0e
     594:	59 cb       	rjmp	.-2382   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     596:	02 c0       	rjmp	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     598:	0c 45       	sbci	r16, 0x5C	; 92
     59a:	42 4f       	sbci	r20, 0xF2	; 242
     59c:	9a 2d       	mov	r25, r10
     59e:	99 36       	cpi	r25, 0x69	; 105
     5a0:	0c 99       	sbic	0x01, 4	; 1
     5a2:	16 c1       	rjmp	.+556    	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     5a4:	0c 45       	sbci	r16, 0x5C	; 92
     5a6:	42 5f       	subi	r20, 0xF2	; 242
     5a8:	6d c9       	rjmp	.-3366   	; 0xfffff884 <__eeprom_end+0xff7ef884>
     5aa:	b4 61       	ori	r27, 0x14	; 20
     5ac:	c8 b4       	in	r12, 0x28	; 40
     5ae:	00 c2       	rjmp	.+1024   	; 0x9b0 <__stack+0xb1>
     5b0:	0d 45       	sbci	r16, 0x5D	; 93
     5b2:	42 57       	subi	r20, 0x72	; 114
     5b4:	96 44       	sbci	r25, 0x46	; 70
     5b6:	4b a6       	std	Y+43, r4	; 0x2b
     5b8:	0d 43       	sbci	r16, 0x3D	; 61
     5ba:	a6 05       	cpc	r26, r6
     5bc:	c3 0d       	add	r28, r3
     5be:	45 42       	sbci	r20, 0x25	; 37
     5c0:	4f a4       	ldd	r4, Y+47	; 0x2f
     5c2:	48 4b       	sbci	r20, 0xB8	; 184
     5c4:	a6 0d       	add	r26, r6
     5c6:	43 a6       	std	Z+43, r4	; 0x2b
     5c8:	05 c4       	rjmp	.+2058   	; 0xdd4 <__stack+0x4d5>
     5ca:	0c 45       	sbci	r16, 0x5C	; 92
     5cc:	42 4f       	sbci	r20, 0xF2	; 242
     5ce:	1d 58       	subi	r17, 0x8D	; 141
     5d0:	32 6d       	ori	r19, 0xD2	; 210
     5d2:	18 32       	cpi	r17, 0x28	; 40
     5d4:	2d c5       	rjmp	.+2650   	; 0x1030 <angleCalculator+0x7e>
     5d6:	0d 45       	sbci	r16, 0x5D	; 93
     5d8:	42 57       	subi	r20, 0x72	; 114
     5da:	96 44       	sbci	r25, 0x46	; 70
     5dc:	4b a6       	std	Y+43, r4	; 0x2b
     5de:	0d 43       	sbci	r16, 0x3D	; 61
     5e0:	a6 05       	cpc	r26, r6
     5e2:	c6 0c       	add	r12, r6
     5e4:	3e 42       	sbci	r19, 0x2E	; 46
     5e6:	d7 90       	elpm	r13, Z+
     5e8:	94 9a       	sbi	0x12, 4	; 18
     5ea:	86 21       	and	r24, r6
     5ec:	6a 1a       	sub	r6, r26
     5ee:	c7 0b       	sbc	r28, r23
     5f0:	4d 3a       	cpi	r20, 0xAD	; 173
     5f2:	cf 92       	push	r12
     5f4:	89 6d       	ori	r24, 0xD9	; 217
     5f6:	c9 56       	subi	r28, 0x69	; 105
     5f8:	03 c8       	rjmp	.-4090   	; 0xfffff600 <__eeprom_end+0xff7ef600>
     5fa:	0c 45       	sbci	r16, 0x5C	; 92
     5fc:	42 4f       	sbci	r20, 0xF2	; 242
     5fe:	36 8c       	ldd	r3, Z+30	; 0x1e
     600:	e1 90       	ld	r14, Z+
     602:	84 e1       	ldi	r24, 0x14	; 20
     604:	20 c9       	rjmp	.-3520   	; 0xfffff846 <__eeprom_end+0xff7ef846>
     606:	0c 45       	sbci	r16, 0x5C	; 92
     608:	42 5f       	subi	r20, 0xF2	; 242
     60a:	32 8c       	ldd	r3, Z+26	; 0x1a
     60c:	e1 90       	ld	r14, Z+
     60e:	84 e1       	ldi	r24, 0x14	; 20
     610:	20 ca       	rjmp	.-3008   	; 0xfffffa52 <__eeprom_end+0xff7efa52>
     612:	0c 45       	sbci	r16, 0x5C	; 92
     614:	42 57       	subi	r20, 0x72	; 114
     616:	34 8c       	ldd	r3, Z+28	; 0x1c
     618:	e1 90       	ld	r14, Z+
     61a:	84 e1       	ldi	r24, 0x14	; 20
     61c:	20 cb       	rjmp	.-2496   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
     61e:	0c 45       	sbci	r16, 0x5C	; 92
     620:	42 4f       	sbci	r20, 0xF2	; 242
     622:	65 18       	sub	r6, r5
     624:	c3 21       	and	r28, r3
     626:	09 c3       	rjmp	.+1554   	; 0xc3a <__stack+0x33b>
     628:	41 cc       	rjmp	.-1918   	; 0xfffffeac <__eeprom_end+0xff7efeac>
     62a:	0a c3       	rjmp	.+1556   	; 0xc40 <__stack+0x341>
     62c:	42 47       	sbci	r20, 0x72	; 114
     62e:	96 2c       	mov	r9, r6
     630:	51 cb       	rjmp	.-2398   	; 0xfffffcd4 <__eeprom_end+0xff7efcd4>
     632:	00 cd       	rjmp	.-1536   	; 0x34 <__FUSE_REGION_LENGTH__+0x31>
     634:	0a c3       	rjmp	.+1556   	; 0xc4a <__stack+0x34b>
     636:	42 57       	subi	r20, 0x72	; 114
     638:	92 2c       	mov	r9, r2
     63a:	51 cb       	rjmp	.-2398   	; 0xfffffcde <__eeprom_end+0xff7efcde>
     63c:	00 ce       	rjmp	.-1024   	; 0x23e <__trampolines_end+0x1a8>
     63e:	0a c3       	rjmp	.+1556   	; 0xc54 <__stack+0x355>
     640:	42 4f       	sbci	r20, 0xF2	; 242
     642:	65 48       	sbci	r22, 0x85	; 133
     644:	a2 96       	adiw	r28, 0x22	; 34
     646:	01 cf       	rjmp	.-510    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     648:	0a c3       	rjmp	.+1556   	; 0xc5e <__stack+0x35f>
     64a:	42 47       	sbci	r20, 0x72	; 114
     64c:	92 2d       	mov	r25, r2
     64e:	51 cb       	rjmp	.-2398   	; 0xfffffcf2 <__eeprom_end+0xff7efcf2>
     650:	00 d0       	rcall	.+0      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     652:	0e 3d       	cpi	r16, 0xDE	; 222
     654:	42 c7       	rjmp	.+3716   	; 0x14da <u8g2_setup+0x24>
     656:	10 55       	subi	r17, 0x50	; 80
     658:	a2 21       	and	r26, r2
     65a:	29 25       	eor	r18, r9
     65c:	d1 a0       	ldd	r13, Z+33	; 0x21
     65e:	00 d1       	rcall	.+512    	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     660:	0c 45       	sbci	r16, 0x5C	; 92
     662:	42 57       	subi	r20, 0x72	; 114
     664:	d2 6d       	ori	r29, 0xD2	; 210
     666:	52 12       	cpse	r5, r18
     668:	69 d3       	rcall	.+1746   	; 0xd3c <__stack+0x43d>
     66a:	02 d2       	rcall	.+1028   	; 0xa70 <__stack+0x171>
     66c:	0b 45       	sbci	r16, 0x5B	; 91
     66e:	42 4f       	sbci	r20, 0xF2	; 242
     670:	9a 2d       	mov	r25, r10
     672:	99 5b       	subi	r25, 0xB9	; 185
     674:	b2 00       	.word	0x00b2	; ????
     676:	d3 0a       	sbc	r13, r19
     678:	45 42       	sbci	r20, 0x25	; 37
     67a:	5f 6d       	ori	r21, 0xDF	; 223
     67c:	c9 dc       	rcall	.-1646   	; 0x10 <__FUSE_REGION_LENGTH__+0xd>
     67e:	92 05       	cpc	r25, r2
     680:	d4 0c       	add	r13, r4
     682:	45 42       	sbci	r20, 0x25	; 37
     684:	57 96       	adiw	r26, 0x17	; 23
     686:	44 4b       	sbci	r20, 0xB4	; 180
     688:	e6 96       	adiw	r28, 0x36	; 54
     68a:	2c 00       	.word	0x002c	; ????
     68c:	d5 0b       	sbc	r29, r21
     68e:	45 42       	sbci	r20, 0x25	; 37
     690:	57 d2       	rcall	.+1198   	; 0xb40 <__stack+0x241>
     692:	b4 64       	ori	r27, 0x44	; 68
     694:	6e c9       	rjmp	.-3364   	; 0xfffff972 <__eeprom_end+0xff7ef972>
     696:	02 d6       	rcall	.+3076   	; 0x129c <__vector_3+0x13a>
     698:	0b 45       	sbci	r16, 0x5B	; 91
     69a:	42 4f       	sbci	r20, 0xF2	; 242
     69c:	1d 58       	subi	r17, 0x8D	; 141
     69e:	32 b7       	in	r19, 0x32	; 50
     6a0:	64 01       	movw	r12, r8
     6a2:	d7 0a       	sbc	r13, r23
     6a4:	2d 42       	sbci	r18, 0x2D	; 45
     6a6:	47 96       	adiw	r24, 0x17	; 23
     6a8:	d4 2a       	or	r13, r20
     6aa:	b5 00       	.word	0x00b5	; ????
     6ac:	d8 0c       	add	r13, r8
     6ae:	3d 42       	sbci	r19, 0x2D	; 45
     6b0:	cf 12       	cpse	r12, r31
     6b2:	5d 92       	st	X+, r5
     6b4:	69 4a       	sbci	r22, 0xA9	; 169
     6b6:	16 00       	.word	0x0016	; ????
     6b8:	d9 0a       	sbc	r13, r25
     6ba:	45 42       	sbci	r20, 0x25	; 37
     6bc:	4f 1a       	sub	r4, r31
     6be:	65 de       	rcall	.-822    	; 0x38a <__trampolines_end+0x2f4>
     6c0:	92 05       	cpc	r25, r2
     6c2:	da 0a       	sbc	r13, r26
     6c4:	45 42       	sbci	r20, 0x25	; 37
     6c6:	5f 29       	or	r21, r15
     6c8:	f3 96       	adiw	r30, 0x33	; 51
     6ca:	2c 00       	.word	0x002c	; ????
     6cc:	db 0b       	sbc	r29, r27
     6ce:	45 42       	sbci	r20, 0x25	; 37
     6d0:	57 96       	adiw	r26, 0x17	; 23
     6d2:	c4 99       	sbic	0x18, 4	; 24
     6d4:	5b b2       	in	r5, 0x1b	; 27
     6d6:	00 dc       	rcall	.-2048   	; 0xfffffed8 <__eeprom_end+0xff7efed8>
     6d8:	0a 45       	sbci	r16, 0x5A	; 90
     6da:	42 4f       	sbci	r20, 0xF2	; 242
     6dc:	39 f3       	breq	.-50     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     6de:	96 2c       	mov	r9, r6
     6e0:	00 dd       	rcall	.-1536   	; 0xe2 <__trampolines_end+0x4c>
     6e2:	0b 45       	sbci	r16, 0x5B	; 91
     6e4:	42 5f       	subi	r20, 0xF2	; 242
     6e6:	29 d3       	rcall	.+1618   	; 0xd3a <__stack+0x43b>
     6e8:	92 5a       	subi	r25, 0xA2	; 162
     6ea:	58 02       	muls	r21, r24
     6ec:	de 0c       	add	r13, r14
     6ee:	3d 42       	sbci	r19, 0x2D	; 45
     6f0:	47 38       	cpi	r20, 0x87	; 135
     6f2:	24 d9       	rcall	.-3512   	; 0xfffff93c <__eeprom_end+0xff7ef93c>
     6f4:	a0 84       	ldd	r10, Z+8	; 0x08
     6f6:	45 00       	.word	0x0045	; ????
     6f8:	df 0d       	add	r29, r15
     6fa:	3d 42       	sbci	r19, 0x2D	; 45
     6fc:	cf 92       	push	r12
     6fe:	49 49       	sbci	r20, 0x99	; 153
     700:	a9 92       	st	Y+, r10
     702:	29 0a       	sbc	r2, r25
     704:	00 e0       	ldi	r16, 0x00	; 0
     706:	0c 45       	sbci	r16, 0x5C	; 92
     708:	42 4f       	sbci	r20, 0xF2	; 242
     70a:	9a 23       	and	r25, r26
     70c:	6b 32       	cpi	r22, 0x2B	; 43
     70e:	68 c9       	rjmp	.-3376   	; 0xfffff9e0 <__eeprom_end+0xff7ef9e0>
     710:	10 e1       	ldi	r17, 0x10	; 16
     712:	0c 45       	sbci	r16, 0x5C	; 92
     714:	42 5f       	subi	r20, 0xF2	; 242
     716:	1d 59       	subi	r17, 0x9D	; 157
     718:	93 41       	sbci	r25, 0x13	; 19
     71a:	4b 86       	std	Y+11, r4	; 0x0b
     71c:	00 e2       	ldi	r16, 0x20	; 32
     71e:	0d 45       	sbci	r16, 0x5D	; 93
     720:	42 57       	subi	r20, 0x72	; 114
     722:	96 e4       	ldi	r25, 0x46	; 70
     724:	c0 9a       	sbi	0x18, 0	; 24
     726:	0c 5a       	subi	r16, 0xAC	; 172
     728:	32 04       	cpc	r3, r2
     72a:	e3 0d       	add	r30, r3
     72c:	45 42       	sbci	r20, 0x25	; 37
     72e:	57 d2       	rcall	.+1198   	; 0xbde <__stack+0x2df>
     730:	0e ac       	ldd	r0, Y+62	; 0x3e
     732:	c9 a0       	ldd	r12, Y+33	; 0x21
     734:	25 43       	sbci	r18, 0x35	; 53
     736:	00 e4       	ldi	r16, 0x40	; 64
     738:	0c 3d       	cpi	r16, 0xDC	; 220
     73a:	42 4f       	sbci	r20, 0xF2	; 242
     73c:	1d 58       	subi	r17, 0x8D	; 141
     73e:	93 41       	sbci	r25, 0x13	; 19
     740:	4b 86       	std	Y+11, r4	; 0x0b
     742:	00 e5       	ldi	r16, 0x50	; 80
     744:	0d 45       	sbci	r16, 0x5D	; 93
     746:	42 57       	subi	r20, 0x72	; 114
     748:	96 64       	ori	r25, 0x46	; 70
     74a:	d9 9a       	sbi	0x1b, 1	; 27
     74c:	0c 5a       	subi	r16, 0xAC	; 172
     74e:	32 04       	cpc	r3, r2
     750:	e6 0c       	add	r14, r6
     752:	2e 42       	sbci	r18, 0x2E	; 46
     754:	cf 10       	cpse	r12, r15
     756:	26 c9       	rjmp	.-3508   	; 0xfffff9a4 <__eeprom_end+0xff7ef9a4>
     758:	30 65       	ori	r19, 0x50	; 80
     75a:	83 00       	.word	0x0083	; ????
     75c:	e7 0b       	sbc	r30, r23
     75e:	3d 3a       	cpi	r19, 0xAD	; 173
     760:	cf 92       	push	r12
     762:	89 59       	subi	r24, 0x99	; 153
     764:	b2 d5       	rcall	.+2916   	; 0x12ca <__vector_3+0x168>
     766:	00 e8       	ldi	r16, 0x80	; 128
     768:	0c 45       	sbci	r16, 0x5C	; 92
     76a:	42 4f       	sbci	r20, 0xF2	; 242
     76c:	9a 23       	and	r25, r26
     76e:	4b 36       	cpi	r20, 0x6B	; 107
     770:	0c e9       	ldi	r16, 0x9C	; 156
     772:	02 e9       	ldi	r16, 0x92	; 146
     774:	0c 45       	sbci	r16, 0x5C	; 92
     776:	42 5f       	subi	r20, 0xF2	; 242
     778:	1d 59       	subi	r17, 0x9D	; 157
     77a:	b2 61       	ori	r27, 0x12	; 18
     77c:	48 17       	cp	r20, r24
     77e:	00 ea       	ldi	r16, 0xA0	; 160
     780:	0d 45       	sbci	r16, 0x5D	; 93
     782:	42 57       	subi	r20, 0x72	; 114
     784:	96 e4       	ldi	r25, 0x46	; 70
     786:	c0 92 0d 43 	sts	0x430D, r12	; 0x80430d <__bss_end+0x3b4b>
     78a:	ba 00       	.word	0x00ba	; ????
     78c:	eb 0c       	add	r14, r11
     78e:	3d 42       	sbci	r19, 0x2D	; 45
     790:	4f 1d       	adc	r20, r15
     792:	58 b2       	in	r5, 0x18	; 24
     794:	61 48       	sbci	r22, 0x81	; 129
     796:	17 00       	.word	0x0017	; ????
     798:	ec 09       	sbc	r30, r12
     79a:	c3 42       	sbci	r28, 0x23	; 35
     79c:	47 16       	cp	r4, r23
     79e:	4a 2d       	mov	r20, r10
     7a0:	03 ed       	ldi	r16, 0xD3	; 211
     7a2:	08 c3       	rjmp	.+1552   	; 0xdb4 <__stack+0x4b5>
     7a4:	42 4f       	sbci	r20, 0xF2	; 242
     7a6:	55 6a       	ori	r21, 0xA5	; 165
     7a8:	19 ee       	ldi	r17, 0xE9	; 233
     7aa:	08 c3       	rjmp	.+1552   	; 0xdbc <__stack+0x4bd>
     7ac:	42 4f       	sbci	r20, 0xF2	; 242
     7ae:	9b d4       	rcall	.+2358   	; 0x10e6 <angleCalculator+0x134>
     7b0:	32 ef       	ldi	r19, 0xF2	; 242
     7b2:	09 bb       	out	0x19, r16	; 25
     7b4:	42 47       	sbci	r20, 0x72	; 114
     7b6:	92 49       	sbci	r25, 0x92	; 146
     7b8:	2d 03       	fmul	r18, r21
     7ba:	f0 0b       	sbc	r31, r16
     7bc:	3d 42       	sbci	r19, 0x2D	; 45
     7be:	87 2a       	or	r8, r23
     7c0:	2d 99       	sbic	0x05, 5	; 5
     7c2:	2d 59       	subi	r18, 0x9D	; 157
     7c4:	00 f1       	brcs	.+64     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7c6:	0b 45       	sbci	r16, 0x5B	; 91
     7c8:	42 57       	subi	r20, 0x72	; 114
     7ca:	d2 9c       	mul	r13, r2
     7cc:	98 34       	cpi	r25, 0x48	; 72
     7ce:	5b 00       	.word	0x005b	; ????
     7d0:	f2 0c       	add	r15, r2
     7d2:	45 42       	sbci	r20, 0x25	; 37
     7d4:	4f 9a       	sbi	0x09, 7	; 9
     7d6:	23 4b       	sbci	r18, 0xB3	; 179
     7d8:	66 4b       	sbci	r22, 0xB6	; 182
     7da:	16 00       	.word	0x0016	; ????
     7dc:	f3 0b       	sbc	r31, r19
     7de:	45 42       	sbci	r20, 0x25	; 37
     7e0:	5f 1d       	adc	r21, r15
     7e2:	59 32       	cpi	r21, 0x29	; 41
     7e4:	5b b2       	in	r5, 0x1b	; 27
     7e6:	00 f4       	brcc	.+0      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7e8:	0c 45       	sbci	r16, 0x5C	; 92
     7ea:	42 57       	subi	r20, 0x72	; 114
     7ec:	96 e4       	ldi	r25, 0x46	; 70
     7ee:	c0 92 d9 92 	sts	0x92D9, r12	; 0x8092d9 <__bss_end+0x8b17>
     7f2:	05 f5       	brhc	.+64     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     7f4:	0c 45       	sbci	r16, 0x5C	; 92
     7f6:	42 57       	subi	r20, 0x72	; 114
     7f8:	d2 0e       	add	r13, r18
     7fa:	2c 99       	sbic	0x05, 4	; 5
     7fc:	2d 59       	subi	r18, 0x9D	; 157
     7fe:	00 f6       	brcc	.-128    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     800:	0b 3d       	cpi	r16, 0xDB	; 219
     802:	42 4f       	sbci	r20, 0xF2	; 242
     804:	1d 58       	subi	r17, 0x8D	; 141
     806:	32 5b       	subi	r19, 0xB2	; 178
     808:	b2 00       	.word	0x00b2	; ????
     80a:	f7 0a       	sbc	r15, r23
     80c:	2d 46       	sbci	r18, 0x6D	; 109
     80e:	57 0e       	add	r5, r23
     810:	0c 3a       	cpi	r16, 0xAC	; 172
     812:	10 01       	movw	r2, r0
     814:	f8 0b       	sbc	r31, r24
     816:	2d 42       	sbci	r18, 0x2D	; 45
     818:	cf 20       	and	r12, r15
     81a:	2d c9       	rjmp	.-3494   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
     81c:	34 28       	or	r3, r4
     81e:	00 f9       	bld	r16, 0
     820:	0b 45       	sbci	r16, 0x5B	; 91
     822:	42 4f       	sbci	r20, 0xF2	; 242
     824:	9a 03       	fmulsu	r17, r18
     826:	99 93       	st	Y+, r25
     828:	a2 04       	cpc	r10, r2
     82a:	fa 0a       	sbc	r15, r26
     82c:	45 42       	sbci	r20, 0x25	; 37
     82e:	5f 1d       	adc	r21, r15
     830:	c8 9c       	mul	r12, r8
     832:	14 25       	eor	r17, r4
     834:	fb 0b       	sbc	r31, r27
     836:	45 42       	sbci	r20, 0x25	; 37
     838:	57 96       	adiw	r26, 0x17	; 23
     83a:	c4 99       	sbic	0x18, 4	; 24
     83c:	93 a2       	std	Z+35, r9	; 0x23
     83e:	04 fc       	sbrc	r0, 4
     840:	0a 3d       	cpi	r16, 0xDA	; 218
     842:	42 4f       	sbci	r20, 0xF2	; 242
     844:	39 73       	andi	r19, 0x39	; 57
     846:	52 94       	swap	r5
     848:	00 fd       	sbrc	r16, 0
     84a:	0d 4d       	sbci	r16, 0xDD	; 221
     84c:	3a 5f       	subi	r19, 0xFA	; 250
     84e:	29 33       	cpi	r18, 0x39	; 57
     850:	29 4a       	sbci	r18, 0xA9	; 169
     852:	a8 25       	eor	r26, r8
     854:	0b 00       	.word	0x000b	; ????
     856:	fe 0c       	add	r15, r14
     858:	45 3a       	cpi	r20, 0xA5	; 165
     85a:	47 38       	cpi	r20, 0x87	; 135
     85c:	24 99       	sbic	0x04, 4	; 4
     85e:	6d 50       	subi	r22, 0x0D	; 13
     860:	c2 10       	cpse	r12, r2
     862:	ff 0d       	add	r31, r15
     864:	4d 3a       	cpi	r20, 0xAD	; 173
     866:	4f 39       	cpi	r20, 0x9F	; 159
     868:	33 29       	or	r19, r3
     86a:	4a a8       	ldd	r4, Y+50	; 0x32
     86c:	25 0b       	sbc	r18, r21
     86e:	00 00       	nop
     870:	00 00       	nop
     872:	04 ff       	sbrs	r16, 4
     874:	ff 00       	.word	0x00ff	; ????
	...

00000877 <u8g2_font_5x7_tf>:
     877:	bf 00 02 02 03 03 03 04 04 05 07 00 ff 06 ff 06     ................
     887:	00 01 12 02 2f 06 70 20 05 00 bd 01 21 06 b1 b1     ..../.p ....!...
     897:	19 29 22 07 5b b7 49 56 00 23 0a 2d b1 ab 86 aa     .)".[.IV.#.-....
     8a7:	86 aa 00 24 0a 2d b1 5b 35 d8 20 a5 05 25 09 34     ...$.-.[5. ..%.4
     8b7:	b1 c9 20 f6 06 01 26 09 2c b1 8b 29 56 31 05 27     .. ...&.,..)V1.'
     8c7:	05 99 b7 19 28 07 72 b1 53 cd 00 29 08 72 b1 89     ....(.r.S..).r..
     8d7:	a9 52 00 2a 07 6b b1 49 d5 6a 2b 0a 2d b1 cd 28     .R.*.k.I.j+.-..(
     8e7:	0e 99 51 04 2c 07 5b af 53 25 00 2d 06 0c b5 19     ..Q.,.[.S%.-....
     8f7:	01 2e 06 52 b1 19 01 2f 07 24 b3 07 b1 0d 30 08     ...R.../.$....0.
     907:	73 b1 ab 5c 15 00 31 07 73 b1 4b b2 35 32 0a 34     s..\..1.s.K.52.4
     917:	b1 53 31 83 58 8e 00 33 0b 34 b1 19 19 24 8d 64     .S1.X..3.4...$.d
     927:	52 00 34 0a 34 b1 8d aa 1a 31 83 04 35 0a 34 b1     R.4.4....1..5.4.
     937:	19 1a 6c 24 93 02 36 0a 34 b1 53 19 ac 28 93 02     ..l$..6.4.S..(..
     947:	37 0b 34 b1 19 19 c4 0c 62 06 11 38 0a 34 b1 53     7.4.....b..8.4.S
     957:	31 a9 28 93 02 39 0a 34 b1 53 51 a6 0d 92 02 3a     1.(..9.4.SQ....:
     967:	07 6a b1 19 71 04 3b 08 33 af b3 91 2a 01 3c 08     .j..q.;.3...*.<.
     977:	6b b1 4d 35 c8 20 3d 08 1c b3 19 19 8d 00 3e 09     k.M5. =.......>.
     987:	6b b1 c9 20 83 54 02 3f 09 73 b1 6b a6 0c 13 00     k.. .T.?.s.k....
     997:	40 09 34 b1 53 51 dd 48 01 41 09 34 b1 53 51 8e     @.4.SQ.H.A.4.SQ.
     9a7:	29 03 42 0a 34 b1 59 71 a4 28 47 02 43 0b 34 b1     ).B.4.Yq.(G.C.4.
     9b7:	53 51 83 0c 62 52 00 44 09 34 b1 59 d1 39 12 00     SQ..bR.D.4.Y.9..
     9c7:	45 0b 34 b1 19 1a ac 0c 32 18 01 46 0b 34 b1 19     E.4.....2..F.4..
     9d7:	1a ac 0c 32 c8 00 47 0a 34 b1 53 51 83 34 d3 00     ...2..G.4.SQ.4..
     9e7:	48 08 34 b1 89 72 4c 33 49 07 73 b1 59 b1 35 4a     H.4..rL3I.s.Y.5J
     9f7:	0b 34 b1 07 19 64 90 81 4c 0a 4b 0a 34 b1 89 2a     .4...d..L.K.4..*
     a07:	49 99 ca 00 4c 0c 34 b1 c9 20 83 0c 32 c8 60 04     I...L.4.. ..2.`.
     a17:	4d 09 34 b1 89 e3 88 66 00 4e 08 34 b1 89 6b a9     M.4....f.N.4..k.
     a27:	33 4f 09 34 b1 53 d1 99 14 00 50 0a 34 b1 59 51     3O.4.S....P.4.YQ
     a37:	8e 94 41 06 51 0a 3c af 53 d1 5c 49 a3 00 52 09     ..A.Q.<.S.\I..R.
     a47:	34 b1 59 51 8e d4 0c 53 0a 34 b1 53 31 65 54 26     4.YQ...S.4.S1eT&
     a57:	05 54 07 73 b1 59 b1 0b 55 08 34 b1 89 9e 49 01     .T.s.Y..U.4...I.
     a67:	56 09 34 b1 89 ce 24 15 00 57 09 34 b1 89 e6 38     V.4...$..W.4...8
     a77:	62 00 58 0a 34 b1 89 32 49 15 65 00 59 08 73 b1     b.X.4..2I.e.Y.s.
     a87:	49 56 59 01 5a 0a 34 b1 19 19 c4 36 18 01 5b 07     IVY.Z.4....6..[.
     a97:	73 b1 19 b1 39 5c 09 24 b3 c9 28 a3 8c 02 5d 07     s...9\.$..(...].
     aa7:	73 b1 99 cd 11 5e 05 53 b9 6b 5f 06 0c b1 19 01     s....^.S.k_.....
     ab7:	60 06 52 b9 89 01 61 08 24 b1 1b 51 a9 02 62 0b     `.R...a.$..Q..b.
     ac7:	34 b1 c9 20 83 15 e5 48 00 63 07 23 b1 9b 19 08     4.. ...H.c.#....
     ad7:	64 0a 34 b1 07 19 a4 11 65 1a 65 09 24 b1 53 69     d.4.....e.e.$.Si
     ae7:	64 a0 00 66 09 34 b1 ad ca 99 41 04 67 09 2c af     d..f.4....A.g.,.
     af7:	1b 31 a9 8c 06 68 0a 34 b1 c9 20 83 15 cd 00 69     .1...h.4.. ....i
     b07:	08 73 b1 cb 48 56 03 6a 09 7b af cd b0 54 15 00     .s..HV.j.{...T..
     b17:	6b 0b 34 b1 c9 20 83 94 64 2a 03 6c 07 73 b1 91     k.4.. ..d*.l.s..
     b27:	5d 03 6d 08 24 b1 49 69 48 19 6e 07 24 b1 59 d1     ].m.$.IiH.n.$.Y.
     b37:	0c 6f 08 24 b1 53 51 26 05 70 09 2c af 59 51 8e     .o.$.SQ&.p.,.YQ.
     b47:	94 01 71 09 2c af 1b 51 a6 0d 02 72 08 24 b1 59     ..q.,..Q...r.$.Y
     b57:	51 83 0c 73 08 24 b1 1b 1a 0d 05 74 0a 34 b1 cb     Q..s.$.....t.4..
     b67:	20 ce 0c 32 12 75 07 24 b1 89 66 1a 76 07 63 b1      ..2.u.$..f.v.c.
     b77:	49 56 05 77 07 24 b1 89 72 1c 78 08 24 b1 89 49     IV.w.$..r.x.$..I
     b87:	aa 18 79 09 2c af 89 32 95 25 00 7a 08 24 b1 19     ..y.,..2.%.z.$..
     b97:	b1 1c 01 7b 08 73 b1 4d 49 d6 20 7c 05 b1 b1 39     ...{.s.MI. |...9
     ba7:	7d 0a 73 b1 c9 20 aa 98 22 00 7e 07 14 b9 4b 2a     }.s.. ..".~...K*
     bb7:	01 a0 05 00 bd 01 a1 06 b1 b1 49 23 a2 09 34 af     ..........I#..4.
     bc7:	8d 23 35 67 02 a3 08 2c b1 55 71 56 02 a4 0b 2d     .#5g...,.UqV...-
     bd7:	b1 c9 20 cd 14 57 06 01 a5 09 73 b1 49 aa 5a 31     .. ..W....s.I.Z1
     be7:	01 a6 06 a9 b1 51 02 a7 08 7b af 9b aa 92 0b a8     .....Q...{......
     bf7:	06 4b bb 49 01 a9 0d 3d af 5b 19 a8 34 55 d2 20     .K.I...=.[..4U. 
     c07:	2d 00 aa 06 1b b7 5b 49 ab 07 1d b3 8b b2 01 ac     -.....[I........
     c17:	07 14 b3 19 19 04 ad 05 4b b5 19 ae 0c 3d af 5b     ........K....=.[
     c27:	19 8c 34 a7 06 69 01 af 06 0c bb 19 01 b0 06 5b     ..4..i.........[
     c37:	b7 eb 02 b1 0b 35 b1 cd 28 0e 99 51 1c 02 b2 06     .....5..(..Q....
     c47:	62 b5 51 06 b3 06 62 b5 19 69 b4 06 52 b9 53 00     b.Q...b..i..R.S.
     c57:	b5 08 2c af 89 e6 48 19 b6 08 34 b1 1b 6a f5 03     ..,...H...4..j..
     c67:	b7 06 52 b5 19 01 b8 06 52 af 53 00 b9 07 63 b5     ..R.....R.S...c.
     c77:	4b 32 0d ba 06 1b b7 eb 02 bb 08 1d b3 89 a5 4c     K2.............L
     c87:	00 bc 0c 3c af c9 20 83 0c 62 54 1b 04 bd 0d 3c     ...<.. ..bT....<
     c97:	af c9 20 83 0c 92 06 31 03 01 be 0b 3c af 91 1a     .. ....1....<...
     ca7:	44 15 d5 06 01 bf 09 73 b1 cb 30 c5 54 01 c0 09     D......s..0.T...
     cb7:	34 b1 53 51 8e 29 03 c1 09 34 b1 53 51 8e 29 03     4.SQ.)...4.SQ.).
     cc7:	c2 09 34 b1 53 51 8e 29 03 c3 09 34 b1 53 51 8e     ..4.SQ.)...4.SQ.
     cd7:	29 03 c4 0a 34 b1 89 49 c5 31 65 00 c5 09 34 b1     )...4..I.1e...4.
     ce7:	93 2a 8e 29 03 c6 09 34 b1 1b a9 1a aa 25 c7 0b     .*.)...4.....%..
     cf7:	3c af 53 51 83 0c 62 92 11 c8 0b 34 b1 19 1a ac     <.SQ..b....4....
     d07:	0c 32 18 01 c9 0b 34 b1 19 1a ac 0c 32 18 01 ca     .2....4.....2...
     d17:	0b 34 b1 19 1a ac 0c 32 18 01 cb 0b 34 b1 19 1a     .4.....2....4...
     d27:	ac 0c 32 18 01 cc 07 73 b1 59 b1 35 cd 07 73 b1     ..2....s.Y.5..s.
     d37:	59 b1 35 ce 07 73 b1 59 b1 35 cf 07 73 b1 59 b1     Y.5..s.Y.5..s.Y.
     d47:	35 d0 09 34 b1 99 69 75 8d 04 d1 08 34 b1 49 73     5..4..iu....4.Is
     d57:	a9 33 d2 09 34 b1 53 d1 99 14 00 d3 09 34 b1 53     .3..4.S......4.S
     d67:	d1 99 14 00 d4 09 34 b1 53 d1 99 14 00 d5 09 34     ......4.S......4
     d77:	b1 53 d1 99 14 00 d6 0a 34 b1 89 49 45 33 29 00     .S......4..IE3).
     d87:	d7 08 24 b1 89 49 aa 18 d8 09 34 b1 1b e9 48 47     ..$..I....4...HG
     d97:	02 d9 08 34 b1 89 9e 49 01 da 08 34 b1 89 9e 49     ...4...I...4...I
     da7:	01 db 08 34 b1 89 9e 49 01 dc 0a 34 b1 89 19 45     ...4...I...4...E
     db7:	33 29 00 dd 08 73 b1 49 56 59 01 de 0b 34 b1 c9     3)...s.IVY...4..
     dc7:	60 c5 91 32 c8 00 df 09 34 b1 53 51 95 56 02 e0     `..2....4.SQ.V..
     dd7:	0a 34 b1 cb 28 8e a8 54 01 e1 09 34 b1 ad c1 88     .4..(..T...4....
     de7:	4a 15 e2 09 34 b1 ad d2 88 4a 15 e3 0a 34 b1 4b     J...4....J...4.K
     df7:	2a 8e a8 54 01 e4 09 34 b1 ab e1 88 4a 15 e5 09     *..T...4....J...
     e07:	34 b1 93 72 44 a5 0a e6 08 24 b1 1b 69 c5 01 e7     4..rD....$..i...
     e17:	08 6b af 9b 19 a8 04 e8 0b 34 b1 cb 28 aa 34 32     .k.......4..(.42
     e27:	50 00 e9 0a 34 b1 ad 81 4a 23 03 05 ea 0b 34 b1     P...4...J#....4.
     e37:	8b 29 aa 34 32 50 00 eb 0b 34 b1 49 99 50 69 64     .).42P...4.I.Pid
     e47:	a0 00 ec 08 73 b1 c9 20 c9 6a ed 07 73 b1 2b 65     ....s.. .j..s.+e
     e57:	35 ee 07 73 b1 ab 66 35 ef 08 73 b1 49 19 c8 6a     5..s..f5..s.I..j
     e67:	f0 0a 34 b1 cb c8 8a 32 29 00 f1 09 34 b1 4b 2a     ..4....2)...4.K*
     e77:	ad 68 06 f2 0a 34 b1 cb 28 aa 28 93 02 f3 0a 34     .h...4..(.(....4
     e87:	b1 ad 81 8a 32 29 00 f4 0a 34 b1 d3 84 8a 32 29     ....2)...4....2)
     e97:	00 f5 0a 34 b1 4b 2a aa 28 93 02 f6 0a 34 b1 ab     ...4.K*.(....4..
     ea7:	a1 8a 32 29 00 f7 09 2c b1 d3 70 64 a8 00 f8 09     ..2)...,..pd....
     eb7:	24 b1 1b 69 a4 91 00 f9 09 34 b1 cb a8 34 d3 00     $..i.....4...4..
     ec7:	fa 07 34 b1 6d 9a 69 fb 08 34 b1 d3 30 9a 69 fc     ..4.m.i..4..0.i.
     ed7:	09 34 b1 ab 51 34 d3 00 fd 09 3c af 6d ca 54 96     .4..Q4....<.m.T.
     ee7:	00 fe 0a 34 af c9 60 45 39 52 06 ff 0a 3c af ab     ...4..`E9R...<..
     ef7:	51 94 a9 2c 01 00 00 00 04 ff ff 00 00              Q..,.........

00000f04 <__ctors_end>:
     f04:	11 24       	eor	r1, r1
     f06:	1f be       	out	0x3f, r1	; 63
     f08:	cf ef       	ldi	r28, 0xFF	; 255
     f0a:	d8 e0       	ldi	r29, 0x08	; 8
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	cd bf       	out	0x3d, r28	; 61

00000f10 <__do_copy_data>:
     f10:	12 e0       	ldi	r17, 0x02	; 2
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b1 e0       	ldi	r27, 0x01	; 1
     f16:	ea e9       	ldi	r30, 0x9A	; 154
     f18:	f8 e4       	ldi	r31, 0x48	; 72
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <__do_copy_data+0x10>
     f1c:	05 90       	lpm	r0, Z+
     f1e:	0d 92       	st	X+, r0
     f20:	a4 3c       	cpi	r26, 0xC4	; 196
     f22:	b1 07       	cpc	r27, r17
     f24:	d9 f7       	brne	.-10     	; 0xf1c <__do_copy_data+0xc>

00000f26 <__do_clear_bss>:
     f26:	27 e0       	ldi	r18, 0x07	; 7
     f28:	a4 ec       	ldi	r26, 0xC4	; 196
     f2a:	b2 e0       	ldi	r27, 0x02	; 2
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <.do_clear_bss_start>

00000f2e <.do_clear_bss_loop>:
     f2e:	1d 92       	st	X+, r1

00000f30 <.do_clear_bss_start>:
     f30:	a2 3c       	cpi	r26, 0xC2	; 194
     f32:	b2 07       	cpc	r27, r18
     f34:	e1 f7       	brne	.-8      	; 0xf2e <.do_clear_bss_loop>
     f36:	0e 94 4d 0a 	call	0x149a	; 0x149a <main>
     f3a:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <_exit>

00000f3e <__bad_interrupt>:
     f3e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f42 <initDistanceSensor>:
int *pDistance;
int *pAngle_tmp;

void initDistanceSensor(int *pDist, int *pAngle){
	//initialize ultrasonic sensor
	pDistance = pDist;
     f42:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <pDistance+0x1>
     f46:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <pDistance>
	pAngle_tmp = pAngle;
     f4a:	70 93 ff 06 	sts	0x06FF, r23	; 0x8006ff <pAngle_tmp+0x1>
     f4e:	60 93 fe 06 	sts	0x06FE, r22	; 0x8006fe <pAngle_tmp>
	//setup the DDR register and the pin change mask
	
	DDRB |= (1<<TRIGG0);
     f52:	22 9a       	sbi	0x04, 2	; 4
	DDRB &= ~(1<<ECHO0);
     f54:	23 98       	cbi	0x04, 3	; 4
	DDRB |= (1<<TRIGG1);
     f56:	24 9a       	sbi	0x04, 4	; 4
	DDRB &= ~(1<<ECHO1);
     f58:	25 98       	cbi	0x04, 5	; 4

	PCMSK0 |= (1<<ECHO0) | (1<<ECHO1);;
     f5a:	eb e6       	ldi	r30, 0x6B	; 107
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 62       	ori	r24, 0x28	; 40
     f62:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE0);
     f64:	e8 e6       	ldi	r30, 0x68	; 104
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24

	//Timer
	TCCR1B |= (1<<CS11)|(1<<CS10);//counter 1 in register TCNT1  - 4 uS/c clk/64 prescaler
     f6e:	e1 e8       	ldi	r30, 0x81	; 129
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	83 60       	ori	r24, 0x03	; 3
     f76:	80 83       	st	Z, r24
     f78:	08 95       	ret

00000f7a <sendTriggPulse>:
}

void sendTriggPulse(int device){
	TCNT1 = 0;
     f7a:	e4 e8       	ldi	r30, 0x84	; 132
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	11 82       	std	Z+1, r1	; 0x01
     f80:	10 82       	st	Z, r1
	int pulseStartTimeC = TCNT1;
     f82:	20 81       	ld	r18, Z
     f84:	31 81       	ldd	r19, Z+1	; 0x01
	PORTB |= (1<<device);
     f86:	95 b1       	in	r25, 0x05	; 5
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <sendTriggPulse+0x18>
     f8e:	44 0f       	add	r20, r20
     f90:	55 1f       	adc	r21, r21
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <sendTriggPulse+0x14>
     f96:	94 2b       	or	r25, r20
     f98:	95 b9       	out	0x05, r25	; 5
	
	while (TCNT1 < pulseStartTimeC + triggPulsLengthC);//wait the right amount of time
     f9a:	2e 5f       	subi	r18, 0xFE	; 254
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	82 17       	cp	r24, r18
     fa4:	93 07       	cpc	r25, r19
     fa6:	d8 f3       	brcs	.-10     	; 0xf9e <sendTriggPulse+0x24>
	
	PORTB &= ~(1<<device);
     fa8:	85 b1       	in	r24, 0x05	; 5
     faa:	40 95       	com	r20
     fac:	48 23       	and	r20, r24
     fae:	45 b9       	out	0x05, r20	; 5
     fb0:	08 95       	ret

00000fb2 <angleCalculator>:
}

void angleCalculator(void){
     fb2:	8f 92       	push	r8
     fb4:	9f 92       	push	r9
     fb6:	af 92       	push	r10
     fb8:	bf 92       	push	r11
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
	if (echoDistance[0] <= 20 && echoDistance[1] >= echoDistance[0])
     fc6:	c0 90 0c 07 	lds	r12, 0x070C	; 0x80070c <echoDistance>
     fca:	d0 90 0d 07 	lds	r13, 0x070D	; 0x80070d <echoDistance+0x1>
     fce:	e0 90 0e 07 	lds	r14, 0x070E	; 0x80070e <echoDistance+0x2>
     fd2:	f0 90 0f 07 	lds	r15, 0x070F	; 0x80070f <echoDistance+0x3>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 ea       	ldi	r20, 0xA0	; 160
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	0e 94 cf 21 	call	0x439e	; 0x439e <__cmpsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	0c f4       	brge	.+2      	; 0xfec <angleCalculator+0x3a>
     fea:	4b c0       	rjmp	.+150    	; 0x1082 <angleCalculator+0xd0>
     fec:	80 90 10 07 	lds	r8, 0x0710	; 0x800710 <echoDistance+0x4>
     ff0:	90 90 11 07 	lds	r9, 0x0711	; 0x800711 <echoDistance+0x5>
     ff4:	a0 90 12 07 	lds	r10, 0x0712	; 0x800712 <echoDistance+0x6>
     ff8:	b0 90 13 07 	lds	r11, 0x0713	; 0x800713 <echoDistance+0x7>
     ffc:	a5 01       	movw	r20, r10
     ffe:	94 01       	movw	r18, r8
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	0e 94 cf 21 	call	0x439e	; 0x439e <__cmpsf2>
    1008:	18 16       	cp	r1, r24
    100a:	dc f1       	brlt	.+118    	; 0x1082 <angleCalculator+0xd0>
	{

		length = (echoDistance[1] - echoDistance[0]);
    100c:	a7 01       	movw	r20, r14
    100e:	96 01       	movw	r18, r12
    1010:	c5 01       	movw	r24, r10
    1012:	b4 01       	movw	r22, r8
    1014:	0e 94 33 21 	call	0x4266	; 0x4266 <__subsf3>
    1018:	60 93 00 07 	sts	0x0700, r22	; 0x800700 <length>
    101c:	70 93 01 07 	sts	0x0701, r23	; 0x800701 <length+0x1>
    1020:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <length+0x2>
    1024:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <length+0x3>
		differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
    1028:	23 e3       	ldi	r18, 0x33	; 51
    102a:	33 e3       	ldi	r19, 0x33	; 51
    102c:	43 ed       	ldi	r20, 0xD3	; 211
    102e:	50 e4       	ldi	r21, 0x40	; 64
    1030:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__divsf3>
    1034:	60 93 08 07 	sts	0x0708, r22	; 0x800708 <differenceLength>
    1038:	70 93 09 07 	sts	0x0709, r23	; 0x800709 <differenceLength+0x1>
    103c:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <differenceLength+0x2>
    1040:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <differenceLength+0x3>
		angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
    1044:	0e 94 a0 21 	call	0x4340	; 0x4340 <atan>
    1048:	60 93 04 07 	sts	0x0704, r22	; 0x800704 <angleradian>
    104c:	70 93 05 07 	sts	0x0705, r23	; 0x800705 <angleradian+0x1>
    1050:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <angleradian+0x2>
    1054:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <angleradian+0x3>
		angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	44 e3       	ldi	r20, 0x34	; 52
    105e:	53 e4       	ldi	r21, 0x43	; 67
    1060:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1064:	23 ec       	ldi	r18, 0xC3	; 195
    1066:	35 ef       	ldi	r19, 0xF5	; 245
    1068:	48 e4       	ldi	r20, 0x48	; 72
    106a:	50 e4       	ldi	r21, 0x40	; 64
    106c:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__divsf3>
    1070:	60 93 fa 06 	sts	0x06FA, r22	; 0x8006fa <angledegree>
    1074:	70 93 fb 06 	sts	0x06FB, r23	; 0x8006fb <angledegree+0x1>
    1078:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <angledegree+0x2>
    107c:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <angledegree+0x3>
    1080:	55 c0       	rjmp	.+170    	; 0x112c <angleCalculator+0x17a>
	}
	else if (echoDistance[1] <= 20 && echoDistance[0] >= echoDistance[1])
    1082:	80 90 10 07 	lds	r8, 0x0710	; 0x800710 <echoDistance+0x4>
    1086:	90 90 11 07 	lds	r9, 0x0711	; 0x800711 <echoDistance+0x5>
    108a:	a0 90 12 07 	lds	r10, 0x0712	; 0x800712 <echoDistance+0x6>
    108e:	b0 90 13 07 	lds	r11, 0x0713	; 0x800713 <echoDistance+0x7>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 ea       	ldi	r20, 0xA0	; 160
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	c5 01       	movw	r24, r10
    109c:	b4 01       	movw	r22, r8
    109e:	0e 94 cf 21 	call	0x439e	; 0x439e <__cmpsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	0c f4       	brge	.+2      	; 0x10a8 <angleCalculator+0xf6>
    10a6:	42 c0       	rjmp	.+132    	; 0x112c <angleCalculator+0x17a>
    10a8:	a5 01       	movw	r20, r10
    10aa:	94 01       	movw	r18, r8
    10ac:	c7 01       	movw	r24, r14
    10ae:	b6 01       	movw	r22, r12
    10b0:	0e 94 55 23 	call	0x46aa	; 0x46aa <__gesf2>
    10b4:	88 23       	and	r24, r24
    10b6:	d4 f1       	brlt	.+116    	; 0x112c <angleCalculator+0x17a>
	{

		length = (echoDistance[0] - echoDistance[1]);
    10b8:	a5 01       	movw	r20, r10
    10ba:	94 01       	movw	r18, r8
    10bc:	c7 01       	movw	r24, r14
    10be:	b6 01       	movw	r22, r12
    10c0:	0e 94 33 21 	call	0x4266	; 0x4266 <__subsf3>
    10c4:	60 93 00 07 	sts	0x0700, r22	; 0x800700 <length>
    10c8:	70 93 01 07 	sts	0x0701, r23	; 0x800701 <length+0x1>
    10cc:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <length+0x2>
    10d0:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <length+0x3>
		differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
    10d4:	23 e3       	ldi	r18, 0x33	; 51
    10d6:	33 e3       	ldi	r19, 0x33	; 51
    10d8:	43 ed       	ldi	r20, 0xD3	; 211
    10da:	50 e4       	ldi	r21, 0x40	; 64
    10dc:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__divsf3>
    10e0:	60 93 08 07 	sts	0x0708, r22	; 0x800708 <differenceLength>
    10e4:	70 93 09 07 	sts	0x0709, r23	; 0x800709 <differenceLength+0x1>
    10e8:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <differenceLength+0x2>
    10ec:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <differenceLength+0x3>
		angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
    10f0:	0e 94 a0 21 	call	0x4340	; 0x4340 <atan>
    10f4:	60 93 04 07 	sts	0x0704, r22	; 0x800704 <angleradian>
    10f8:	70 93 05 07 	sts	0x0705, r23	; 0x800705 <angleradian+0x1>
    10fc:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <angleradian+0x2>
    1100:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <angleradian+0x3>
		angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	44 e3       	ldi	r20, 0x34	; 52
    110a:	53 e4       	ldi	r21, 0x43	; 67
    110c:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1110:	23 ec       	ldi	r18, 0xC3	; 195
    1112:	35 ef       	ldi	r19, 0xF5	; 245
    1114:	48 e4       	ldi	r20, 0x48	; 72
    1116:	50 e4       	ldi	r21, 0x40	; 64
    1118:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__divsf3>
    111c:	60 93 fa 06 	sts	0x06FA, r22	; 0x8006fa <angledegree>
    1120:	70 93 fb 06 	sts	0x06FB, r23	; 0x8006fb <angledegree+0x1>
    1124:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <angledegree+0x2>
    1128:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <angledegree+0x3>
	}
	else{

	}
	*pAngle_tmp = (int) angledegree;
    112c:	c0 91 fe 06 	lds	r28, 0x06FE	; 0x8006fe <pAngle_tmp>
    1130:	d0 91 ff 06 	lds	r29, 0x06FF	; 0x8006ff <pAngle_tmp+0x1>
    1134:	60 91 fa 06 	lds	r22, 0x06FA	; 0x8006fa <angledegree>
    1138:	70 91 fb 06 	lds	r23, 0x06FB	; 0x8006fb <angledegree+0x1>
    113c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <angledegree+0x2>
    1140:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <angledegree+0x3>
    1144:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    1148:	79 83       	std	Y+1, r23	; 0x01
    114a:	68 83       	st	Y, r22
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	08 95       	ret

00001162 <__vector_3>:


ISR(PCINT0_vect){//PD
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
	static int runcount2 = 0;
	static int runcount1 = 0;
	//check which device it is and keep that device for the falling edge
	static int prevDevice;
	static int device;
	device = PINB;
    118c:	83 b1       	in	r24, 0x03	; 3
	device &= ~(1<<PORTB7);
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <device.1739+0x1>
    1196:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <device.1739>
	
	if (device == 0)
    119a:	89 2b       	or	r24, r25
    119c:	41 f4       	brne	.+16     	; 0x11ae <__vector_3+0x4c>
	{
		device = prevDevice;//save the current device
    119e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <prevDevice.1738>
    11a2:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <prevDevice.1738+0x1>
    11a6:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <device.1739+0x1>
    11aa:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <device.1739>
	}
	
	switch(device){
    11ae:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <device.1739>
    11b2:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <device.1739+0x1>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <__vector_3+0x5c>
    11bc:	73 c0       	rjmp	.+230    	; 0x12a4 <__vector_3+0x142>
    11be:	1c f4       	brge	.+6      	; 0x11c6 <__vector_3+0x64>
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	49 f0       	breq	.+18     	; 0x11d6 <__vector_3+0x74>
    11c4:	d7 c0       	rjmp	.+430    	; 0x1374 <__vector_3+0x212>
    11c6:	88 30       	cpi	r24, 0x08	; 8
    11c8:	91 05       	cpc	r25, r1
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <__vector_3+0x74>
    11cc:	80 32       	cpi	r24, 0x20	; 32
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__vector_3+0x72>
    11d2:	68 c0       	rjmp	.+208    	; 0x12a4 <__vector_3+0x142>
    11d4:	cf c0       	rjmp	.+414    	; 0x1374 <__vector_3+0x212>
		case (1<<ECHO0):
		case 0:
		//if device is device 0 or if the pin ECHO0 gave a high
		if (runcount2 == 0)
    11d6:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <runcount2.1736>
    11da:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <runcount2.1736+0x1>
    11de:	23 2b       	or	r18, r19
    11e0:	c1 f4       	brne	.+48     	; 0x1212 <__vector_3+0xb0>
		{
			prevDevice = 0;
    11e2:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <prevDevice.1738+0x1>
    11e6:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <prevDevice.1738>
			TCNT1 = 0;
    11ea:	e4 e8       	ldi	r30, 0x84	; 132
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	11 82       	std	Z+1, r1	; 0x01
    11f0:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <risingEdgeTimeC+0x1>
    11fa:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <risingEdgeTimeC>
			
			runcount2++;
    11fe:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <runcount2.1736>
    1202:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <runcount2.1736+0x1>
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <runcount2.1736+0x1>
    120c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <runcount2.1736>
    1210:	b1 c0       	rjmp	.+354    	; 0x1374 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -1;
    1212:	2f ef       	ldi	r18, 0xFF	; 255
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <prevDevice.1738+0x1>
    121a:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    121e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1222:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1226:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <fallingEdgeTimeC+0x1>
    122a:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <fallingEdgeTimeC>
			
			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    122e:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <risingEdgeTimeC>
    1232:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <risingEdgeTimeC+0x1>
    1236:	62 1b       	sub	r22, r18
    1238:	73 0b       	sbc	r23, r19
    123a:	8b 01       	movw	r16, r22
    123c:	07 2e       	mov	r0, r23
    123e:	00 0c       	add	r0, r0
    1240:	22 0b       	sbc	r18, r18
    1242:	33 0b       	sbc	r19, r19
    1244:	00 93 ce 02 	sts	0x02CE, r16	; 0x8002ce <echoHighLevelTimeC>
    1248:	10 93 cf 02 	sts	0x02CF, r17	; 0x8002cf <echoHighLevelTimeC+0x1>
    124c:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <echoHighLevelTimeC+0x2>
    1250:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <echoHighLevelTimeuS+0x1>
    1260:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal0;// in cm
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	ec 01       	movw	r28, r24
    126e:	c4 5f       	subi	r28, 0xF4	; 244
    1270:	d8 4f       	sbci	r29, 0xF8	; 248
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <__floatunsisf>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	48 e6       	ldi	r20, 0x68	; 104
    1280:	52 e4       	ldi	r21, 0x42	; 66
    1282:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__divsf3>
    1286:	26 e6       	ldi	r18, 0x66	; 102
    1288:	36 e6       	ldi	r19, 0x66	; 102
    128a:	46 ee       	ldi	r20, 0xE6	; 230
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1292:	68 83       	st	Y, r22
    1294:	79 83       	std	Y+1, r23	; 0x01
    1296:	8a 83       	std	Y+2, r24	; 0x02
    1298:	9b 83       	std	Y+3, r25	; 0x03
			
			runcount2 = 0;
    129a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <runcount2.1736+0x1>
    129e:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <runcount2.1736>
    12a2:	68 c0       	rjmp	.+208    	; 0x1374 <__vector_3+0x212>
		break;
		
		//use for multiple sound sensors
		case (1 << ECHO1):
		case 1:
		if (runcount1 == 0)
    12a4:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <__data_end>
    12a8:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <__data_end+0x1>
    12ac:	23 2b       	or	r18, r19
    12ae:	d1 f4       	brne	.+52     	; 0x12e4 <__vector_3+0x182>
		{
			prevDevice = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <prevDevice.1738+0x1>
    12b8:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <prevDevice.1738>
			TCNT1 = 0;
    12bc:	e4 e8       	ldi	r30, 0x84	; 132
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	11 82       	std	Z+1, r1	; 0x01
    12c2:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <risingEdgeTimeC+0x1>
    12cc:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <risingEdgeTimeC>

			runcount1++;
    12d0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
    12d4:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__data_end+0x1>
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <__data_end+0x1>
    12de:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
    12e2:	48 c0       	rjmp	.+144    	; 0x1374 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -2;
    12e4:	2e ef       	ldi	r18, 0xFE	; 254
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <prevDevice.1738+0x1>
    12ec:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    12f0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12f4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12f8:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <fallingEdgeTimeC+0x1>
    12fc:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <fallingEdgeTimeC>

			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    1300:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <risingEdgeTimeC>
    1304:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <risingEdgeTimeC+0x1>
    1308:	62 1b       	sub	r22, r18
    130a:	73 0b       	sbc	r23, r19
    130c:	8b 01       	movw	r16, r22
    130e:	07 2e       	mov	r0, r23
    1310:	00 0c       	add	r0, r0
    1312:	22 0b       	sbc	r18, r18
    1314:	33 0b       	sbc	r19, r19
    1316:	00 93 ce 02 	sts	0x02CE, r16	; 0x8002ce <echoHighLevelTimeC>
    131a:	10 93 cf 02 	sts	0x02CF, r17	; 0x8002cf <echoHighLevelTimeC+0x1>
    131e:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <echoHighLevelTimeC+0x2>
    1322:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <echoHighLevelTimeuS+0x1>
    1332:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal1;// in cm
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	ec 01       	movw	r28, r24
    1340:	c4 5f       	subi	r28, 0xF4	; 244
    1342:	d8 4f       	sbci	r29, 0xF8	; 248
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <__floatunsisf>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	48 e6       	ldi	r20, 0x68	; 104
    1352:	52 e4       	ldi	r21, 0x42	; 66
    1354:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__divsf3>
    1358:	26 e6       	ldi	r18, 0x66	; 102
    135a:	36 e6       	ldi	r19, 0x66	; 102
    135c:	46 ee       	ldi	r20, 0xE6	; 230
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1364:	68 83       	st	Y, r22
    1366:	79 83       	std	Y+1, r23	; 0x01
    1368:	8a 83       	std	Y+2, r24	; 0x02
    136a:	9b 83       	std	Y+3, r25	; 0x03

			runcount1 = 0;
    136c:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <__data_end+0x1>
    1370:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
		}
		break;
	}
	*pDistance = (int) echoDistance[0];
    1374:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <pDistance>
    1378:	d0 91 f9 06 	lds	r29, 0x06F9	; 0x8006f9 <pDistance+0x1>
    137c:	0c e0       	ldi	r16, 0x0C	; 12
    137e:	17 e0       	ldi	r17, 0x07	; 7
    1380:	f8 01       	movw	r30, r16
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    138e:	79 83       	std	Y+1, r23	; 0x01
    1390:	68 83       	st	Y, r22
	*pDistance += (int) echoDistance[1];
    1392:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <pDistance>
    1396:	d0 91 f9 06 	lds	r29, 0x06F9	; 0x8006f9 <pDistance+0x1>
    139a:	f8 01       	movw	r30, r16
    139c:	64 81       	ldd	r22, Z+4	; 0x04
    139e:	75 81       	ldd	r23, Z+5	; 0x05
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	97 81       	ldd	r25, Z+7	; 0x07
    13a4:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    13a8:	28 81       	ld	r18, Y
    13aa:	39 81       	ldd	r19, Y+1	; 0x01
    13ac:	62 0f       	add	r22, r18
    13ae:	73 1f       	adc	r23, r19
    13b0:	79 83       	std	Y+1, r23	; 0x01
    13b2:	68 83       	st	Y, r22
	*pDistance /= 2;
    13b4:	e0 91 f8 06 	lds	r30, 0x06F8	; 0x8006f8 <pDistance>
    13b8:	f0 91 f9 06 	lds	r31, 0x06F9	; 0x8006f9 <pDistance+0x1>
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	99 23       	and	r25, r25
    13c2:	0c f4       	brge	.+2      	; 0x13c6 <__vector_3+0x264>
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	95 95       	asr	r25
    13c8:	87 95       	ror	r24
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
}
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <setup_display>:
int8_t *main_currentPage = 0;

unsigned int Time_ms = 0;//accuracy is fluctuating
unsigned int Time_min = 0;//accurate

void setup_display(void){
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
	//screen initialization
	main_currentPage = u8g2_setup(Settings, &speed, &direction, &distance, &angle_deg); //save the address of the currentPage
    13fc:	0e ed       	ldi	r16, 0xDE	; 222
    13fe:	12 e0       	ldi	r17, 0x02	; 2
    1400:	2a e0       	ldi	r18, 0x0A	; 10
    1402:	31 e0       	ldi	r19, 0x01	; 1
    1404:	4c e0       	ldi	r20, 0x0C	; 12
    1406:	51 e0       	ldi	r21, 0x01	; 1
    1408:	6e e0       	ldi	r22, 0x0E	; 14
    140a:	71 e0       	ldi	r23, 0x01	; 1
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <u8g2_setup>
    1414:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <main_currentPage+0x1>
    1418:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <main_currentPage>
	sys_init();
    141c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <sys_init>
	but_init();
    1420:	0e 94 c4 0c 	call	0x1988	; 0x1988 <but_init>
	timeInit(&Time_min, &Time_ms);
    1424:	6a ed       	ldi	r22, 0xDA	; 218
    1426:	72 e0       	ldi	r23, 0x02	; 2
    1428:	88 ed       	ldi	r24, 0xD8	; 216
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <timeInit>
	ADCinit();
    1430:	0e 94 bd 0b 	call	0x177a	; 0x177a <ADCinit>
}
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	08 95       	ret

0000143a <soundEchoCycle>:

void soundEchoCycle(void){
	
	static int count = 0;
	//add here the code for the cycle it needs to perform to trigger all the sound sensors
	if (TCNT1 >= cycleLengthC && count == 0){
    143a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    143e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1442:	88 39       	cpi	r24, 0x98	; 152
    1444:	9a 43       	sbci	r25, 0x3A	; 58
    1446:	88 f0       	brcs	.+34     	; 0x146a <soundEchoCycle+0x30>
    1448:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <count.8801>
    144c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <count.8801+0x1>
    1450:	89 2b       	or	r24, r25
    1452:	59 f4       	brne	.+22     	; 0x146a <soundEchoCycle+0x30>
		sendTriggPulse(TRIGG1);
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 bd 07 	call	0xf7a	; 0xf7a <sendTriggPulse>
		count = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <count.8801+0x1>
    1464:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <count.8801>
    1468:	15 c0       	rjmp	.+42     	; 0x1494 <soundEchoCycle+0x5a>
	}
	else if(TCNT1 >= cycleLengthC && count == 1){
    146a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    146e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1472:	88 39       	cpi	r24, 0x98	; 152
    1474:	9a 43       	sbci	r25, 0x3A	; 58
    1476:	70 f0       	brcs	.+28     	; 0x1494 <soundEchoCycle+0x5a>
    1478:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <count.8801>
    147c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <count.8801+0x1>
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	41 f4       	brne	.+16     	; 0x1494 <soundEchoCycle+0x5a>
		sendTriggPulse(TRIGG0);
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 bd 07 	call	0xf7a	; 0xf7a <sendTriggPulse>
		count = 0;
    148c:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <count.8801+0x1>
    1490:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <count.8801>
	}
	angleCalculator();
    1494:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <angleCalculator>
    1498:	08 95       	ret

0000149a <main>:
	ADCinit();
}

int main()
{
	setup_display();
    149a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <setup_display>
	
	initDistanceSensor(&distance, &angle_deg);//the default pins are setup in soundsensor.h
    149e:	6e ed       	ldi	r22, 0xDE	; 222
    14a0:	72 e0       	ldi	r23, 0x02	; 2
    14a2:	8a e0       	ldi	r24, 0x0A	; 10
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 a1 07 	call	0xf42	; 0xf42 <initDistanceSensor>
	
	sei();
    14aa:	78 94       	sei


	while(1){
		screenRoutine();//function for updating the display.
    14ac:	0e 94 c2 13 	call	0x2784	; 0x2784 <screenRoutine>
		
		
		soundEchoCycle();
    14b0:	0e 94 1d 0a 	call	0x143a	; 0x143a <soundEchoCycle>
    14b4:	fb cf       	rjmp	.-10     	; 0x14ac <main+0x12>

000014b6 <u8g2_setup>:
unsigned int *pTime_min;

#define Time_cal 305 //ms calibration

int8_t * u8g2_setup(int pSettings[settings], int *pSpeed, int *pDirection, int *pDistance, int *pangdeg)
{
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
	settingVal = &pSettings[0];
    14ba:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <settingVal+0x1>
    14be:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <settingVal>
	angleHold = pangdeg;
    14c2:	10 93 c0 07 	sts	0x07C0, r17	; 0x8007c0 <angleHold+0x1>
    14c6:	00 93 bf 07 	sts	0x07BF, r16	; 0x8007bf <angleHold>
	speedHold = pSpeed;
    14ca:	70 93 29 07 	sts	0x0729, r23	; 0x800729 <speedHold+0x1>
    14ce:	60 93 28 07 	sts	0x0728, r22	; 0x800728 <speedHold>
	directionHold = pDirection;
    14d2:	50 93 ad 07 	sts	0x07AD, r21	; 0x8007ad <directionHold+0x1>
    14d6:	40 93 ac 07 	sts	0x07AC, r20	; 0x8007ac <directionHold>
	distanceHold = pDistance;
    14da:	30 93 a9 07 	sts	0x07A9, r19	; 0x8007a9 <distanceHold+0x1>
    14de:	20 93 a8 07 	sts	0x07A8, r18	; 0x8007a8 <distanceHold>
	
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    14e2:	21 e2       	ldi	r18, 0x21	; 33
    14e4:	3e e1       	ldi	r19, 0x1E	; 30
    14e6:	46 ee       	ldi	r20, 0xE6	; 230
    14e8:	5d e1       	ldi	r21, 0x1D	; 29
    14ea:	69 e5       	ldi	r22, 0x59	; 89
    14ec:	72 e0       	ldi	r23, 0x02	; 2
    14ee:	88 e3       	ldi	r24, 0x38	; 56
    14f0:	97 e0       	ldi	r25, 0x07	; 7
    14f2:	0e 94 75 17 	call	0x2eea	; 0x2eea <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    14f6:	88 e7       	ldi	r24, 0x78	; 120
    14f8:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    14fc:	88 e3       	ldi	r24, 0x38	; 56
    14fe:	97 e0       	ldi	r25, 0x07	; 7
    1500:	0e 94 1e 20 	call	0x403c	; 0x403c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	88 e3       	ldi	r24, 0x38	; 56
    1508:	97 e0       	ldi	r25, 0x07	; 7
    150a:	0e 94 29 20 	call	0x4052	; 0x4052 <u8x8_SetPowerSave>
	
	screenDiv = screenDiv / screenDivholder;//for better resolution
    150e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <screenDivholder>
    1512:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <screenDivholder+0x1>
    1516:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <screenDivholder+0x2>
    151a:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <screenDivholder+0x3>
    151e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    1522:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    1526:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    152a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    152e:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__divsf3>
    1532:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <screenDiv>
    1536:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <screenDiv+0x1>
    153a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <screenDiv+0x2>
    153e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <screenDiv+0x3>

	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);
    1542:	66 e9       	ldi	r22, 0x96	; 150
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	88 e3       	ldi	r24, 0x38	; 56
    1548:	97 e0       	ldi	r25, 0x07	; 7
    154a:	0e 94 b7 1b 	call	0x376e	; 0x376e <u8g2_SetFont>
	textHeight = u8g2_GetMaxCharHeight(&u8g2);
    154e:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <u8g2+0x50>
    1552:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <textHeight>
	maxCharWidth = u8g2_GetMaxCharWidth(&u8g2);
    1556:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <u8g2+0x4f>
    155a:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <maxCharWidth>
	
	u8g2_SetFontDirection(&u8g2, 0);//0: 0deg 1:90deg 2: 180deg 3: 270deg
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	88 e3       	ldi	r24, 0x38	; 56
    1562:	97 e0       	ldi	r25, 0x07	; 7
    1564:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <u8g2_SetFontDirection>
	
	selections[MENUPAGE] = menuChoices;
    1568:	e0 eb       	ldi	r30, 0xB0	; 176
    156a:	f7 e0       	ldi	r31, 0x07	; 7
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	81 83       	std	Z+1, r24	; 0x01
	selections[SETTINGPAGE] = settings;
    1570:	85 e0       	ldi	r24, 0x05	; 5
    1572:	85 83       	std	Z+5, r24	; 0x05
	selectionsVis[MENUPAGE] = menuChoicesVis;
    1574:	ee e9       	ldi	r30, 0x9E	; 158
    1576:	f7 e0       	ldi	r31, 0x07	; 7
    1578:	93 e0       	ldi	r25, 0x03	; 3
    157a:	91 83       	std	Z+1, r25	; 0x01
	selectionsVis[SETTINGPAGE] = settingsVis;
    157c:	85 83       	std	Z+5, r24	; 0x05
	return &currentPage;
}
    157e:	85 ef       	ldi	r24, 0xF5	; 245
    1580:	92 e0       	ldi	r25, 0x02	; 2
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <sys_init>:

void sys_init(void)
{
	#if defined(__AVR__)
	/* select minimal prescaler (max system speed) */
	CLKPR = 0x80;
    1588:	e1 e6       	ldi	r30, 0x61	; 97
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 e8       	ldi	r24, 0x80	; 128
    158e:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1590:	10 82       	st	Z, r1
    1592:	08 95       	ret

00001594 <timeInit>:
}

//Time________________________________________________________________________________________________________________________________________________

void timeInit(unsigned int *ptime_min, unsigned int *ptime_ms){
	pTime_min = ptime_min;
    1594:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <pTime_min+0x1>
    1598:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <pTime_min>
	pTime_ms = ptime_ms;
    159c:	70 93 37 07 	sts	0x0737, r23	; 0x800737 <pTime_ms+0x1>
    15a0:	60 93 36 07 	sts	0x0736, r22	; 0x800736 <pTime_ms>
	TCCR0B |= (1<<CS00) | (1<<CS01);
    15a4:	85 b5       	in	r24, 0x25	; 37
    15a6:	83 60       	ori	r24, 0x03	; 3
    15a8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0B);
    15aa:	ee e6       	ldi	r30, 0x6E	; 110
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	84 60       	ori	r24, 0x04	; 4
    15b2:	80 83       	st	Z, r24
	OCR0B = 250;//to attain roughly 1 ms for every overflow. this roughness gets calibrated further in the code.
    15b4:	8a ef       	ldi	r24, 0xFA	; 250
    15b6:	88 bd       	out	0x28, r24	; 40
    15b8:	08 95       	ret

000015ba <__vector_15>:
}



ISR(TIMER0_COMPB_vect){
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
	//this routine updates the time variables.
	static int rCount = 0;
	
	if (_Time_ms >= 60000){
    15d4:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <_Time_ms>
    15d8:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <_Time_ms+0x1>
    15dc:	80 36       	cpi	r24, 0x60	; 96
    15de:	2a ee       	ldi	r18, 0xEA	; 234
    15e0:	92 07       	cpc	r25, r18
    15e2:	b8 f0       	brcs	.+46     	; 0x1612 <__vector_15+0x58>
		_Time_ms = Time_cal-117;//Formula for the minutes. pTime_ms = (Time_cal-c): c = 0.615384615*Time_cal
    15e4:	8c eb       	ldi	r24, 0xBC	; 188
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <_Time_ms+0x1>
    15ec:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <_Time_ms>
		_Time_min++;
    15f0:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_Time_min>
    15f4:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_Time_min+0x1>
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <_Time_min+0x1>
    15fe:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <_Time_min>
		rCount = 0;
    1602:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <rCount.9238+0x1>
    1606:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <rCount.9238>
		reDrawRequiredTime = 1; //update the screen so the overlay shows the right minutes.
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <reDrawRequiredTime>
    1610:	18 c0       	rjmp	.+48     	; 0x1642 <__vector_15+0x88>
	}else if (rCount++ >= 13000)
    1612:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <rCount.9238>
    1616:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <rCount.9238+0x1>
    161a:	a9 01       	movw	r20, r18
    161c:	4f 5f       	subi	r20, 0xFF	; 255
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
    1620:	50 93 f0 02 	sts	0x02F0, r21	; 0x8002f0 <rCount.9238+0x1>
    1624:	40 93 ef 02 	sts	0x02EF, r20	; 0x8002ef <rCount.9238>
    1628:	28 3c       	cpi	r18, 0xC8	; 200
    162a:	32 43       	sbci	r19, 0x32	; 50
    162c:	54 f0       	brlt	.+20     	; 0x1642 <__vector_15+0x88>
	{
		_Time_ms = _Time_ms + Time_cal;
    162e:	8f 5c       	subi	r24, 0xCF	; 207
    1630:	9e 4f       	sbci	r25, 0xFE	; 254
    1632:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <_Time_ms+0x1>
    1636:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <_Time_ms>
		rCount = 0;
    163a:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <rCount.9238+0x1>
    163e:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <rCount.9238>
	}

	_Time_ms++;
    1642:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <_Time_ms>
    1646:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <_Time_ms+0x1>
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <_Time_ms+0x1>
    1650:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <_Time_ms>
	
	*pTime_ms = _Time_ms;
    1654:	e0 91 36 07 	lds	r30, 0x0736	; 0x800736 <pTime_ms>
    1658:	f0 91 37 07 	lds	r31, 0x0737	; 0x800737 <pTime_ms+0x1>
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
	*pTime_min = _Time_min;
    1660:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <pTime_min>
    1664:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <pTime_min+0x1>
    1668:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_Time_min>
    166c:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_Time_min+0x1>
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	80 83       	st	Z, r24
}
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <getTimeToChar>:

void getTimeToChar(char *s, int TemplateOption){
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	00 d0       	rcall	.+0      	; 0x169c <getTimeToChar+0xe>
    169c:	1f 92       	push	r1
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	8c 01       	movw	r16, r24
    16a4:	7b 01       	movw	r14, r22
	//pTime_min and pTime_ms are global variables.
	strcpy(s, ""); // empty string s
    16a6:	fc 01       	movw	r30, r24
    16a8:	10 82       	st	Z, r1
	char Buff[3] = {0, 0, 0};
    16aa:	19 82       	std	Y+1, r1	; 0x01
    16ac:	1a 82       	std	Y+2, r1	; 0x02
    16ae:	1b 82       	std	Y+3, r1	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    16b0:	4a e0       	ldi	r20, 0x0A	; 10
    16b2:	be 01       	movw	r22, r28
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_Time_min>
    16bc:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_Time_min+0x1>
    16c0:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
	
	itoa(_Time_min, Buff, 10);
	
	if(_Time_min < 10){
    16c4:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_Time_min>
    16c8:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_Time_min+0x1>
    16cc:	0a 97       	sbiw	r24, 0x0a	; 10
    16ce:	48 f4       	brcc	.+18     	; 0x16e2 <getTimeToChar+0x54>
		strcat(s, "0");
    16d0:	f8 01       	movw	r30, r16
    16d2:	01 90       	ld	r0, Z+
    16d4:	00 20       	and	r0, r0
    16d6:	e9 f7       	brne	.-6      	; 0x16d2 <getTimeToChar+0x44>
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	80 e3       	ldi	r24, 0x30	; 48
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
	}
	strcat(s, Buff);
    16e2:	be 01       	movw	r22, r28
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	c8 01       	movw	r24, r16
    16ea:	0e 94 0b 24 	call	0x4816	; 0x4816 <strcat>
    16ee:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <_Time_ms>
    16f2:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <_Time_ms+0x1>
    16f6:	36 95       	lsr	r19
    16f8:	27 95       	ror	r18
    16fa:	36 95       	lsr	r19
    16fc:	27 95       	ror	r18
    16fe:	36 95       	lsr	r19
    1700:	27 95       	ror	r18
    1702:	a5 ec       	ldi	r26, 0xC5	; 197
    1704:	b0 e2       	ldi	r27, 0x20	; 32
    1706:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__umulhisi3>
    170a:	4a e0       	ldi	r20, 0x0A	; 10
    170c:	be 01       	movw	r22, r28
    170e:	6f 5f       	subi	r22, 0xFF	; 255
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	92 95       	swap	r25
    1714:	82 95       	swap	r24
    1716:	8f 70       	andi	r24, 0x0F	; 15
    1718:	89 27       	eor	r24, r25
    171a:	9f 70       	andi	r25, 0x0F	; 15
    171c:	89 27       	eor	r24, r25
    171e:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
	
	itoa((_Time_ms/1000), Buff, 10);
	strcat(s, ":");
    1722:	f8 01       	movw	r30, r16
    1724:	01 90       	ld	r0, Z+
    1726:	00 20       	and	r0, r0
    1728:	e9 f7       	brne	.-6      	; 0x1724 <getTimeToChar+0x96>
    172a:	31 97       	sbiw	r30, 0x01	; 1
    172c:	8a e3       	ldi	r24, 0x3A	; 58
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
	
	switch (TemplateOption){
    1734:	ea 94       	dec	r14
    1736:	ef 28       	or	r14, r15
    1738:	b1 f4       	brne	.+44     	; 0x1766 <getTimeToChar+0xd8>
		//only have the minutes:> 00:
		break;
		
		case 1:
		//include minutes and seconds:> 00:00
		if(_Time_ms/1000 < 10){
    173a:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <_Time_ms>
    173e:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <_Time_ms+0x1>
    1742:	80 31       	cpi	r24, 0x10	; 16
    1744:	97 42       	sbci	r25, 0x27	; 39
    1746:	48 f4       	brcc	.+18     	; 0x175a <getTimeToChar+0xcc>
			strcat(s, "0");
    1748:	f8 01       	movw	r30, r16
    174a:	01 90       	ld	r0, Z+
    174c:	00 20       	and	r0, r0
    174e:	e9 f7       	brne	.-6      	; 0x174a <getTimeToChar+0xbc>
    1750:	31 97       	sbiw	r30, 0x01	; 1
    1752:	80 e3       	ldi	r24, 0x30	; 48
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
		}
		strcat(s, Buff);
    175a:	be 01       	movw	r22, r28
    175c:	6f 5f       	subi	r22, 0xFF	; 255
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	c8 01       	movw	r24, r16
    1762:	0e 94 0b 24 	call	0x4816	; 0x4816 <strcat>
		break;
	}
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	08 95       	ret

0000177a <ADCinit>:


//Battery_____________________________________________________________________________________________________________________________________________
void ADCinit(void){
	ADMUX |= (1<<REFS0) | (1<<MUX1);
    177a:	ec e7       	ldi	r30, 0x7C	; 124
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	82 64       	ori	r24, 0x42	; 66
    1782:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    1784:	ea e7       	ldi	r30, 0x7A	; 122
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	87 6e       	ori	r24, 0xE7	; 231
    178c:	80 83       	st	Z, r24
    178e:	08 95       	ret

00001790 <updateBatterySens>:
	
}

int updateBatterySens(){
	static int ADCval = 0;
	ADCval = ADC;
    1790:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1794:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	//mimicking a battery voltage by a pot meter.

	return ADCval;
}
    1798:	08 95       	ret

0000179a <choiceAdder>:
		u8g2_SendBuffer(&u8g2);
		reDrawRequiredTime = 0;
	}
}

void choiceAdder(int8_t addValue){ //change the selection in the menu
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
	currentChoice[currentPage] += addValue;
    179e:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <currentPage>
    17a2:	02 2e       	mov	r0, r18
    17a4:	00 0c       	add	r0, r0
    17a6:	33 0b       	sbc	r19, r19
    17a8:	f9 01       	movw	r30, r18
    17aa:	e9 5e       	subi	r30, 0xE9	; 233
    17ac:	f8 4f       	sbci	r31, 0xF8	; 248
    17ae:	90 81       	ld	r25, Z
    17b0:	98 0f       	add	r25, r24
    17b2:	90 83       	st	Z, r25
	
	if(selectEnable == 1){
    17b4:	40 91 c1 07 	lds	r20, 0x07C1	; 0x8007c1 <selectEnable>
    17b8:	44 23       	and	r20, r20
    17ba:	09 f4       	brne	.+2      	; 0x17be <choiceAdder+0x24>
    17bc:	5a c0       	rjmp	.+180    	; 0x1872 <choiceAdder+0xd8>
		if (currentChoice[currentPage] > selections[currentPage]-1)
    17be:	f9 01       	movw	r30, r18
    17c0:	e0 55       	subi	r30, 0x50	; 80
    17c2:	f8 4f       	sbci	r31, 0xF8	; 248
    17c4:	e0 81       	ld	r30, Z
    17c6:	4e 2f       	mov	r20, r30
    17c8:	0e 2e       	mov	r0, r30
    17ca:	00 0c       	add	r0, r0
    17cc:	55 0b       	sbc	r21, r21
    17ce:	41 50       	subi	r20, 0x01	; 1
    17d0:	51 09       	sbc	r21, r1
    17d2:	69 2f       	mov	r22, r25
    17d4:	09 2e       	mov	r0, r25
    17d6:	00 0c       	add	r0, r0
    17d8:	77 0b       	sbc	r23, r23
    17da:	46 17       	cp	r20, r22
    17dc:	57 07       	cpc	r21, r23
    17de:	4c f4       	brge	.+18     	; 0x17f2 <choiceAdder+0x58>
		{
			currentChoice[currentPage] = 0;
    17e0:	f9 01       	movw	r30, r18
    17e2:	e9 5e       	subi	r30, 0xE9	; 233
    17e4:	f8 4f       	sbci	r31, 0xF8	; 248
    17e6:	10 82       	st	Z, r1
			Scroll[currentPage] = 0;
    17e8:	f9 01       	movw	r30, r18
    17ea:	e4 5d       	subi	r30, 0xD4	; 212
    17ec:	f8 4f       	sbci	r31, 0xF8	; 248
    17ee:	10 82       	st	Z, r1
    17f0:	11 c0       	rjmp	.+34     	; 0x1814 <choiceAdder+0x7a>
		}
		if (currentChoice[currentPage] < 0)
    17f2:	99 23       	and	r25, r25
    17f4:	7c f4       	brge	.+30     	; 0x1814 <choiceAdder+0x7a>
		{
			currentChoice[currentPage] = selections[currentPage]-1;
    17f6:	d9 01       	movw	r26, r18
    17f8:	a9 5e       	subi	r26, 0xE9	; 233
    17fa:	b8 4f       	sbci	r27, 0xF8	; 248
    17fc:	9f ef       	ldi	r25, 0xFF	; 255
    17fe:	9e 0f       	add	r25, r30
    1800:	9c 93       	st	X, r25
			Scroll[currentPage] = selectionsVis[currentPage] - selections[currentPage];
    1802:	d9 01       	movw	r26, r18
    1804:	a4 5d       	subi	r26, 0xD4	; 212
    1806:	b8 4f       	sbci	r27, 0xF8	; 248
    1808:	e9 01       	movw	r28, r18
    180a:	c2 56       	subi	r28, 0x62	; 98
    180c:	d8 4f       	sbci	r29, 0xF8	; 248
    180e:	98 81       	ld	r25, Y
    1810:	9e 1b       	sub	r25, r30
    1812:	9c 93       	st	X, r25
		}
		if(currentChoice[currentPage] >= selectionsVis[currentPage] - Scroll[currentPage]){
    1814:	f9 01       	movw	r30, r18
    1816:	e9 5e       	subi	r30, 0xE9	; 233
    1818:	f8 4f       	sbci	r31, 0xF8	; 248
    181a:	60 81       	ld	r22, Z
    181c:	06 2e       	mov	r0, r22
    181e:	00 0c       	add	r0, r0
    1820:	77 0b       	sbc	r23, r23
    1822:	f9 01       	movw	r30, r18
    1824:	e4 5d       	subi	r30, 0xD4	; 212
    1826:	f8 4f       	sbci	r31, 0xF8	; 248
    1828:	90 81       	ld	r25, Z
    182a:	f9 01       	movw	r30, r18
    182c:	e2 56       	subi	r30, 0x62	; 98
    182e:	f8 4f       	sbci	r31, 0xF8	; 248
    1830:	40 81       	ld	r20, Z
    1832:	04 2e       	mov	r0, r20
    1834:	00 0c       	add	r0, r0
    1836:	55 0b       	sbc	r21, r21
    1838:	49 1b       	sub	r20, r25
    183a:	51 09       	sbc	r21, r1
    183c:	97 fd       	sbrc	r25, 7
    183e:	53 95       	inc	r21
    1840:	64 17       	cp	r22, r20
    1842:	75 07       	cpc	r23, r21
    1844:	2c f0       	brlt	.+10     	; 0x1850 <choiceAdder+0xb6>
			Scroll[currentPage] += -addValue;
    1846:	f9 01       	movw	r30, r18
    1848:	e4 5d       	subi	r30, 0xD4	; 212
    184a:	f8 4f       	sbci	r31, 0xF8	; 248
    184c:	98 1b       	sub	r25, r24
    184e:	90 83       	st	Z, r25
		}
		if (currentChoice[currentPage] < -Scroll[currentPage]){
    1850:	f9 01       	movw	r30, r18
    1852:	e4 5d       	subi	r30, 0xD4	; 212
    1854:	f8 4f       	sbci	r31, 0xF8	; 248
    1856:	90 81       	ld	r25, Z
    1858:	e9 2f       	mov	r30, r25
    185a:	ff 27       	eor	r31, r31
    185c:	e1 95       	neg	r30
    185e:	0c f4       	brge	.+2      	; 0x1862 <choiceAdder+0xc8>
    1860:	f0 95       	com	r31
    1862:	6e 17       	cp	r22, r30
    1864:	7f 07       	cpc	r23, r31
    1866:	2c f4       	brge	.+10     	; 0x1872 <choiceAdder+0xd8>
			Scroll[currentPage] += -addValue;
    1868:	f9 01       	movw	r30, r18
    186a:	e4 5d       	subi	r30, 0xD4	; 212
    186c:	f8 4f       	sbci	r31, 0xF8	; 248
    186e:	98 1b       	sub	r25, r24
    1870:	90 83       	st	Z, r25
		}
	}
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <pageHistory>:
int8_t pageHistory(_Bool GetPrevpage, int pageNum){
	#define historyBuff 4
	static short history[historyBuff];//initialize first page in case you don't use the start up screen.
	static short i = -1;
	
	if (!GetPrevpage)
    1878:	81 11       	cpse	r24, r1
    187a:	15 c0       	rjmp	.+42     	; 0x18a6 <pageHistory+0x2e>
	{
		if (i < historyBuff-1){
    187c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9267>
    1880:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9267+0x1>
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	44 f5       	brge	.+80     	; 0x18da <pageHistory+0x62>
			history[++i] = pageNum;
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9267+0x1>
    1890:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9267>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	fc 01       	movw	r30, r24
    189a:	e9 51       	subi	r30, 0x19	; 25
    189c:	fd 4f       	sbci	r31, 0xFD	; 253
    189e:	71 83       	std	Z+1, r23	; 0x01
    18a0:	60 83       	st	Z, r22
		}
		return -1;
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	08 95       	ret
		}else{
		
		if (i <= 0)
    18a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9267>
    18aa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9267+0x1>
    18ae:	18 16       	cp	r1, r24
    18b0:	19 06       	cpc	r1, r25
    18b2:	3c f0       	brlt	.+14     	; 0x18c2 <pageHistory+0x4a>
		{
			return history[i];
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	fc 01       	movw	r30, r24
    18ba:	e9 51       	subi	r30, 0x19	; 25
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	80 81       	ld	r24, Z
    18c0:	08 95       	ret
			}else{
			return history[--i];
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9267+0x1>
    18c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9267>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	fc 01       	movw	r30, r24
    18d2:	e9 51       	subi	r30, 0x19	; 25
    18d4:	fd 4f       	sbci	r31, 0xFD	; 253
    18d6:	80 81       	ld	r24, Z
    18d8:	08 95       	ret
	if (!GetPrevpage)
	{
		if (i < historyBuff-1){
			history[++i] = pageNum;
		}
		return -1;
    18da:	8f ef       	ldi	r24, 0xFF	; 255
			return history[i];
			}else{
			return history[--i];
		}
	}
}
    18dc:	08 95       	ret

000018de <pageSel>:
}

void pageSel(void){
	//code for managing the pageNumbers
	#define firstPage 2
	if (selectEnable){
    18de:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <selectEnable>
    18e2:	88 23       	and	r24, r24
    18e4:	f9 f0       	breq	.+62     	; 0x1924 <pageSel+0x46>
		if (currentPage == MENUPAGE){
    18e6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <currentPage>
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	31 f4       	brne	.+12     	; 0x18fa <pageSel+0x1c>
			currentPage = currentChoice[MENUPAGE] + firstPage; //increment with two because the menu choice pages start at 2
    18ee:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <currentChoice+0x1>
    18f2:	8e 5f       	subi	r24, 0xFE	; 254
    18f4:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <currentPage>
    18f8:	0d c0       	rjmp	.+26     	; 0x1914 <pageSel+0x36>
			}else if(currentPage == 0){
    18fa:	81 11       	cpse	r24, r1
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <pageSel+0x28>
			currentPage = MENUPAGE;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <currentPage>
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <pageSel+0x36>
			}else{
			if(currentPage == 5){
    1906:	85 30       	cpi	r24, 0x05	; 5
    1908:	29 f4       	brne	.+10     	; 0x1914 <pageSel+0x36>
				currentPage = currentChoice[5]+ 1 + 5;
    190a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <currentChoice+0x5>
    190e:	8a 5f       	subi	r24, 0xFA	; 250
    1910:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <currentPage>
			}
			
		}
		pageHistory(0, currentPage);//update page history
    1914:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <currentPage>
    1918:	06 2e       	mov	r0, r22
    191a:	00 0c       	add	r0, r0
    191c:	77 0b       	sbc	r23, r23
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	0e 94 3c 0c 	call	0x1878	; 0x1878 <pageHistory>
    1924:	08 95       	ret

00001926 <__vector_5>:
}
//Buttons_____________________________________________________________________________________________________________________________________________

//the routine that gets run when the pin change interrupt gets triggered on portD for the enabled pins
ISR (PCINT2_vect)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
	if ( (BUTTON_PIN & (1<<DOWN)) == 0 )
    1934:	4c 99       	sbic	0x09, 4	; 9
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <__vector_5+0x20>
	keyPressed = DOWN;
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <keyPressed+0x1>
    1940:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <keyPressed>
    1944:	1a c0       	rjmp	.+52     	; 0x197a <__vector_5+0x54>
	else
	if ( (BUTTON_PIN & (1<<UP)) == 0 )
    1946:	4d 99       	sbic	0x09, 5	; 9
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <__vector_5+0x32>
	keyPressed = UP;
    194a:	85 e0       	ldi	r24, 0x05	; 5
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <keyPressed+0x1>
    1952:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <keyPressed>
    1956:	11 c0       	rjmp	.+34     	; 0x197a <__vector_5+0x54>
	else
	if ( (BUTTON_PIN & (1<<BACK)) == 0 )
    1958:	4e 99       	sbic	0x09, 6	; 9
    195a:	07 c0       	rjmp	.+14     	; 0x196a <__vector_5+0x44>
	keyPressed = BACK;
    195c:	86 e0       	ldi	r24, 0x06	; 6
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <keyPressed+0x1>
    1964:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <keyPressed>
    1968:	08 c0       	rjmp	.+16     	; 0x197a <__vector_5+0x54>
	else
	if ( (BUTTON_PIN & (1<<SELECT)) == 0 )
    196a:	4f 99       	sbic	0x09, 7	; 9
    196c:	06 c0       	rjmp	.+12     	; 0x197a <__vector_5+0x54>
	keyPressed = SELECT;
    196e:	87 e0       	ldi	r24, 0x07	; 7
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <keyPressed+0x1>
    1976:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <keyPressed>

}
    197a:	9f 91       	pop	r25
    197c:	8f 91       	pop	r24
    197e:	0f 90       	pop	r0
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	0f 90       	pop	r0
    1984:	1f 90       	pop	r1
    1986:	18 95       	reti

00001988 <but_init>:

void but_init(void){
	BUTTON_REG &= ~((1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK));     // set pinD 4 5 6 and 7 as an input
    1988:	8a b1       	in	r24, 0x0a	; 10
    198a:	8f 70       	andi	r24, 0x0F	; 15
    198c:	8a b9       	out	0x0a, r24	; 10
	// is now an input
	BUTTON_PORT |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);    // turn On the Pull-up on all those pins
    198e:	8b b1       	in	r24, 0x0b	; 11
    1990:	80 6f       	ori	r24, 0xF0	; 240
    1992:	8b b9       	out	0x0b, r24	; 11
	// is now an input with pull-up enabled

	if (BUTTON_PORT == PORTB){
    1994:	9b b1       	in	r25, 0x0b	; 11
    1996:	85 b1       	in	r24, 0x05	; 5
    1998:	98 13       	cpse	r25, r24
    199a:	0b c0       	rjmp	.+22     	; 0x19b2 <but_init+0x2a>
		//interrupt setup
		PCICR |= (1<<PCIE0);
    199c:	e8 e6       	ldi	r30, 0x68	; 104
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	81 60       	ori	r24, 0x01	; 1
    19a4:	80 83       	st	Z, r24
		PCMSK0 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    19a6:	eb e6       	ldi	r30, 0x6B	; 107
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 6f       	ori	r24, 0xF0	; 240
    19ae:	80 83       	st	Z, r24
    19b0:	1d c0       	rjmp	.+58     	; 0x19ec <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTC){
    19b2:	9b b1       	in	r25, 0x0b	; 11
    19b4:	88 b1       	in	r24, 0x08	; 8
    19b6:	98 13       	cpse	r25, r24
    19b8:	0b c0       	rjmp	.+22     	; 0x19d0 <but_init+0x48>
		//interrupt setup
		PCICR |= (1<<PCIE1);
    19ba:	e8 e6       	ldi	r30, 0x68	; 104
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	82 60       	ori	r24, 0x02	; 2
    19c2:	80 83       	st	Z, r24
		PCMSK1 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    19c4:	ec e6       	ldi	r30, 0x6C	; 108
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 6f       	ori	r24, 0xF0	; 240
    19cc:	80 83       	st	Z, r24
    19ce:	0e c0       	rjmp	.+28     	; 0x19ec <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTD){
    19d0:	9b b1       	in	r25, 0x0b	; 11
    19d2:	8b b1       	in	r24, 0x0b	; 11
    19d4:	98 13       	cpse	r25, r24
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <but_init+0x64>
		//interrupt setup
		PCICR |= (1<<PCIE2);
    19d8:	e8 e6       	ldi	r30, 0x68	; 104
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	84 60       	ori	r24, 0x04	; 4
    19e0:	80 83       	st	Z, r24
		PCMSK2 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    19e2:	ed e6       	ldi	r30, 0x6D	; 109
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	80 6f       	ori	r24, 0xF0	; 240
    19ea:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19ec:	2f ef       	ldi	r18, 0xFF	; 255
    19ee:	83 ec       	ldi	r24, 0xC3	; 195
    19f0:	99 e0       	ldi	r25, 0x09	; 9
    19f2:	21 50       	subi	r18, 0x01	; 1
    19f4:	80 40       	sbci	r24, 0x00	; 0
    19f6:	90 40       	sbci	r25, 0x00	; 0
    19f8:	e1 f7       	brne	.-8      	; 0x19f2 <but_init+0x6a>
    19fa:	00 c0       	rjmp	.+0      	; 0x19fc <but_init+0x74>
    19fc:	00 00       	nop
    19fe:	08 95       	ret

00001a00 <updateButtons>:

	_delay_ms(200);//to prevent accidental interrupt triggering/ dirty fix
}

void updateButtons(void){
	switch (keyPressed)
    1a00:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <keyPressed>
    1a04:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <keyPressed+0x1>
    1a08:	85 30       	cpi	r24, 0x05	; 5
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	19 f1       	breq	.+70     	; 0x1a54 <updateButtons+0x54>
    1a0e:	1c f4       	brge	.+6      	; 0x1a16 <updateButtons+0x16>
    1a10:	04 97       	sbiw	r24, 0x04	; 4
    1a12:	59 f1       	breq	.+86     	; 0x1a6a <updateButtons+0x6a>
    1a14:	08 95       	ret
    1a16:	86 30       	cpi	r24, 0x06	; 6
    1a18:	91 05       	cpc	r25, r1
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <updateButtons+0x22>
    1a1c:	07 97       	sbiw	r24, 0x07	; 7
    1a1e:	81 f0       	breq	.+32     	; 0x1a40 <updateButtons+0x40>
    1a20:	08 95       	ret
	{
		case BACK:
		currentPage = pageHistory(1, 0);
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	0e 94 3c 0c 	call	0x1878	; 0x1878 <pageHistory>
    1a2c:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <currentPage>
		reDrawRequired = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;//reset key pressed
    1a36:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <keyPressed+0x1>
    1a3a:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <keyPressed>
		break;
    1a3e:	08 95       	ret
		
		case SELECT:
		pageSel();
    1a40:	0e 94 6f 0c 	call	0x18de	; 0x18de <pageSel>
		reDrawRequired = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    1a4a:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <keyPressed+0x1>
    1a4e:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <keyPressed>
		break;
    1a52:	08 95       	ret
		
		case UP:
		choiceAdder(-1);
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	0e 94 cd 0b 	call	0x179a	; 0x179a <choiceAdder>
		reDrawRequired = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    1a60:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <keyPressed+0x1>
    1a64:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <keyPressed>
		break;
    1a68:	08 95       	ret
		
		case DOWN:
		choiceAdder(+1);
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	0e 94 cd 0b 	call	0x179a	; 0x179a <choiceAdder>
		reDrawRequired = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = 0;
    1a76:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <keyPressed+0x1>
    1a7a:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <keyPressed>
    1a7e:	08 95       	ret

00001a80 <MenuStyle0>:
}


//pages_______________________________________________________________________________________________________________________________________________

void MenuStyle0(void){
    1a80:	2f 92       	push	r2
    1a82:	3f 92       	push	r3
    1a84:	4f 92       	push	r4
    1a86:	5f 92       	push	r5
    1a88:	6f 92       	push	r6
    1a8a:	7f 92       	push	r7
    1a8c:	8f 92       	push	r8
    1a8e:	9f 92       	push	r9
    1a90:	af 92       	push	r10
    1a92:	bf 92       	push	r11
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	0f 93       	push	r16
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <MenuStyle0+0x22>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <MenuStyle0+0x24>
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
	//int yStat = (y+(height/2)+3);
	selectEnable = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <selectEnable>
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	f5 e2       	ldi	r31, 0x25	; 37
    1ab2:	cf 2e       	mov	r12, r31
    1ab4:	f1 e0       	ldi	r31, 0x01	; 1
    1ab6:	df 2e       	mov	r13, r31
    1ab8:	f0 2d       	mov	r31, r0
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1aba:	1c 82       	std	Y+4, r1	; 0x04
    1abc:	1b 82       	std	Y+3, r1	; 0x03
		if(i == currentChoice[currentPage]){
    1abe:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <currentPage>
    1ac2:	0e 2e       	mov	r0, r30
    1ac4:	00 0c       	add	r0, r0
    1ac6:	ff 0b       	sbc	r31, r31
    1ac8:	e9 5e       	subi	r30, 0xE9	; 233
    1aca:	f8 4f       	sbci	r31, 0xF8	; 248
    1acc:	80 81       	ld	r24, Z
    1ace:	08 2e       	mov	r0, r24
    1ad0:	00 0c       	add	r0, r0
    1ad2:	99 0b       	sbc	r25, r25
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	82 17       	cp	r24, r18
    1ada:	93 07       	cpc	r25, r19
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <MenuStyle0+0x60>
    1ade:	9d c0       	rjmp	.+314    	; 0x1c1a <MenuStyle0+0x19a>
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
			height = screenDiv - Margin;
    1ae0:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1ae4:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1ae8:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1aec:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			
			x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1af0:	b9 01       	movw	r22, r18
    1af2:	33 0f       	add	r19, r19
    1af4:	88 0b       	sbc	r24, r24
    1af6:	99 0b       	sbc	r25, r25
    1af8:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1afc:	a3 01       	movw	r20, r6
    1afe:	92 01       	movw	r18, r4
    1b00:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e1       	ldi	r20, 0x10	; 16
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1b10:	4b 01       	movw	r8, r22
    1b12:	5c 01       	movw	r10, r24
    1b14:	60 91 2d 07 	lds	r22, 0x072D	; 0x80072d <Scroll+0x1>
    1b18:	06 2e       	mov	r0, r22
    1b1a:	00 0c       	add	r0, r0
    1b1c:	77 0b       	sbc	r23, r23
    1b1e:	88 0b       	sbc	r24, r24
    1b20:	99 0b       	sbc	r25, r25
    1b22:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1b26:	a3 01       	movw	r20, r6
    1b28:	92 01       	movw	r18, r4
    1b2a:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1b2e:	9b 01       	movw	r18, r22
    1b30:	ac 01       	movw	r20, r24
    1b32:	c5 01       	movw	r24, r10
    1b34:	b4 01       	movw	r22, r8
    1b36:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1b3a:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    1b3e:	4b 01       	movw	r8, r22
    1b40:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    1b42:	69 30       	cpi	r22, 0x09	; 9
    1b44:	71 05       	cpc	r23, r1
    1b46:	0c f4       	brge	.+2      	; 0x1b4a <MenuStyle0+0xca>
    1b48:	d6 c0       	rjmp	.+428    	; 0x1cf6 <MenuStyle0+0x276>
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
		if(i == currentChoice[currentPage]){
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
    1b4a:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <currentFrame>
    1b4e:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <currentFrame+0x1>
    1b52:	2f 5f       	subi	r18, 0xFF	; 255
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	00 24       	eor	r0, r0
    1b58:	36 95       	lsr	r19
    1b5a:	27 95       	ror	r18
    1b5c:	07 94       	ror	r0
    1b5e:	36 95       	lsr	r19
    1b60:	27 95       	ror	r18
    1b62:	07 94       	ror	r0
    1b64:	32 2f       	mov	r19, r18
    1b66:	20 2d       	mov	r18, r0
    1b68:	ab ea       	ldi	r26, 0xAB	; 171
    1b6a:	ba ea       	ldi	r27, 0xAA	; 170
    1b6c:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__umulhisi3>
    1b70:	96 95       	lsr	r25
    1b72:	87 95       	ror	r24
    1b74:	1c 01       	movw	r2, r24
    1b76:	ef e3       	ldi	r30, 0x3F	; 63
    1b78:	2e 0e       	add	r2, r30
    1b7a:	31 1c       	adc	r3, r1
			height = screenDiv - Margin;
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e4       	ldi	r21, 0x40	; 64
    1b84:	c3 01       	movw	r24, r6
    1b86:	b2 01       	movw	r22, r4
    1b88:	0e 94 33 21 	call	0x4266	; 0x4266 <__subsf3>
    1b8c:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    1b90:	56 2e       	mov	r5, r22
    1b92:	47 2e       	mov	r4, r23
			
			x = (screenWidth/2) - width / 2;
    1b94:	31 01       	movw	r6, r2
    1b96:	33 20       	and	r3, r3
    1b98:	1c f4       	brge	.+6      	; 0x1ba0 <MenuStyle0+0x120>
    1b9a:	ff ef       	ldi	r31, 0xFF	; 255
    1b9c:	6f 1a       	sub	r6, r31
    1b9e:	7f 0a       	sbc	r7, r31
    1ba0:	75 94       	asr	r7
    1ba2:	67 94       	ror	r6
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	88 e3       	ldi	r24, 0x38	; 56
    1ba8:	97 e0       	ldi	r25, 0x07	; 7
    1baa:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    1bae:	20 e4       	ldi	r18, 0x40	; 64
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	26 19       	sub	r18, r6
    1bb4:	37 09       	sbc	r19, r7
    1bb6:	3a 83       	std	Y+2, r19	; 0x02
    1bb8:	29 83       	std	Y+1, r18	; 0x01
    1bba:	0f 2e       	mov	r0, r31
    1bbc:	f3 e0       	ldi	r31, 0x03	; 3
    1bbe:	ef 2e       	mov	r14, r31
    1bc0:	f0 2d       	mov	r31, r0
    1bc2:	05 2d       	mov	r16, r5
    1bc4:	22 2d       	mov	r18, r2
    1bc6:	48 2d       	mov	r20, r8
    1bc8:	69 81       	ldd	r22, Y+1	; 0x01
    1bca:	88 e3       	ldi	r24, 0x38	; 56
    1bcc:	97 e0       	ldi	r25, 0x07	; 7
    1bce:	0e 94 bf 14 	call	0x297e	; 0x297e <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	88 e3       	ldi	r24, 0x38	; 56
    1bd6:	97 e0       	ldi	r25, 0x07	; 7
    1bd8:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2 , y+(height/2)+3, menuStrings[i]);
    1bdc:	45 2d       	mov	r20, r5
    1bde:	54 2d       	mov	r21, r4
    1be0:	55 23       	and	r21, r21
    1be2:	14 f4       	brge	.+4      	; 0x1be8 <MenuStyle0+0x168>
    1be4:	4f 5f       	subi	r20, 0xFF	; 255
    1be6:	5f 4f       	sbci	r21, 0xFF	; 255
    1be8:	55 95       	asr	r21
    1bea:	47 95       	ror	r20
    1bec:	4d 5f       	subi	r20, 0xFD	; 253
    1bee:	74 2e       	mov	r7, r20
    1bf0:	78 0c       	add	r7, r8
    1bf2:	39 81       	ldd	r19, Y+1	; 0x01
    1bf4:	63 0e       	add	r6, r19
    1bf6:	f6 01       	movw	r30, r12
    1bf8:	40 80       	ld	r4, Z
    1bfa:	51 80       	ldd	r5, Z+1	; 0x01
    1bfc:	b2 01       	movw	r22, r4
    1bfe:	88 e3       	ldi	r24, 0x38	; 56
    1c00:	97 e0       	ldi	r25, 0x07	; 7
    1c02:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    1c06:	86 95       	lsr	r24
    1c08:	66 2d       	mov	r22, r6
    1c0a:	68 1b       	sub	r22, r24
    1c0c:	92 01       	movw	r18, r4
    1c0e:	47 2d       	mov	r20, r7
    1c10:	88 e3       	ldi	r24, 0x38	; 56
    1c12:	97 e0       	ldi	r25, 0x07	; 7
    1c14:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
    1c18:	6e c0       	rjmp	.+220    	; 0x1cf6 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    1c1a:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1c1e:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1c22:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1c26:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2e:	b9 01       	movw	r22, r18
    1c30:	33 0f       	add	r19, r19
    1c32:	88 0b       	sbc	r24, r24
    1c34:	99 0b       	sbc	r25, r25
    1c36:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1c3a:	a3 01       	movw	r20, r6
    1c3c:	92 01       	movw	r18, r4
    1c3e:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e1       	ldi	r20, 0x10	; 16
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1c4e:	4b 01       	movw	r8, r22
    1c50:	5c 01       	movw	r10, r24
    1c52:	60 91 2d 07 	lds	r22, 0x072D	; 0x80072d <Scroll+0x1>
    1c56:	06 2e       	mov	r0, r22
    1c58:	00 0c       	add	r0, r0
    1c5a:	77 0b       	sbc	r23, r23
    1c5c:	88 0b       	sbc	r24, r24
    1c5e:	99 0b       	sbc	r25, r25
    1c60:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1c64:	a3 01       	movw	r20, r6
    1c66:	92 01       	movw	r18, r4
    1c68:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1c6c:	9b 01       	movw	r18, r22
    1c6e:	ac 01       	movw	r20, r24
    1c70:	c5 01       	movw	r24, r10
    1c72:	b4 01       	movw	r22, r8
    1c74:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1c78:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    1c7c:	4b 01       	movw	r8, r22
    1c7e:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    1c80:	69 30       	cpi	r22, 0x09	; 9
    1c82:	71 05       	cpc	r23, r1
    1c84:	c4 f1       	brlt	.+112    	; 0x1cf6 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e4       	ldi	r21, 0x40	; 64
    1c8e:	c3 01       	movw	r24, r6
    1c90:	b2 01       	movw	r22, r4
    1c92:	0e 94 33 21 	call	0x4266	; 0x4266 <__subsf3>
    1c96:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    1c9a:	76 2e       	mov	r7, r22
    1c9c:	67 2e       	mov	r6, r23
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				//u8g2_SetDefaultForegroundColor(&u8g2);
				u8g2_SetDrawColor(&u8g2, 1);
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	88 e3       	ldi	r24, 0x38	; 56
    1ca2:	97 e0       	ldi	r25, 0x07	; 7
    1ca4:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    1ca8:	0f 2e       	mov	r0, r31
    1caa:	f3 e0       	ldi	r31, 0x03	; 3
    1cac:	ef 2e       	mov	r14, r31
    1cae:	f0 2d       	mov	r31, r0
    1cb0:	07 2d       	mov	r16, r7
    1cb2:	20 e4       	ldi	r18, 0x40	; 64
    1cb4:	48 2d       	mov	r20, r8
    1cb6:	60 e2       	ldi	r22, 0x20	; 32
    1cb8:	88 e3       	ldi	r24, 0x38	; 56
    1cba:	97 e0       	ldi	r25, 0x07	; 7
    1cbc:	0e 94 33 15 	call	0x2a66	; 0x2a66 <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+(height/2)+3, menuStrings[i]);
    1cc0:	87 2d       	mov	r24, r7
    1cc2:	96 2d       	mov	r25, r6
    1cc4:	99 23       	and	r25, r25
    1cc6:	0c f4       	brge	.+2      	; 0x1cca <MenuStyle0+0x24a>
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	95 95       	asr	r25
    1ccc:	87 95       	ror	r24
    1cce:	8d 5f       	subi	r24, 0xFD	; 253
    1cd0:	78 2e       	mov	r7, r24
    1cd2:	78 0c       	add	r7, r8
    1cd4:	f6 01       	movw	r30, r12
    1cd6:	40 80       	ld	r4, Z
    1cd8:	51 80       	ldd	r5, Z+1	; 0x01
    1cda:	b2 01       	movw	r22, r4
    1cdc:	88 e3       	ldi	r24, 0x38	; 56
    1cde:	97 e0       	ldi	r25, 0x07	; 7
    1ce0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    1ce4:	86 95       	lsr	r24
    1ce6:	60 e4       	ldi	r22, 0x40	; 64
    1ce8:	68 1b       	sub	r22, r24
    1cea:	92 01       	movw	r18, r4
    1cec:	47 2d       	mov	r20, r7
    1cee:	88 e3       	ldi	r24, 0x38	; 56
    1cf0:	97 e0       	ldi	r25, 0x07	; 7
    1cf2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1cf6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfa:	2f 5f       	subi	r18, 0xFF	; 255
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	3c 83       	std	Y+4, r19	; 0x04
    1d00:	2b 83       	std	Y+3, r18	; 0x03
    1d02:	32 e0       	ldi	r19, 0x02	; 2
    1d04:	c3 0e       	add	r12, r19
    1d06:	d1 1c       	adc	r13, r1
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	05 97       	sbiw	r24, 0x05	; 5
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <MenuStyle0+0x292>
    1d10:	d6 ce       	rjmp	.-596    	; 0x1abe <MenuStyle0+0x3e>
			}
		}
	}
	
	//stop drawing when the animation is done
	if (currentFrame++ >= framesNum)
    1d12:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <currentFrame>
    1d16:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <currentFrame+0x1>
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	30 f4       	brcc	.+12     	; 0x1d2c <MenuStyle0+0x2ac>
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <currentFrame+0x1>
    1d26:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <currentFrame>
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <MenuStyle0+0x2b8>
	{
		currentFrame = 0;
    1d2c:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <currentFrame+0x1>
    1d30:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <currentFrame>
		reDrawRequired = 0;
    1d34:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
	}
	

}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	0f 91       	pop	r16
    1d46:	ef 90       	pop	r14
    1d48:	df 90       	pop	r13
    1d4a:	cf 90       	pop	r12
    1d4c:	bf 90       	pop	r11
    1d4e:	af 90       	pop	r10
    1d50:	9f 90       	pop	r9
    1d52:	8f 90       	pop	r8
    1d54:	7f 90       	pop	r7
    1d56:	6f 90       	pop	r6
    1d58:	5f 90       	pop	r5
    1d5a:	4f 90       	pop	r4
    1d5c:	3f 90       	pop	r3
    1d5e:	2f 90       	pop	r2
    1d60:	08 95       	ret

00001d62 <MenuStyle1>:

void MenuStyle1(void){
    1d62:	2f 92       	push	r2
    1d64:	3f 92       	push	r3
    1d66:	4f 92       	push	r4
    1d68:	5f 92       	push	r5
    1d6a:	6f 92       	push	r6
    1d6c:	7f 92       	push	r7
    1d6e:	8f 92       	push	r8
    1d70:	9f 92       	push	r9
    1d72:	af 92       	push	r10
    1d74:	bf 92       	push	r11
    1d76:	cf 92       	push	r12
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <MenuStyle1+0x24>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <MenuStyle1+0x26>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <MenuStyle1+0x28>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <selectEnable>
	int width = screenWidth;
	int height = screenDiv;
    1d94:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    1d98:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    1d9c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    1da0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    1da4:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
	
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
    1da8:	4b 01       	movw	r8, r22
    1daa:	77 23       	and	r23, r23
    1dac:	1c f4       	brge	.+6      	; 0x1db4 <MenuStyle1+0x52>
    1dae:	2f ef       	ldi	r18, 0xFF	; 255
    1db0:	82 1a       	sub	r8, r18
    1db2:	92 0a       	sbc	r9, r18
    1db4:	95 94       	asr	r9
    1db6:	87 94       	ror	r8
    1db8:	33 e0       	ldi	r19, 0x03	; 3
    1dba:	83 0e       	add	r8, r19
    1dbc:	91 1c       	adc	r9, r1
	height = height - Margin;
    1dbe:	1b 01       	movw	r2, r22
    1dc0:	e2 e0       	ldi	r30, 0x02	; 2
    1dc2:	2e 1a       	sub	r2, r30
    1dc4:	31 08       	sbc	r3, r1
    1dc6:	0f 2e       	mov	r0, r31
    1dc8:	f5 e2       	ldi	r31, 0x25	; 37
    1dca:	cf 2e       	mov	r12, r31
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	df 2e       	mov	r13, r31
    1dd0:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1dd2:	1e 82       	std	Y+6, r1	; 0x06
    1dd4:	1d 82       	std	Y+5, r1	; 0x05
				u8g2_SetDrawColor(&u8g2, 0);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1dd6:	0f 2e       	mov	r0, r31
    1dd8:	fc e2       	ldi	r31, 0x2C	; 44
    1dda:	af 2e       	mov	r10, r31
    1ddc:	f7 e0       	ldi	r31, 0x07	; 7
    1dde:	bf 2e       	mov	r11, r31
    1de0:	f0 2d       	mov	r31, r0
			}*/
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1de2:	10 e4       	ldi	r17, 0x40	; 64
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
		if(currentChoice[currentPage] == i){
    1de4:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <currentPage>
    1de8:	0e 2e       	mov	r0, r30
    1dea:	00 0c       	add	r0, r0
    1dec:	ff 0b       	sbc	r31, r31
    1dee:	e9 5e       	subi	r30, 0xE9	; 233
    1df0:	f8 4f       	sbci	r31, 0xF8	; 248
    1df2:	80 81       	ld	r24, Z
    1df4:	08 2e       	mov	r0, r24
    1df6:	00 0c       	add	r0, r0
    1df8:	99 0b       	sbc	r25, r25
    1dfa:	2d 81       	ldd	r18, Y+5	; 0x05
    1dfc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dfe:	82 17       	cp	r24, r18
    1e00:	93 07       	cpc	r25, r19
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <MenuStyle1+0xa4>
    1e04:	62 c0       	rjmp	.+196    	; 0x1eca <MenuStyle1+0x168>
			//x and the y of the boxes
			//width = screenWidth;
			//height = screenDiv - Margin;
			
			// 				x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1e06:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1e0a:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1e0e:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1e12:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    1e16:	b9 01       	movw	r22, r18
    1e18:	33 0f       	add	r19, r19
    1e1a:	88 0b       	sbc	r24, r24
    1e1c:	99 0b       	sbc	r25, r25
    1e1e:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1e22:	a3 01       	movw	r20, r6
    1e24:	92 01       	movw	r18, r4
    1e26:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e1       	ldi	r20, 0x10	; 16
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1e36:	69 83       	std	Y+1, r22	; 0x01
    1e38:	7a 83       	std	Y+2, r23	; 0x02
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	f5 01       	movw	r30, r10
    1e40:	61 81       	ldd	r22, Z+1	; 0x01
    1e42:	06 2e       	mov	r0, r22
    1e44:	00 0c       	add	r0, r0
    1e46:	77 0b       	sbc	r23, r23
    1e48:	88 0b       	sbc	r24, r24
    1e4a:	99 0b       	sbc	r25, r25
    1e4c:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1e50:	a3 01       	movw	r20, r6
    1e52:	92 01       	movw	r18, r4
    1e54:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1e58:	9b 01       	movw	r18, r22
    1e5a:	ac 01       	movw	r20, r24
    1e5c:	69 81       	ldd	r22, Y+1	; 0x01
    1e5e:	7a 81       	ldd	r23, Y+2	; 0x02
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1e68:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    1e6c:	2b 01       	movw	r4, r22
    1e6e:	3c 01       	movw	r6, r24
			/*	if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			
			if (y >= TopMargin)
    1e70:	69 30       	cpi	r22, 0x09	; 9
    1e72:	71 05       	cpc	r23, r1
    1e74:	0c f4       	brge	.+2      	; 0x1e78 <MenuStyle1+0x116>
    1e76:	86 c0       	rjmp	.+268    	; 0x1f84 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	88 e3       	ldi	r24, 0x38	; 56
    1e7c:	97 e0       	ldi	r25, 0x07	; 7
    1e7e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    1e82:	0f 2e       	mov	r0, r31
    1e84:	f3 e0       	ldi	r31, 0x03	; 3
    1e86:	ef 2e       	mov	r14, r31
    1e88:	f0 2d       	mov	r31, r0
    1e8a:	02 2d       	mov	r16, r2
    1e8c:	20 e8       	ldi	r18, 0x80	; 128
    1e8e:	44 2d       	mov	r20, r4
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	88 e3       	ldi	r24, 0x38	; 56
    1e94:	97 e0       	ldi	r25, 0x07	; 7
    1e96:	0e 94 bf 14 	call	0x297e	; 0x297e <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	88 e3       	ldi	r24, 0x38	; 56
    1e9e:	97 e0       	ldi	r25, 0x07	; 7
    1ea0:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1ea4:	48 0c       	add	r4, r8
    1ea6:	f6 01       	movw	r30, r12
    1ea8:	60 80       	ld	r6, Z
    1eaa:	71 80       	ldd	r7, Z+1	; 0x01
    1eac:	b3 01       	movw	r22, r6
    1eae:	88 e3       	ldi	r24, 0x38	; 56
    1eb0:	97 e0       	ldi	r25, 0x07	; 7
    1eb2:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    1eb6:	86 95       	lsr	r24
    1eb8:	61 2f       	mov	r22, r17
    1eba:	68 1b       	sub	r22, r24
    1ebc:	93 01       	movw	r18, r6
    1ebe:	44 2d       	mov	r20, r4
    1ec0:	88 e3       	ldi	r24, 0x38	; 56
    1ec2:	97 e0       	ldi	r25, 0x07	; 7
    1ec4:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
    1ec8:	5d c0       	rjmp	.+186    	; 0x1f84 <MenuStyle1+0x222>
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1eca:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1ece:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1ed2:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1ed6:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    1eda:	2d 81       	ldd	r18, Y+5	; 0x05
    1edc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ede:	b9 01       	movw	r22, r18
    1ee0:	33 0f       	add	r19, r19
    1ee2:	88 0b       	sbc	r24, r24
    1ee4:	99 0b       	sbc	r25, r25
    1ee6:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1eea:	a3 01       	movw	r20, r6
    1eec:	92 01       	movw	r18, r4
    1eee:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e1       	ldi	r20, 0x10	; 16
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1efe:	69 83       	std	Y+1, r22	; 0x01
    1f00:	7a 83       	std	Y+2, r23	; 0x02
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	f5 01       	movw	r30, r10
    1f08:	61 81       	ldd	r22, Z+1	; 0x01
    1f0a:	06 2e       	mov	r0, r22
    1f0c:	00 0c       	add	r0, r0
    1f0e:	77 0b       	sbc	r23, r23
    1f10:	88 0b       	sbc	r24, r24
    1f12:	99 0b       	sbc	r25, r25
    1f14:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__floatsisf>
    1f18:	a3 01       	movw	r20, r6
    1f1a:	92 01       	movw	r18, r4
    1f1c:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__mulsf3>
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	69 81       	ldd	r22, Y+1	; 0x01
    1f26:	7a 81       	ldd	r23, Y+2	; 0x02
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	0e 94 34 21 	call	0x4268	; 0x4268 <__addsf3>
    1f30:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    1f34:	2b 01       	movw	r4, r22
    1f36:	3c 01       	movw	r6, r24
			/*
			if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			if (y >= TopMargin)
    1f38:	69 30       	cpi	r22, 0x09	; 9
    1f3a:	71 05       	cpc	r23, r1
    1f3c:	1c f1       	brlt	.+70     	; 0x1f84 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	88 e3       	ldi	r24, 0x38	; 56
    1f42:	97 e0       	ldi	r25, 0x07	; 7
    1f44:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	f3 e0       	ldi	r31, 0x03	; 3
    1f4c:	ef 2e       	mov	r14, r31
    1f4e:	f0 2d       	mov	r31, r0
    1f50:	02 2d       	mov	r16, r2
    1f52:	20 e8       	ldi	r18, 0x80	; 128
    1f54:	44 2d       	mov	r20, r4
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	88 e3       	ldi	r24, 0x38	; 56
    1f5a:	97 e0       	ldi	r25, 0x07	; 7
    1f5c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1f60:	48 0c       	add	r4, r8
    1f62:	f6 01       	movw	r30, r12
    1f64:	60 80       	ld	r6, Z
    1f66:	71 80       	ldd	r7, Z+1	; 0x01
    1f68:	b3 01       	movw	r22, r6
    1f6a:	88 e3       	ldi	r24, 0x38	; 56
    1f6c:	97 e0       	ldi	r25, 0x07	; 7
    1f6e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    1f72:	86 95       	lsr	r24
    1f74:	61 2f       	mov	r22, r17
    1f76:	68 1b       	sub	r22, r24
    1f78:	93 01       	movw	r18, r6
    1f7a:	44 2d       	mov	r20, r4
    1f7c:	88 e3       	ldi	r24, 0x38	; 56
    1f7e:	97 e0       	ldi	r25, 0x07	; 7
    1f80:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1f84:	2d 81       	ldd	r18, Y+5	; 0x05
    1f86:	3e 81       	ldd	r19, Y+6	; 0x06
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	3e 83       	std	Y+6, r19	; 0x06
    1f8e:	2d 83       	std	Y+5, r18	; 0x05
    1f90:	32 e0       	ldi	r19, 0x02	; 2
    1f92:	c3 0e       	add	r12, r19
    1f94:	d1 1c       	adc	r13, r1
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	05 97       	sbiw	r24, 0x05	; 5
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <MenuStyle1+0x23e>
    1f9e:	22 cf       	rjmp	.-444    	; 0x1de4 <MenuStyle1+0x82>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
		}
	}
	reDrawRequired = 0;
    1fa0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    1fa4:	26 96       	adiw	r28, 0x06	; 6
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	7f 90       	pop	r7
    1fc8:	6f 90       	pop	r6
    1fca:	5f 90       	pop	r5
    1fcc:	4f 90       	pop	r4
    1fce:	3f 90       	pop	r3
    1fd0:	2f 90       	pop	r2
    1fd2:	08 95       	ret

00001fd4 <StartPage>:

void StartPage(void){
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	28 97       	sbiw	r28, 0x08	; 8
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <selectEnable>
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
    1ff4:	88 e0       	ldi	r24, 0x08	; 8
    1ff6:	ee e2       	ldi	r30, 0x2E	; 46
    1ff8:	f1 e0       	ldi	r31, 0x01	; 1
    1ffa:	de 01       	movw	r26, r28
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	01 90       	ld	r0, Z+
    2000:	0d 92       	st	X+, r0
    2002:	8a 95       	dec	r24
    2004:	e1 f7       	brne	.-8      	; 0x1ffe <StartPage+0x2a>
    2006:	ce 01       	movw	r24, r28
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	7c 01       	movw	r14, r24
    200c:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i = 0; i < lineNum; i++)
	{
		u8g2_DrawStr(&u8g2, 0, textHeight * (i + 1), text[i]);
    200e:	f7 01       	movw	r30, r14
    2010:	21 91       	ld	r18, Z+
    2012:	31 91       	ld	r19, Z+
    2014:	7f 01       	movw	r14, r30
    2016:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    201a:	14 9f       	mul	r17, r20
    201c:	40 2d       	mov	r20, r0
    201e:	11 24       	eor	r1, r1
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	88 e3       	ldi	r24, 0x38	; 56
    2024:	97 e0       	ldi	r25, 0x07	; 7
    2026:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
    202a:	1f 5f       	subi	r17, 0xFF	; 255
void StartPage(void){
	selectEnable = 1;
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
	
	for (int i = 0; i < lineNum; i++)
    202c:	15 30       	cpi	r17, 0x05	; 5
    202e:	79 f7       	brne	.-34     	; 0x200e <StartPage+0x3a>
	char *text2[2] = {
		"Press \"Select\"",
		" to continue!"
	};
	
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[0]) / 2, realScreenHeight-textHeight, text2[0]);
    2030:	10 e4       	ldi	r17, 0x40	; 64
    2032:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <textHeight>
    2036:	f1 2e       	mov	r15, r17
    2038:	f8 1a       	sub	r15, r24
    203a:	66 e3       	ldi	r22, 0x36	; 54
    203c:	71 e0       	ldi	r23, 0x01	; 1
    203e:	88 e3       	ldi	r24, 0x38	; 56
    2040:	97 e0       	ldi	r25, 0x07	; 7
    2042:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    2046:	86 95       	lsr	r24
    2048:	61 2f       	mov	r22, r17
    204a:	68 1b       	sub	r22, r24
    204c:	26 e3       	ldi	r18, 0x36	; 54
    204e:	31 e0       	ldi	r19, 0x01	; 1
    2050:	4f 2d       	mov	r20, r15
    2052:	88 e3       	ldi	r24, 0x38	; 56
    2054:	97 e0       	ldi	r25, 0x07	; 7
    2056:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[1]) / 2, realScreenHeight, text2[1]);
    205a:	65 e4       	ldi	r22, 0x45	; 69
    205c:	71 e0       	ldi	r23, 0x01	; 1
    205e:	88 e3       	ldi	r24, 0x38	; 56
    2060:	97 e0       	ldi	r25, 0x07	; 7
    2062:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    2066:	86 95       	lsr	r24
    2068:	61 2f       	mov	r22, r17
    206a:	68 1b       	sub	r22, r24
    206c:	25 e4       	ldi	r18, 0x45	; 69
    206e:	31 e0       	ldi	r19, 0x01	; 1
    2070:	40 e4       	ldi	r20, 0x40	; 64
    2072:	88 e3       	ldi	r24, 0x38	; 56
    2074:	97 e0       	ldi	r25, 0x07	; 7
    2076:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	reDrawRequired = 0;
    207a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    207e:	28 96       	adiw	r28, 0x08	; 8
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	08 95       	ret

00002096 <nopage>:

void nopage(void){
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, "No content yet!");
    2096:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    209a:	47 5f       	subi	r20, 0xF7	; 247
    209c:	27 e9       	ldi	r18, 0x97	; 151
    209e:	31 e0       	ldi	r19, 0x01	; 1
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	88 e3       	ldi	r24, 0x38	; 56
    20a4:	97 e0       	ldi	r25, 0x07	; 7
    20a6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	selectEnable = 0;
    20aa:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <selectEnable>
	reDrawRequired = 0;
    20ae:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    20b2:	08 95       	ret

000020b4 <ScreenOverlay>:
}


void ScreenOverlay(void){
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	28 97       	sbiw	r28, 0x08	; 8
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
	int y2 = height2/2;
	
	int width3 = width1/3 - 2;
	int height3 = height1 - 4;
	
	u8g2_DrawFrame(&u8g2, x1, y1, width1, height1);
    20d0:	08 e0       	ldi	r16, 0x08	; 8
    20d2:	2f e0       	ldi	r18, 0x0F	; 15
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	69 e3       	ldi	r22, 0x39	; 57
    20d8:	88 e3       	ldi	r24, 0x38	; 56
    20da:	97 e0       	ldi	r25, 0x07	; 7
    20dc:	0e 94 7d 14 	call	0x28fa	; 0x28fa <u8g2_DrawFrame>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
    20e0:	04 e0       	ldi	r16, 0x04	; 4
    20e2:	23 e0       	ldi	r18, 0x03	; 3
    20e4:	42 e0       	ldi	r20, 0x02	; 2
    20e6:	67 e4       	ldi	r22, 0x47	; 71
    20e8:	88 e3       	ldi	r24, 0x38	; 56
    20ea:	97 e0       	ldi	r25, 0x07	; 7
    20ec:	0e 94 7d 14 	call	0x28fa	; 0x28fa <u8g2_DrawFrame>
	
	unsigned int ADCval = updateBatterySens();
    20f0:	0e 94 c8 0b 	call	0x1790	; 0x1790 <updateBatterySens>
	if (ADCval<=256){
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	21 e0       	ldi	r18, 0x01	; 1
    20f8:	92 07       	cpc	r25, r18
    20fa:	68 f4       	brcc	.+26     	; 0x2116 <ScreenOverlay+0x62>
		batteryBars = 0;
    20fc:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <batteryBars+0x1>
    2100:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <batteryBars>
    2104:	3d c0       	rjmp	.+122    	; 0x2180 <ScreenOverlay+0xcc>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    2106:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <batteryBars>
    210a:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <batteryBars+0x1>
    210e:	18 16       	cp	r1, r24
    2110:	19 06       	cpc	r1, r25
    2112:	04 f1       	brlt	.+64     	; 0x2154 <ScreenOverlay+0xa0>
    2114:	35 c0       	rjmp	.+106    	; 0x2180 <ScreenOverlay+0xcc>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
	
	unsigned int ADCval = updateBatterySens();
	if (ADCval<=256){
		batteryBars = 0;
		}else if (ADCval <= 512){
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	22 e0       	ldi	r18, 0x02	; 2
    211a:	92 07       	cpc	r25, r18
    211c:	38 f4       	brcc	.+14     	; 0x212c <ScreenOverlay+0x78>
		batteryBars = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <batteryBars+0x1>
    2126:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <batteryBars>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <ScreenOverlay+0xa0>
		}else if (ADCval <= 786){
    212c:	83 31       	cpi	r24, 0x13	; 19
    212e:	23 e0       	ldi	r18, 0x03	; 3
    2130:	92 07       	cpc	r25, r18
    2132:	38 f4       	brcc	.+14     	; 0x2142 <ScreenOverlay+0x8e>
		batteryBars = 2;
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <batteryBars+0x1>
    213c:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <batteryBars>
    2140:	09 c0       	rjmp	.+18     	; 0x2154 <ScreenOverlay+0xa0>
		}else if (ADCval <= 1024){
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	94 40       	sbci	r25, 0x04	; 4
    2146:	f8 f6       	brcc	.-66     	; 0x2106 <ScreenOverlay+0x52>
		batteryBars = 3;
    2148:	83 e0       	ldi	r24, 0x03	; 3
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <batteryBars+0x1>
    2150:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <batteryBars>
	selectEnable = 0;
	reDrawRequired = 0;
}


void ScreenOverlay(void){
    2154:	1b e3       	ldi	r17, 0x3B	; 59
    2156:	e1 2c       	mov	r14, r1
    2158:	f1 2c       	mov	r15, r1
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
	{
		u8g2_DrawBox(&u8g2, x1 + 2 + (width3+1) * i, y1 + 2, width3, height3);
    215a:	04 e0       	ldi	r16, 0x04	; 4
    215c:	23 e0       	ldi	r18, 0x03	; 3
    215e:	42 e0       	ldi	r20, 0x02	; 2
    2160:	61 2f       	mov	r22, r17
    2162:	88 e3       	ldi	r24, 0x38	; 56
    2164:	97 e0       	ldi	r25, 0x07	; 7
    2166:	0e 94 55 14 	call	0x28aa	; 0x28aa <u8g2_DrawBox>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    216a:	8f ef       	ldi	r24, 0xFF	; 255
    216c:	e8 1a       	sub	r14, r24
    216e:	f8 0a       	sbc	r15, r24
    2170:	1c 5f       	subi	r17, 0xFC	; 252
    2172:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <batteryBars>
    2176:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <batteryBars+0x1>
    217a:	e8 16       	cp	r14, r24
    217c:	f9 06       	cpc	r15, r25
    217e:	6c f3       	brlt	.-38     	; 0x215a <ScreenOverlay+0xa6>
	}
	
	
	
	//Mode:
	char modeTxt[7] = "Mode: ";
    2180:	87 e0       	ldi	r24, 0x07	; 7
    2182:	e7 ea       	ldi	r30, 0xA7	; 167
    2184:	f1 e0       	ldi	r31, 0x01	; 1
    2186:	de 01       	movw	r26, r28
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	01 90       	ld	r0, Z+
    218c:	0d 92       	st	X+, r0
    218e:	8a 95       	dec	r24
    2190:	e1 f7       	brne	.-8      	; 0x218a <ScreenOverlay+0xd6>
	char modeTxthold[1];
	itoa(*(settingVal+0), modeTxthold, 10);
    2192:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <settingVal>
    2196:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <settingVal+0x1>
    219a:	4a e0       	ldi	r20, 0x0A	; 10
    219c:	be 01       	movw	r22, r28
    219e:	68 5f       	subi	r22, 0xF8	; 248
    21a0:	7f 4f       	sbci	r23, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
	strcat(modeTxt, modeTxthold);
    21aa:	be 01       	movw	r22, r28
    21ac:	68 5f       	subi	r22, 0xF8	; 248
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	ce 01       	movw	r24, r28
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	0e 94 0b 24 	call	0x4816	; 0x4816 <strcat>
	
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    21b8:	67 e7       	ldi	r22, 0x77	; 119
    21ba:	78 e0       	ldi	r23, 0x08	; 8
    21bc:	88 e3       	ldi	r24, 0x38	; 56
    21be:	97 e0       	ldi	r25, 0x07	; 7
    21c0:	0e 94 b7 1b 	call	0x376e	; 0x376e <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, screenWidth - u8g2_GetStrWidth(&u8g2, modeTxt), textHeight-3, modeTxt);
    21c4:	10 91 9d 07 	lds	r17, 0x079D	; 0x80079d <textHeight>
    21c8:	13 50       	subi	r17, 0x03	; 3
    21ca:	be 01       	movw	r22, r28
    21cc:	6f 5f       	subi	r22, 0xFF	; 255
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255
    21d0:	88 e3       	ldi	r24, 0x38	; 56
    21d2:	97 e0       	ldi	r25, 0x07	; 7
    21d4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    21d8:	60 e8       	ldi	r22, 0x80	; 128
    21da:	68 1b       	sub	r22, r24
    21dc:	9e 01       	movw	r18, r28
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	41 2f       	mov	r20, r17
    21e4:	88 e3       	ldi	r24, 0x38	; 56
    21e6:	97 e0       	ldi	r25, 0x07	; 7
    21e8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	
	
	//Time
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    21ec:	67 e7       	ldi	r22, 0x77	; 119
    21ee:	78 e0       	ldi	r23, 0x08	; 8
    21f0:	88 e3       	ldi	r24, 0x38	; 56
    21f2:	97 e0       	ldi	r25, 0x07	; 7
    21f4:	0e 94 b7 1b 	call	0x376e	; 0x376e <u8g2_SetFont>
	static char timeTxt[7] = {0,0,0,0,0,0,0};
	getTimeToChar(timeTxt, 0);
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	80 ee       	ldi	r24, 0xE0	; 224
    21fe:	92 e0       	ldi	r25, 0x02	; 2
    2200:	0e 94 47 0b 	call	0x168e	; 0x168e <getTimeToChar>
	
	u8g2_DrawStr(&u8g2, 0, textHeight-3, timeTxt);
    2204:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    2208:	43 50       	subi	r20, 0x03	; 3
    220a:	20 ee       	ldi	r18, 0xE0	; 224
    220c:	32 e0       	ldi	r19, 0x02	; 2
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	88 e3       	ldi	r24, 0x38	; 56
    2212:	97 e0       	ldi	r25, 0x07	; 7
    2214:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	
	
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);//reset font to the main font.
    2218:	66 e9       	ldi	r22, 0x96	; 150
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	88 e3       	ldi	r24, 0x38	; 56
    221e:	97 e0       	ldi	r25, 0x07	; 7
    2220:	0e 94 b7 1b 	call	0x376e	; 0x376e <u8g2_SetFont>
}
    2224:	28 96       	adiw	r28, 0x08	; 8
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	08 95       	ret

0000223e <Page_2>:

void Page_2(void){
    223e:	7f 92       	push	r7
    2240:	8f 92       	push	r8
    2242:	9f 92       	push	r9
    2244:	af 92       	push	r10
    2246:	bf 92       	push	r11
    2248:	cf 92       	push	r12
    224a:	df 92       	push	r13
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	a8 97       	sbiw	r28, 0x28	; 40
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
	#define Lines 4
	#define digAmount 8
	
	#define startLine_Data 3
	selectEnable = 0;
    2268:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <selectEnable>
		"Direction:> ",
		"Distance:> ",
		"runTime:> "
	};
	
	int maxPrefixWidth = u8g2_GetStrWidth(&u8g2, text2[1]);
    226c:	6e ea       	ldi	r22, 0xAE	; 174
    226e:	71 e0       	ldi	r23, 0x01	; 1
    2270:	88 e3       	ldi	r24, 0x38	; 56
    2272:	97 e0       	ldi	r25, 0x07	; 7
    2274:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    2278:	78 2e       	mov	r7, r24
	//placeholders for the data
	char d1[digAmount];
	char d2[digAmount];
	char d3[digAmount];
	char d4[digAmount];
	char *Data[Lines] = { d1, d2, d3, d4};
    227a:	be 01       	movw	r22, r28
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	7a a3       	std	Y+34, r23	; 0x22
    2282:	69 a3       	std	Y+33, r22	; 0x21
    2284:	6e 01       	movw	r12, r28
    2286:	89 e0       	ldi	r24, 0x09	; 9
    2288:	c8 0e       	add	r12, r24
    228a:	d1 1c       	adc	r13, r1
    228c:	dc a2       	std	Y+36, r13	; 0x24
    228e:	cb a2       	std	Y+35, r12	; 0x23
    2290:	7e 01       	movw	r14, r28
    2292:	e1 e1       	ldi	r30, 0x11	; 17
    2294:	ee 0e       	add	r14, r30
    2296:	f1 1c       	adc	r15, r1
    2298:	fe a2       	std	Y+38, r15	; 0x26
    229a:	ed a2       	std	Y+37, r14	; 0x25
    229c:	8e 01       	movw	r16, r28
    229e:	07 5e       	subi	r16, 0xE7	; 231
    22a0:	1f 4f       	sbci	r17, 0xFF	; 255
    22a2:	18 a7       	std	Y+40, r17	; 0x28
    22a4:	0f a3       	std	Y+39, r16	; 0x27
		
	itoa(*speedHold, Data[0], 10);
    22a6:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <speedHold>
    22aa:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <speedHold+0x1>
    22ae:	4a e0       	ldi	r20, 0x0A	; 10
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
	itoa(*directionHold, Data[1], 10);
    22b8:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <directionHold>
    22bc:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <directionHold+0x1>
    22c0:	4a e0       	ldi	r20, 0x0A	; 10
    22c2:	b6 01       	movw	r22, r12
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
	itoa(*distanceHold, Data[2], 10);
    22cc:	e0 91 a8 07 	lds	r30, 0x07A8	; 0x8007a8 <distanceHold>
    22d0:	f0 91 a9 07 	lds	r31, 0x07A9	; 0x8007a9 <distanceHold+0x1>
    22d4:	4a e0       	ldi	r20, 0x0A	; 10
    22d6:	b7 01       	movw	r22, r14
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
	
	//little bit of code to make a typical digital watch look for the time String
	getTimeToChar(Data[3], 1);
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	c8 01       	movw	r24, r16
    22e6:	0e 94 47 0b 	call	0x168e	; 0x168e <getTimeToChar>
	
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    22ea:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <currentChoice+0x1>
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 0b       	sbc	r31, r31
    22f2:	eb 5d       	subi	r30, 0xDB	; 219
    22f4:	fe 4f       	sbci	r31, 0xFE	; 254
    22f6:	20 81       	ld	r18, Z
    22f8:	31 81       	ldd	r19, Z+1	; 0x01
    22fa:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    22fe:	47 5f       	subi	r20, 0xF7	; 247
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	88 e3       	ldi	r24, 0x38	; 56
    2304:	97 e0       	ldi	r25, 0x07	; 7
    2306:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
    230a:	5e 01       	movw	r10, r28
    230c:	f1 e2       	ldi	r31, 0x21	; 33
    230e:	af 0e       	add	r10, r31
    2310:	b1 1c       	adc	r11, r1
    2312:	0f 2e       	mov	r0, r31
    2314:	f1 e5       	ldi	r31, 0x51	; 81
    2316:	cf 2e       	mov	r12, r31
    2318:	f2 e0       	ldi	r31, 0x02	; 2
    231a:	df 2e       	mov	r13, r31
    231c:	f0 2d       	mov	r31, r0
    231e:	0f 2e       	mov	r0, r31
    2320:	f9 e4       	ldi	r31, 0x49	; 73
    2322:	ef 2e       	mov	r14, r31
    2324:	f2 e0       	ldi	r31, 0x02	; 2
    2326:	ff 2e       	mov	r15, r31
    2328:	f0 2d       	mov	r31, r0
    232a:	13 e0       	ldi	r17, 0x03	; 3

	for (int i = 0; i < Lines; i++)
	{
		int dataWidth = u8g2_GetStrWidth(&u8g2, Data[i]);
    232c:	f5 01       	movw	r30, r10
    232e:	81 90       	ld	r8, Z+
    2330:	91 90       	ld	r9, Z+
    2332:	5f 01       	movw	r10, r30
    2334:	b4 01       	movw	r22, r8
    2336:	88 e3       	ldi	r24, 0x38	; 56
    2338:	97 e0       	ldi	r25, 0x07	; 7
    233a:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    233e:	08 2f       	mov	r16, r24
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
    2340:	f6 01       	movw	r30, r12
    2342:	21 91       	ld	r18, Z+
    2344:	31 91       	ld	r19, Z+
    2346:	6f 01       	movw	r12, r30
    2348:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    234c:	14 9f       	mul	r17, r20
    234e:	40 2d       	mov	r20, r0
    2350:	11 24       	eor	r1, r1
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	88 e3       	ldi	r24, 0x38	; 56
    2356:	97 e0       	ldi	r25, 0x07	; 7
    2358:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
    235c:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    2360:	14 9f       	mul	r17, r20
    2362:	40 2d       	mov	r20, r0
    2364:	11 24       	eor	r1, r1
    2366:	94 01       	movw	r18, r8
    2368:	67 2d       	mov	r22, r7
    236a:	88 e3       	ldi	r24, 0x38	; 56
    236c:	97 e0       	ldi	r25, 0x07	; 7
    236e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
    2372:	f7 01       	movw	r30, r14
    2374:	21 91       	ld	r18, Z+
    2376:	31 91       	ld	r19, Z+
    2378:	7f 01       	movw	r14, r30
    237a:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    237e:	14 9f       	mul	r17, r20
    2380:	40 2d       	mov	r20, r0
    2382:	11 24       	eor	r1, r1
    2384:	60 91 16 07 	lds	r22, 0x0716	; 0x800716 <maxCharWidth>
    2388:	66 95       	lsr	r22
    238a:	67 0d       	add	r22, r7
    238c:	60 0f       	add	r22, r16
    238e:	88 e3       	ldi	r24, 0x38	; 56
    2390:	97 e0       	ldi	r25, 0x07	; 7
    2392:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
    2396:	1f 5f       	subi	r17, 0xFF	; 255
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);

	for (int i = 0; i < Lines; i++)
    2398:	17 30       	cpi	r17, 0x07	; 7
    239a:	41 f6       	brne	.-112    	; 0x232c <Page_2+0xee>
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
	}
	
	reDrawRequired = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    23a2:	a8 96       	adiw	r28, 0x28	; 40
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	df 90       	pop	r13
    23bc:	cf 90       	pop	r12
    23be:	bf 90       	pop	r11
    23c0:	af 90       	pop	r10
    23c2:	9f 90       	pop	r9
    23c4:	8f 90       	pop	r8
    23c6:	7f 90       	pop	r7
    23c8:	08 95       	ret

000023ca <Page_3>:

void Page_3(void){
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	28 97       	sbiw	r28, 0x08	; 8
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 0;
    23de:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <selectEnable>
	
	char angleHolder[8];
	
	itoa(*angleHold, angleHolder, 10);
    23e2:	e0 91 bf 07 	lds	r30, 0x07BF	; 0x8007bf <angleHold>
    23e6:	f0 91 c0 07 	lds	r31, 0x07C0	; 0x8007c0 <angleHold+0x1>
    23ea:	4a e0       	ldi	r20, 0x0A	; 10
    23ec:	be 01       	movw	r22, r28
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);//the titles needs to be the same as the titles of the choices in the menu
    23fa:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <currentChoice+0x1>
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 0b       	sbc	r31, r31
    2402:	eb 5d       	subi	r30, 0xDB	; 219
    2404:	fe 4f       	sbci	r31, 0xFE	; 254
    2406:	20 81       	ld	r18, Z
    2408:	31 81       	ldd	r19, Z+1	; 0x01
    240a:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    240e:	47 5f       	subi	r20, 0xF7	; 247
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	88 e3       	ldi	r24, 0x38	; 56
    2414:	97 e0       	ldi	r25, 0x07	; 7
    2416:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, textHeight*2 + TopMargin, angleHolder);
    241a:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    241e:	44 0f       	add	r20, r20
    2420:	47 5f       	subi	r20, 0xF7	; 247
    2422:	9e 01       	movw	r18, r28
    2424:	2f 5f       	subi	r18, 0xFF	; 255
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	88 e3       	ldi	r24, 0x38	; 56
    242c:	97 e0       	ldi	r25, 0x07	; 7
    242e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
	reDrawRequired = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    2438:	28 96       	adiw	r28, 0x08	; 8
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	08 95       	ret

0000244a <Page_4>:

void Page_4(void){
	selectEnable = 0;
    244a:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    244e:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <currentChoice+0x1>
    2452:	ee 0f       	add	r30, r30
    2454:	ff 0b       	sbc	r31, r31
    2456:	eb 5d       	subi	r30, 0xDB	; 219
    2458:	fe 4f       	sbci	r31, 0xFE	; 254
    245a:	20 81       	ld	r18, Z
    245c:	31 81       	ldd	r19, Z+1	; 0x01
    245e:	40 91 9d 07 	lds	r20, 0x079D	; 0x80079d <textHeight>
    2462:	47 5f       	subi	r20, 0xF7	; 247
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	88 e3       	ldi	r24, 0x38	; 56
    2468:	97 e0       	ldi	r25, 0x07	; 7
    246a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>

	reDrawRequired = 0;
    246e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    2472:	08 95       	ret

00002474 <Page_5>:
}

void Page_5(void){//settings
    2474:	2f 92       	push	r2
    2476:	3f 92       	push	r3
    2478:	4f 92       	push	r4
    247a:	5f 92       	push	r5
    247c:	6f 92       	push	r6
    247e:	7f 92       	push	r7
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	00 d0       	rcall	.+0      	; 0x249a <Page_5+0x26>
    249a:	00 d0       	rcall	.+0      	; 0x249c <Page_5+0x28>
    249c:	1f 92       	push	r1
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <selectEnable>
	#define selector "-> "
	

	int height = screenDiv;
	
	int x = selectorWidth;
    24a8:	10 91 16 07 	lds	r17, 0x0716	; 0x800716 <maxCharWidth>
    24ac:	81 2f       	mov	r24, r17
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9c 01       	movw	r18, r24
    24b2:	22 0f       	add	r18, r18
    24b4:	33 1f       	adc	r19, r19
    24b6:	12 2f       	mov	r17, r18
    24b8:	18 0f       	add	r17, r24
	int y;
	int yStat = (height/2)+3;
    24ba:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    24be:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    24c2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    24c6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    24ca:	0e 94 46 22 	call	0x448c	; 0x448c <__fixsfsi>
    24ce:	3b 01       	movw	r6, r22
    24d0:	77 23       	and	r23, r23
    24d2:	1c f4       	brge	.+6      	; 0x24da <Page_5+0x66>
    24d4:	2f ef       	ldi	r18, 0xFF	; 255
    24d6:	62 1a       	sub	r6, r18
    24d8:	72 0a       	sbc	r7, r18
    24da:	75 94       	asr	r7
    24dc:	67 94       	ror	r6
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	68 0e       	add	r6, r24
    24e2:	71 1c       	adc	r7, r1
	height = height - Margin;
	_Bool highlightChoice = 0;
	
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
    24e4:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <currentPage>
    24e8:	8a ef       	ldi	r24, 0xFA	; 250
    24ea:	8e 0f       	add	r24, r30
    24ec:	85 30       	cpi	r24, 0x05	; 5
    24ee:	30 f5       	brcc	.+76     	; 0x253c <Page_5+0xc8>
		selectEnable = 0;
    24f0:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <selectEnable>
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
    24f4:	a0 91 1c 07 	lds	r26, 0x071C	; 0x80071c <currentChoice+0x5>
    24f8:	aa 0f       	add	r26, r26
    24fa:	bb 0b       	sbc	r27, r27
    24fc:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <settingVal>
    2500:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <settingVal+0x1>
    2504:	a8 0f       	add	r26, r24
    2506:	b9 1f       	adc	r27, r25
    2508:	0e 2e       	mov	r0, r30
    250a:	00 0c       	add	r0, r0
    250c:	ff 0b       	sbc	r31, r31
    250e:	e9 5e       	subi	r30, 0xE9	; 233
    2510:	f8 4f       	sbci	r31, 0xF8	; 248
    2512:	20 81       	ld	r18, Z
    2514:	8d 91       	ld	r24, X+
    2516:	9c 91       	ld	r25, X
    2518:	11 97       	sbiw	r26, 0x01	; 1
    251a:	82 1b       	sub	r24, r18
    251c:	91 09       	sbc	r25, r1
    251e:	27 fd       	sbrc	r18, 7
    2520:	93 95       	inc	r25
    2522:	8d 93       	st	X+, r24
    2524:	9c 93       	st	X, r25
		currentChoice[currentPage] = 0;
    2526:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <currentPage>
    252a:	0e 2e       	mov	r0, r30
    252c:	00 0c       	add	r0, r0
    252e:	ff 0b       	sbc	r31, r31
    2530:	e9 5e       	subi	r30, 0xE9	; 233
    2532:	f8 4f       	sbci	r31, 0xF8	; 248
    2534:	10 82       	st	Z, r1
		highlightChoice = 1;
    2536:	e1 e0       	ldi	r30, 0x01	; 1
    2538:	ed 83       	std	Y+5, r30	; 0x05
    253a:	01 c0       	rjmp	.+2      	; 0x253e <Page_5+0xca>
	
	int x = selectorWidth;
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	_Bool highlightChoice = 0;
    253c:	1d 82       	std	Y+5, r1	; 0x05
    253e:	0f 2e       	mov	r0, r31
    2540:	fb e1       	ldi	r31, 0x1B	; 27
    2542:	af 2e       	mov	r10, r31
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	bf 2e       	mov	r11, r31
    2548:	f0 2d       	mov	r31, r0
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
		selectEnable = 0;
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
    254a:	81 2c       	mov	r8, r1
    254c:	91 2c       	mov	r9, r1
	}
	
	for (int i = 0; i < settings; i++){
    254e:	c1 2c       	mov	r12, r1
    2550:	d1 2c       	mov	r13, r1
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;

		if(currentChoice[5] == i){
    2552:	0f 2e       	mov	r0, r31
    2554:	f7 e1       	ldi	r31, 0x17	; 23
    2556:	4f 2e       	mov	r4, r31
    2558:	f7 e0       	ldi	r31, 0x07	; 7
    255a:	5f 2e       	mov	r5, r31
    255c:	f0 2d       	mov	r31, r0
			u8g2_SetDrawColor(&u8g2, 1);
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
			if(highlightChoice){
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    255e:	0f 2e       	mov	r0, r31
    2560:	fe ef       	ldi	r31, 0xFE	; 254
    2562:	3f 2e       	mov	r3, r31
    2564:	f0 2d       	mov	r31, r0
    2566:	31 0e       	add	r3, r17
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;
    2568:	20 91 9d 07 	lds	r18, 0x079D	; 0x80079d <textHeight>
    256c:	2c 9d       	mul	r18, r12
    256e:	c0 01       	movw	r24, r0
    2570:	2d 9d       	mul	r18, r13
    2572:	90 0d       	add	r25, r0
    2574:	11 24       	eor	r1, r1
    2576:	7c 01       	movw	r14, r24
    2578:	f9 e0       	ldi	r31, 0x09	; 9
    257a:	ef 0e       	add	r14, r31
    257c:	f1 1c       	adc	r15, r1

		if(currentChoice[5] == i){
    257e:	f2 01       	movw	r30, r4
    2580:	85 81       	ldd	r24, Z+5	; 0x05
    2582:	08 2e       	mov	r0, r24
    2584:	00 0c       	add	r0, r0
    2586:	99 0b       	sbc	r25, r25
    2588:	8c 15       	cp	r24, r12
    258a:	9d 05       	cpc	r25, r13
    258c:	09 f0       	breq	.+2      	; 0x2590 <Page_5+0x11c>
    258e:	6c c0       	rjmp	.+216    	; 0x2668 <Page_5+0x1f4>
			
			u8g2_SetDrawColor(&u8g2, 1);
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	88 e3       	ldi	r24, 0x38	; 56
    2594:	97 e0       	ldi	r25, 0x07	; 7
    2596:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
    259a:	2e 2c       	mov	r2, r14
    259c:	26 0c       	add	r2, r6
    259e:	2b eb       	ldi	r18, 0xBB	; 187
    25a0:	31 e0       	ldi	r19, 0x01	; 1
    25a2:	42 2d       	mov	r20, r2
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	88 e3       	ldi	r24, 0x38	; 56
    25a8:	97 e0       	ldi	r25, 0x07	; 7
    25aa:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
			if(highlightChoice){
    25ae:	fd 81       	ldd	r31, Y+5	; 0x05
    25b0:	ff 23       	and	r31, r31
    25b2:	89 f1       	breq	.+98     	; 0x2616 <Page_5+0x1a2>
				u8g2_SetDrawColor(&u8g2, 1);
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	88 e3       	ldi	r24, 0x38	; 56
    25b8:	97 e0       	ldi	r25, 0x07	; 7
    25ba:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    25be:	00 91 9d 07 	lds	r16, 0x079D	; 0x80079d <textHeight>
    25c2:	0f 5f       	subi	r16, 0xFF	; 255
    25c4:	f5 01       	movw	r30, r10
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	88 e3       	ldi	r24, 0x38	; 56
    25cc:	97 e0       	ldi	r25, 0x07	; 7
    25ce:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    25d2:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <textHeight>
    25d6:	42 2d       	mov	r20, r2
    25d8:	49 1b       	sub	r20, r25
    25da:	4f 5f       	subi	r20, 0xFF	; 255
    25dc:	68 94       	set
    25de:	ee 24       	eor	r14, r14
    25e0:	e1 f8       	bld	r14, 1
    25e2:	28 2f       	mov	r18, r24
    25e4:	63 2d       	mov	r22, r3
    25e6:	88 e3       	ldi	r24, 0x38	; 56
    25e8:	97 e0       	ldi	r25, 0x07	; 7
    25ea:	0e 94 bf 14 	call	0x297e	; 0x297e <u8g2_DrawRBox>
				u8g2_SetDrawColor(&u8g2, 0);
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	88 e3       	ldi	r24, 0x38	; 56
    25f2:	97 e0       	ldi	r25, 0x07	; 7
    25f4:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    25f8:	f5 01       	movw	r30, r10
    25fa:	20 81       	ld	r18, Z
    25fc:	31 81       	ldd	r19, Z+1	; 0x01
    25fe:	42 2d       	mov	r20, r2
    2600:	61 2f       	mov	r22, r17
    2602:	88 e3       	ldi	r24, 0x38	; 56
    2604:	97 e0       	ldi	r25, 0x07	; 7
    2606:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
				u8g2_SetDrawColor(&u8g2, 1);
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	88 e3       	ldi	r24, 0x38	; 56
    260e:	97 e0       	ldi	r25, 0x07	; 7
    2610:	0e 94 76 1c 	call	0x38ec	; 0x38ec <u8g2_SetDrawColor>
    2614:	09 c0       	rjmp	.+18     	; 0x2628 <Page_5+0x1b4>
				}else{
				
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2616:	f5 01       	movw	r30, r10
    2618:	20 81       	ld	r18, Z
    261a:	31 81       	ldd	r19, Z+1	; 0x01
    261c:	42 2d       	mov	r20, r2
    261e:	61 2f       	mov	r22, r17
    2620:	88 e3       	ldi	r24, 0x38	; 56
    2622:	97 e0       	ldi	r25, 0x07	; 7
    2624:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
			}
			
			
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    2628:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <settingVal>
    262c:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <settingVal+0x1>
    2630:	e8 0d       	add	r30, r8
    2632:	f9 1d       	adc	r31, r9
    2634:	4a e0       	ldi	r20, 0x0A	; 10
    2636:	be 01       	movw	r22, r28
    2638:	6f 5f       	subi	r22, 0xFF	; 255
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    2644:	f5 01       	movw	r30, r10
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	88 e3       	ldi	r24, 0x38	; 56
    264c:	97 e0       	ldi	r25, 0x07	; 7
    264e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    2652:	68 2f       	mov	r22, r24
    2654:	61 0f       	add	r22, r17
    2656:	9e 01       	movw	r18, r28
    2658:	2f 5f       	subi	r18, 0xFF	; 255
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	42 2d       	mov	r20, r2
    265e:	88 e3       	ldi	r24, 0x38	; 56
    2660:	97 e0       	ldi	r25, 0x07	; 7
    2662:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
    2666:	2a c0       	rjmp	.+84     	; 0x26bc <Page_5+0x248>
			}else{
			u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2668:	0e 2d       	mov	r16, r14
    266a:	06 0d       	add	r16, r6
    266c:	f5 01       	movw	r30, r10
    266e:	20 81       	ld	r18, Z
    2670:	31 81       	ldd	r19, Z+1	; 0x01
    2672:	40 2f       	mov	r20, r16
    2674:	61 2f       	mov	r22, r17
    2676:	88 e3       	ldi	r24, 0x38	; 56
    2678:	97 e0       	ldi	r25, 0x07	; 7
    267a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    267e:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <settingVal>
    2682:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <settingVal+0x1>
    2686:	e8 0d       	add	r30, r8
    2688:	f9 1d       	adc	r31, r9
    268a:	4a e0       	ldi	r20, 0x0A	; 10
    268c:	be 01       	movw	r22, r28
    268e:	6f 5f       	subi	r22, 0xFF	; 255
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	0e 94 16 24 	call	0x482c	; 0x482c <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    269a:	f5 01       	movw	r30, r10
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	88 e3       	ldi	r24, 0x38	; 56
    26a2:	97 e0       	ldi	r25, 0x07	; 7
    26a4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <u8g2_GetStrWidth>
    26a8:	61 2f       	mov	r22, r17
    26aa:	68 0f       	add	r22, r24
    26ac:	9e 01       	movw	r18, r28
    26ae:	2f 5f       	subi	r18, 0xFF	; 255
    26b0:	3f 4f       	sbci	r19, 0xFF	; 255
    26b2:	40 2f       	mov	r20, r16
    26b4:	88 e3       	ldi	r24, 0x38	; 56
    26b6:	97 e0       	ldi	r25, 0x07	; 7
    26b8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <u8g2_DrawStr>
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
    26bc:	ff ef       	ldi	r31, 0xFF	; 255
    26be:	cf 1a       	sub	r12, r31
    26c0:	df 0a       	sbc	r13, r31
    26c2:	22 e0       	ldi	r18, 0x02	; 2
    26c4:	82 0e       	add	r8, r18
    26c6:	91 1c       	adc	r9, r1
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	a8 0e       	add	r10, r24
    26cc:	b1 1c       	adc	r11, r1
    26ce:	e5 e0       	ldi	r30, 0x05	; 5
    26d0:	ce 16       	cp	r12, r30
    26d2:	d1 04       	cpc	r13, r1
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <Page_5+0x264>
    26d6:	48 cf       	rjmp	.-368    	; 0x2568 <Page_5+0xf4>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
		}
	}


	reDrawRequired = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	0f 91       	pop	r16
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	df 90       	pop	r13
    26f6:	cf 90       	pop	r12
    26f8:	bf 90       	pop	r11
    26fa:	af 90       	pop	r10
    26fc:	9f 90       	pop	r9
    26fe:	8f 90       	pop	r8
    2700:	7f 90       	pop	r7
    2702:	6f 90       	pop	r6
    2704:	5f 90       	pop	r5
    2706:	4f 90       	pop	r4
    2708:	3f 90       	pop	r3
    270a:	2f 90       	pop	r2
    270c:	08 95       	ret

0000270e <draw>:
		}
	}
}

void draw(void){
	switch(currentPage){
    270e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <currentPage>
    2712:	82 30       	cpi	r24, 0x02	; 2
    2714:	e9 f0       	breq	.+58     	; 0x2750 <draw+0x42>
    2716:	2c f4       	brge	.+10     	; 0x2722 <draw+0x14>
    2718:	88 23       	and	r24, r24
    271a:	41 f0       	breq	.+16     	; 0x272c <draw+0x1e>
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	49 f0       	breq	.+18     	; 0x2732 <draw+0x24>
    2720:	26 c0       	rjmp	.+76     	; 0x276e <draw+0x60>
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	d1 f0       	breq	.+52     	; 0x275a <draw+0x4c>
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	e9 f0       	breq	.+58     	; 0x2764 <draw+0x56>
    272a:	21 c0       	rjmp	.+66     	; 0x276e <draw+0x60>
		case 0:// page 0 start
		StartPage();
    272c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <StartPage>
		break;//end page0
    2730:	08 95       	ret
		
		case 1://page 1 menu
		ScreenOverlay();//remove this if you don't want the overlay
    2732:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <ScreenOverlay>
		
		switch (MenuAnim)//for switching between menu animations
    2736:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MenuAnim>
    273a:	88 23       	and	r24, r24
    273c:	19 f0       	breq	.+6      	; 0x2744 <draw+0x36>
    273e:	81 30       	cpi	r24, 0x01	; 1
    2740:	21 f0       	breq	.+8      	; 0x274a <draw+0x3c>
    2742:	08 95       	ret
		{
			case 0://animation 0
			MenuStyle0();
    2744:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <MenuStyle0>
			break;//end animation 0
    2748:	08 95       	ret
			
			case 1://animation 1
			MenuStyle1();
    274a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <MenuStyle1>
			break;//end animation 1
    274e:	08 95       	ret
		}
		break;//end page 1
		
		case 2:
		ScreenOverlay();
    2750:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <ScreenOverlay>
		Page_2();
    2754:	0e 94 1f 11 	call	0x223e	; 0x223e <Page_2>
		break;
    2758:	08 95       	ret

		case 3:
		ScreenOverlay();
    275a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <ScreenOverlay>
		Page_3();
    275e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Page_3>
		break;
    2762:	08 95       	ret
		
		case 4:
		ScreenOverlay();
    2764:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <ScreenOverlay>
		Page_4();
    2768:	0e 94 25 12 	call	0x244a	; 0x244a <Page_4>
		break;
    276c:	08 95       	ret
		
		default:
		if (currentPage >= SETTINGPAGE && currentPage <= SETTINGPAGE + settings){
    276e:	85 50       	subi	r24, 0x05	; 5
    2770:	86 30       	cpi	r24, 0x06	; 6
    2772:	28 f4       	brcc	.+10     	; 0x277e <draw+0x70>
			ScreenOverlay();
    2774:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <ScreenOverlay>
			Page_5();
    2778:	0e 94 3a 12 	call	0x2474	; 0x2474 <Page_5>
    277c:	08 95       	ret
			}else{
			nopage();
    277e:	0e 94 4b 10 	call	0x2096	; 0x2096 <nopage>
    2782:	08 95       	ret

00002784 <screenRoutine>:

	return ADCval;
}
//--------------------------------------
void screenRoutine(void){
	updateButtons();
    2784:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <updateButtons>
	updateBatterySens();
    2788:	0e 94 c8 0b 	call	0x1790	; 0x1790 <updateBatterySens>
	if (reDrawRequired || reDrawRequiredTime)
    278c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <reDrawRequired>
    2790:	81 11       	cpse	r24, r1
    2792:	04 c0       	rjmp	.+8      	; 0x279c <screenRoutine+0x18>
    2794:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <reDrawRequiredTime>
    2798:	88 23       	and	r24, r24
    279a:	79 f0       	breq	.+30     	; 0x27ba <screenRoutine+0x36>
	{
		reDrawRequired = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		u8g2_ClearBuffer(&u8g2);
    27a2:	88 e3       	ldi	r24, 0x38	; 56
    27a4:	97 e0       	ldi	r25, 0x07	; 7
    27a6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <u8g2_ClearBuffer>
		draw();
    27aa:	0e 94 87 13 	call	0x270e	; 0x270e <draw>
		u8g2_SendBuffer(&u8g2);
    27ae:	88 e3       	ldi	r24, 0x38	; 56
    27b0:	97 e0       	ldi	r25, 0x07	; 7
    27b2:	0e 94 10 16 	call	0x2c20	; 0x2c20 <u8g2_SendBuffer>
		reDrawRequiredTime = 0;
    27b6:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <reDrawRequiredTime>
    27ba:	08 95       	ret

000027bc <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    27bc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    27c0:	88 e4       	ldi	r24, 0x48	; 72
    27c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    27c6:	08 95       	ret

000027c8 <i2c_start_wait>:
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	ec eb       	ldi	r30, 0xBC	; 188
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	44 ea       	ldi	r20, 0xA4	; 164
    27d2:	a9 eb       	ldi	r26, 0xB9	; 185
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	cb eb       	ldi	r28, 0xBB	; 187
    27d8:	d0 e0       	ldi	r29, 0x00	; 0
    27da:	54 e8       	ldi	r21, 0x84	; 132
    27dc:	64 e9       	ldi	r22, 0x94	; 148
    27de:	40 83       	st	Z, r20
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	90 81       	ld	r25, Z
    27e6:	99 23       	and	r25, r25
    27e8:	34 f0       	brlt	.+12     	; 0x27f6 <i2c_start_wait+0x2e>
    27ea:	2f 5f       	subi	r18, 0xFF	; 255
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	21 15       	cp	r18, r1
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	39 07       	cpc	r19, r25
    27f4:	b9 f7       	brne	.-18     	; 0x27e4 <i2c_start_wait+0x1c>
    27f6:	9c 91       	ld	r25, X
    27f8:	98 7f       	andi	r25, 0xF8	; 248
    27fa:	98 30       	cpi	r25, 0x08	; 8
    27fc:	11 f0       	breq	.+4      	; 0x2802 <i2c_start_wait+0x3a>
    27fe:	90 31       	cpi	r25, 0x10	; 16
    2800:	71 f7       	brne	.-36     	; 0x27de <i2c_start_wait+0x16>
    2802:	88 83       	st	Y, r24
    2804:	50 83       	st	Z, r21
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	90 81       	ld	r25, Z
    280c:	99 23       	and	r25, r25
    280e:	34 f0       	brlt	.+12     	; 0x281c <i2c_start_wait+0x54>
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	21 15       	cp	r18, r1
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	39 07       	cpc	r19, r25
    281a:	b9 f7       	brne	.-18     	; 0x280a <i2c_start_wait+0x42>
    281c:	9c 91       	ld	r25, X
    281e:	98 7f       	andi	r25, 0xF8	; 248
    2820:	90 32       	cpi	r25, 0x20	; 32
    2822:	11 f0       	breq	.+4      	; 0x2828 <i2c_start_wait+0x60>
    2824:	98 35       	cpi	r25, 0x58	; 88
    2826:	69 f4       	brne	.+26     	; 0x2842 <i2c_start_wait+0x7a>
    2828:	60 83       	st	Z, r22
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	90 81       	ld	r25, Z
    2830:	94 ff       	sbrs	r25, 4
    2832:	d5 cf       	rjmp	.-86     	; 0x27de <i2c_start_wait+0x16>
    2834:	2f 5f       	subi	r18, 0xFF	; 255
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	21 15       	cp	r18, r1
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	39 07       	cpc	r19, r25
    283e:	b9 f7       	brne	.-18     	; 0x282e <i2c_start_wait+0x66>
    2840:	ce cf       	rjmp	.-100    	; 0x27de <i2c_start_wait+0x16>
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2848:	84 e9       	ldi	r24, 0x94	; 148
    284a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	ec eb       	ldi	r30, 0xBC	; 188
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	20 81       	ld	r18, Z
    2858:	24 ff       	sbrs	r18, 4
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <i2c_stop+0x1e>
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	81 15       	cp	r24, r1
    2860:	21 e0       	ldi	r18, 0x01	; 1
    2862:	92 07       	cpc	r25, r18
    2864:	c1 f7       	brne	.-16     	; 0x2856 <i2c_stop+0xe>
    2866:	08 95       	ret

00002868 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2868:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
    286c:	84 e8       	ldi	r24, 0x84	; 132
    286e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    2872:	8f ef       	ldi	r24, 0xFF	; 255
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 e0       	ldi	r26, 0x00	; 0
    2878:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    287a:	ec eb       	ldi	r30, 0xBC	; 188
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	20 81       	ld	r18, Z
    2880:	22 23       	and	r18, r18
    2882:	2c f0       	brlt	.+10     	; 0x288e <i2c_write+0x26>
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	a1 09       	sbc	r26, r1
    2888:	b1 09       	sbc	r27, r1
    288a:	c8 f7       	brcc	.-14     	; 0x287e <i2c_write+0x16>
    288c:	04 c0       	rjmp	.+8      	; 0x2896 <i2c_write+0x2e>
	if(i2c_timer == 0)
    288e:	89 2b       	or	r24, r25
    2890:	8a 2b       	or	r24, r26
    2892:	8b 2b       	or	r24, r27
    2894:	41 f0       	breq	.+16     	; 0x28a6 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2896:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    289a:	98 7f       	andi	r25, 0xF8	; 248
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	98 32       	cpi	r25, 0x28	; 40
    28a0:	19 f4       	brne	.+6      	; 0x28a8 <i2c_write+0x40>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	08 95       	ret
    28a6:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    28a8:	08 95       	ret

000028aa <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	7c 01       	movw	r14, r24
    28ba:	16 2f       	mov	r17, r22
    28bc:	c4 2f       	mov	r28, r20
    28be:	d2 2e       	mov	r13, r18
    28c0:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    28c2:	04 2f       	mov	r16, r20
    28c4:	0d 0f       	add	r16, r29
    28c6:	26 2f       	mov	r18, r22
    28c8:	2d 0d       	add	r18, r13
    28ca:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    28ce:	88 23       	and	r24, r24
    28d0:	61 f0       	breq	.+24     	; 0x28ea <u8g2_DrawBox+0x40>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    28d2:	dd 23       	and	r29, r29
    28d4:	51 f0       	breq	.+20     	; 0x28ea <u8g2_DrawBox+0x40>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    28d6:	00 e0       	ldi	r16, 0x00	; 0
    28d8:	2d 2d       	mov	r18, r13
    28da:	4c 2f       	mov	r20, r28
    28dc:	61 2f       	mov	r22, r17
    28de:	c7 01       	movw	r24, r14
    28e0:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
    y++;    
    28e4:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
    28e6:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    28e8:	b1 f7       	brne	.-20     	; 0x28d6 <u8g2_DrawBox+0x2c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	ff 90       	pop	r15
    28f4:	ef 90       	pop	r14
    28f6:	df 90       	pop	r13
    28f8:	08 95       	ret

000028fa <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	7c 01       	movw	r14, r24
    290c:	d6 2f       	mov	r29, r22
    290e:	c4 2f       	mov	r28, r20
    2910:	d2 2e       	mov	r13, r18
    2912:	10 2f       	mov	r17, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2914:	c6 2e       	mov	r12, r22
    2916:	c2 0e       	add	r12, r18
    2918:	04 2f       	mov	r16, r20
    291a:	01 0f       	add	r16, r17
    291c:	2c 2d       	mov	r18, r12
    291e:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    2922:	88 23       	and	r24, r24
    2924:	19 f1       	breq	.+70     	; 0x296c <u8g2_DrawFrame+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    2926:	00 e0       	ldi	r16, 0x00	; 0
    2928:	2d 2d       	mov	r18, r13
    292a:	4c 2f       	mov	r20, r28
    292c:	6d 2f       	mov	r22, r29
    292e:	c7 01       	movw	r24, r14
    2930:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
  if (h >= 2) {
    2934:	12 30       	cpi	r17, 0x02	; 2
    2936:	d0 f0       	brcs	.+52     	; 0x296c <u8g2_DrawFrame+0x72>
    h-=2;
    2938:	12 50       	subi	r17, 0x02	; 2
    y++;
    293a:	cf 5f       	subi	r28, 0xFF	; 255
    if (h > 0) {
    293c:	11 23       	and	r17, r17
    293e:	79 f0       	breq	.+30     	; 0x295e <u8g2_DrawFrame+0x64>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    2940:	01 e0       	ldi	r16, 0x01	; 1
    2942:	21 2f       	mov	r18, r17
    2944:	4c 2f       	mov	r20, r28
    2946:	6d 2f       	mov	r22, r29
    2948:	c7 01       	movw	r24, r14
    294a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    294e:	6f ef       	ldi	r22, 0xFF	; 255
    2950:	6c 0d       	add	r22, r12
    2952:	21 2f       	mov	r18, r17
    2954:	4c 2f       	mov	r20, r28
    2956:	c7 01       	movw	r24, r14
    2958:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
      y+=h;
    295c:	c1 0f       	add	r28, r17
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    295e:	00 e0       	ldi	r16, 0x00	; 0
    2960:	2d 2d       	mov	r18, r13
    2962:	4c 2f       	mov	r20, r28
    2964:	6d 2f       	mov	r22, r29
    2966:	c7 01       	movw	r24, r14
    2968:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
  }
}
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	df 90       	pop	r13
    297a:	cf 90       	pop	r12
    297c:	08 95       	ret

0000297e <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    297e:	7f 92       	push	r7
    2980:	8f 92       	push	r8
    2982:	9f 92       	push	r9
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	6c 01       	movw	r12, r24
    299a:	16 2f       	mov	r17, r22
    299c:	f4 2e       	mov	r15, r20
    299e:	b2 2e       	mov	r11, r18
    29a0:	c0 2f       	mov	r28, r16
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    29a2:	a4 2e       	mov	r10, r20
    29a4:	a0 0e       	add	r10, r16
    29a6:	d6 2f       	mov	r29, r22
    29a8:	d2 0f       	add	r29, r18
    29aa:	0a 2d       	mov	r16, r10
    29ac:	2d 2f       	mov	r18, r29
    29ae:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    29b2:	88 23       	and	r24, r24
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <u8g2_DrawRBox+0x3a>
    29b6:	49 c0       	rjmp	.+146    	; 0x2a4a <u8g2_DrawRBox+0xcc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    29b8:	81 2e       	mov	r8, r17
    29ba:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    29bc:	9f 2c       	mov	r9, r15
    29be:	9e 0c       	add	r9, r14
    29c0:	8e 2d       	mov	r24, r14
    29c2:	80 95       	com	r24
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
    29c4:	d8 0f       	add	r29, r24
  
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;
    29c6:	a8 0e       	add	r10, r24

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    29c8:	02 e0       	ldi	r16, 0x02	; 2
    29ca:	2e 2d       	mov	r18, r14
    29cc:	49 2d       	mov	r20, r9
    29ce:	68 2d       	mov	r22, r8
    29d0:	c6 01       	movw	r24, r12
    29d2:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    29d6:	01 e0       	ldi	r16, 0x01	; 1
    29d8:	2e 2d       	mov	r18, r14
    29da:	49 2d       	mov	r20, r9
    29dc:	6d 2f       	mov	r22, r29
    29de:	c6 01       	movw	r24, r12
    29e0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    29e4:	04 e0       	ldi	r16, 0x04	; 4
    29e6:	2e 2d       	mov	r18, r14
    29e8:	4a 2d       	mov	r20, r10
    29ea:	68 2d       	mov	r22, r8
    29ec:	c6 01       	movw	r24, r12
    29ee:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    29f2:	08 e0       	ldi	r16, 0x08	; 8
    29f4:	2e 2d       	mov	r18, r14
    29f6:	4a 2d       	mov	r20, r10
    29f8:	6d 2f       	mov	r22, r29
    29fa:	c6 01       	movw	r24, r12
    29fc:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    2a00:	2b 2d       	mov	r18, r11
    2a02:	2e 19       	sub	r18, r14
    ww -= r;
    2a04:	2e 19       	sub	r18, r14
    xl++;
    yu++;
    
    if ( ww >= 3 )
    2a06:	23 30       	cpi	r18, 0x03	; 3
    2a08:	98 f0       	brcs	.+38     	; 0x2a30 <u8g2_DrawRBox+0xb2>
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
    2a0a:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    2a0c:	de ef       	ldi	r29, 0xFE	; 254
    2a0e:	d2 0f       	add	r29, r18
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
    2a10:	77 24       	eor	r7, r7
    2a12:	73 94       	inc	r7
    2a14:	7e 0c       	add	r7, r14
    2a16:	07 2d       	mov	r16, r7
    2a18:	2d 2f       	mov	r18, r29
    2a1a:	4f 2d       	mov	r20, r15
    2a1c:	68 2d       	mov	r22, r8
    2a1e:	c6 01       	movw	r24, r12
    2a20:	0e 94 55 14 	call	0x28aa	; 0x28aa <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
    2a24:	2d 2f       	mov	r18, r29
    2a26:	4a 2d       	mov	r20, r10
    2a28:	68 2d       	mov	r22, r8
    2a2a:	c6 01       	movw	r24, r12
    2a2c:	0e 94 55 14 	call	0x28aa	; 0x28aa <u8g2_DrawBox>
    }
    
    hh = h;
    hh -= r;
    2a30:	ce 19       	sub	r28, r14
    hh -= r;
    2a32:	ce 19       	sub	r28, r14
    //h--;
    if ( hh >= 3 )
    2a34:	c3 30       	cpi	r28, 0x03	; 3
    2a36:	48 f0       	brcs	.+18     	; 0x2a4a <u8g2_DrawRBox+0xcc>
    {
      hh -= 2;
      u8g2_DrawBox(u8g2, x, yu, w, hh);
    2a38:	0e ef       	ldi	r16, 0xFE	; 254
    2a3a:	0c 0f       	add	r16, r28
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	49 0d       	add	r20, r9
    2a40:	2b 2d       	mov	r18, r11
    2a42:	61 2f       	mov	r22, r17
    2a44:	c6 01       	movw	r24, r12
    2a46:	0e 94 55 14 	call	0x28aa	; 0x28aa <u8g2_DrawBox>
    }
  }
}
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
    2a5a:	bf 90       	pop	r11
    2a5c:	af 90       	pop	r10
    2a5e:	9f 90       	pop	r9
    2a60:	8f 90       	pop	r8
    2a62:	7f 90       	pop	r7
    2a64:	08 95       	ret

00002a66 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    2a66:	8f 92       	push	r8
    2a68:	9f 92       	push	r9
    2a6a:	af 92       	push	r10
    2a6c:	bf 92       	push	r11
    2a6e:	cf 92       	push	r12
    2a70:	df 92       	push	r13
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	ec 01       	movw	r28, r24
    2a80:	16 2f       	mov	r17, r22
    2a82:	f4 2e       	mov	r15, r20
    2a84:	c2 2e       	mov	r12, r18
    2a86:	b0 2e       	mov	r11, r16
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2a88:	a4 2e       	mov	r10, r20
    2a8a:	a0 0e       	add	r10, r16
    2a8c:	d6 2e       	mov	r13, r22
    2a8e:	d2 0e       	add	r13, r18
    2a90:	0a 2d       	mov	r16, r10
    2a92:	2d 2d       	mov	r18, r13
    2a94:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    2a98:	88 23       	and	r24, r24
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <u8g2_DrawRFrame+0x38>
    2a9c:	52 c0       	rjmp	.+164    	; 0x2b42 <u8g2_DrawRFrame+0xdc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    2a9e:	81 2e       	mov	r8, r17
    2aa0:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    2aa2:	9f 2c       	mov	r9, r15
    2aa4:	9e 0c       	add	r9, r14
    2aa6:	8e 2d       	mov	r24, r14
    2aa8:	80 95       	com	r24
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
    2aaa:	d8 0e       	add	r13, r24
    
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;
    2aac:	a8 0e       	add	r10, r24

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    2aae:	02 e0       	ldi	r16, 0x02	; 2
    2ab0:	2e 2d       	mov	r18, r14
    2ab2:	49 2d       	mov	r20, r9
    2ab4:	68 2d       	mov	r22, r8
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    2abc:	01 e0       	ldi	r16, 0x01	; 1
    2abe:	2e 2d       	mov	r18, r14
    2ac0:	49 2d       	mov	r20, r9
    2ac2:	6d 2d       	mov	r22, r13
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    2aca:	04 e0       	ldi	r16, 0x04	; 4
    2acc:	2e 2d       	mov	r18, r14
    2ace:	4a 2d       	mov	r20, r10
    2ad0:	68 2d       	mov	r22, r8
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    2ad8:	08 e0       	ldi	r16, 0x08	; 8
    2ada:	2e 2d       	mov	r18, r14
    2adc:	4a 2d       	mov	r20, r10
    2ade:	6d 2d       	mov	r22, r13
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <u8g2_DrawCircle>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    2ae6:	2c 2d       	mov	r18, r12
    2ae8:	2e 19       	sub	r18, r14
    ww -= r;
    2aea:	2e 19       	sub	r18, r14
    hh = h;
    hh -= r;
    2aec:	0b 2d       	mov	r16, r11
    2aee:	0e 19       	sub	r16, r14
    hh -= r;
    2af0:	0e 19       	sub	r16, r14
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
    2af2:	23 30       	cpi	r18, 0x03	; 3
    2af4:	a0 f0       	brcs	.+40     	; 0x2b1e <u8g2_DrawRFrame+0xb8>
    ww -= r;
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    2af6:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    2af8:	0f 2e       	mov	r0, r31
    2afa:	fe ef       	ldi	r31, 0xFE	; 254
    2afc:	ef 2e       	mov	r14, r31
    2afe:	f0 2d       	mov	r31, r0
    2b00:	e2 0e       	add	r14, r18
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
    2b02:	2e 2d       	mov	r18, r14
    2b04:	4f 2d       	mov	r20, r15
    2b06:	68 2d       	mov	r22, r8
    2b08:	ce 01       	movw	r24, r28
    2b0a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    2b0e:	4f ef       	ldi	r20, 0xFF	; 255
    2b10:	4b 0d       	add	r20, r11
    2b12:	4f 0d       	add	r20, r15
    2b14:	2e 2d       	mov	r18, r14
    2b16:	68 2d       	mov	r22, r8
    2b18:	ce 01       	movw	r24, r28
    2b1a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
    2b1e:	03 30       	cpi	r16, 0x03	; 3
    2b20:	80 f0       	brcs	.+32     	; 0x2b42 <u8g2_DrawRFrame+0xdc>
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
    2b22:	93 94       	inc	r9
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
    2b24:	02 50       	subi	r16, 0x02	; 2
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
    2b26:	20 2f       	mov	r18, r16
    2b28:	49 2d       	mov	r20, r9
    2b2a:	61 2f       	mov	r22, r17
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
    2b32:	6f ef       	ldi	r22, 0xFF	; 255
    2b34:	6c 0d       	add	r22, r12
    2b36:	61 0f       	add	r22, r17
    2b38:	20 2f       	mov	r18, r16
    2b3a:	49 2d       	mov	r20, r9
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    }
  }
}
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	1f 91       	pop	r17
    2b48:	0f 91       	pop	r16
    2b4a:	ff 90       	pop	r15
    2b4c:	ef 90       	pop	r14
    2b4e:	df 90       	pop	r13
    2b50:	cf 90       	pop	r12
    2b52:	bf 90       	pop	r11
    2b54:	af 90       	pop	r10
    2b56:	9f 90       	pop	r9
    2b58:	8f 90       	pop	r8
    2b5a:	08 95       	ret

00002b5c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    2b5c:	af 92       	push	r10
    2b5e:	bf 92       	push	r11
    2b60:	cf 92       	push	r12
    2b62:	df 92       	push	r13
    2b64:	ef 92       	push	r14
    2b66:	ff 92       	push	r15
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    2b72:	dc 01       	movw	r26, r24
    2b74:	94 96       	adiw	r26, 0x24	; 36
    2b76:	bc 90       	ld	r11, X
    2b78:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    2b7a:	95 96       	adiw	r26, 0x25	; 37
    2b7c:	dc 91       	ld	r29, X
    2b7e:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    2b80:	ed 91       	ld	r30, X+
    2b82:	fc 91       	ld	r31, X
    2b84:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    2b86:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    2b88:	c1 2c       	mov	r12, r1
    2b8a:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2b8c:	d7 01       	movw	r26, r14
    2b8e:	ed 91       	ld	r30, X+
    2b90:	fc 91       	ld	r31, X
    2b92:	11 97       	sbiw	r26, 0x01	; 1
    2b94:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    2b96:	92 96       	adiw	r26, 0x22	; 34
    2b98:	0d 91       	ld	r16, X+
    2b9a:	1c 91       	ld	r17, X
    2b9c:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    2b9e:	42 2f       	mov	r20, r18
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	44 0f       	add	r20, r20
    2ba4:	55 1f       	adc	r21, r21
    2ba6:	44 0f       	add	r20, r20
    2ba8:	55 1f       	adc	r21, r21
    2baa:	44 0f       	add	r20, r20
    2bac:	55 1f       	adc	r21, r21
    2bae:	4c 9d       	mul	r20, r12
    2bb0:	c0 01       	movw	r24, r0
    2bb2:	4d 9d       	mul	r20, r13
    2bb4:	90 0d       	add	r25, r0
    2bb6:	5c 9d       	mul	r21, r12
    2bb8:	90 0d       	add	r25, r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	08 0f       	add	r16, r24
    2bbe:	19 1f       	adc	r17, r25
    2bc0:	4c 2f       	mov	r20, r28
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	c7 01       	movw	r24, r14
    2bc6:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    2bca:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    2bcc:	8c 2f       	mov	r24, r28
    2bce:	8d 1b       	sub	r24, r29
    2bd0:	8b 15       	cp	r24, r11
    2bd2:	28 f4       	brcc	.+10     	; 0x2bde <u8g2_send_buffer+0x82>
    2bd4:	bf ef       	ldi	r27, 0xFF	; 255
    2bd6:	cb 1a       	sub	r12, r27
    2bd8:	db 0a       	sbc	r13, r27
    2bda:	ca 15       	cp	r28, r10
    2bdc:	b8 f2       	brcs	.-82     	; 0x2b8c <u8g2_send_buffer+0x30>
}
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	ff 90       	pop	r15
    2be8:	ef 90       	pop	r14
    2bea:	df 90       	pop	r13
    2bec:	cf 90       	pop	r12
    2bee:	bf 90       	pop	r11
    2bf0:	af 90       	pop	r10
    2bf2:	08 95       	ret

00002bf4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    2bf4:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2bf6:	a0 81       	ld	r26, Z
    2bf8:	b1 81       	ldd	r27, Z+1	; 0x01
    2bfa:	50 96       	adiw	r26, 0x10	; 16
    2bfc:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    2bfe:	44 a1       	ldd	r20, Z+36	; 0x24
    2c00:	94 9f       	mul	r25, r20
    2c02:	a0 01       	movw	r20, r0
    2c04:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    2c06:	44 0f       	add	r20, r20
    2c08:	55 1f       	adc	r21, r21
    2c0a:	44 0f       	add	r20, r20
    2c0c:	55 1f       	adc	r21, r21
    2c0e:	44 0f       	add	r20, r20
    2c10:	55 1f       	adc	r21, r21
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	82 a1       	ldd	r24, Z+34	; 0x22
    2c18:	93 a1       	ldd	r25, Z+35	; 0x23
    2c1a:	0e 94 04 24 	call	0x4808	; 0x4808 <memset>
    2c1e:	08 95       	ret

00002c20 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    2c26:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	0e 94 34 20 	call	0x4068	; 0x4068 <u8x8_RefreshDisplay>
}
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	08 95       	ret

00002c36 <u8g2_draw_circle_section>:
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
    }
}
    2c36:	cf 92       	push	r12
    2c38:	df 92       	push	r13
    2c3a:	ef 92       	push	r14
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	6c 01       	movw	r12, r24
    2c46:	d6 2f       	mov	r29, r22
    2c48:	14 2f       	mov	r17, r20
    2c4a:	c2 2f       	mov	r28, r18
    2c4c:	e0 fe       	sbrs	r14, 0
    2c4e:	0d c0       	rjmp	.+26     	; 0x2c6a <u8g2_draw_circle_section+0x34>
    2c50:	40 2f       	mov	r20, r16
    2c52:	41 1b       	sub	r20, r17
    2c54:	62 2f       	mov	r22, r18
    2c56:	6d 0f       	add	r22, r29
    2c58:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2c5c:	40 2f       	mov	r20, r16
    2c5e:	4d 1b       	sub	r20, r29
    2c60:	61 2f       	mov	r22, r17
    2c62:	6c 0f       	add	r22, r28
    2c64:	c6 01       	movw	r24, r12
    2c66:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2c6a:	e1 fe       	sbrs	r14, 1
    2c6c:	0e c0       	rjmp	.+28     	; 0x2c8a <u8g2_draw_circle_section+0x54>
    2c6e:	40 2f       	mov	r20, r16
    2c70:	41 1b       	sub	r20, r17
    2c72:	6c 2f       	mov	r22, r28
    2c74:	6d 1b       	sub	r22, r29
    2c76:	c6 01       	movw	r24, r12
    2c78:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2c7c:	40 2f       	mov	r20, r16
    2c7e:	4d 1b       	sub	r20, r29
    2c80:	6c 2f       	mov	r22, r28
    2c82:	61 1b       	sub	r22, r17
    2c84:	c6 01       	movw	r24, r12
    2c86:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2c8a:	e3 fe       	sbrs	r14, 3
    2c8c:	0e c0       	rjmp	.+28     	; 0x2caa <u8g2_draw_circle_section+0x74>
    2c8e:	40 2f       	mov	r20, r16
    2c90:	41 0f       	add	r20, r17
    2c92:	6c 2f       	mov	r22, r28
    2c94:	6d 0f       	add	r22, r29
    2c96:	c6 01       	movw	r24, r12
    2c98:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2c9c:	40 2f       	mov	r20, r16
    2c9e:	4d 0f       	add	r20, r29
    2ca0:	61 2f       	mov	r22, r17
    2ca2:	6c 0f       	add	r22, r28
    2ca4:	c6 01       	movw	r24, r12
    2ca6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2caa:	e2 fe       	sbrs	r14, 2
    2cac:	0e c0       	rjmp	.+28     	; 0x2cca <u8g2_draw_circle_section+0x94>
    2cae:	40 2f       	mov	r20, r16
    2cb0:	41 0f       	add	r20, r17
    2cb2:	6c 2f       	mov	r22, r28
    2cb4:	6d 1b       	sub	r22, r29
    2cb6:	c6 01       	movw	r24, r12
    2cb8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2cbc:	40 2f       	mov	r20, r16
    2cbe:	4d 0f       	add	r20, r29
    2cc0:	6c 2f       	mov	r22, r28
    2cc2:	61 1b       	sub	r22, r17
    2cc4:	c6 01       	movw	r24, r12
    2cc6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <u8g2_DrawPixel>
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
    2cd8:	08 95       	ret

00002cda <u8g2_draw_disc_section>:
    2cda:	cf 92       	push	r12
    2cdc:	df 92       	push	r13
    2cde:	ef 92       	push	r14
    2ce0:	0f 93       	push	r16
    2ce2:	1f 93       	push	r17
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	6c 01       	movw	r12, r24
    2cea:	c6 2f       	mov	r28, r22
    2cec:	14 2f       	mov	r17, r20
    2cee:	d2 2f       	mov	r29, r18
    2cf0:	e0 fe       	sbrs	r14, 0
    2cf2:	11 c0       	rjmp	.+34     	; 0x2d16 <u8g2_draw_disc_section+0x3c>
    2cf4:	21 e0       	ldi	r18, 0x01	; 1
    2cf6:	24 0f       	add	r18, r20
    2cf8:	40 2f       	mov	r20, r16
    2cfa:	41 1b       	sub	r20, r17
    2cfc:	6d 2f       	mov	r22, r29
    2cfe:	6c 0f       	add	r22, r28
    2d00:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d04:	21 e0       	ldi	r18, 0x01	; 1
    2d06:	2c 0f       	add	r18, r28
    2d08:	40 2f       	mov	r20, r16
    2d0a:	4c 1b       	sub	r20, r28
    2d0c:	61 2f       	mov	r22, r17
    2d0e:	6d 0f       	add	r22, r29
    2d10:	c6 01       	movw	r24, r12
    2d12:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d16:	e1 fe       	sbrs	r14, 1
    2d18:	12 c0       	rjmp	.+36     	; 0x2d3e <u8g2_draw_disc_section+0x64>
    2d1a:	21 e0       	ldi	r18, 0x01	; 1
    2d1c:	21 0f       	add	r18, r17
    2d1e:	40 2f       	mov	r20, r16
    2d20:	41 1b       	sub	r20, r17
    2d22:	6d 2f       	mov	r22, r29
    2d24:	6c 1b       	sub	r22, r28
    2d26:	c6 01       	movw	r24, r12
    2d28:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d2c:	21 e0       	ldi	r18, 0x01	; 1
    2d2e:	2c 0f       	add	r18, r28
    2d30:	40 2f       	mov	r20, r16
    2d32:	4c 1b       	sub	r20, r28
    2d34:	6d 2f       	mov	r22, r29
    2d36:	61 1b       	sub	r22, r17
    2d38:	c6 01       	movw	r24, r12
    2d3a:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d3e:	e3 fe       	sbrs	r14, 3
    2d40:	10 c0       	rjmp	.+32     	; 0x2d62 <u8g2_draw_disc_section+0x88>
    2d42:	21 e0       	ldi	r18, 0x01	; 1
    2d44:	21 0f       	add	r18, r17
    2d46:	40 2f       	mov	r20, r16
    2d48:	6d 2f       	mov	r22, r29
    2d4a:	6c 0f       	add	r22, r28
    2d4c:	c6 01       	movw	r24, r12
    2d4e:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d52:	21 e0       	ldi	r18, 0x01	; 1
    2d54:	2c 0f       	add	r18, r28
    2d56:	40 2f       	mov	r20, r16
    2d58:	61 2f       	mov	r22, r17
    2d5a:	6d 0f       	add	r22, r29
    2d5c:	c6 01       	movw	r24, r12
    2d5e:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d62:	e2 fe       	sbrs	r14, 2
    2d64:	10 c0       	rjmp	.+32     	; 0x2d86 <u8g2_draw_disc_section+0xac>
    2d66:	21 e0       	ldi	r18, 0x01	; 1
    2d68:	21 0f       	add	r18, r17
    2d6a:	6d 2f       	mov	r22, r29
    2d6c:	6c 1b       	sub	r22, r28
    2d6e:	40 2f       	mov	r20, r16
    2d70:	c6 01       	movw	r24, r12
    2d72:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d76:	21 e0       	ldi	r18, 0x01	; 1
    2d78:	2c 0f       	add	r18, r28
    2d7a:	6d 2f       	mov	r22, r29
    2d7c:	61 1b       	sub	r22, r17
    2d7e:	40 2f       	mov	r20, r16
    2d80:	c6 01       	movw	r24, r12
    2d82:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <u8g2_DrawVLine>
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	ef 90       	pop	r14
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	08 95       	ret

00002d96 <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    2d96:	8f 92       	push	r8
    2d98:	9f 92       	push	r9
    2d9a:	af 92       	push	r10
    2d9c:	bf 92       	push	r11
    2d9e:	cf 92       	push	r12
    2da0:	df 92       	push	r13
    2da2:	ef 92       	push	r14
    2da4:	ff 92       	push	r15
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	5c 01       	movw	r10, r24
    2db0:	c6 2e       	mov	r12, r22
    2db2:	94 2e       	mov	r9, r20
    2db4:	c2 2f       	mov	r28, r18
    2db6:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    2db8:	01 e0       	ldi	r16, 0x01	; 1
    2dba:	02 0f       	add	r16, r18
    2dbc:	04 0f       	add	r16, r20
    2dbe:	21 e0       	ldi	r18, 0x01	; 1
    2dc0:	26 0f       	add	r18, r22
    2dc2:	2c 0f       	add	r18, r28
    2dc4:	4c 1b       	sub	r20, r28
    2dc6:	6c 1b       	sub	r22, r28
    2dc8:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    2dcc:	88 23       	and	r24, r24
    2dce:	41 f1       	breq	.+80     	; 0x2e20 <u8g2_DrawCircle+0x8a>
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    2dd0:	d1 e0       	ldi	r29, 0x01	; 1
    2dd2:	dc 1b       	sub	r29, r28
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    2dd4:	dc 2e       	mov	r13, r28
    2dd6:	d1 94       	neg	r13
    2dd8:	dd 0c       	add	r13, r13
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    2dda:	e8 2c       	mov	r14, r8
    2ddc:	09 2d       	mov	r16, r9
    2dde:	2c 2d       	mov	r18, r12
    2de0:	4c 2f       	mov	r20, r28
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	c5 01       	movw	r24, r10
    2de6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <u8g2_draw_circle_section>
    
    while ( x < y )
    2dea:	cc 23       	and	r28, r28
    2dec:	c9 f0       	breq	.+50     	; 0x2e20 <u8g2_DrawCircle+0x8a>
    2dee:	0f 2e       	mov	r0, r31
    2df0:	f3 e0       	ldi	r31, 0x03	; 3
    2df2:	ff 2e       	mov	r15, r31
    2df4:	f0 2d       	mov	r31, r0
    2df6:	10 e0       	ldi	r17, 0x00	; 0
    {
      if (f >= 0) 
    2df8:	dd 23       	and	r29, r29
    2dfa:	24 f0       	brlt	.+8      	; 0x2e04 <u8g2_DrawCircle+0x6e>
      {
        y--;
    2dfc:	c1 50       	subi	r28, 0x01	; 1
        ddF_y += 2;
    2dfe:	d3 94       	inc	r13
    2e00:	d3 94       	inc	r13
        f += ddF_y;
    2e02:	dd 0d       	add	r29, r13
      }
      x++;
    2e04:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;
    2e06:	df 0d       	add	r29, r15

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    2e08:	e8 2c       	mov	r14, r8
    2e0a:	09 2d       	mov	r16, r9
    2e0c:	2c 2d       	mov	r18, r12
    2e0e:	4c 2f       	mov	r20, r28
    2e10:	61 2f       	mov	r22, r17
    2e12:	c5 01       	movw	r24, r10
    2e14:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <u8g2_draw_circle_section>
    2e18:	f3 94       	inc	r15
    2e1a:	f3 94       	inc	r15
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    2e1c:	1c 17       	cp	r17, r28
    2e1e:	60 f3       	brcs	.-40     	; 0x2df8 <u8g2_DrawCircle+0x62>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	1f 91       	pop	r17
    2e26:	0f 91       	pop	r16
    2e28:	ff 90       	pop	r15
    2e2a:	ef 90       	pop	r14
    2e2c:	df 90       	pop	r13
    2e2e:	cf 90       	pop	r12
    2e30:	bf 90       	pop	r11
    2e32:	af 90       	pop	r10
    2e34:	9f 90       	pop	r9
    2e36:	8f 90       	pop	r8
    2e38:	08 95       	ret

00002e3a <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    2e3a:	8f 92       	push	r8
    2e3c:	9f 92       	push	r9
    2e3e:	af 92       	push	r10
    2e40:	bf 92       	push	r11
    2e42:	cf 92       	push	r12
    2e44:	df 92       	push	r13
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	5c 01       	movw	r10, r24
    2e54:	c6 2e       	mov	r12, r22
    2e56:	94 2e       	mov	r9, r20
    2e58:	c2 2f       	mov	r28, r18
    2e5a:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    2e5c:	01 e0       	ldi	r16, 0x01	; 1
    2e5e:	02 0f       	add	r16, r18
    2e60:	04 0f       	add	r16, r20
    2e62:	21 e0       	ldi	r18, 0x01	; 1
    2e64:	26 0f       	add	r18, r22
    2e66:	2c 0f       	add	r18, r28
    2e68:	4c 1b       	sub	r20, r28
    2e6a:	6c 1b       	sub	r22, r28
    2e6c:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    2e70:	88 23       	and	r24, r24
    2e72:	41 f1       	breq	.+80     	; 0x2ec4 <u8g2_DrawDisc+0x8a>
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
  f -= rad;
    2e74:	d1 e0       	ldi	r29, 0x01	; 1
    2e76:	dc 1b       	sub	r29, r28
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
  ddF_y *= 2;
    2e78:	dc 2e       	mov	r13, r28
    2e7a:	d1 94       	neg	r13
    2e7c:	dd 0c       	add	r13, r13
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
    2e7e:	e8 2c       	mov	r14, r8
    2e80:	09 2d       	mov	r16, r9
    2e82:	2c 2d       	mov	r18, r12
    2e84:	4c 2f       	mov	r20, r28
    2e86:	60 e0       	ldi	r22, 0x00	; 0
    2e88:	c5 01       	movw	r24, r10
    2e8a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <u8g2_draw_disc_section>
  
  while ( x < y )
    2e8e:	cc 23       	and	r28, r28
    2e90:	c9 f0       	breq	.+50     	; 0x2ec4 <u8g2_DrawDisc+0x8a>
    2e92:	0f 2e       	mov	r0, r31
    2e94:	f3 e0       	ldi	r31, 0x03	; 3
    2e96:	ff 2e       	mov	r15, r31
    2e98:	f0 2d       	mov	r31, r0
    2e9a:	10 e0       	ldi	r17, 0x00	; 0
  {
    if (f >= 0) 
    2e9c:	dd 23       	and	r29, r29
    2e9e:	24 f0       	brlt	.+8      	; 0x2ea8 <u8g2_DrawDisc+0x6e>
    {
      y--;
    2ea0:	c1 50       	subi	r28, 0x01	; 1
      ddF_y += 2;
    2ea2:	d3 94       	inc	r13
    2ea4:	d3 94       	inc	r13
      f += ddF_y;
    2ea6:	dd 0d       	add	r29, r13
    }
    x++;
    2ea8:	1f 5f       	subi	r17, 0xFF	; 255
    ddF_x += 2;
    f += ddF_x;
    2eaa:	df 0d       	add	r29, r15

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
    2eac:	e8 2c       	mov	r14, r8
    2eae:	09 2d       	mov	r16, r9
    2eb0:	2c 2d       	mov	r18, r12
    2eb2:	4c 2f       	mov	r20, r28
    2eb4:	61 2f       	mov	r22, r17
    2eb6:	c5 01       	movw	r24, r10
    2eb8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <u8g2_draw_disc_section>
    2ebc:	f3 94       	inc	r15
    2ebe:	f3 94       	inc	r15
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
  
  while ( x < y )
    2ec0:	1c 17       	cp	r17, r28
    2ec2:	60 f3       	brcs	.-40     	; 0x2e9c <u8g2_DrawDisc+0x62>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
    2ec4:	df 91       	pop	r29
    2ec6:	cf 91       	pop	r28
    2ec8:	1f 91       	pop	r17
    2eca:	0f 91       	pop	r16
    2ecc:	ff 90       	pop	r15
    2ece:	ef 90       	pop	r14
    2ed0:	df 90       	pop	r13
    2ed2:	cf 90       	pop	r12
    2ed4:	bf 90       	pop	r11
    2ed6:	af 90       	pop	r10
    2ed8:	9f 90       	pop	r9
    2eda:	8f 90       	pop	r8
    2edc:	08 95       	ret

00002ede <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    2ede:	28 e0       	ldi	r18, 0x08	; 8
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	20 83       	st	Z, r18
  return buf;
  #endif
}
    2ee4:	87 ef       	ldi	r24, 0xF7	; 247
    2ee6:	92 e0       	ldi	r25, 0x02	; 2
    2ee8:	08 95       	ret

00002eea <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2eea:	cf 92       	push	r12
    2eec:	df 92       	push	r13
    2eee:	ef 92       	push	r14
    2ef0:	ff 92       	push	r15
    2ef2:	0f 93       	push	r16
    2ef4:	1f 93       	push	r17
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	1f 92       	push	r1
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	7c 01       	movw	r14, r24
    2f02:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    2f04:	89 01       	movw	r16, r18
    2f06:	9a 01       	movw	r18, r20
    2f08:	45 e3       	ldi	r20, 0x35	; 53
    2f0a:	5f e1       	ldi	r21, 0x1F	; 31
    2f0c:	68 ec       	ldi	r22, 0xC8	; 200
    2f0e:	70 e2       	ldi	r23, 0x20	; 32
    2f10:	0e 94 0d 21 	call	0x421a	; 0x421a <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    2f14:	ce 01       	movw	r24, r28
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	0e 94 6f 17 	call	0x2ede	; 0x2ede <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    2f1c:	86 01       	movw	r16, r12
    2f1e:	22 eb       	ldi	r18, 0xB2	; 178
    2f20:	3c e1       	ldi	r19, 0x1C	; 28
    2f22:	49 81       	ldd	r20, Y+1	; 0x01
    2f24:	bc 01       	movw	r22, r24
    2f26:	c7 01       	movw	r24, r14
    2f28:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <u8g2_SetupBuffer>
}
    2f2c:	0f 90       	pop	r0
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	df 90       	pop	r13
    2f3c:	cf 90       	pop	r12
    2f3e:	08 95       	ret

00002f40 <u8g2_font_get_word>:
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  return u8g2_string_width(u8g2, str);
}
    2f40:	fc 01       	movw	r30, r24
    2f42:	e6 0f       	add	r30, r22
    2f44:	f1 1d       	adc	r31, r1
    2f46:	84 91       	lpm	r24, Z
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	98 2f       	mov	r25, r24
    2f4c:	88 27       	eor	r24, r24
    2f4e:	31 96       	adiw	r30, 0x01	; 1
    2f50:	e4 91       	lpm	r30, Z
    2f52:	8e 0f       	add	r24, r30
    2f54:	91 1d       	adc	r25, r1
    2f56:	08 95       	ret

00002f58 <u8g2_font_calc_vref_font>:
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	08 95       	ret

00002f5c <u8g2_read_font_info>:
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	ec 01       	movw	r28, r24
    2f66:	8b 01       	movw	r16, r22
    2f68:	fb 01       	movw	r30, r22
    2f6a:	84 91       	lpm	r24, Z
    2f6c:	88 83       	st	Y, r24
    2f6e:	31 96       	adiw	r30, 0x01	; 1
    2f70:	e4 91       	lpm	r30, Z
    2f72:	e9 83       	std	Y+1, r30	; 0x01
    2f74:	fb 01       	movw	r30, r22
    2f76:	32 96       	adiw	r30, 0x02	; 2
    2f78:	e4 91       	lpm	r30, Z
    2f7a:	ea 83       	std	Y+2, r30	; 0x02
    2f7c:	fb 01       	movw	r30, r22
    2f7e:	33 96       	adiw	r30, 0x03	; 3
    2f80:	e4 91       	lpm	r30, Z
    2f82:	eb 83       	std	Y+3, r30	; 0x03
    2f84:	fb 01       	movw	r30, r22
    2f86:	34 96       	adiw	r30, 0x04	; 4
    2f88:	e4 91       	lpm	r30, Z
    2f8a:	ec 83       	std	Y+4, r30	; 0x04
    2f8c:	fb 01       	movw	r30, r22
    2f8e:	35 96       	adiw	r30, 0x05	; 5
    2f90:	e4 91       	lpm	r30, Z
    2f92:	ed 83       	std	Y+5, r30	; 0x05
    2f94:	fb 01       	movw	r30, r22
    2f96:	36 96       	adiw	r30, 0x06	; 6
    2f98:	e4 91       	lpm	r30, Z
    2f9a:	ee 83       	std	Y+6, r30	; 0x06
    2f9c:	fb 01       	movw	r30, r22
    2f9e:	37 96       	adiw	r30, 0x07	; 7
    2fa0:	e4 91       	lpm	r30, Z
    2fa2:	ef 83       	std	Y+7, r30	; 0x07
    2fa4:	fb 01       	movw	r30, r22
    2fa6:	38 96       	adiw	r30, 0x08	; 8
    2fa8:	e4 91       	lpm	r30, Z
    2faa:	e8 87       	std	Y+8, r30	; 0x08
    2fac:	fb 01       	movw	r30, r22
    2fae:	39 96       	adiw	r30, 0x09	; 9
    2fb0:	e4 91       	lpm	r30, Z
    2fb2:	e9 87       	std	Y+9, r30	; 0x09
    2fb4:	fb 01       	movw	r30, r22
    2fb6:	3a 96       	adiw	r30, 0x0a	; 10
    2fb8:	e4 91       	lpm	r30, Z
    2fba:	ea 87       	std	Y+10, r30	; 0x0a
    2fbc:	fb 01       	movw	r30, r22
    2fbe:	3b 96       	adiw	r30, 0x0b	; 11
    2fc0:	e4 91       	lpm	r30, Z
    2fc2:	eb 87       	std	Y+11, r30	; 0x0b
    2fc4:	fb 01       	movw	r30, r22
    2fc6:	3c 96       	adiw	r30, 0x0c	; 12
    2fc8:	e4 91       	lpm	r30, Z
    2fca:	ec 87       	std	Y+12, r30	; 0x0c
    2fcc:	fb 01       	movw	r30, r22
    2fce:	3d 96       	adiw	r30, 0x0d	; 13
    2fd0:	e4 91       	lpm	r30, Z
    2fd2:	ed 87       	std	Y+13, r30	; 0x0d
    2fd4:	fb 01       	movw	r30, r22
    2fd6:	3e 96       	adiw	r30, 0x0e	; 14
    2fd8:	e4 91       	lpm	r30, Z
    2fda:	ee 87       	std	Y+14, r30	; 0x0e
    2fdc:	fb 01       	movw	r30, r22
    2fde:	3f 96       	adiw	r30, 0x0f	; 15
    2fe0:	e4 91       	lpm	r30, Z
    2fe2:	ef 87       	std	Y+15, r30	; 0x0f
    2fe4:	fb 01       	movw	r30, r22
    2fe6:	70 96       	adiw	r30, 0x10	; 16
    2fe8:	e4 91       	lpm	r30, Z
    2fea:	e8 8b       	std	Y+16, r30	; 0x10
    2fec:	61 e1       	ldi	r22, 0x11	; 17
    2fee:	c8 01       	movw	r24, r16
    2ff0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <u8g2_font_get_word>
    2ff4:	9a 8b       	std	Y+18, r25	; 0x12
    2ff6:	89 8b       	std	Y+17, r24	; 0x11
    2ff8:	63 e1       	ldi	r22, 0x13	; 19
    2ffa:	c8 01       	movw	r24, r16
    2ffc:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <u8g2_font_get_word>
    3000:	9c 8b       	std	Y+20, r25	; 0x14
    3002:	8b 8b       	std	Y+19, r24	; 0x13
    3004:	65 e1       	ldi	r22, 0x15	; 21
    3006:	c8 01       	movw	r24, r16
    3008:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <u8g2_font_get_word>
    300c:	9e 8b       	std	Y+22, r25	; 0x16
    300e:	8d 8b       	std	Y+21, r24	; 0x15
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	08 95       	ret

0000301a <u8g2_font_decode_get_unsigned_bits>:
    301a:	dc 01       	movw	r26, r24
    301c:	18 96       	adiw	r26, 0x08	; 8
    301e:	9c 91       	ld	r25, X
    3020:	18 97       	sbiw	r26, 0x08	; 8
    3022:	ed 91       	ld	r30, X+
    3024:	fc 91       	ld	r31, X
    3026:	11 97       	sbiw	r26, 0x01	; 1
    3028:	24 91       	lpm	r18, Z
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	09 2e       	mov	r0, r25
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <u8g2_font_decode_get_unsigned_bits+0x1a>
    3030:	35 95       	asr	r19
    3032:	27 95       	ror	r18
    3034:	0a 94       	dec	r0
    3036:	e2 f7       	brpl	.-8      	; 0x3030 <u8g2_font_decode_get_unsigned_bits+0x16>
    3038:	89 2f       	mov	r24, r25
    303a:	86 0f       	add	r24, r22
    303c:	88 30       	cpi	r24, 0x08	; 8
    303e:	10 f4       	brcc	.+4      	; 0x3044 <u8g2_font_decode_get_unsigned_bits+0x2a>
    3040:	e2 2f       	mov	r30, r18
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <u8g2_font_decode_get_unsigned_bits+0x48>
    3044:	31 96       	adiw	r30, 0x01	; 1
    3046:	11 96       	adiw	r26, 0x01	; 1
    3048:	fc 93       	st	X, r31
    304a:	ee 93       	st	-X, r30
    304c:	e4 91       	lpm	r30, Z
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	38 e0       	ldi	r19, 0x08	; 8
    3052:	39 1b       	sub	r19, r25
    3054:	02 c0       	rjmp	.+4      	; 0x305a <u8g2_font_decode_get_unsigned_bits+0x40>
    3056:	ee 0f       	add	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	3a 95       	dec	r19
    305c:	e2 f7       	brpl	.-8      	; 0x3056 <u8g2_font_decode_get_unsigned_bits+0x3c>
    305e:	e2 2b       	or	r30, r18
    3060:	88 50       	subi	r24, 0x08	; 8
    3062:	18 96       	adiw	r26, 0x08	; 8
    3064:	8c 93       	st	X, r24
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <u8g2_font_decode_get_unsigned_bits+0x56>
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	6a 95       	dec	r22
    3072:	e2 f7       	brpl	.-8      	; 0x306c <u8g2_font_decode_get_unsigned_bits+0x52>
    3074:	81 50       	subi	r24, 0x01	; 1
    3076:	8e 23       	and	r24, r30
    3078:	08 95       	ret

0000307a <u8g2_font_setup_decode>:
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	ec 01       	movw	r28, r24
    3084:	8c 01       	movw	r16, r24
    3086:	07 5c       	subi	r16, 0xC7	; 199
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	7a af       	std	Y+58, r23	; 0x3a
    308c:	69 af       	std	Y+57, r22	; 0x39
    308e:	fc 01       	movw	r30, r24
    3090:	ef 5b       	subi	r30, 0xBF	; 191
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	10 82       	st	Z, r1
    3096:	39 96       	adiw	r30, 0x09	; 9
    3098:	60 81       	ld	r22, Z
    309a:	c8 01       	movw	r24, r16
    309c:	0e 94 0d 18 	call	0x301a	; 0x301a <u8g2_font_decode_get_unsigned_bits>
    30a0:	8f af       	std	Y+63, r24	; 0x3f
    30a2:	fe 01       	movw	r30, r28
    30a4:	e5 5b       	subi	r30, 0xB5	; 181
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	60 81       	ld	r22, Z
    30aa:	c8 01       	movw	r24, r16
    30ac:	0e 94 0d 18 	call	0x301a	; 0x301a <u8g2_font_decode_get_unsigned_bits>
    30b0:	fe 01       	movw	r30, r28
    30b2:	e0 5c       	subi	r30, 0xC0	; 192
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 83       	st	Z, r24
    30b8:	b3 96       	adiw	r30, 0x23	; 35
    30ba:	80 81       	ld	r24, Z
    30bc:	b0 97       	sbiw	r30, 0x20	; 32
    30be:	80 83       	st	Z, r24
    30c0:	cc 5b       	subi	r28, 0xBC	; 188
    30c2:	df 4f       	sbci	r29, 0xFF	; 255
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	81 11       	cpse	r24, r1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	98 83       	st	Y, r25
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	08 95       	ret

000030d6 <u8g2_font_decode_get_signed_bits>:
    30d6:	cf 93       	push	r28
    30d8:	c6 2f       	mov	r28, r22
    30da:	0e 94 0d 18 	call	0x301a	; 0x301a <u8g2_font_decode_get_unsigned_bits>
    30de:	c1 50       	subi	r28, 0x01	; 1
    30e0:	21 e0       	ldi	r18, 0x01	; 1
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <u8g2_font_decode_get_signed_bits+0x14>
    30e6:	22 0f       	add	r18, r18
    30e8:	33 1f       	adc	r19, r19
    30ea:	ca 95       	dec	r28
    30ec:	e2 f7       	brpl	.-8      	; 0x30e6 <u8g2_font_decode_get_signed_bits+0x10>
    30ee:	82 1b       	sub	r24, r18
    30f0:	cf 91       	pop	r28
    30f2:	08 95       	ret

000030f4 <u8g2_add_vector_y>:
    30f4:	21 30       	cpi	r18, 0x01	; 1
    30f6:	31 f0       	breq	.+12     	; 0x3104 <u8g2_add_vector_y+0x10>
    30f8:	18 f0       	brcs	.+6      	; 0x3100 <u8g2_add_vector_y+0xc>
    30fa:	22 30       	cpi	r18, 0x02	; 2
    30fc:	29 f0       	breq	.+10     	; 0x3108 <u8g2_add_vector_y+0x14>
    30fe:	06 c0       	rjmp	.+12     	; 0x310c <u8g2_add_vector_y+0x18>
    3100:	84 0f       	add	r24, r20
    3102:	08 95       	ret
    3104:	86 0f       	add	r24, r22
    3106:	08 95       	ret
    3108:	84 1b       	sub	r24, r20
    310a:	08 95       	ret
    310c:	86 1b       	sub	r24, r22
    310e:	08 95       	ret

00003110 <u8g2_add_vector_x>:
    3110:	21 30       	cpi	r18, 0x01	; 1
    3112:	31 f0       	breq	.+12     	; 0x3120 <u8g2_add_vector_x+0x10>
    3114:	18 f0       	brcs	.+6      	; 0x311c <u8g2_add_vector_x+0xc>
    3116:	22 30       	cpi	r18, 0x02	; 2
    3118:	29 f0       	breq	.+10     	; 0x3124 <u8g2_add_vector_x+0x14>
    311a:	06 c0       	rjmp	.+12     	; 0x3128 <u8g2_add_vector_x+0x18>
    311c:	86 0f       	add	r24, r22
    311e:	08 95       	ret
    3120:	84 1b       	sub	r24, r20
    3122:	08 95       	ret
    3124:	86 1b       	sub	r24, r22
    3126:	08 95       	ret
    3128:	84 0f       	add	r24, r20
    312a:	08 95       	ret

0000312c <u8g2_font_decode_len>:
    312c:	2f 92       	push	r2
    312e:	3f 92       	push	r3
    3130:	4f 92       	push	r4
    3132:	5f 92       	push	r5
    3134:	6f 92       	push	r6
    3136:	7f 92       	push	r7
    3138:	8f 92       	push	r8
    313a:	9f 92       	push	r9
    313c:	af 92       	push	r10
    313e:	bf 92       	push	r11
    3140:	cf 92       	push	r12
    3142:	df 92       	push	r13
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	00 d0       	rcall	.+0      	; 0x3152 <u8g2_font_decode_len+0x26>
    3152:	00 d0       	rcall	.+0      	; 0x3154 <u8g2_font_decode_len+0x28>
    3154:	00 d0       	rcall	.+0      	; 0x3156 <u8g2_font_decode_len+0x2a>
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	7c 01       	movw	r14, r24
    315c:	6e 83       	std	Y+6, r22	; 0x06
    315e:	34 2e       	mov	r3, r20
    3160:	fc 01       	movw	r30, r24
    3162:	75 ac       	ldd	r7, Z+61	; 0x3d
    3164:	16 ad       	ldd	r17, Z+62	; 0x3e
    3166:	6c 01       	movw	r12, r24
    3168:	f5 e4       	ldi	r31, 0x45	; 69
    316a:	cf 0e       	add	r12, r31
    316c:	d1 1c       	adc	r13, r1
    316e:	5c 01       	movw	r10, r24
    3170:	82 e4       	ldi	r24, 0x42	; 66
    3172:	a8 0e       	add	r10, r24
    3174:	b1 1c       	adc	r11, r1
    3176:	47 01       	movw	r8, r14
    3178:	93 e6       	ldi	r25, 0x63	; 99
    317a:	89 0e       	add	r8, r25
    317c:	91 1c       	adc	r9, r1
    317e:	f7 01       	movw	r30, r14
    3180:	ec 5b       	subi	r30, 0xBC	; 188
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	fc 83       	std	Y+4, r31	; 0x04
    3186:	eb 83       	std	Y+3, r30	; 0x03
    3188:	c7 01       	movw	r24, r14
    318a:	8d 5b       	subi	r24, 0xBD	; 189
    318c:	9f 4f       	sbci	r25, 0xFF	; 255
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	f7 01       	movw	r30, r14
    3194:	f7 ad       	ldd	r31, Z+63	; 0x3f
    3196:	f7 19       	sub	r31, r7
    3198:	fd 83       	std	Y+5, r31	; 0x05
    319a:	5e 80       	ldd	r5, Y+6	; 0x06
    319c:	f5 15       	cp	r31, r5
    319e:	08 f4       	brcc	.+2      	; 0x31a2 <u8g2_font_decode_len+0x76>
    31a0:	5f 2e       	mov	r5, r31
    31a2:	f7 01       	movw	r30, r14
    31a4:	64 ac       	ldd	r6, Z+60	; 0x3c
    31a6:	f6 01       	movw	r30, r12
    31a8:	00 81       	ld	r16, Z
    31aa:	21 2e       	mov	r2, r17
    31ac:	20 2f       	mov	r18, r16
    31ae:	41 2f       	mov	r20, r17
    31b0:	67 2d       	mov	r22, r7
    31b2:	f7 01       	movw	r30, r14
    31b4:	83 ad       	ldd	r24, Z+59	; 0x3b
    31b6:	0e 94 88 18 	call	0x3110	; 0x3110 <u8g2_add_vector_x>
    31ba:	48 2e       	mov	r4, r24
    31bc:	20 2f       	mov	r18, r16
    31be:	41 2f       	mov	r20, r17
    31c0:	67 2d       	mov	r22, r7
    31c2:	86 2d       	mov	r24, r6
    31c4:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <u8g2_add_vector_y>
    31c8:	33 20       	and	r3, r3
    31ca:	61 f0       	breq	.+24     	; 0x31e4 <u8g2_font_decode_len+0xb8>
    31cc:	e9 81       	ldd	r30, Y+1	; 0x01
    31ce:	fa 81       	ldd	r31, Y+2	; 0x02
    31d0:	90 81       	ld	r25, Z
    31d2:	f4 01       	movw	r30, r8
    31d4:	90 83       	st	Z, r25
    31d6:	25 2d       	mov	r18, r5
    31d8:	48 2f       	mov	r20, r24
    31da:	64 2d       	mov	r22, r4
    31dc:	c7 01       	movw	r24, r14
    31de:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <u8g2_font_decode_len+0xd6>
    31e4:	f5 01       	movw	r30, r10
    31e6:	90 81       	ld	r25, Z
    31e8:	91 11       	cpse	r25, r1
    31ea:	0b c0       	rjmp	.+22     	; 0x3202 <u8g2_font_decode_len+0xd6>
    31ec:	eb 81       	ldd	r30, Y+3	; 0x03
    31ee:	fc 81       	ldd	r31, Y+4	; 0x04
    31f0:	90 81       	ld	r25, Z
    31f2:	f4 01       	movw	r30, r8
    31f4:	90 83       	st	Z, r25
    31f6:	25 2d       	mov	r18, r5
    31f8:	48 2f       	mov	r20, r24
    31fa:	64 2d       	mov	r22, r4
    31fc:	c7 01       	movw	r24, r14
    31fe:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
    3202:	fe 81       	ldd	r31, Y+6	; 0x06
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	f8 17       	cp	r31, r24
    3208:	28 f0       	brcs	.+10     	; 0x3214 <u8g2_font_decode_len+0xe8>
    320a:	f8 1b       	sub	r31, r24
    320c:	fe 83       	std	Y+6, r31	; 0x06
    320e:	1f 5f       	subi	r17, 0xFF	; 255
    3210:	71 2c       	mov	r7, r1
    3212:	bf cf       	rjmp	.-130    	; 0x3192 <u8g2_font_decode_len+0x66>
    3214:	8e 81       	ldd	r24, Y+6	; 0x06
    3216:	87 0d       	add	r24, r7
    3218:	f7 01       	movw	r30, r14
    321a:	85 af       	std	Z+61, r24	; 0x3d
    321c:	26 ae       	std	Z+62, r2	; 0x3e
    321e:	26 96       	adiw	r28, 0x06	; 6
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	1f 91       	pop	r17
    3230:	0f 91       	pop	r16
    3232:	ff 90       	pop	r15
    3234:	ef 90       	pop	r14
    3236:	df 90       	pop	r13
    3238:	cf 90       	pop	r12
    323a:	bf 90       	pop	r11
    323c:	af 90       	pop	r10
    323e:	9f 90       	pop	r9
    3240:	8f 90       	pop	r8
    3242:	7f 90       	pop	r7
    3244:	6f 90       	pop	r6
    3246:	5f 90       	pop	r5
    3248:	4f 90       	pop	r4
    324a:	3f 90       	pop	r3
    324c:	2f 90       	pop	r2
    324e:	08 95       	ret

00003250 <u8g2_font_decode_glyph>:
    3250:	8f 92       	push	r8
    3252:	9f 92       	push	r9
    3254:	af 92       	push	r10
    3256:	bf 92       	push	r11
    3258:	cf 92       	push	r12
    325a:	df 92       	push	r13
    325c:	ef 92       	push	r14
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	cf 93       	push	r28
    3266:	df 93       	push	r29
    3268:	ec 01       	movw	r28, r24
    326a:	7c 01       	movw	r14, r24
    326c:	89 e3       	ldi	r24, 0x39	; 57
    326e:	e8 0e       	add	r14, r24
    3270:	f1 1c       	adc	r15, r1
    3272:	ce 01       	movw	r24, r28
    3274:	0e 94 3d 18 	call	0x307a	; 0x307a <u8g2_font_setup_decode>
    3278:	fe 01       	movw	r30, r28
    327a:	e0 5c       	subi	r30, 0xC0	; 192
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	90 80       	ld	r9, Z
    3280:	3c 96       	adiw	r30, 0x0c	; 12
    3282:	60 81       	ld	r22, Z
    3284:	c7 01       	movw	r24, r14
    3286:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <u8g2_font_decode_get_signed_bits>
    328a:	b8 2e       	mov	r11, r24
    328c:	fe 01       	movw	r30, r28
    328e:	e3 5b       	subi	r30, 0xB3	; 179
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	60 81       	ld	r22, Z
    3294:	c7 01       	movw	r24, r14
    3296:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <u8g2_font_decode_get_signed_bits>
    329a:	18 2f       	mov	r17, r24
    329c:	fe 01       	movw	r30, r28
    329e:	e2 5b       	subi	r30, 0xB2	; 178
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	60 81       	ld	r22, Z
    32a4:	c7 01       	movw	r24, r14
    32a6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <u8g2_font_decode_get_signed_bits>
    32aa:	88 2e       	mov	r8, r24
    32ac:	df ac       	ldd	r13, Y+63	; 0x3f
    32ae:	1d 14       	cp	r1, r13
    32b0:	0c f0       	brlt	.+2      	; 0x32b4 <u8g2_font_decode_glyph+0x64>
    32b2:	79 c0       	rjmp	.+242    	; 0x33a6 <u8g2_font_decode_glyph+0x156>
    32b4:	fe 01       	movw	r30, r28
    32b6:	eb 5b       	subi	r30, 0xBB	; 187
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	00 81       	ld	r16, Z
    32bc:	19 0d       	add	r17, r9
    32be:	11 95       	neg	r17
    32c0:	20 2f       	mov	r18, r16
    32c2:	41 2f       	mov	r20, r17
    32c4:	6b 2d       	mov	r22, r11
    32c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    32c8:	0e 94 88 18 	call	0x3110	; 0x3110 <u8g2_add_vector_x>
    32cc:	c8 2e       	mov	r12, r24
    32ce:	8b af       	std	Y+59, r24	; 0x3b
    32d0:	20 2f       	mov	r18, r16
    32d2:	41 2f       	mov	r20, r17
    32d4:	6b 2d       	mov	r22, r11
    32d6:	8c ad       	ldd	r24, Y+60	; 0x3c
    32d8:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <u8g2_add_vector_y>
    32dc:	8c af       	std	Y+60, r24	; 0x3c
    32de:	01 30       	cpi	r16, 0x01	; 1
    32e0:	59 f0       	breq	.+22     	; 0x32f8 <u8g2_font_decode_glyph+0xa8>
    32e2:	28 f0       	brcs	.+10     	; 0x32ee <u8g2_font_decode_glyph+0x9e>
    32e4:	02 30       	cpi	r16, 0x02	; 2
    32e6:	91 f0       	breq	.+36     	; 0x330c <u8g2_font_decode_glyph+0xbc>
    32e8:	03 30       	cpi	r16, 0x03	; 3
    32ea:	d9 f0       	breq	.+54     	; 0x3322 <u8g2_font_decode_glyph+0xd2>
    32ec:	23 c0       	rjmp	.+70     	; 0x3334 <u8g2_font_decode_glyph+0xe4>
    32ee:	2d 2d       	mov	r18, r13
    32f0:	2c 0d       	add	r18, r12
    32f2:	09 2d       	mov	r16, r9
    32f4:	08 0f       	add	r16, r24
    32f6:	20 c0       	rjmp	.+64     	; 0x3338 <u8g2_font_decode_glyph+0xe8>
    32f8:	9c 2d       	mov	r25, r12
    32fa:	99 19       	sub	r25, r9
    32fc:	21 e0       	ldi	r18, 0x01	; 1
    32fe:	2c 0d       	add	r18, r12
    3300:	0d 2d       	mov	r16, r13
    3302:	08 0f       	add	r16, r24
    3304:	cc 24       	eor	r12, r12
    3306:	c3 94       	inc	r12
    3308:	c9 0e       	add	r12, r25
    330a:	16 c0       	rjmp	.+44     	; 0x3338 <u8g2_font_decode_glyph+0xe8>
    330c:	91 e0       	ldi	r25, 0x01	; 1
    330e:	39 2f       	mov	r19, r25
    3310:	3d 19       	sub	r19, r13
    3312:	21 e0       	ldi	r18, 0x01	; 1
    3314:	2c 0d       	add	r18, r12
    3316:	99 19       	sub	r25, r9
    3318:	01 e0       	ldi	r16, 0x01	; 1
    331a:	08 0f       	add	r16, r24
    331c:	89 0f       	add	r24, r25
    331e:	c3 0e       	add	r12, r19
    3320:	0b c0       	rjmp	.+22     	; 0x3338 <u8g2_font_decode_glyph+0xe8>
    3322:	29 2d       	mov	r18, r9
    3324:	2c 0d       	add	r18, r12
    3326:	98 2f       	mov	r25, r24
    3328:	9d 19       	sub	r25, r13
    332a:	01 e0       	ldi	r16, 0x01	; 1
    332c:	08 0f       	add	r16, r24
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	89 0f       	add	r24, r25
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <u8g2_font_decode_glyph+0xe8>
    3334:	08 2f       	mov	r16, r24
    3336:	2c 2d       	mov	r18, r12
    3338:	48 2f       	mov	r20, r24
    333a:	6c 2d       	mov	r22, r12
    333c:	ce 01       	movw	r24, r28
    333e:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    3342:	88 23       	and	r24, r24
    3344:	81 f1       	breq	.+96     	; 0x33a6 <u8g2_font_decode_glyph+0x156>
    3346:	1d ae       	std	Y+61, r1	; 0x3d
    3348:	1e ae       	std	Y+62, r1	; 0x3e
    334a:	5e 01       	movw	r10, r28
    334c:	e8 e4       	ldi	r30, 0x48	; 72
    334e:	ae 0e       	add	r10, r30
    3350:	b1 1c       	adc	r11, r1
    3352:	6e 01       	movw	r12, r28
    3354:	f9 e4       	ldi	r31, 0x49	; 73
    3356:	cf 0e       	add	r12, r31
    3358:	d1 1c       	adc	r13, r1
    335a:	f5 01       	movw	r30, r10
    335c:	60 81       	ld	r22, Z
    335e:	c7 01       	movw	r24, r14
    3360:	0e 94 0d 18 	call	0x301a	; 0x301a <u8g2_font_decode_get_unsigned_bits>
    3364:	08 2f       	mov	r16, r24
    3366:	f6 01       	movw	r30, r12
    3368:	60 81       	ld	r22, Z
    336a:	c7 01       	movw	r24, r14
    336c:	0e 94 0d 18 	call	0x301a	; 0x301a <u8g2_font_decode_get_unsigned_bits>
    3370:	18 2f       	mov	r17, r24
    3372:	40 e0       	ldi	r20, 0x00	; 0
    3374:	60 2f       	mov	r22, r16
    3376:	ce 01       	movw	r24, r28
    3378:	0e 94 96 18 	call	0x312c	; 0x312c <u8g2_font_decode_len>
    337c:	41 e0       	ldi	r20, 0x01	; 1
    337e:	61 2f       	mov	r22, r17
    3380:	ce 01       	movw	r24, r28
    3382:	0e 94 96 18 	call	0x312c	; 0x312c <u8g2_font_decode_len>
    3386:	61 e0       	ldi	r22, 0x01	; 1
    3388:	c7 01       	movw	r24, r14
    338a:	0e 94 0d 18 	call	0x301a	; 0x301a <u8g2_font_decode_get_unsigned_bits>
    338e:	81 11       	cpse	r24, r1
    3390:	f0 cf       	rjmp	.-32     	; 0x3372 <u8g2_font_decode_glyph+0x122>
    3392:	8e ad       	ldd	r24, Y+62	; 0x3e
    3394:	89 15       	cp	r24, r9
    3396:	0c f3       	brlt	.-62     	; 0x335a <u8g2_font_decode_glyph+0x10a>
    3398:	fe 01       	movw	r30, r28
    339a:	ed 59       	subi	r30, 0x9D	; 157
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	cd 5b       	subi	r28, 0xBD	; 189
    33a0:	df 4f       	sbci	r29, 0xFF	; 255
    33a2:	88 81       	ld	r24, Y
    33a4:	80 83       	st	Z, r24
    33a6:	88 2d       	mov	r24, r8
    33a8:	df 91       	pop	r29
    33aa:	cf 91       	pop	r28
    33ac:	1f 91       	pop	r17
    33ae:	0f 91       	pop	r16
    33b0:	ff 90       	pop	r15
    33b2:	ef 90       	pop	r14
    33b4:	df 90       	pop	r13
    33b6:	cf 90       	pop	r12
    33b8:	bf 90       	pop	r11
    33ba:	af 90       	pop	r10
    33bc:	9f 90       	pop	r9
    33be:	8f 90       	pop	r8
    33c0:	08 95       	ret

000033c2 <u8g2_font_get_glyph_data>:
    33c2:	ef 92       	push	r14
    33c4:	ff 92       	push	r15
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	fc 01       	movw	r30, r24
    33d0:	c5 a9       	ldd	r28, Z+53	; 0x35
    33d2:	d6 a9       	ldd	r29, Z+54	; 0x36
    33d4:	67 96       	adiw	r28, 0x17	; 23
    33d6:	6f 3f       	cpi	r22, 0xFF	; 255
    33d8:	71 05       	cpc	r23, r1
    33da:	11 f0       	breq	.+4      	; 0x33e0 <u8g2_font_get_glyph_data+0x1e>
    33dc:	08 f0       	brcs	.+2      	; 0x33e0 <u8g2_font_get_glyph_data+0x1e>
    33de:	36 c0       	rjmp	.+108    	; 0x344c <u8g2_font_get_glyph_data+0x8a>
    33e0:	61 36       	cpi	r22, 0x61	; 97
    33e2:	71 05       	cpc	r23, r1
    33e4:	38 f0       	brcs	.+14     	; 0x33f4 <u8g2_font_get_glyph_data+0x32>
    33e6:	e7 5a       	subi	r30, 0xA7	; 167
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 81       	ld	r24, Z
    33ec:	91 81       	ldd	r25, Z+1	; 0x01
    33ee:	c8 0f       	add	r28, r24
    33f0:	d9 1f       	adc	r29, r25
    33f2:	0a c0       	rjmp	.+20     	; 0x3408 <u8g2_font_get_glyph_data+0x46>
    33f4:	61 34       	cpi	r22, 0x41	; 65
    33f6:	71 05       	cpc	r23, r1
    33f8:	38 f0       	brcs	.+14     	; 0x3408 <u8g2_font_get_glyph_data+0x46>
    33fa:	fc 01       	movw	r30, r24
    33fc:	e9 5a       	subi	r30, 0xA9	; 169
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	c8 0f       	add	r28, r24
    3406:	d9 1f       	adc	r29, r25
    3408:	ce 01       	movw	r24, r28
    340a:	01 96       	adiw	r24, 0x01	; 1
    340c:	fc 01       	movw	r30, r24
    340e:	24 91       	lpm	r18, Z
    3410:	22 23       	and	r18, r18
    3412:	09 f4       	brne	.+2      	; 0x3416 <u8g2_font_get_glyph_data+0x54>
    3414:	5a c0       	rjmp	.+180    	; 0x34ca <u8g2_font_get_glyph_data+0x108>
    3416:	fe 01       	movw	r30, r28
    3418:	24 91       	lpm	r18, Z
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	62 17       	cp	r22, r18
    341e:	73 07       	cpc	r23, r19
    3420:	51 f4       	brne	.+20     	; 0x3436 <u8g2_font_get_glyph_data+0x74>
    3422:	06 c0       	rjmp	.+12     	; 0x3430 <u8g2_font_get_glyph_data+0x6e>
    3424:	fe 01       	movw	r30, r28
    3426:	24 91       	lpm	r18, Z
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	62 17       	cp	r22, r18
    342c:	73 07       	cpc	r23, r19
    342e:	19 f4       	brne	.+6      	; 0x3436 <u8g2_font_get_glyph_data+0x74>
    3430:	ce 01       	movw	r24, r28
    3432:	02 96       	adiw	r24, 0x02	; 2
    3434:	52 c0       	rjmp	.+164    	; 0x34da <u8g2_font_get_glyph_data+0x118>
    3436:	fc 01       	movw	r30, r24
    3438:	84 91       	lpm	r24, Z
    343a:	c8 0f       	add	r28, r24
    343c:	d1 1d       	adc	r29, r1
    343e:	ce 01       	movw	r24, r28
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	fc 01       	movw	r30, r24
    3444:	24 91       	lpm	r18, Z
    3446:	21 11       	cpse	r18, r1
    3448:	ed cf       	rjmp	.-38     	; 0x3424 <u8g2_font_get_glyph_data+0x62>
    344a:	42 c0       	rjmp	.+132    	; 0x34d0 <u8g2_font_get_glyph_data+0x10e>
    344c:	8b 01       	movw	r16, r22
    344e:	fc 01       	movw	r30, r24
    3450:	e5 5a       	subi	r30, 0xA5	; 165
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	c8 0f       	add	r28, r24
    345a:	d9 1f       	adc	r29, r25
    345c:	7e 01       	movw	r14, r28
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	c7 01       	movw	r24, r14
    3462:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <u8g2_font_get_word>
    3466:	c8 0f       	add	r28, r24
    3468:	d9 1f       	adc	r29, r25
    346a:	62 e0       	ldi	r22, 0x02	; 2
    346c:	c7 01       	movw	r24, r14
    346e:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <u8g2_font_get_word>
    3472:	f4 e0       	ldi	r31, 0x04	; 4
    3474:	ef 0e       	add	r14, r31
    3476:	f1 1c       	adc	r15, r1
    3478:	80 17       	cp	r24, r16
    347a:	91 07       	cpc	r25, r17
    347c:	80 f3       	brcs	.-32     	; 0x345e <u8g2_font_get_glyph_data+0x9c>
    347e:	fe 01       	movw	r30, r28
    3480:	84 91       	lpm	r24, Z
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	98 2f       	mov	r25, r24
    3486:	88 27       	eor	r24, r24
    3488:	31 96       	adiw	r30, 0x01	; 1
    348a:	e4 91       	lpm	r30, Z
    348c:	8e 2b       	or	r24, r30
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	11 f1       	breq	.+68     	; 0x34d6 <u8g2_font_get_glyph_data+0x114>
    3492:	08 17       	cp	r16, r24
    3494:	19 07       	cpc	r17, r25
    3496:	39 f4       	brne	.+14     	; 0x34a6 <u8g2_font_get_glyph_data+0xe4>
    3498:	03 c0       	rjmp	.+6      	; 0x34a0 <u8g2_font_get_glyph_data+0xde>
    349a:	08 17       	cp	r16, r24
    349c:	19 07       	cpc	r17, r25
    349e:	19 f4       	brne	.+6      	; 0x34a6 <u8g2_font_get_glyph_data+0xe4>
    34a0:	ce 01       	movw	r24, r28
    34a2:	03 96       	adiw	r24, 0x03	; 3
    34a4:	1a c0       	rjmp	.+52     	; 0x34da <u8g2_font_get_glyph_data+0x118>
    34a6:	fe 01       	movw	r30, r28
    34a8:	32 96       	adiw	r30, 0x02	; 2
    34aa:	e4 91       	lpm	r30, Z
    34ac:	ce 0f       	add	r28, r30
    34ae:	d1 1d       	adc	r29, r1
    34b0:	fe 01       	movw	r30, r28
    34b2:	84 91       	lpm	r24, Z
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	98 2f       	mov	r25, r24
    34b8:	88 27       	eor	r24, r24
    34ba:	31 96       	adiw	r30, 0x01	; 1
    34bc:	e4 91       	lpm	r30, Z
    34be:	8e 2b       	or	r24, r30
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	59 f7       	brne	.-42     	; 0x349a <u8g2_font_get_glyph_data+0xd8>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	08 c0       	rjmp	.+16     	; 0x34da <u8g2_font_get_glyph_data+0x118>
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	05 c0       	rjmp	.+10     	; 0x34da <u8g2_font_get_glyph_data+0x118>
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <u8g2_font_get_glyph_data+0x118>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	ff 90       	pop	r15
    34e4:	ef 90       	pop	r14
    34e6:	08 95       	ret

000034e8 <u8g2_GetGlyphWidth>:
    34e8:	0f 93       	push	r16
    34ea:	1f 93       	push	r17
    34ec:	cf 93       	push	r28
    34ee:	df 93       	push	r29
    34f0:	ec 01       	movw	r28, r24
    34f2:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <u8g2_font_get_glyph_data>
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	f1 f0       	breq	.+60     	; 0x3536 <u8g2_GetGlyphWidth+0x4e>
    34fa:	bc 01       	movw	r22, r24
    34fc:	ce 01       	movw	r24, r28
    34fe:	0e 94 3d 18 	call	0x307a	; 0x307a <u8g2_font_setup_decode>
    3502:	8e 01       	movw	r16, r28
    3504:	07 5c       	subi	r16, 0xC7	; 199
    3506:	1f 4f       	sbci	r17, 0xFF	; 255
    3508:	fe 01       	movw	r30, r28
    350a:	e4 5b       	subi	r30, 0xB4	; 180
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	60 81       	ld	r22, Z
    3510:	c8 01       	movw	r24, r16
    3512:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <u8g2_font_decode_get_signed_bits>
    3516:	fe 01       	movw	r30, r28
    3518:	ef 59       	subi	r30, 0x9F	; 159
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 83       	st	Z, r24
    351e:	74 97       	sbiw	r30, 0x14	; 20
    3520:	60 81       	ld	r22, Z
    3522:	c8 01       	movw	r24, r16
    3524:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <u8g2_font_decode_get_signed_bits>
    3528:	c2 5b       	subi	r28, 0xB2	; 178
    352a:	df 4f       	sbci	r29, 0xFF	; 255
    352c:	68 81       	ld	r22, Y
    352e:	c8 01       	movw	r24, r16
    3530:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <u8g2_font_decode_get_signed_bits>
    3534:	01 c0       	rjmp	.+2      	; 0x3538 <u8g2_GetGlyphWidth+0x50>
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	1f 91       	pop	r17
    353e:	0f 91       	pop	r16
    3540:	08 95       	ret

00003542 <u8g2_string_width>:
    3542:	ef 92       	push	r14
    3544:	ff 92       	push	r15
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	ec 01       	movw	r28, r24
    3550:	e6 2e       	mov	r14, r22
    3552:	f7 2e       	mov	r15, r23
    3554:	1f ae       	std	Y+63, r1	; 0x3f
    3556:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <u8x8_utf8_init>
    355a:	0e 2d       	mov	r16, r14
    355c:	1f 2d       	mov	r17, r15
    355e:	e1 2c       	mov	r14, r1
    3560:	f1 2c       	mov	r15, r1
    3562:	f8 01       	movw	r30, r16
    3564:	61 91       	ld	r22, Z+
    3566:	8f 01       	movw	r16, r30
    3568:	ea 81       	ldd	r30, Y+2	; 0x02
    356a:	fb 81       	ldd	r31, Y+3	; 0x03
    356c:	ce 01       	movw	r24, r28
    356e:	09 95       	icall
    3570:	8f 3f       	cpi	r24, 0xFF	; 255
    3572:	ff ef       	ldi	r31, 0xFF	; 255
    3574:	9f 07       	cpc	r25, r31
    3576:	59 f0       	breq	.+22     	; 0x358e <u8g2_string_width+0x4c>
    3578:	8e 3f       	cpi	r24, 0xFE	; 254
    357a:	2f ef       	ldi	r18, 0xFF	; 255
    357c:	92 07       	cpc	r25, r18
    357e:	89 f3       	breq	.-30     	; 0x3562 <u8g2_string_width+0x20>
    3580:	bc 01       	movw	r22, r24
    3582:	ce 01       	movw	r24, r28
    3584:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <u8g2_GetGlyphWidth>
    3588:	e8 2e       	mov	r14, r24
    358a:	f8 0e       	add	r15, r24
    358c:	ea cf       	rjmp	.-44     	; 0x3562 <u8g2_string_width+0x20>
    358e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3590:	88 23       	and	r24, r24
    3592:	31 f0       	breq	.+12     	; 0x35a0 <u8g2_string_width+0x5e>
    3594:	cf 59       	subi	r28, 0x9F	; 159
    3596:	df 4f       	sbci	r29, 0xFF	; 255
    3598:	98 81       	ld	r25, Y
    359a:	89 0f       	add	r24, r25
    359c:	f8 0e       	add	r15, r24
    359e:	fe 18       	sub	r15, r14
    35a0:	8f 2d       	mov	r24, r15
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	ff 90       	pop	r15
    35ac:	ef 90       	pop	r14
    35ae:	08 95       	ret

000035b0 <u8g2_DrawGlyph>:
    35b0:	ef 92       	push	r14
    35b2:	ff 92       	push	r15
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	ec 01       	movw	r28, r24
    35be:	06 2f       	mov	r16, r22
    35c0:	14 2f       	mov	r17, r20
    35c2:	79 01       	movw	r14, r18
    35c4:	fc 01       	movw	r30, r24
    35c6:	eb 5b       	subi	r30, 0xBB	; 187
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 81       	ld	r24, Z
    35cc:	81 30       	cpi	r24, 0x01	; 1
    35ce:	61 f0       	breq	.+24     	; 0x35e8 <u8g2_DrawGlyph+0x38>
    35d0:	28 f0       	brcs	.+10     	; 0x35dc <u8g2_DrawGlyph+0x2c>
    35d2:	82 30       	cpi	r24, 0x02	; 2
    35d4:	79 f0       	breq	.+30     	; 0x35f4 <u8g2_DrawGlyph+0x44>
    35d6:	83 30       	cpi	r24, 0x03	; 3
    35d8:	99 f0       	breq	.+38     	; 0x3600 <u8g2_DrawGlyph+0x50>
    35da:	17 c0       	rjmp	.+46     	; 0x360a <u8g2_DrawGlyph+0x5a>
    35dc:	ef a9       	ldd	r30, Y+55	; 0x37
    35de:	f8 ad       	ldd	r31, Y+56	; 0x38
    35e0:	ce 01       	movw	r24, r28
    35e2:	09 95       	icall
    35e4:	18 0f       	add	r17, r24
    35e6:	11 c0       	rjmp	.+34     	; 0x360a <u8g2_DrawGlyph+0x5a>
    35e8:	ef a9       	ldd	r30, Y+55	; 0x37
    35ea:	f8 ad       	ldd	r31, Y+56	; 0x38
    35ec:	ce 01       	movw	r24, r28
    35ee:	09 95       	icall
    35f0:	08 1b       	sub	r16, r24
    35f2:	0b c0       	rjmp	.+22     	; 0x360a <u8g2_DrawGlyph+0x5a>
    35f4:	ef a9       	ldd	r30, Y+55	; 0x37
    35f6:	f8 ad       	ldd	r31, Y+56	; 0x38
    35f8:	ce 01       	movw	r24, r28
    35fa:	09 95       	icall
    35fc:	18 1b       	sub	r17, r24
    35fe:	05 c0       	rjmp	.+10     	; 0x360a <u8g2_DrawGlyph+0x5a>
    3600:	ef a9       	ldd	r30, Y+55	; 0x37
    3602:	f8 ad       	ldd	r31, Y+56	; 0x38
    3604:	ce 01       	movw	r24, r28
    3606:	09 95       	icall
    3608:	08 0f       	add	r16, r24
    360a:	0b af       	std	Y+59, r16	; 0x3b
    360c:	1c af       	std	Y+60, r17	; 0x3c
    360e:	b7 01       	movw	r22, r14
    3610:	ce 01       	movw	r24, r28
    3612:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <u8g2_font_get_glyph_data>
    3616:	00 97       	sbiw	r24, 0x00	; 0
    3618:	29 f0       	breq	.+10     	; 0x3624 <u8g2_DrawGlyph+0x74>
    361a:	bc 01       	movw	r22, r24
    361c:	ce 01       	movw	r24, r28
    361e:	0e 94 28 19 	call	0x3250	; 0x3250 <u8g2_font_decode_glyph>
    3622:	01 c0       	rjmp	.+2      	; 0x3626 <u8g2_DrawGlyph+0x76>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	08 95       	ret

00003634 <u8g2_draw_string>:
    3634:	bf 92       	push	r11
    3636:	cf 92       	push	r12
    3638:	df 92       	push	r13
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	ec 01       	movw	r28, r24
    3648:	b6 2e       	mov	r11, r22
    364a:	c4 2e       	mov	r12, r20
    364c:	e2 2e       	mov	r14, r18
    364e:	f3 2e       	mov	r15, r19
    3650:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <u8x8_utf8_init>
    3654:	0e 2d       	mov	r16, r14
    3656:	1f 2d       	mov	r17, r15
    3658:	d1 2c       	mov	r13, r1
    365a:	7e 01       	movw	r14, r28
    365c:	25 e4       	ldi	r18, 0x45	; 69
    365e:	e2 0e       	add	r14, r18
    3660:	f1 1c       	adc	r15, r1
    3662:	f8 01       	movw	r30, r16
    3664:	61 91       	ld	r22, Z+
    3666:	8f 01       	movw	r16, r30
    3668:	ea 81       	ldd	r30, Y+2	; 0x02
    366a:	fb 81       	ldd	r31, Y+3	; 0x03
    366c:	ce 01       	movw	r24, r28
    366e:	09 95       	icall
    3670:	8f 3f       	cpi	r24, 0xFF	; 255
    3672:	ff ef       	ldi	r31, 0xFF	; 255
    3674:	9f 07       	cpc	r25, r31
    3676:	e9 f0       	breq	.+58     	; 0x36b2 <u8g2_draw_string+0x7e>
    3678:	8e 3f       	cpi	r24, 0xFE	; 254
    367a:	2f ef       	ldi	r18, 0xFF	; 255
    367c:	92 07       	cpc	r25, r18
    367e:	89 f3       	breq	.-30     	; 0x3662 <u8g2_draw_string+0x2e>
    3680:	9c 01       	movw	r18, r24
    3682:	4c 2d       	mov	r20, r12
    3684:	6b 2d       	mov	r22, r11
    3686:	ce 01       	movw	r24, r28
    3688:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <u8g2_DrawGlyph>
    368c:	f7 01       	movw	r30, r14
    368e:	90 81       	ld	r25, Z
    3690:	91 30       	cpi	r25, 0x01	; 1
    3692:	41 f0       	breq	.+16     	; 0x36a4 <u8g2_draw_string+0x70>
    3694:	28 f0       	brcs	.+10     	; 0x36a0 <u8g2_draw_string+0x6c>
    3696:	92 30       	cpi	r25, 0x02	; 2
    3698:	39 f0       	breq	.+14     	; 0x36a8 <u8g2_draw_string+0x74>
    369a:	93 30       	cpi	r25, 0x03	; 3
    369c:	39 f0       	breq	.+14     	; 0x36ac <u8g2_draw_string+0x78>
    369e:	07 c0       	rjmp	.+14     	; 0x36ae <u8g2_draw_string+0x7a>
    36a0:	b8 0e       	add	r11, r24
    36a2:	05 c0       	rjmp	.+10     	; 0x36ae <u8g2_draw_string+0x7a>
    36a4:	c8 0e       	add	r12, r24
    36a6:	03 c0       	rjmp	.+6      	; 0x36ae <u8g2_draw_string+0x7a>
    36a8:	b8 1a       	sub	r11, r24
    36aa:	01 c0       	rjmp	.+2      	; 0x36ae <u8g2_draw_string+0x7a>
    36ac:	c8 1a       	sub	r12, r24
    36ae:	d8 0e       	add	r13, r24
    36b0:	d8 cf       	rjmp	.-80     	; 0x3662 <u8g2_draw_string+0x2e>
    36b2:	8d 2d       	mov	r24, r13
    36b4:	df 91       	pop	r29
    36b6:	cf 91       	pop	r28
    36b8:	1f 91       	pop	r17
    36ba:	0f 91       	pop	r16
    36bc:	ff 90       	pop	r15
    36be:	ef 90       	pop	r14
    36c0:	df 90       	pop	r13
    36c2:	cf 90       	pop	r12
    36c4:	bf 90       	pop	r11
    36c6:	08 95       	ret

000036c8 <u8g2_DrawStr>:
    36c8:	e6 ed       	ldi	r30, 0xD6	; 214
    36ca:	fd e1       	ldi	r31, 0x1D	; 29
    36cc:	dc 01       	movw	r26, r24
    36ce:	13 96       	adiw	r26, 0x03	; 3
    36d0:	fc 93       	st	X, r31
    36d2:	ee 93       	st	-X, r30
    36d4:	12 97       	sbiw	r26, 0x02	; 2
    36d6:	0e 94 1a 1b 	call	0x3634	; 0x3634 <u8g2_draw_string>
    36da:	08 95       	ret

000036dc <u8g2_UpdateRefHeight>:
    36dc:	fc 01       	movw	r30, r24
    36de:	25 a9       	ldd	r18, Z+53	; 0x35
    36e0:	36 a9       	ldd	r19, Z+54	; 0x36
    36e2:	23 2b       	or	r18, r19
    36e4:	e9 f1       	breq	.+122    	; 0x3760 <u8g2_UpdateRefHeight+0x84>
    36e6:	ed 5a       	subi	r30, 0xAD	; 173
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	20 81       	ld	r18, Z
    36ec:	3c 96       	adiw	r30, 0x0c	; 12
    36ee:	20 83       	st	Z, r18
    36f0:	3b 97       	sbiw	r30, 0x0b	; 11
    36f2:	40 81       	ld	r20, Z
    36f4:	3c 96       	adiw	r30, 0x0c	; 12
    36f6:	40 83       	st	Z, r20
    36f8:	32 97       	sbiw	r30, 0x02	; 2
    36fa:	30 81       	ld	r19, Z
    36fc:	33 23       	and	r19, r19
    36fe:	81 f1       	breq	.+96     	; 0x3760 <u8g2_UpdateRefHeight+0x84>
    3700:	31 30       	cpi	r19, 0x01	; 1
    3702:	79 f4       	brne	.+30     	; 0x3722 <u8g2_UpdateRefHeight+0x46>
    3704:	39 97       	sbiw	r30, 0x09	; 9
    3706:	30 81       	ld	r19, Z
    3708:	23 17       	cp	r18, r19
    370a:	14 f4       	brge	.+4      	; 0x3710 <u8g2_UpdateRefHeight+0x34>
    370c:	3a 96       	adiw	r30, 0x0a	; 10
    370e:	30 83       	st	Z, r19
    3710:	fc 01       	movw	r30, r24
    3712:	ea 5a       	subi	r30, 0xAA	; 170
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	20 81       	ld	r18, Z
    3718:	24 17       	cp	r18, r20
    371a:	14 f5       	brge	.+68     	; 0x3760 <u8g2_UpdateRefHeight+0x84>
    371c:	3a 96       	adiw	r30, 0x0a	; 10
    371e:	20 83       	st	Z, r18
    3720:	08 95       	ret
    3722:	fc 01       	movw	r30, r24
    3724:	e0 5b       	subi	r30, 0xB0	; 176
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	e0 81       	ld	r30, Z
    372a:	dc 01       	movw	r26, r24
    372c:	ae 5a       	subi	r26, 0xAE	; 174
    372e:	bf 4f       	sbci	r27, 0xFF	; 255
    3730:	5c 91       	ld	r21, X
    3732:	02 2e       	mov	r0, r18
    3734:	00 0c       	add	r0, r0
    3736:	33 0b       	sbc	r19, r19
    3738:	65 2f       	mov	r22, r21
    373a:	05 2e       	mov	r0, r21
    373c:	00 0c       	add	r0, r0
    373e:	77 0b       	sbc	r23, r23
    3740:	6e 0f       	add	r22, r30
    3742:	71 1d       	adc	r23, r1
    3744:	e7 fd       	sbrc	r30, 7
    3746:	7a 95       	dec	r23
    3748:	26 17       	cp	r18, r22
    374a:	37 07       	cpc	r19, r23
    374c:	1c f4       	brge	.+6      	; 0x3754 <u8g2_UpdateRefHeight+0x78>
    374e:	1d 96       	adiw	r26, 0x0d	; 13
    3750:	e5 0f       	add	r30, r21
    3752:	ec 93       	st	X, r30
    3754:	54 17       	cp	r21, r20
    3756:	24 f4       	brge	.+8      	; 0x3760 <u8g2_UpdateRefHeight+0x84>
    3758:	fc 01       	movw	r30, r24
    375a:	e0 5a       	subi	r30, 0xA0	; 160
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	50 83       	st	Z, r21
    3760:	08 95       	ret

00003762 <u8g2_SetFontPosBaseline>:
    3762:	2c ea       	ldi	r18, 0xAC	; 172
    3764:	37 e1       	ldi	r19, 0x17	; 23
    3766:	fc 01       	movw	r30, r24
    3768:	30 af       	std	Z+56, r19	; 0x38
    376a:	27 ab       	std	Z+55, r18	; 0x37
    376c:	08 95       	ret

0000376e <u8g2_SetFont>:
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	fc 01       	movw	r30, r24
    3774:	25 a9       	ldd	r18, Z+53	; 0x35
    3776:	36 a9       	ldd	r19, Z+54	; 0x36
    3778:	26 17       	cp	r18, r22
    377a:	37 07       	cpc	r19, r23
    377c:	51 f0       	breq	.+20     	; 0x3792 <u8g2_SetFont+0x24>
    377e:	ec 01       	movw	r28, r24
    3780:	76 ab       	std	Z+54, r23	; 0x36
    3782:	65 ab       	std	Z+53, r22	; 0x35
    3784:	8a 5b       	subi	r24, 0xBA	; 186
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <u8g2_read_font_info>
    378c:	ce 01       	movw	r24, r28
    378e:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <u8g2_UpdateRefHeight>
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	08 95       	ret

00003798 <u8g2_GetStrWidth>:
    3798:	26 ed       	ldi	r18, 0xD6	; 214
    379a:	3d e1       	ldi	r19, 0x1D	; 29
    379c:	fc 01       	movw	r30, r24
    379e:	33 83       	std	Z+3, r19	; 0x03
    37a0:	22 83       	std	Z+2, r18	; 0x02
    37a2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <u8g2_string_width>
    37a6:	08 95       	ret

000037a8 <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    37a8:	8b 5b       	subi	r24, 0xBB	; 187
    37aa:	9f 4f       	sbci	r25, 0xFF	; 255
    37ac:	fc 01       	movw	r30, r24
    37ae:	60 83       	st	Z, r22
    37b0:	08 95       	ret

000037b2 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    37b2:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    37b4:	dc 01       	movw	r26, r24
    37b6:	98 96       	adiw	r26, 0x28	; 40
    37b8:	3c 91       	ld	r19, X
    37ba:	98 97       	sbiw	r26, 0x28	; 40
    37bc:	43 1b       	sub	r20, r19
    37be:	5e 96       	adiw	r26, 0x1e	; 30
    37c0:	ed 91       	ld	r30, X+
    37c2:	fc 91       	ld	r31, X
    37c4:	5f 97       	sbiw	r26, 0x1f	; 31
    37c6:	09 95       	icall
}
    37c8:	0f 91       	pop	r16
    37ca:	08 95       	ret

000037cc <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    37cc:	0f 93       	push	r16
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    37ce:	fc 01       	movw	r30, r24
    37d0:	e3 5a       	subi	r30, 0xA3	; 163
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	30 81       	ld	r19, Z
    37d6:	33 23       	and	r19, r19
    37d8:	09 f4       	brne	.+2      	; 0x37dc <u8g2_DrawHVLine+0x10>
    37da:	65 c0       	rjmp	.+202    	; 0x38a6 <u8g2_DrawHVLine+0xda>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    37dc:	22 23       	and	r18, r18
    37de:	09 f4       	brne	.+2      	; 0x37e2 <u8g2_DrawHVLine+0x16>
    37e0:	62 c0       	rjmp	.+196    	; 0x38a6 <u8g2_DrawHVLine+0xda>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    37e2:	22 30       	cpi	r18, 0x02	; 2
    37e4:	58 f0       	brcs	.+22     	; 0x37fc <u8g2_DrawHVLine+0x30>
      {
	if ( dir == 2 )
    37e6:	02 30       	cpi	r16, 0x02	; 2
    37e8:	19 f4       	brne	.+6      	; 0x37f0 <u8g2_DrawHVLine+0x24>
    37ea:	6f 5f       	subi	r22, 0xFF	; 255
	{
	  x -= len;
	  x++;
    37ec:	62 1b       	sub	r22, r18
    37ee:	0a c0       	rjmp	.+20     	; 0x3804 <u8g2_DrawHVLine+0x38>
	}
	else if ( dir == 3 )
    37f0:	03 30       	cpi	r16, 0x03	; 3
    37f2:	21 f4       	brne	.+8      	; 0x37fc <u8g2_DrawHVLine+0x30>
    37f4:	4f 5f       	subi	r20, 0xFF	; 255
	{
	  y -= len;
	  y++;
    37f6:	42 1b       	sub	r20, r18
	}
      }
      dir &= 1;  
    37f8:	51 e0       	ldi	r21, 0x01	; 1
    37fa:	2d c0       	rjmp	.+90     	; 0x3856 <u8g2_DrawHVLine+0x8a>
      
      /* clip against the user window */
      if ( dir == 0 )
    37fc:	50 2f       	mov	r21, r16
    37fe:	51 70       	andi	r21, 0x01	; 1
    3800:	00 fd       	sbrc	r16, 0
    3802:	29 c0       	rjmp	.+82     	; 0x3856 <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
    3804:	dc 01       	movw	r26, r24
    3806:	9f 96       	adiw	r26, 0x2f	; 47
    3808:	3c 91       	ld	r19, X
    380a:	9f 97       	sbiw	r26, 0x2f	; 47
    380c:	43 17       	cp	r20, r19
    380e:	08 f4       	brcc	.+2      	; 0x3812 <u8g2_DrawHVLine+0x46>
    3810:	4a c0       	rjmp	.+148    	; 0x38a6 <u8g2_DrawHVLine+0xda>
	  return;
	if ( y >= u8g2->user_y1 )
    3812:	d0 96       	adiw	r26, 0x30	; 48
    3814:	3c 91       	ld	r19, X
    3816:	d0 97       	sbiw	r26, 0x30	; 48
    3818:	43 17       	cp	r20, r19
    381a:	08 f0       	brcs	.+2      	; 0x381e <u8g2_DrawHVLine+0x52>
    381c:	44 c0       	rjmp	.+136    	; 0x38a6 <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    381e:	9e 96       	adiw	r26, 0x2e	; 46
    3820:	3c 91       	ld	r19, X
    3822:	9e 97       	sbiw	r26, 0x2e	; 46
    3824:	9d 96       	adiw	r26, 0x2d	; 45
    3826:	5c 91       	ld	r21, X
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    3828:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    382a:	26 17       	cp	r18, r22
    382c:	30 f4       	brcc	.+12     	; 0x383a <u8g2_DrawHVLine+0x6e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    382e:	63 17       	cp	r22, r19
    3830:	18 f4       	brcc	.+6      	; 0x3838 <u8g2_DrawHVLine+0x6c>
    {
      b = d;
      b--;
    3832:	2f ef       	ldi	r18, 0xFF	; 255
    3834:	23 0f       	add	r18, r19
    3836:	03 c0       	rjmp	.+6      	; 0x383e <u8g2_DrawHVLine+0x72>
    }
    else
    {
      a = c;
    3838:	65 2f       	mov	r22, r21
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    383a:	63 17       	cp	r22, r19
    383c:	a0 f5       	brcc	.+104    	; 0x38a6 <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    383e:	52 17       	cp	r21, r18
    3840:	90 f5       	brcc	.+100    	; 0x38a6 <u8g2_DrawHVLine+0xda>
    3842:	65 17       	cp	r22, r21
    3844:	08 f4       	brcc	.+2      	; 0x3848 <u8g2_DrawHVLine+0x7c>
    3846:	65 2f       	mov	r22, r21
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    3848:	23 17       	cp	r18, r19
    384a:	08 f4       	brcc	.+2      	; 0x384e <u8g2_DrawHVLine+0x82>
    384c:	32 2f       	mov	r19, r18
    384e:	23 2f       	mov	r18, r19
    3850:	26 1b       	sub	r18, r22
    3852:	50 e0       	ldi	r21, 0x00	; 0
    3854:	1e c0       	rjmp	.+60     	; 0x3892 <u8g2_DrawHVLine+0xc6>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    3856:	fc 01       	movw	r30, r24
    3858:	35 a5       	ldd	r19, Z+45	; 0x2d
    385a:	63 17       	cp	r22, r19
    385c:	20 f1       	brcs	.+72     	; 0x38a6 <u8g2_DrawHVLine+0xda>
	  return;
	if ( x >= u8g2->user_x1 )
    385e:	36 a5       	ldd	r19, Z+46	; 0x2e
    3860:	63 17       	cp	r22, r19
    3862:	08 f5       	brcc	.+66     	; 0x38a6 <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    3864:	30 a9       	ldd	r19, Z+48	; 0x30
    3866:	77 a5       	ldd	r23, Z+47	; 0x2f
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    3868:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    386a:	24 17       	cp	r18, r20
    386c:	30 f4       	brcc	.+12     	; 0x387a <u8g2_DrawHVLine+0xae>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    386e:	43 17       	cp	r20, r19
    3870:	18 f4       	brcc	.+6      	; 0x3878 <u8g2_DrawHVLine+0xac>
    {
      b = d;
      b--;
    3872:	2f ef       	ldi	r18, 0xFF	; 255
    3874:	23 0f       	add	r18, r19
    3876:	03 c0       	rjmp	.+6      	; 0x387e <u8g2_DrawHVLine+0xb2>
    }
    else
    {
      a = c;
    3878:	47 2f       	mov	r20, r23
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    387a:	43 17       	cp	r20, r19
    387c:	a0 f4       	brcc	.+40     	; 0x38a6 <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    387e:	72 17       	cp	r23, r18
    3880:	90 f4       	brcc	.+36     	; 0x38a6 <u8g2_DrawHVLine+0xda>
    3882:	47 17       	cp	r20, r23
    3884:	08 f4       	brcc	.+2      	; 0x3888 <u8g2_DrawHVLine+0xbc>
    3886:	47 2f       	mov	r20, r23
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    3888:	23 17       	cp	r18, r19
    388a:	08 f4       	brcc	.+2      	; 0x388e <u8g2_DrawHVLine+0xc2>
    388c:	32 2f       	mov	r19, r18
    388e:	23 2f       	mov	r18, r19
    3890:	24 1b       	sub	r18, r20
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    3892:	dc 01       	movw	r26, r24
    3894:	90 96       	adiw	r26, 0x20	; 32
    3896:	ed 91       	ld	r30, X+
    3898:	fc 91       	ld	r31, X
    389a:	91 97       	sbiw	r26, 0x21	; 33
    389c:	04 80       	ldd	r0, Z+4	; 0x04
    389e:	f5 81       	ldd	r31, Z+5	; 0x05
    38a0:	e0 2d       	mov	r30, r0
    38a2:	05 2f       	mov	r16, r21
    38a4:	09 95       	icall
    }
}
    38a6:	0f 91       	pop	r16
    38a8:	08 95       	ret

000038aa <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    38aa:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    38ac:	00 e0       	ldi	r16, 0x00	; 0
    38ae:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
}
    38b2:	0f 91       	pop	r16
    38b4:	08 95       	ret

000038b6 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    38b6:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
    38b8:	01 e0       	ldi	r16, 0x01	; 1
    38ba:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
}
    38be:	0f 91       	pop	r16
    38c0:	08 95       	ret

000038c2 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    38c2:	0f 93       	push	r16
    38c4:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    38c6:	87 a5       	ldd	r24, Z+47	; 0x2f
    38c8:	48 17       	cp	r20, r24
    38ca:	70 f0       	brcs	.+28     	; 0x38e8 <u8g2_DrawPixel+0x26>
    return;
  if ( y >= u8g2->user_y1 )
    38cc:	80 a9       	ldd	r24, Z+48	; 0x30
    38ce:	48 17       	cp	r20, r24
    38d0:	58 f4       	brcc	.+22     	; 0x38e8 <u8g2_DrawPixel+0x26>
    return;
  if ( x < u8g2->user_x0 )
    38d2:	85 a5       	ldd	r24, Z+45	; 0x2d
    38d4:	68 17       	cp	r22, r24
    38d6:	40 f0       	brcs	.+16     	; 0x38e8 <u8g2_DrawPixel+0x26>
    return;
  if ( x >= u8g2->user_x1 )
    38d8:	86 a5       	ldd	r24, Z+46	; 0x2e
    38da:	68 17       	cp	r22, r24
    38dc:	28 f4       	brcc	.+10     	; 0x38e8 <u8g2_DrawPixel+0x26>
    38de:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    38e0:	00 e0       	ldi	r16, 0x00	; 0
    38e2:	21 e0       	ldi	r18, 0x01	; 1
    38e4:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <u8g2_DrawHVLine>
}
    38e8:	0f 91       	pop	r16
    38ea:	08 95       	ret

000038ec <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    38ec:	63 30       	cpi	r22, 0x03	; 3
    38ee:	28 f4       	brcc	.+10     	; 0x38fa <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    38f0:	fc 01       	movw	r30, r24
    38f2:	ed 59       	subi	r30, 0x9D	; 157
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 83       	st	Z, r22
    38f8:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    38fa:	fc 01       	movw	r30, r24
    38fc:	ed 59       	subi	r30, 0x9D	; 157
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	21 e0       	ldi	r18, 0x01	; 1
    3902:	20 83       	st	Z, r18
    3904:	08 95       	ret

00003906 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    3906:	46 17       	cp	r20, r22
    3908:	38 f4       	brcc	.+14     	; 0x3918 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
    390a:	82 17       	cp	r24, r18
    390c:	60 f0       	brcs	.+24     	; 0x3926 <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	24 17       	cp	r18, r20
    3912:	60 f0       	brcs	.+24     	; 0x392c <u8g2_is_intersection_decision_tree+0x26>
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    3918:	82 17       	cp	r24, r18
    391a:	38 f4       	brcc	.+14     	; 0x392a <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	24 17       	cp	r18, r20
    3920:	28 f0       	brcs	.+10     	; 0x392c <u8g2_is_intersection_decision_tree+0x26>
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	08 95       	ret
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    392a:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    392c:	08 95       	ret

0000392e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    392e:	ff 92       	push	r15
    3930:	0f 93       	push	r16
    3932:	1f 93       	push	r17
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	ec 01       	movw	r28, r24
    393a:	16 2f       	mov	r17, r22
    393c:	f2 2e       	mov	r15, r18
    393e:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    3940:	68 a9       	ldd	r22, Y+48	; 0x30
    3942:	8f a5       	ldd	r24, Y+47	; 0x2f
    3944:	0e 94 83 1c 	call	0x3906	; 0x3906 <u8g2_is_intersection_decision_tree>
    3948:	88 23       	and	r24, r24
    394a:	31 f0       	breq	.+12     	; 0x3958 <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    394c:	2f 2d       	mov	r18, r15
    394e:	41 2f       	mov	r20, r17
    3950:	6e a5       	ldd	r22, Y+46	; 0x2e
    3952:	8d a5       	ldd	r24, Y+45	; 0x2d
    3954:	0e 94 83 1c 	call	0x3906	; 0x3906 <u8g2_is_intersection_decision_tree>
}
    3958:	df 91       	pop	r29
    395a:	cf 91       	pop	r28
    395c:	1f 91       	pop	r17
    395e:	0f 91       	pop	r16
    3960:	ff 90       	pop	r15
    3962:	08 95       	ret

00003964 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3964:	ef 92       	push	r14
    3966:	ff 92       	push	r15
    3968:	0f 93       	push	r16
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    3970:	34 2f       	mov	r19, r20
    3972:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	03 2e       	mov	r0, r19
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    397c:	88 0f       	add	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	0a 94       	dec	r0
    3982:	e2 f7       	brpl	.-8      	; 0x397c <u8g2_ll_hvline_vertical_top_lsb+0x18>
    3984:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    3986:	f7 01       	movw	r30, r14
    3988:	ed 59       	subi	r30, 0x9D	; 157
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	50 81       	ld	r21, Z
    398e:	52 30       	cpi	r21, 0x02	; 2
    3990:	20 f4       	brcc	.+8      	; 0x399a <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    3992:	51 30       	cpi	r21, 0x01	; 1
    3994:	21 f0       	breq	.+8      	; 0x399e <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    3996:	78 2f       	mov	r23, r24
    3998:	04 c0       	rjmp	.+8      	; 0x39a2 <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    399e:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    39a0:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    39a2:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    39a4:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    39a6:	d7 01       	movw	r26, r14
    39a8:	92 96       	adiw	r26, 0x22	; 34
    39aa:	8d 91       	ld	r24, X+
    39ac:	9c 91       	ld	r25, X
    39ae:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    39b0:	ed 91       	ld	r30, X+
    39b2:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    39b4:	d0 89       	ldd	r29, Z+16	; 0x10
    39b6:	d4 9f       	mul	r29, r20
    39b8:	f0 01       	movw	r30, r0
    39ba:	d5 9f       	mul	r29, r21
    39bc:	f0 0d       	add	r31, r0
    39be:	11 24       	eor	r1, r1
    39c0:	e6 0f       	add	r30, r22
    39c2:	f1 1d       	adc	r31, r1
    39c4:	e8 0f       	add	r30, r24
    39c6:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    39c8:	01 11       	cpse	r16, r1
    39ca:	07 c0       	rjmp	.+14     	; 0x39da <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    39cc:	80 81       	ld	r24, Z
    39ce:	87 2b       	or	r24, r23
    39d0:	8c 27       	eor	r24, r28
    39d2:	81 93       	st	Z+, r24
	ptr++;
	len--;
    39d4:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    39d6:	d1 f7       	brne	.-12     	; 0x39cc <u8g2_ll_hvline_vertical_top_lsb+0x68>
    39d8:	22 c0       	rjmp	.+68     	; 0x3a1e <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    39da:	a7 01       	movw	r20, r14
    39dc:	4d 59       	subi	r20, 0x9D	; 157
    39de:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    39e0:	90 81       	ld	r25, Z
    39e2:	97 2b       	or	r25, r23
    39e4:	9c 27       	eor	r25, r28
    39e6:	90 83       	st	Z, r25
      
      bit_pos++;
    39e8:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    39ea:	37 70       	andi	r19, 0x07	; 7

      len--;
    39ec:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    39ee:	31 11       	cpse	r19, r1
    39f0:	0e c0       	rjmp	.+28     	; 0x3a0e <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    39f2:	d7 01       	movw	r26, r14
    39f4:	96 96       	adiw	r26, 0x26	; 38
    39f6:	8c 91       	ld	r24, X
    39f8:	e8 0f       	add	r30, r24
    39fa:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    39fc:	da 01       	movw	r26, r20
    39fe:	8c 91       	ld	r24, X
    3a00:	82 30       	cpi	r24, 0x02	; 2
    3a02:	40 f4       	brcc	.+16     	; 0x3a14 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    3a04:	81 30       	cpi	r24, 0x01	; 1
    3a06:	41 f0       	breq	.+16     	; 0x3a18 <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    3a08:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3a0a:	71 e0       	ldi	r23, 0x01	; 1
    3a0c:	06 c0       	rjmp	.+12     	; 0x3a1a <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    3a0e:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    3a10:	cc 0f       	add	r28, r28
    3a12:	03 c0       	rjmp	.+6      	; 0x3a1a <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    3a14:	c1 e0       	ldi	r28, 0x01	; 1
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3a18:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    3a1a:	21 11       	cpse	r18, r1
    3a1c:	e1 cf       	rjmp	.-62     	; 0x39e0 <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	08 95       	ret

00003a2a <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	a0 81       	ld	r26, Z
    3a2e:	b1 81       	ldd	r27, Z+1	; 0x01
    3a30:	84 a1       	ldd	r24, Z+36	; 0x24
    3a32:	98 2f       	mov	r25, r24
    3a34:	99 0f       	add	r25, r25
    3a36:	99 0f       	add	r25, r25
    3a38:	99 0f       	add	r25, r25
    3a3a:	97 a3       	std	Z+39, r25	; 0x27
    3a3c:	50 96       	adiw	r26, 0x10	; 16
    3a3e:	9c 91       	ld	r25, X
    3a40:	50 97       	sbiw	r26, 0x10	; 16
    3a42:	90 32       	cpi	r25, 0x20	; 32
    3a44:	08 f0       	brcs	.+2      	; 0x3a48 <u8g2_update_dimension_common+0x1e>
    3a46:	9f e1       	ldi	r25, 0x1F	; 31
    3a48:	99 0f       	add	r25, r25
    3a4a:	99 0f       	add	r25, r25
    3a4c:	99 0f       	add	r25, r25
    3a4e:	96 a3       	std	Z+38, r25	; 0x26
    3a50:	45 a1       	ldd	r20, Z+37	; 0x25
    3a52:	94 2f       	mov	r25, r20
    3a54:	99 0f       	add	r25, r25
    3a56:	99 0f       	add	r25, r25
    3a58:	99 0f       	add	r25, r25
    3a5a:	90 a7       	std	Z+40, r25	; 0x28
    3a5c:	51 96       	adiw	r26, 0x11	; 17
    3a5e:	5c 91       	ld	r21, X
    3a60:	51 97       	sbiw	r26, 0x11	; 17
    3a62:	24 2f       	mov	r18, r20
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	28 0f       	add	r18, r24
    3a68:	31 1d       	adc	r19, r1
    3a6a:	65 2f       	mov	r22, r21
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	62 17       	cp	r22, r18
    3a70:	73 07       	cpc	r23, r19
    3a72:	14 f4       	brge	.+4      	; 0x3a78 <u8g2_update_dimension_common+0x4e>
    3a74:	85 2f       	mov	r24, r21
    3a76:	84 1b       	sub	r24, r20
    3a78:	91 a7       	std	Z+41, r25	; 0x29
    3a7a:	88 0f       	add	r24, r24
    3a7c:	88 0f       	add	r24, r24
    3a7e:	88 0f       	add	r24, r24
    3a80:	89 0f       	add	r24, r25
    3a82:	82 a7       	std	Z+42, r24	; 0x2a
    3a84:	80 ef       	ldi	r24, 0xF0	; 240
    3a86:	83 a7       	std	Z+43, r24	; 0x2b
    3a88:	54 96       	adiw	r26, 0x14	; 20
    3a8a:	8d 91       	ld	r24, X+
    3a8c:	9c 91       	ld	r25, X
    3a8e:	55 97       	sbiw	r26, 0x15	; 21
    3a90:	81 3f       	cpi	r24, 0xF1	; 241
    3a92:	91 05       	cpc	r25, r1
    3a94:	08 f4       	brcc	.+2      	; 0x3a98 <u8g2_update_dimension_common+0x6e>
    3a96:	83 a7       	std	Z+43, r24	; 0x2b
    3a98:	56 96       	adiw	r26, 0x16	; 22
    3a9a:	8c 91       	ld	r24, X
    3a9c:	84 a7       	std	Z+44, r24	; 0x2c
    3a9e:	08 95       	ret

00003aa0 <u8g2_update_dimension_r0>:
    3aa0:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <u8g2_update_dimension_common>
    3aa4:	08 95       	ret

00003aa6 <u8g2_apply_clip_window>:
    3aa6:	0f 93       	push	r16
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	ec 01       	movw	r28, r24
    3aae:	0c a9       	ldd	r16, Y+52	; 0x34
    3ab0:	2a a9       	ldd	r18, Y+50	; 0x32
    3ab2:	4b a9       	ldd	r20, Y+51	; 0x33
    3ab4:	69 a9       	ldd	r22, Y+49	; 0x31
    3ab6:	0e 94 97 1c 	call	0x392e	; 0x392e <u8g2_IsIntersection>
    3aba:	81 11       	cpse	r24, r1
    3abc:	04 c0       	rjmp	.+8      	; 0x3ac6 <u8g2_apply_clip_window+0x20>
    3abe:	c3 5a       	subi	r28, 0xA3	; 163
    3ac0:	df 4f       	sbci	r29, 0xFF	; 255
    3ac2:	18 82       	st	Y, r1
    3ac4:	19 c0       	rjmp	.+50     	; 0x3af8 <u8g2_apply_clip_window+0x52>
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e3 5a       	subi	r30, 0xA3	; 163
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 83       	st	Z, r24
    3ad0:	89 a9       	ldd	r24, Y+49	; 0x31
    3ad2:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ad4:	98 17       	cp	r25, r24
    3ad6:	08 f4       	brcc	.+2      	; 0x3ada <u8g2_apply_clip_window+0x34>
    3ad8:	8d a7       	std	Y+45, r24	; 0x2d
    3ada:	8a a9       	ldd	r24, Y+50	; 0x32
    3adc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ade:	89 17       	cp	r24, r25
    3ae0:	08 f4       	brcc	.+2      	; 0x3ae4 <u8g2_apply_clip_window+0x3e>
    3ae2:	8e a7       	std	Y+46, r24	; 0x2e
    3ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ae6:	9f a5       	ldd	r25, Y+47	; 0x2f
    3ae8:	98 17       	cp	r25, r24
    3aea:	08 f4       	brcc	.+2      	; 0x3aee <u8g2_apply_clip_window+0x48>
    3aec:	8f a7       	std	Y+47, r24	; 0x2f
    3aee:	8c a9       	ldd	r24, Y+52	; 0x34
    3af0:	98 a9       	ldd	r25, Y+48	; 0x30
    3af2:	89 17       	cp	r24, r25
    3af4:	08 f4       	brcc	.+2      	; 0x3af8 <u8g2_apply_clip_window+0x52>
    3af6:	88 ab       	std	Y+48, r24	; 0x30
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	0f 91       	pop	r16
    3afe:	08 95       	ret

00003b00 <u8g2_update_page_win_r0>:
    3b00:	fc 01       	movw	r30, r24
    3b02:	15 a6       	std	Z+45, r1	; 0x2d
    3b04:	83 a5       	ldd	r24, Z+43	; 0x2b
    3b06:	86 a7       	std	Z+46, r24	; 0x2e
    3b08:	81 a5       	ldd	r24, Z+41	; 0x29
    3b0a:	87 a7       	std	Z+47, r24	; 0x2f
    3b0c:	82 a5       	ldd	r24, Z+42	; 0x2a
    3b0e:	80 ab       	std	Z+48, r24	; 0x30
    3b10:	cf 01       	movw	r24, r30
    3b12:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <u8g2_apply_clip_window>
    3b16:	08 95       	ret

00003b18 <u8g2_draw_l90_r0>:
    3b18:	0f 93       	push	r16
    3b1a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <u8g2_draw_hv_line_2dir>
    3b1e:	0f 91       	pop	r16
    3b20:	08 95       	ret

00003b22 <u8g2_SetMaxClipWindow>:
    3b22:	dc 01       	movw	r26, r24
    3b24:	d1 96       	adiw	r26, 0x31	; 49
    3b26:	1c 92       	st	X, r1
    3b28:	d1 97       	sbiw	r26, 0x31	; 49
    3b2a:	d3 96       	adiw	r26, 0x33	; 51
    3b2c:	1c 92       	st	X, r1
    3b2e:	d3 97       	sbiw	r26, 0x33	; 51
    3b30:	8f ef       	ldi	r24, 0xFF	; 255
    3b32:	d2 96       	adiw	r26, 0x32	; 50
    3b34:	8c 93       	st	X, r24
    3b36:	d2 97       	sbiw	r26, 0x32	; 50
    3b38:	d4 96       	adiw	r26, 0x34	; 52
    3b3a:	8c 93       	st	X, r24
    3b3c:	d4 97       	sbiw	r26, 0x34	; 52
    3b3e:	90 96       	adiw	r26, 0x20	; 32
    3b40:	ed 91       	ld	r30, X+
    3b42:	fc 91       	ld	r31, X
    3b44:	91 97       	sbiw	r26, 0x21	; 33
    3b46:	02 80       	ldd	r0, Z+2	; 0x02
    3b48:	f3 81       	ldd	r31, Z+3	; 0x03
    3b4a:	e0 2d       	mov	r30, r0
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	09 95       	icall
    3b50:	08 95       	ret

00003b52 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    3b5c:	1e aa       	std	Y+54, r1	; 0x36
    3b5e:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    3b60:	3f 8f       	std	Y+31, r19	; 0x1f
    3b62:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    3b64:	7b a3       	std	Y+35, r23	; 0x23
    3b66:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    3b68:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    3b6a:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	ee 5b       	subi	r30, 0xBE	; 190
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    3b74:	b0 96       	adiw	r30, 0x20	; 32
    3b76:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    3b78:	31 96       	adiw	r30, 0x01	; 1
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    3b7e:	31 96       	adiw	r30, 0x01	; 1
    3b80:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    3b82:	19 a3       	std	Y+33, r17	; 0x21
    3b84:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    3b86:	d8 01       	movw	r26, r16
    3b88:	ed 91       	ld	r30, X+
    3b8a:	fc 91       	ld	r31, X
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    3b90:	ce 01       	movw	r24, r28
    3b92:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    3b96:	ce 01       	movw	r24, r28
    3b98:	0e 94 b1 1b 	call	0x3762	; 0x3762 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    3b9c:	cb 5b       	subi	r28, 0xBB	; 187
    3b9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ba0:	18 82       	st	Y, r1
#endif
}
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret

00003bac <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    3bac:	66 23       	and	r22, r22
    3bae:	29 f0       	breq	.+10     	; 0x3bba <u8x8_ascii_next+0xe>
    3bb0:	6a 30       	cpi	r22, 0x0A	; 10
    3bb2:	31 f0       	breq	.+12     	; 0x3bc0 <u8x8_ascii_next+0x14>
    3bb4:	86 2f       	mov	r24, r22
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	08 95       	ret
    3bba:	8f ef       	ldi	r24, 0xFF	; 255
    3bbc:	9f ef       	ldi	r25, 0xFF	; 255
    3bbe:	08 95       	ret
    3bc0:	8f ef       	ldi	r24, 0xFF	; 255
    3bc2:	9f ef       	ldi	r25, 0xFF	; 255
    3bc4:	08 95       	ret

00003bc6 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	10 8e       	std	Z+24, r1	; 0x18
    3bca:	08 95       	ret

00003bcc <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3bcc:	0f 93       	push	r16
    3bce:	1f 93       	push	r17
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
	uint8_t *data;
	switch(msg){
    3bd4:	68 31       	cpi	r22, 0x18	; 24
    3bd6:	19 f1       	breq	.+70     	; 0x3c1e <u8x8_byte_avr_hw_i2c+0x52>
    3bd8:	28 f4       	brcc	.+10     	; 0x3be4 <u8x8_byte_avr_hw_i2c+0x18>
    3bda:	64 31       	cpi	r22, 0x14	; 20
    3bdc:	e1 f0       	breq	.+56     	; 0x3c16 <u8x8_byte_avr_hw_i2c+0x4a>
    3bde:	67 31       	cpi	r22, 0x17	; 23
    3be0:	39 f0       	breq	.+14     	; 0x3bf0 <u8x8_byte_avr_hw_i2c+0x24>
    3be2:	27 c0       	rjmp	.+78     	; 0x3c32 <u8x8_byte_avr_hw_i2c+0x66>
    3be4:	69 31       	cpi	r22, 0x19	; 25
    3be6:	09 f1       	breq	.+66     	; 0x3c2a <u8x8_byte_avr_hw_i2c+0x5e>
    3be8:	60 32       	cpi	r22, 0x20	; 32
    3bea:	19 f5       	brne	.+70     	; 0x3c32 <u8x8_byte_avr_hw_i2c+0x66>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	24 c0       	rjmp	.+72     	; 0x3c38 <u8x8_byte_avr_hw_i2c+0x6c>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    3bf0:	8f ef       	ldi	r24, 0xFF	; 255
    3bf2:	84 0f       	add	r24, r20
    3bf4:	44 23       	and	r20, r20
    3bf6:	f9 f0       	breq	.+62     	; 0x3c36 <u8x8_byte_avr_hw_i2c+0x6a>
    3bf8:	e9 01       	movw	r28, r18
    3bfa:	08 2f       	mov	r16, r24
    3bfc:	10 e0       	ldi	r17, 0x00	; 0
    3bfe:	0f 5f       	subi	r16, 0xFF	; 255
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	02 0f       	add	r16, r18
    3c04:	13 1f       	adc	r17, r19
				i2c_write(*data++);
    3c06:	89 91       	ld	r24, Y+
    3c08:	0e 94 34 14 	call	0x2868	; 0x2868 <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    3c0c:	0c 17       	cp	r16, r28
    3c0e:	1d 07       	cpc	r17, r29
    3c10:	d1 f7       	brne	.-12     	; 0x3c06 <u8x8_byte_avr_hw_i2c+0x3a>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	11 c0       	rjmp	.+34     	; 0x3c38 <u8x8_byte_avr_hw_i2c+0x6c>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    3c16:	0e 94 de 13 	call	0x27bc	; 0x27bc <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    3c1c:	0d c0       	rjmp	.+26     	; 0x3c38 <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    3c1e:	fc 01       	movw	r30, r24
    3c20:	86 89       	ldd	r24, Z+22	; 0x16
    3c22:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    3c28:	07 c0       	rjmp	.+14     	; 0x3c38 <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    3c2a:	0e 94 24 14 	call	0x2848	; 0x2848 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    3c30:	03 c0       	rjmp	.+6      	; 0x3c38 <u8x8_byte_avr_hw_i2c+0x6c>
		default:
			return 0;
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	01 c0       	rjmp	.+2      	; 0x3c38 <u8x8_byte_avr_hw_i2c+0x6c>
	}
	return 1;
    3c36:	81 e0       	ldi	r24, 0x01	; 1
}
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	08 95       	ret

00003c42 <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    3c42:	6a 32       	cpi	r22, 0x2A	; 42
    3c44:	51 f0       	breq	.+20     	; 0x3c5a <u8x8_avr_delay+0x18>
    3c46:	18 f4       	brcc	.+6      	; 0x3c4e <u8x8_avr_delay+0xc>
    3c48:	69 32       	cpi	r22, 0x29	; 41
    3c4a:	59 f0       	breq	.+22     	; 0x3c62 <u8x8_avr_delay+0x20>
    3c4c:	33 c0       	rjmp	.+102    	; 0x3cb4 <u8x8_avr_delay+0x72>
    3c4e:	6b 32       	cpi	r22, 0x2B	; 43
    3c50:	61 f0       	breq	.+24     	; 0x3c6a <u8x8_avr_delay+0x28>
    3c52:	6c 32       	cpi	r22, 0x2C	; 44
    3c54:	79 f5       	brne	.+94     	; 0x3cb4 <u8x8_avr_delay+0x72>
			break;
		default:
			return 0;
	}

	return 1;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	08 95       	ret
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3c5a:	41 11       	cpse	r20, r1
    3c5c:	19 c0       	rjmp	.+50     	; 0x3c90 <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3c62:	41 11       	cpse	r20, r1
    3c64:	1d c0       	rjmp	.+58     	; 0x3ca0 <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    3c6a:	24 2f       	mov	r18, r20
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	a4 e6       	ldi	r26, 0x64	; 100
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__umulhisi3>
    3c76:	20 ea       	ldi	r18, 0xA0	; 160
    3c78:	3f e0       	ldi	r19, 0x0F	; 15
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	50 e0       	ldi	r21, 0x00	; 0
    3c7e:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    3c82:	23 32       	cpi	r18, 0x23	; 35
    3c84:	c8 f4       	brcc	.+50     	; 0x3cb8 <u8x8_avr_delay+0x76>
				break;

			__asm__ __volatile__ (
    3c86:	82 2f       	mov	r24, r18
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <u8x8_avr_delay+0x46>
			break;
		default:
			return 0;
	}

	return 1;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    3c8e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c90:	83 e0       	ldi	r24, 0x03	; 3
    3c92:	8a 95       	dec	r24
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <u8x8_avr_delay+0x50>
    3c96:	00 00       	nop
    3c98:	41 50       	subi	r20, 0x01	; 1
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3c9a:	d1 f7       	brne	.-12     	; 0x3c90 <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ca0:	89 ef       	ldi	r24, 0xF9	; 249
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <u8x8_avr_delay+0x62>
    3ca8:	00 c0       	rjmp	.+0      	; 0x3caa <u8x8_avr_delay+0x68>
    3caa:	00 00       	nop
    3cac:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3cae:	c1 f7       	brne	.-16     	; 0x3ca0 <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	08 95       	ret
	}

	return 1;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
}
    3cba:	08 95       	ret

00003cbc <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    3cbc:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	18 96       	adiw	r26, 0x08	; 8
    3cc2:	ed 91       	ld	r30, X+
    3cc4:	fc 91       	ld	r31, X
    3cc6:	19 97       	sbiw	r26, 0x09	; 9
    3cc8:	46 2f       	mov	r20, r22
    3cca:	67 e1       	ldi	r22, 0x17	; 23
    3ccc:	09 95       	icall
}
    3cce:	08 95       	ret

00003cd0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	1f 92       	push	r1
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    3cdc:	ae 01       	movw	r20, r28
    3cde:	4f 5f       	subi	r20, 0xFF	; 255
    3ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce2:	61 e0       	ldi	r22, 0x01	; 1
    3ce4:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <u8x8_byte_SendBytes>
}
    3ce8:	0f 90       	pop	r0
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	08 95       	ret

00003cf0 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	18 96       	adiw	r26, 0x08	; 8
    3cf4:	ed 91       	ld	r30, X+
    3cf6:	fc 91       	ld	r31, X
    3cf8:	19 97       	sbiw	r26, 0x09	; 9
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e0       	ldi	r20, 0x00	; 0
    3d00:	68 e1       	ldi	r22, 0x18	; 24
    3d02:	09 95       	icall
}
    3d04:	08 95       	ret

00003d06 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    3d06:	dc 01       	movw	r26, r24
    3d08:	18 96       	adiw	r26, 0x08	; 8
    3d0a:	ed 91       	ld	r30, X+
    3d0c:	fc 91       	ld	r31, X
    3d0e:	19 97       	sbiw	r26, 0x09	; 9
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	69 e1       	ldi	r22, 0x19	; 25
    3d18:	09 95       	icall
}
    3d1a:	08 95       	ret

00003d1c <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	ec 01       	movw	r28, r24
    3d28:	16 2f       	mov	r17, r22
    3d2a:	7a 01       	movw	r14, r20
    3d2c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <u8x8_byte_StartTransfer>
    3d30:	60 e4       	ldi	r22, 0x40	; 64
    3d32:	ce 01       	movw	r24, r28
    3d34:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <u8x8_byte_SendByte>
    3d38:	e8 85       	ldd	r30, Y+8	; 0x08
    3d3a:	f9 85       	ldd	r31, Y+9	; 0x09
    3d3c:	97 01       	movw	r18, r14
    3d3e:	41 2f       	mov	r20, r17
    3d40:	67 e1       	ldi	r22, 0x17	; 23
    3d42:	ce 01       	movw	r24, r28
    3d44:	09 95       	icall
    3d46:	ce 01       	movw	r24, r28
    3d48:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <u8x8_byte_EndTransfer>
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	1f 91       	pop	r17
    3d52:	ff 90       	pop	r15
    3d54:	ef 90       	pop	r14
    3d56:	08 95       	ret

00003d58 <u8x8_cad_SendCmd>:
    3d58:	46 2f       	mov	r20, r22
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	16 96       	adiw	r26, 0x06	; 6
    3d5e:	ed 91       	ld	r30, X+
    3d60:	fc 91       	ld	r31, X
    3d62:	17 97       	sbiw	r26, 0x07	; 7
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	65 e1       	ldi	r22, 0x15	; 21
    3d6a:	09 95       	icall
    3d6c:	08 95       	ret

00003d6e <u8x8_cad_SendArg>:
    3d6e:	46 2f       	mov	r20, r22
    3d70:	dc 01       	movw	r26, r24
    3d72:	16 96       	adiw	r26, 0x06	; 6
    3d74:	ed 91       	ld	r30, X+
    3d76:	fc 91       	ld	r31, X
    3d78:	17 97       	sbiw	r26, 0x07	; 7
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	66 e1       	ldi	r22, 0x16	; 22
    3d80:	09 95       	icall
    3d82:	08 95       	ret

00003d84 <u8x8_cad_SendData>:
    3d84:	9a 01       	movw	r18, r20
    3d86:	dc 01       	movw	r26, r24
    3d88:	16 96       	adiw	r26, 0x06	; 6
    3d8a:	ed 91       	ld	r30, X+
    3d8c:	fc 91       	ld	r31, X
    3d8e:	17 97       	sbiw	r26, 0x07	; 7
    3d90:	46 2f       	mov	r20, r22
    3d92:	67 e1       	ldi	r22, 0x17	; 23
    3d94:	09 95       	icall
    3d96:	08 95       	ret

00003d98 <u8x8_cad_StartTransfer>:
    3d98:	dc 01       	movw	r26, r24
    3d9a:	16 96       	adiw	r26, 0x06	; 6
    3d9c:	ed 91       	ld	r30, X+
    3d9e:	fc 91       	ld	r31, X
    3da0:	17 97       	sbiw	r26, 0x07	; 7
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	68 e1       	ldi	r22, 0x18	; 24
    3daa:	09 95       	icall
    3dac:	08 95       	ret

00003dae <u8x8_cad_EndTransfer>:
    3dae:	dc 01       	movw	r26, r24
    3db0:	16 96       	adiw	r26, 0x06	; 6
    3db2:	ed 91       	ld	r30, X+
    3db4:	fc 91       	ld	r31, X
    3db6:	17 97       	sbiw	r26, 0x07	; 7
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	69 e1       	ldi	r22, 0x19	; 25
    3dc0:	09 95       	icall
    3dc2:	08 95       	ret

00003dc4 <u8x8_cad_SendSequence>:
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	1f 92       	push	r1
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	7c 01       	movw	r14, r24
    3dd8:	8b 01       	movw	r16, r22
    3dda:	d8 01       	movw	r26, r16
    3ddc:	6c 91       	ld	r22, X
    3dde:	67 31       	cpi	r22, 0x17	; 23
    3de0:	c1 f0       	breq	.+48     	; 0x3e12 <u8x8_cad_SendSequence+0x4e>
    3de2:	18 f4       	brcc	.+6      	; 0x3dea <u8x8_cad_SendSequence+0x26>
    3de4:	65 31       	cpi	r22, 0x15	; 21
    3de6:	30 f4       	brcc	.+12     	; 0x3df4 <u8x8_cad_SendSequence+0x30>
    3de8:	38 c0       	rjmp	.+112    	; 0x3e5a <u8x8_cad_SendSequence+0x96>
    3dea:	6a 31       	cpi	r22, 0x1A	; 26
    3dec:	f8 f0       	brcs	.+62     	; 0x3e2c <u8x8_cad_SendSequence+0x68>
    3dee:	6e 3f       	cpi	r22, 0xFE	; 254
    3df0:	51 f1       	breq	.+84     	; 0x3e46 <u8x8_cad_SendSequence+0x82>
    3df2:	33 c0       	rjmp	.+102    	; 0x3e5a <u8x8_cad_SendSequence+0x96>
    3df4:	f8 01       	movw	r30, r16
    3df6:	41 81       	ldd	r20, Z+1	; 0x01
    3df8:	49 83       	std	Y+1, r20	; 0x01
    3dfa:	d7 01       	movw	r26, r14
    3dfc:	16 96       	adiw	r26, 0x06	; 6
    3dfe:	ed 91       	ld	r30, X+
    3e00:	fc 91       	ld	r31, X
    3e02:	17 97       	sbiw	r26, 0x07	; 7
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	c7 01       	movw	r24, r14
    3e0a:	09 95       	icall
    3e0c:	0e 5f       	subi	r16, 0xFE	; 254
    3e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e10:	e4 cf       	rjmp	.-56     	; 0x3dda <u8x8_cad_SendSequence+0x16>
    3e12:	f8 01       	movw	r30, r16
    3e14:	81 81       	ldd	r24, Z+1	; 0x01
    3e16:	89 83       	std	Y+1, r24	; 0x01
    3e18:	ae 01       	movw	r20, r28
    3e1a:	4f 5f       	subi	r20, 0xFF	; 255
    3e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1e:	61 e0       	ldi	r22, 0x01	; 1
    3e20:	c7 01       	movw	r24, r14
    3e22:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <u8x8_cad_SendData>
    3e26:	0e 5f       	subi	r16, 0xFE	; 254
    3e28:	1f 4f       	sbci	r17, 0xFF	; 255
    3e2a:	d7 cf       	rjmp	.-82     	; 0x3dda <u8x8_cad_SendSequence+0x16>
    3e2c:	0f 5f       	subi	r16, 0xFF	; 255
    3e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e30:	d7 01       	movw	r26, r14
    3e32:	16 96       	adiw	r26, 0x06	; 6
    3e34:	ed 91       	ld	r30, X+
    3e36:	fc 91       	ld	r31, X
    3e38:	17 97       	sbiw	r26, 0x07	; 7
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e0       	ldi	r20, 0x00	; 0
    3e40:	c7 01       	movw	r24, r14
    3e42:	09 95       	icall
    3e44:	ca cf       	rjmp	.-108    	; 0x3dda <u8x8_cad_SendSequence+0x16>
    3e46:	f8 01       	movw	r30, r16
    3e48:	41 81       	ldd	r20, Z+1	; 0x01
    3e4a:	49 83       	std	Y+1, r20	; 0x01
    3e4c:	69 e2       	ldi	r22, 0x29	; 41
    3e4e:	c7 01       	movw	r24, r14
    3e50:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <u8x8_gpio_call>
    3e54:	0e 5f       	subi	r16, 0xFE	; 254
    3e56:	1f 4f       	sbci	r17, 0xFF	; 255
    3e58:	c0 cf       	rjmp	.-128    	; 0x3dda <u8x8_cad_SendSequence+0x16>
    3e5a:	0f 90       	pop	r0
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	ff 90       	pop	r15
    3e66:	ef 90       	pop	r14
    3e68:	08 95       	ret

00003e6a <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3e6a:	ef 92       	push	r14
    3e6c:	ff 92       	push	r15
    3e6e:	0f 93       	push	r16
    3e70:	1f 93       	push	r17
    3e72:	cf 93       	push	r28
    3e74:	7c 01       	movw	r14, r24
    3e76:	c4 2f       	mov	r28, r20
    3e78:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    3e7a:	66 31       	cpi	r22, 0x16	; 22
    3e7c:	29 f1       	breq	.+74     	; 0x3ec8 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    3e7e:	30 f4       	brcc	.+12     	; 0x3e8c <u8x8_cad_ssd13xx_fast_i2c+0x22>
    3e80:	64 31       	cpi	r22, 0x14	; 20
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    3e84:	42 c0       	rjmp	.+132    	; 0x3f0a <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    3e86:	65 31       	cpi	r22, 0x15	; 21
    3e88:	49 f0       	breq	.+18     	; 0x3e9c <u8x8_cad_ssd13xx_fast_i2c+0x32>
    3e8a:	62 c0       	rjmp	.+196    	; 0x3f50 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    3e8c:	68 31       	cpi	r22, 0x18	; 24
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <u8x8_cad_ssd13xx_fast_i2c+0x28>
    3e90:	50 c0       	rjmp	.+160    	; 0x3f32 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    3e92:	f8 f0       	brcs	.+62     	; 0x3ed2 <u8x8_cad_ssd13xx_fast_i2c+0x68>
    3e94:	69 31       	cpi	r22, 0x19	; 25
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <u8x8_cad_ssd13xx_fast_i2c+0x30>
    3e98:	50 c0       	rjmp	.+160    	; 0x3f3a <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    3e9a:	5a c0       	rjmp	.+180    	; 0x3f50 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    3e9c:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <in_transfer.3298>
    3ea0:	88 23       	and	r24, r24
    3ea2:	19 f0       	breq	.+6      	; 0x3eaa <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    3ea4:	c7 01       	movw	r24, r14
    3ea6:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    3eaa:	c7 01       	movw	r24, r14
    3eac:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    3eb0:	60 e0       	ldi	r22, 0x00	; 0
    3eb2:	c7 01       	movw	r24, r14
    3eb4:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    3eb8:	6c 2f       	mov	r22, r28
    3eba:	c7 01       	movw	r24, r14
    3ebc:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <u8x8_byte_SendByte>
      in_transfer = 1;
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <in_transfer.3298>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    3ec6:	45 c0       	rjmp	.+138    	; 0x3f52 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    3ec8:	64 2f       	mov	r22, r20
    3eca:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    3ed0:	40 c0       	rjmp	.+128    	; 0x3f52 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    3ed2:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <in_transfer.3298>
    3ed6:	88 23       	and	r24, r24
    3ed8:	19 f0       	breq	.+6      	; 0x3ee0 <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    3eda:	c7 01       	movw	r24, r14
    3edc:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3ee0:	c9 31       	cpi	r28, 0x19	; 25
    3ee2:	50 f0       	brcs	.+20     	; 0x3ef8 <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    3ee4:	a8 01       	movw	r20, r16
    3ee6:	68 e1       	ldi	r22, 0x18	; 24
    3ee8:	c7 01       	movw	r24, r14
    3eea:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <u8x8_i2c_data_transfer>
	arg_int-=24;
    3eee:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    3ef0:	08 5e       	subi	r16, 0xE8	; 232
    3ef2:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3ef4:	c9 31       	cpi	r28, 0x19	; 25
    3ef6:	b0 f7       	brcc	.-20     	; 0x3ee4 <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    3ef8:	a8 01       	movw	r20, r16
    3efa:	6c 2f       	mov	r22, r28
    3efc:	c7 01       	movw	r24, r14
    3efe:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <u8x8_i2c_data_transfer>
      in_transfer = 0;
    3f02:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    3f08:	24 c0       	rjmp	.+72     	; 0x3f52 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	56 96       	adiw	r26, 0x16	; 22
    3f0e:	8c 91       	ld	r24, X
    3f10:	56 97       	sbiw	r26, 0x16	; 22
    3f12:	8f 3f       	cpi	r24, 0xFF	; 255
    3f14:	19 f4       	brne	.+6      	; 0x3f1c <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    3f16:	88 e7       	ldi	r24, 0x78	; 120
    3f18:	56 96       	adiw	r26, 0x16	; 22
    3f1a:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    3f1c:	d7 01       	movw	r26, r14
    3f1e:	18 96       	adiw	r26, 0x08	; 8
    3f20:	ed 91       	ld	r30, X+
    3f22:	fc 91       	ld	r31, X
    3f24:	19 97       	sbiw	r26, 0x09	; 9
    3f26:	98 01       	movw	r18, r16
    3f28:	4c 2f       	mov	r20, r28
    3f2a:	64 e1       	ldi	r22, 0x14	; 20
    3f2c:	c7 01       	movw	r24, r14
    3f2e:	09 95       	icall
    3f30:	10 c0       	rjmp	.+32     	; 0x3f52 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    3f32:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    3f38:	0c c0       	rjmp	.+24     	; 0x3f52 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    3f3a:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <in_transfer.3298>
    3f3e:	88 23       	and	r24, r24
    3f40:	19 f0       	breq	.+6      	; 0x3f48 <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    3f42:	c7 01       	movw	r24, r14
    3f44:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <u8x8_byte_EndTransfer>
      in_transfer = 0;
    3f48:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <in_transfer.3298>
      break;
    default:
      return 0;
  }
  return 1;
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    3f4e:	01 c0       	rjmp	.+2      	; 0x3f52 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    3f50:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	ff 90       	pop	r15
    3f5a:	ef 90       	pop	r14
    3f5c:	08 95       	ret

00003f5e <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    3f5e:	fc 01       	movw	r30, r24
    3f60:	71 83       	std	Z+1, r23	; 0x01
    3f62:	60 83       	st	Z, r22
    3f64:	fb 01       	movw	r30, r22
    3f66:	22 89       	ldd	r18, Z+18	; 0x12
    3f68:	fc 01       	movw	r30, r24
    3f6a:	24 8b       	std	Z+20, r18	; 0x14
    3f6c:	08 95       	ret

00003f6e <u8x8_d_helper_display_init>:
    3f6e:	cf 93       	push	r28
    3f70:	df 93       	push	r29
    3f72:	ec 01       	movw	r28, r24
    3f74:	ea 85       	ldd	r30, Y+10	; 0x0a
    3f76:	fb 85       	ldd	r31, Y+11	; 0x0b
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	68 e2       	ldi	r22, 0x28	; 40
    3f80:	09 95       	icall
    3f82:	ee 81       	ldd	r30, Y+6	; 0x06
    3f84:	ff 81       	ldd	r31, Y+7	; 0x07
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	64 e1       	ldi	r22, 0x14	; 20
    3f8e:	ce 01       	movw	r24, r28
    3f90:	09 95       	icall
    3f92:	41 e0       	ldi	r20, 0x01	; 1
    3f94:	6b e4       	ldi	r22, 0x4B	; 75
    3f96:	ce 01       	movw	r24, r28
    3f98:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <u8x8_gpio_call>
    3f9c:	e8 81       	ld	r30, Y
    3f9e:	f9 81       	ldd	r31, Y+1	; 0x01
    3fa0:	44 81       	ldd	r20, Z+4	; 0x04
    3fa2:	69 e2       	ldi	r22, 0x29	; 41
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <u8x8_gpio_call>
    3faa:	40 e0       	ldi	r20, 0x00	; 0
    3fac:	6b e4       	ldi	r22, 0x4B	; 75
    3fae:	ce 01       	movw	r24, r28
    3fb0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <u8x8_gpio_call>
    3fb4:	e8 81       	ld	r30, Y
    3fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    3fb8:	44 81       	ldd	r20, Z+4	; 0x04
    3fba:	69 e2       	ldi	r22, 0x29	; 41
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <u8x8_gpio_call>
    3fc2:	41 e0       	ldi	r20, 0x01	; 1
    3fc4:	6b e4       	ldi	r22, 0x4B	; 75
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <u8x8_gpio_call>
    3fcc:	e8 81       	ld	r30, Y
    3fce:	f9 81       	ldd	r31, Y+1	; 0x01
    3fd0:	45 81       	ldd	r20, Z+5	; 0x05
    3fd2:	69 e2       	ldi	r22, 0x29	; 41
    3fd4:	ce 01       	movw	r24, r28
    3fd6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <u8x8_gpio_call>
    3fda:	df 91       	pop	r29
    3fdc:	cf 91       	pop	r28
    3fde:	08 95       	ret

00003fe0 <u8x8_DrawTile>:
    3fe0:	0f 93       	push	r16
    3fe2:	1f 93       	push	r17
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	00 d0       	rcall	.+0      	; 0x3fea <u8x8_DrawTile+0xa>
    3fea:	00 d0       	rcall	.+0      	; 0x3fec <u8x8_DrawTile+0xc>
    3fec:	1f 92       	push	r1
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	6c 83       	std	Y+4, r22	; 0x04
    3ff4:	4d 83       	std	Y+5, r20	; 0x05
    3ff6:	2b 83       	std	Y+3, r18	; 0x03
    3ff8:	1a 83       	std	Y+2, r17	; 0x02
    3ffa:	09 83       	std	Y+1, r16	; 0x01
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	14 96       	adiw	r26, 0x04	; 4
    4000:	ed 91       	ld	r30, X+
    4002:	fc 91       	ld	r31, X
    4004:	15 97       	sbiw	r26, 0x05	; 5
    4006:	9e 01       	movw	r18, r28
    4008:	2f 5f       	subi	r18, 0xFF	; 255
    400a:	3f 4f       	sbci	r19, 0xFF	; 255
    400c:	41 e0       	ldi	r20, 0x01	; 1
    400e:	6f e0       	ldi	r22, 0x0F	; 15
    4010:	09 95       	icall
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	df 91       	pop	r29
    401e:	cf 91       	pop	r28
    4020:	1f 91       	pop	r17
    4022:	0f 91       	pop	r16
    4024:	08 95       	ret

00004026 <u8x8_SetupMemory>:
    4026:	dc 01       	movw	r26, r24
    4028:	14 96       	adiw	r26, 0x04	; 4
    402a:	ed 91       	ld	r30, X+
    402c:	fc 91       	ld	r31, X
    402e:	15 97       	sbiw	r26, 0x05	; 5
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	69 e0       	ldi	r22, 0x09	; 9
    4038:	09 95       	icall
    403a:	08 95       	ret

0000403c <u8x8_InitDisplay>:
    403c:	dc 01       	movw	r26, r24
    403e:	14 96       	adiw	r26, 0x04	; 4
    4040:	ed 91       	ld	r30, X+
    4042:	fc 91       	ld	r31, X
    4044:	15 97       	sbiw	r26, 0x05	; 5
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	40 e0       	ldi	r20, 0x00	; 0
    404c:	6a e0       	ldi	r22, 0x0A	; 10
    404e:	09 95       	icall
    4050:	08 95       	ret

00004052 <u8x8_SetPowerSave>:
    4052:	46 2f       	mov	r20, r22
    4054:	dc 01       	movw	r26, r24
    4056:	14 96       	adiw	r26, 0x04	; 4
    4058:	ed 91       	ld	r30, X+
    405a:	fc 91       	ld	r31, X
    405c:	15 97       	sbiw	r26, 0x05	; 5
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	6b e0       	ldi	r22, 0x0B	; 11
    4064:	09 95       	icall
    4066:	08 95       	ret

00004068 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    4068:	dc 01       	movw	r26, r24
    406a:	14 96       	adiw	r26, 0x04	; 4
    406c:	ed 91       	ld	r30, X+
    406e:	fc 91       	ld	r31, X
    4070:	15 97       	sbiw	r26, 0x05	; 5
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 e0       	ldi	r20, 0x00	; 0
    4078:	60 e1       	ldi	r22, 0x10	; 16
    407a:	09 95       	icall
    407c:	08 95       	ret

0000407e <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    407e:	ef 92       	push	r14
    4080:	ff 92       	push	r15
    4082:	0f 93       	push	r16
    4084:	1f 93       	push	r17
    4086:	cf 93       	push	r28
    4088:	df 93       	push	r29
    408a:	8c 01       	movw	r16, r24
    408c:	c4 2f       	mov	r28, r20
    408e:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    4090:	6d 30       	cpi	r22, 0x0D	; 13
    4092:	b9 f0       	breq	.+46     	; 0x40c2 <u8x8_d_ssd1306_sh1106_generic+0x44>
    4094:	18 f4       	brcc	.+6      	; 0x409c <u8x8_d_ssd1306_sh1106_generic+0x1e>
    4096:	6b 30       	cpi	r22, 0x0B	; 11
    4098:	31 f0       	breq	.+12     	; 0x40a6 <u8x8_d_ssd1306_sh1106_generic+0x28>
    409a:	72 c0       	rjmp	.+228    	; 0x4180 <u8x8_d_ssd1306_sh1106_generic+0x102>
    409c:	6e 30       	cpi	r22, 0x0E	; 14
    409e:	69 f1       	breq	.+90     	; 0x40fa <u8x8_d_ssd1306_sh1106_generic+0x7c>
    40a0:	6f 30       	cpi	r22, 0x0F	; 15
    40a2:	d1 f1       	breq	.+116    	; 0x4118 <u8x8_d_ssd1306_sh1106_generic+0x9a>
    40a4:	6d c0       	rjmp	.+218    	; 0x4180 <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    40a6:	41 11       	cpse	r20, r1
    40a8:	06 c0       	rjmp	.+12     	; 0x40b6 <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    40aa:	6a e8       	ldi	r22, 0x8A	; 138
    40ac:	72 e0       	ldi	r23, 0x02	; 2
    40ae:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	66 c0       	rjmp	.+204    	; 0x4182 <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    40b6:	65 e8       	ldi	r22, 0x85	; 133
    40b8:	72 e0       	ldi	r23, 0x02	; 2
    40ba:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	60 c0       	rjmp	.+192    	; 0x4182 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    40c2:	41 11       	cpse	r20, r1
    40c4:	0d c0       	rjmp	.+26     	; 0x40e0 <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    40c6:	6e e7       	ldi	r22, 0x7E	; 126
    40c8:	72 e0       	ldi	r23, 0x02	; 2
    40ca:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    40ce:	d8 01       	movw	r26, r16
    40d0:	ed 91       	ld	r30, X+
    40d2:	fc 91       	ld	r31, X
    40d4:	11 97       	sbiw	r26, 0x01	; 1
    40d6:	82 89       	ldd	r24, Z+18	; 0x12
    40d8:	54 96       	adiw	r26, 0x14	; 20
    40da:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	51 c0       	rjmp	.+162    	; 0x4182 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    40e0:	67 e7       	ldi	r22, 0x77	; 119
    40e2:	72 e0       	ldi	r23, 0x02	; 2
    40e4:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    40e8:	d8 01       	movw	r26, r16
    40ea:	ed 91       	ld	r30, X+
    40ec:	fc 91       	ld	r31, X
    40ee:	11 97       	sbiw	r26, 0x01	; 1
    40f0:	83 89       	ldd	r24, Z+19	; 0x13
    40f2:	54 96       	adiw	r26, 0x14	; 20
    40f4:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	44 c0       	rjmp	.+136    	; 0x4182 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    40fa:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    40fe:	61 e8       	ldi	r22, 0x81	; 129
    4100:	c8 01       	movw	r24, r16
    4102:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    4106:	6c 2f       	mov	r22, r28
    4108:	c8 01       	movw	r24, r16
    410a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    410e:	c8 01       	movw	r24, r16
    4110:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4114:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    4116:	35 c0       	rjmp	.+106    	; 0x4182 <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    4118:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    411c:	f7 01       	movw	r30, r14
    411e:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    4120:	dd 0f       	add	r29, r29
    4122:	dd 0f       	add	r29, r29
    4124:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    4126:	d8 01       	movw	r26, r16
    4128:	54 96       	adiw	r26, 0x14	; 20
    412a:	8c 91       	ld	r24, X
    412c:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    412e:	60 e4       	ldi	r22, 0x40	; 64
    4130:	c8 01       	movw	r24, r16
    4132:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    4136:	6d 2f       	mov	r22, r29
    4138:	62 95       	swap	r22
    413a:	6f 70       	andi	r22, 0x0F	; 15
    413c:	60 61       	ori	r22, 0x10	; 16
    413e:	c8 01       	movw	r24, r16
    4140:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    4144:	6d 2f       	mov	r22, r29
    4146:	6f 70       	andi	r22, 0x0F	; 15
    4148:	c8 01       	movw	r24, r16
    414a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    414e:	f7 01       	movw	r30, r14
    4150:	64 81       	ldd	r22, Z+4	; 0x04
    4152:	60 6b       	ori	r22, 0xB0	; 176
    4154:	c8 01       	movw	r24, r16
    4156:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    415a:	d7 01       	movw	r26, r14
    415c:	4d 91       	ld	r20, X+
    415e:	5c 91       	ld	r21, X
    4160:	11 97       	sbiw	r26, 0x01	; 1
    4162:	12 96       	adiw	r26, 0x02	; 2
    4164:	6c 91       	ld	r22, X
    4166:	66 0f       	add	r22, r22
    4168:	66 0f       	add	r22, r22
    416a:	66 0f       	add	r22, r22
    416c:	c8 01       	movw	r24, r16
    416e:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    4172:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    4174:	91 f7       	brne	.-28     	; 0x415a <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    4176:	c8 01       	movw	r24, r16
    4178:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    417c:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    417e:	01 c0       	rjmp	.+2      	; 0x4182 <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    4180:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	1f 91       	pop	r17
    4188:	0f 91       	pop	r16
    418a:	ff 90       	pop	r15
    418c:	ef 90       	pop	r14
    418e:	08 95       	ret

00004190 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    4190:	0f 93       	push	r16
    4192:	1f 93       	push	r17
    4194:	cf 93       	push	r28
    4196:	8c 01       	movw	r16, r24
    4198:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    419a:	0e 94 3f 20 	call	0x407e	; 0x407e <u8x8_d_ssd1306_sh1106_generic>
    419e:	81 11       	cpse	r24, r1
    41a0:	15 c0       	rjmp	.+42     	; 0x41cc <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    41a2:	c9 30       	cpi	r28, 0x09	; 9
    41a4:	61 f0       	breq	.+24     	; 0x41be <u8x8_d_ssd1306_128x64_noname+0x2e>
    41a6:	ca 30       	cpi	r28, 0x0A	; 10
    41a8:	91 f4       	brne	.+36     	; 0x41ce <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    41aa:	c8 01       	movw	r24, r16
    41ac:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    41b0:	6f e8       	ldi	r22, 0x8F	; 143
    41b2:	72 e0       	ldi	r23, 0x02	; 2
    41b4:	c8 01       	movw	r24, r16
    41b6:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    41ba:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    41bc:	08 c0       	rjmp	.+16     	; 0x41ce <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    41be:	6f e5       	ldi	r22, 0x5F	; 95
    41c0:	72 e0       	ldi	r23, 0x02	; 2
    41c2:	c8 01       	movw	r24, r16
    41c4:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    41c8:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    41ca:	01 c0       	rjmp	.+2      	; 0x41ce <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    41cc:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    41ce:	cf 91       	pop	r28
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	08 95       	ret

000041d6 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    41d6:	dc 01       	movw	r26, r24
    41d8:	1a 96       	adiw	r26, 0x0a	; 10
    41da:	ed 91       	ld	r30, X+
    41dc:	fc 91       	ld	r31, X
    41de:	1b 97       	sbiw	r26, 0x0b	; 11
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	09 95       	icall
    41e6:	08 95       	ret

000041e8 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	08 95       	ret

000041ec <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    41ec:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    41ee:	11 82       	std	Z+1, r1	; 0x01
    41f0:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    41f2:	84 ef       	ldi	r24, 0xF4	; 244
    41f4:	90 e2       	ldi	r25, 0x20	; 32
    41f6:	95 83       	std	Z+5, r25	; 0x05
    41f8:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    41fa:	97 83       	std	Z+7, r25	; 0x07
    41fc:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    41fe:	91 87       	std	Z+9, r25	; 0x09
    4200:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    4202:	93 87       	std	Z+11, r25	; 0x0b
    4204:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    4206:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    4208:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    420a:	14 86       	std	Z+12, r1	; 0x0c
    420c:	15 86       	std	Z+13, r1	; 0x0d
    420e:	16 86       	std	Z+14, r1	; 0x0e
    4210:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    4212:	8f ef       	ldi	r24, 0xFF	; 255
    4214:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    4216:	82 8f       	std	Z+26, r24	; 0x1a
    4218:	08 95       	ret

0000421a <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    421a:	af 92       	push	r10
    421c:	bf 92       	push	r11
    421e:	cf 92       	push	r12
    4220:	df 92       	push	r13
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	ec 01       	movw	r28, r24
    4230:	5b 01       	movw	r10, r22
    4232:	6a 01       	movw	r12, r20
    4234:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    4236:	0e 94 f6 20 	call	0x41ec	; 0x41ec <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    423a:	bd 82       	std	Y+5, r11	; 0x05
    423c:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    423e:	df 82       	std	Y+7, r13	; 0x07
    4240:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    4242:	f9 86       	std	Y+9, r15	; 0x09
    4244:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    4246:	1b 87       	std	Y+11, r17	; 0x0b
    4248:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    424a:	ce 01       	movw	r24, r28
    424c:	0e 94 13 20 	call	0x4026	; 0x4026 <u8x8_SetupMemory>
}
    4250:	df 91       	pop	r29
    4252:	cf 91       	pop	r28
    4254:	1f 91       	pop	r17
    4256:	0f 91       	pop	r16
    4258:	ff 90       	pop	r15
    425a:	ef 90       	pop	r14
    425c:	df 90       	pop	r13
    425e:	cf 90       	pop	r12
    4260:	bf 90       	pop	r11
    4262:	af 90       	pop	r10
    4264:	08 95       	ret

00004266 <__subsf3>:
    4266:	50 58       	subi	r21, 0x80	; 128

00004268 <__addsf3>:
    4268:	bb 27       	eor	r27, r27
    426a:	aa 27       	eor	r26, r26
    426c:	0e 94 4b 21 	call	0x4296	; 0x4296 <__addsf3x>
    4270:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__fp_round>
    4274:	0e 94 0d 23 	call	0x461a	; 0x461a <__fp_pscA>
    4278:	38 f0       	brcs	.+14     	; 0x4288 <__addsf3+0x20>
    427a:	0e 94 14 23 	call	0x4628	; 0x4628 <__fp_pscB>
    427e:	20 f0       	brcs	.+8      	; 0x4288 <__addsf3+0x20>
    4280:	39 f4       	brne	.+14     	; 0x4290 <__addsf3+0x28>
    4282:	9f 3f       	cpi	r25, 0xFF	; 255
    4284:	19 f4       	brne	.+6      	; 0x428c <__addsf3+0x24>
    4286:	26 f4       	brtc	.+8      	; 0x4290 <__addsf3+0x28>
    4288:	0c 94 e3 22 	jmp	0x45c6	; 0x45c6 <__fp_nan>
    428c:	0e f4       	brtc	.+2      	; 0x4290 <__addsf3+0x28>
    428e:	e0 95       	com	r30
    4290:	e7 fb       	bst	r30, 7
    4292:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__fp_inf>

00004296 <__addsf3x>:
    4296:	e9 2f       	mov	r30, r25
    4298:	0e 94 2c 23 	call	0x4658	; 0x4658 <__fp_split3>
    429c:	58 f3       	brcs	.-42     	; 0x4274 <__addsf3+0xc>
    429e:	ba 17       	cp	r27, r26
    42a0:	62 07       	cpc	r22, r18
    42a2:	73 07       	cpc	r23, r19
    42a4:	84 07       	cpc	r24, r20
    42a6:	95 07       	cpc	r25, r21
    42a8:	20 f0       	brcs	.+8      	; 0x42b2 <__addsf3x+0x1c>
    42aa:	79 f4       	brne	.+30     	; 0x42ca <__addsf3x+0x34>
    42ac:	a6 f5       	brtc	.+104    	; 0x4316 <__addsf3x+0x80>
    42ae:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__fp_zero>
    42b2:	0e f4       	brtc	.+2      	; 0x42b6 <__addsf3x+0x20>
    42b4:	e0 95       	com	r30
    42b6:	0b 2e       	mov	r0, r27
    42b8:	ba 2f       	mov	r27, r26
    42ba:	a0 2d       	mov	r26, r0
    42bc:	0b 01       	movw	r0, r22
    42be:	b9 01       	movw	r22, r18
    42c0:	90 01       	movw	r18, r0
    42c2:	0c 01       	movw	r0, r24
    42c4:	ca 01       	movw	r24, r20
    42c6:	a0 01       	movw	r20, r0
    42c8:	11 24       	eor	r1, r1
    42ca:	ff 27       	eor	r31, r31
    42cc:	59 1b       	sub	r21, r25
    42ce:	99 f0       	breq	.+38     	; 0x42f6 <__addsf3x+0x60>
    42d0:	59 3f       	cpi	r21, 0xF9	; 249
    42d2:	50 f4       	brcc	.+20     	; 0x42e8 <__addsf3x+0x52>
    42d4:	50 3e       	cpi	r21, 0xE0	; 224
    42d6:	68 f1       	brcs	.+90     	; 0x4332 <__addsf3x+0x9c>
    42d8:	1a 16       	cp	r1, r26
    42da:	f0 40       	sbci	r31, 0x00	; 0
    42dc:	a2 2f       	mov	r26, r18
    42de:	23 2f       	mov	r18, r19
    42e0:	34 2f       	mov	r19, r20
    42e2:	44 27       	eor	r20, r20
    42e4:	58 5f       	subi	r21, 0xF8	; 248
    42e6:	f3 cf       	rjmp	.-26     	; 0x42ce <__addsf3x+0x38>
    42e8:	46 95       	lsr	r20
    42ea:	37 95       	ror	r19
    42ec:	27 95       	ror	r18
    42ee:	a7 95       	ror	r26
    42f0:	f0 40       	sbci	r31, 0x00	; 0
    42f2:	53 95       	inc	r21
    42f4:	c9 f7       	brne	.-14     	; 0x42e8 <__addsf3x+0x52>
    42f6:	7e f4       	brtc	.+30     	; 0x4316 <__addsf3x+0x80>
    42f8:	1f 16       	cp	r1, r31
    42fa:	ba 0b       	sbc	r27, r26
    42fc:	62 0b       	sbc	r22, r18
    42fe:	73 0b       	sbc	r23, r19
    4300:	84 0b       	sbc	r24, r20
    4302:	ba f0       	brmi	.+46     	; 0x4332 <__addsf3x+0x9c>
    4304:	91 50       	subi	r25, 0x01	; 1
    4306:	a1 f0       	breq	.+40     	; 0x4330 <__addsf3x+0x9a>
    4308:	ff 0f       	add	r31, r31
    430a:	bb 1f       	adc	r27, r27
    430c:	66 1f       	adc	r22, r22
    430e:	77 1f       	adc	r23, r23
    4310:	88 1f       	adc	r24, r24
    4312:	c2 f7       	brpl	.-16     	; 0x4304 <__addsf3x+0x6e>
    4314:	0e c0       	rjmp	.+28     	; 0x4332 <__addsf3x+0x9c>
    4316:	ba 0f       	add	r27, r26
    4318:	62 1f       	adc	r22, r18
    431a:	73 1f       	adc	r23, r19
    431c:	84 1f       	adc	r24, r20
    431e:	48 f4       	brcc	.+18     	; 0x4332 <__addsf3x+0x9c>
    4320:	87 95       	ror	r24
    4322:	77 95       	ror	r23
    4324:	67 95       	ror	r22
    4326:	b7 95       	ror	r27
    4328:	f7 95       	ror	r31
    432a:	9e 3f       	cpi	r25, 0xFE	; 254
    432c:	08 f0       	brcs	.+2      	; 0x4330 <__addsf3x+0x9a>
    432e:	b0 cf       	rjmp	.-160    	; 0x4290 <__addsf3+0x28>
    4330:	93 95       	inc	r25
    4332:	88 0f       	add	r24, r24
    4334:	08 f0       	brcs	.+2      	; 0x4338 <__addsf3x+0xa2>
    4336:	99 27       	eor	r25, r25
    4338:	ee 0f       	add	r30, r30
    433a:	97 95       	ror	r25
    433c:	87 95       	ror	r24
    433e:	08 95       	ret

00004340 <atan>:
    4340:	df 93       	push	r29
    4342:	dd 27       	eor	r29, r29
    4344:	b9 2f       	mov	r27, r25
    4346:	bf 77       	andi	r27, 0x7F	; 127
    4348:	40 e8       	ldi	r20, 0x80	; 128
    434a:	5f e3       	ldi	r21, 0x3F	; 63
    434c:	16 16       	cp	r1, r22
    434e:	17 06       	cpc	r1, r23
    4350:	48 07       	cpc	r20, r24
    4352:	5b 07       	cpc	r21, r27
    4354:	18 f4       	brcc	.+6      	; 0x435c <atan+0x1c>
    4356:	d9 2f       	mov	r29, r25
    4358:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <inverse>
    435c:	9f 93       	push	r25
    435e:	8f 93       	push	r24
    4360:	7f 93       	push	r23
    4362:	6f 93       	push	r22
    4364:	0e 94 cf 23 	call	0x479e	; 0x479e <square>
    4368:	e8 e6       	ldi	r30, 0x68	; 104
    436a:	f0 e0       	ldi	r31, 0x00	; 0
    436c:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__fp_powser>
    4370:	0e 94 1b 23 	call	0x4636	; 0x4636 <__fp_round>
    4374:	2f 91       	pop	r18
    4376:	3f 91       	pop	r19
    4378:	4f 91       	pop	r20
    437a:	5f 91       	pop	r21
    437c:	0e 94 75 23 	call	0x46ea	; 0x46ea <__mulsf3x>
    4380:	dd 23       	and	r29, r29
    4382:	51 f0       	breq	.+20     	; 0x4398 <atan+0x58>
    4384:	90 58       	subi	r25, 0x80	; 128
    4386:	a2 ea       	ldi	r26, 0xA2	; 162
    4388:	2a ed       	ldi	r18, 0xDA	; 218
    438a:	3f e0       	ldi	r19, 0x0F	; 15
    438c:	49 ec       	ldi	r20, 0xC9	; 201
    438e:	5f e3       	ldi	r21, 0x3F	; 63
    4390:	d0 78       	andi	r29, 0x80	; 128
    4392:	5d 27       	eor	r21, r29
    4394:	0e 94 4b 21 	call	0x4296	; 0x4296 <__addsf3x>
    4398:	df 91       	pop	r29
    439a:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__fp_round>

0000439e <__cmpsf2>:
    439e:	0e 94 b9 22 	call	0x4572	; 0x4572 <__fp_cmp>
    43a2:	08 f4       	brcc	.+2      	; 0x43a6 <__cmpsf2+0x8>
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	08 95       	ret

000043a8 <__divsf3>:
    43a8:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__divsf3x>
    43ac:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__fp_round>
    43b0:	0e 94 14 23 	call	0x4628	; 0x4628 <__fp_pscB>
    43b4:	58 f0       	brcs	.+22     	; 0x43cc <__divsf3+0x24>
    43b6:	0e 94 0d 23 	call	0x461a	; 0x461a <__fp_pscA>
    43ba:	40 f0       	brcs	.+16     	; 0x43cc <__divsf3+0x24>
    43bc:	29 f4       	brne	.+10     	; 0x43c8 <__divsf3+0x20>
    43be:	5f 3f       	cpi	r21, 0xFF	; 255
    43c0:	29 f0       	breq	.+10     	; 0x43cc <__divsf3+0x24>
    43c2:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__fp_inf>
    43c6:	51 11       	cpse	r21, r1
    43c8:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__fp_szero>
    43cc:	0c 94 e3 22 	jmp	0x45c6	; 0x45c6 <__fp_nan>

000043d0 <__divsf3x>:
    43d0:	0e 94 2c 23 	call	0x4658	; 0x4658 <__fp_split3>
    43d4:	68 f3       	brcs	.-38     	; 0x43b0 <__divsf3+0x8>

000043d6 <__divsf3_pse>:
    43d6:	99 23       	and	r25, r25
    43d8:	b1 f3       	breq	.-20     	; 0x43c6 <__divsf3+0x1e>
    43da:	55 23       	and	r21, r21
    43dc:	91 f3       	breq	.-28     	; 0x43c2 <__divsf3+0x1a>
    43de:	95 1b       	sub	r25, r21
    43e0:	55 0b       	sbc	r21, r21
    43e2:	bb 27       	eor	r27, r27
    43e4:	aa 27       	eor	r26, r26
    43e6:	62 17       	cp	r22, r18
    43e8:	73 07       	cpc	r23, r19
    43ea:	84 07       	cpc	r24, r20
    43ec:	38 f0       	brcs	.+14     	; 0x43fc <__divsf3_pse+0x26>
    43ee:	9f 5f       	subi	r25, 0xFF	; 255
    43f0:	5f 4f       	sbci	r21, 0xFF	; 255
    43f2:	22 0f       	add	r18, r18
    43f4:	33 1f       	adc	r19, r19
    43f6:	44 1f       	adc	r20, r20
    43f8:	aa 1f       	adc	r26, r26
    43fa:	a9 f3       	breq	.-22     	; 0x43e6 <__divsf3_pse+0x10>
    43fc:	35 d0       	rcall	.+106    	; 0x4468 <__divsf3_pse+0x92>
    43fe:	0e 2e       	mov	r0, r30
    4400:	3a f0       	brmi	.+14     	; 0x4410 <__divsf3_pse+0x3a>
    4402:	e0 e8       	ldi	r30, 0x80	; 128
    4404:	32 d0       	rcall	.+100    	; 0x446a <__divsf3_pse+0x94>
    4406:	91 50       	subi	r25, 0x01	; 1
    4408:	50 40       	sbci	r21, 0x00	; 0
    440a:	e6 95       	lsr	r30
    440c:	00 1c       	adc	r0, r0
    440e:	ca f7       	brpl	.-14     	; 0x4402 <__divsf3_pse+0x2c>
    4410:	2b d0       	rcall	.+86     	; 0x4468 <__divsf3_pse+0x92>
    4412:	fe 2f       	mov	r31, r30
    4414:	29 d0       	rcall	.+82     	; 0x4468 <__divsf3_pse+0x92>
    4416:	66 0f       	add	r22, r22
    4418:	77 1f       	adc	r23, r23
    441a:	88 1f       	adc	r24, r24
    441c:	bb 1f       	adc	r27, r27
    441e:	26 17       	cp	r18, r22
    4420:	37 07       	cpc	r19, r23
    4422:	48 07       	cpc	r20, r24
    4424:	ab 07       	cpc	r26, r27
    4426:	b0 e8       	ldi	r27, 0x80	; 128
    4428:	09 f0       	breq	.+2      	; 0x442c <__divsf3_pse+0x56>
    442a:	bb 0b       	sbc	r27, r27
    442c:	80 2d       	mov	r24, r0
    442e:	bf 01       	movw	r22, r30
    4430:	ff 27       	eor	r31, r31
    4432:	93 58       	subi	r25, 0x83	; 131
    4434:	5f 4f       	sbci	r21, 0xFF	; 255
    4436:	3a f0       	brmi	.+14     	; 0x4446 <__divsf3_pse+0x70>
    4438:	9e 3f       	cpi	r25, 0xFE	; 254
    443a:	51 05       	cpc	r21, r1
    443c:	78 f0       	brcs	.+30     	; 0x445c <__divsf3_pse+0x86>
    443e:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__fp_inf>
    4442:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__fp_szero>
    4446:	5f 3f       	cpi	r21, 0xFF	; 255
    4448:	e4 f3       	brlt	.-8      	; 0x4442 <__divsf3_pse+0x6c>
    444a:	98 3e       	cpi	r25, 0xE8	; 232
    444c:	d4 f3       	brlt	.-12     	; 0x4442 <__divsf3_pse+0x6c>
    444e:	86 95       	lsr	r24
    4450:	77 95       	ror	r23
    4452:	67 95       	ror	r22
    4454:	b7 95       	ror	r27
    4456:	f7 95       	ror	r31
    4458:	9f 5f       	subi	r25, 0xFF	; 255
    445a:	c9 f7       	brne	.-14     	; 0x444e <__divsf3_pse+0x78>
    445c:	88 0f       	add	r24, r24
    445e:	91 1d       	adc	r25, r1
    4460:	96 95       	lsr	r25
    4462:	87 95       	ror	r24
    4464:	97 f9       	bld	r25, 7
    4466:	08 95       	ret
    4468:	e1 e0       	ldi	r30, 0x01	; 1
    446a:	66 0f       	add	r22, r22
    446c:	77 1f       	adc	r23, r23
    446e:	88 1f       	adc	r24, r24
    4470:	bb 1f       	adc	r27, r27
    4472:	62 17       	cp	r22, r18
    4474:	73 07       	cpc	r23, r19
    4476:	84 07       	cpc	r24, r20
    4478:	ba 07       	cpc	r27, r26
    447a:	20 f0       	brcs	.+8      	; 0x4484 <__divsf3_pse+0xae>
    447c:	62 1b       	sub	r22, r18
    447e:	73 0b       	sbc	r23, r19
    4480:	84 0b       	sbc	r24, r20
    4482:	ba 0b       	sbc	r27, r26
    4484:	ee 1f       	adc	r30, r30
    4486:	88 f7       	brcc	.-30     	; 0x446a <__divsf3_pse+0x94>
    4488:	e0 95       	com	r30
    448a:	08 95       	ret

0000448c <__fixsfsi>:
    448c:	0e 94 4d 22 	call	0x449a	; 0x449a <__fixunssfsi>
    4490:	68 94       	set
    4492:	b1 11       	cpse	r27, r1
    4494:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__fp_szero>
    4498:	08 95       	ret

0000449a <__fixunssfsi>:
    449a:	0e 94 34 23 	call	0x4668	; 0x4668 <__fp_splitA>
    449e:	88 f0       	brcs	.+34     	; 0x44c2 <__fixunssfsi+0x28>
    44a0:	9f 57       	subi	r25, 0x7F	; 127
    44a2:	98 f0       	brcs	.+38     	; 0x44ca <__fixunssfsi+0x30>
    44a4:	b9 2f       	mov	r27, r25
    44a6:	99 27       	eor	r25, r25
    44a8:	b7 51       	subi	r27, 0x17	; 23
    44aa:	b0 f0       	brcs	.+44     	; 0x44d8 <__fixunssfsi+0x3e>
    44ac:	e1 f0       	breq	.+56     	; 0x44e6 <__fixunssfsi+0x4c>
    44ae:	66 0f       	add	r22, r22
    44b0:	77 1f       	adc	r23, r23
    44b2:	88 1f       	adc	r24, r24
    44b4:	99 1f       	adc	r25, r25
    44b6:	1a f0       	brmi	.+6      	; 0x44be <__fixunssfsi+0x24>
    44b8:	ba 95       	dec	r27
    44ba:	c9 f7       	brne	.-14     	; 0x44ae <__fixunssfsi+0x14>
    44bc:	14 c0       	rjmp	.+40     	; 0x44e6 <__fixunssfsi+0x4c>
    44be:	b1 30       	cpi	r27, 0x01	; 1
    44c0:	91 f0       	breq	.+36     	; 0x44e6 <__fixunssfsi+0x4c>
    44c2:	0e 94 4e 23 	call	0x469c	; 0x469c <__fp_zero>
    44c6:	b1 e0       	ldi	r27, 0x01	; 1
    44c8:	08 95       	ret
    44ca:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__fp_zero>
    44ce:	67 2f       	mov	r22, r23
    44d0:	78 2f       	mov	r23, r24
    44d2:	88 27       	eor	r24, r24
    44d4:	b8 5f       	subi	r27, 0xF8	; 248
    44d6:	39 f0       	breq	.+14     	; 0x44e6 <__fixunssfsi+0x4c>
    44d8:	b9 3f       	cpi	r27, 0xF9	; 249
    44da:	cc f3       	brlt	.-14     	; 0x44ce <__fixunssfsi+0x34>
    44dc:	86 95       	lsr	r24
    44de:	77 95       	ror	r23
    44e0:	67 95       	ror	r22
    44e2:	b3 95       	inc	r27
    44e4:	d9 f7       	brne	.-10     	; 0x44dc <__fixunssfsi+0x42>
    44e6:	3e f4       	brtc	.+14     	; 0x44f6 <__fixunssfsi+0x5c>
    44e8:	90 95       	com	r25
    44ea:	80 95       	com	r24
    44ec:	70 95       	com	r23
    44ee:	61 95       	neg	r22
    44f0:	7f 4f       	sbci	r23, 0xFF	; 255
    44f2:	8f 4f       	sbci	r24, 0xFF	; 255
    44f4:	9f 4f       	sbci	r25, 0xFF	; 255
    44f6:	08 95       	ret

000044f8 <__floatunsisf>:
    44f8:	e8 94       	clt
    44fa:	09 c0       	rjmp	.+18     	; 0x450e <__floatsisf+0x12>

000044fc <__floatsisf>:
    44fc:	97 fb       	bst	r25, 7
    44fe:	3e f4       	brtc	.+14     	; 0x450e <__floatsisf+0x12>
    4500:	90 95       	com	r25
    4502:	80 95       	com	r24
    4504:	70 95       	com	r23
    4506:	61 95       	neg	r22
    4508:	7f 4f       	sbci	r23, 0xFF	; 255
    450a:	8f 4f       	sbci	r24, 0xFF	; 255
    450c:	9f 4f       	sbci	r25, 0xFF	; 255
    450e:	99 23       	and	r25, r25
    4510:	a9 f0       	breq	.+42     	; 0x453c <__floatsisf+0x40>
    4512:	f9 2f       	mov	r31, r25
    4514:	96 e9       	ldi	r25, 0x96	; 150
    4516:	bb 27       	eor	r27, r27
    4518:	93 95       	inc	r25
    451a:	f6 95       	lsr	r31
    451c:	87 95       	ror	r24
    451e:	77 95       	ror	r23
    4520:	67 95       	ror	r22
    4522:	b7 95       	ror	r27
    4524:	f1 11       	cpse	r31, r1
    4526:	f8 cf       	rjmp	.-16     	; 0x4518 <__floatsisf+0x1c>
    4528:	fa f4       	brpl	.+62     	; 0x4568 <__floatsisf+0x6c>
    452a:	bb 0f       	add	r27, r27
    452c:	11 f4       	brne	.+4      	; 0x4532 <__floatsisf+0x36>
    452e:	60 ff       	sbrs	r22, 0
    4530:	1b c0       	rjmp	.+54     	; 0x4568 <__floatsisf+0x6c>
    4532:	6f 5f       	subi	r22, 0xFF	; 255
    4534:	7f 4f       	sbci	r23, 0xFF	; 255
    4536:	8f 4f       	sbci	r24, 0xFF	; 255
    4538:	9f 4f       	sbci	r25, 0xFF	; 255
    453a:	16 c0       	rjmp	.+44     	; 0x4568 <__floatsisf+0x6c>
    453c:	88 23       	and	r24, r24
    453e:	11 f0       	breq	.+4      	; 0x4544 <__floatsisf+0x48>
    4540:	96 e9       	ldi	r25, 0x96	; 150
    4542:	11 c0       	rjmp	.+34     	; 0x4566 <__floatsisf+0x6a>
    4544:	77 23       	and	r23, r23
    4546:	21 f0       	breq	.+8      	; 0x4550 <__floatsisf+0x54>
    4548:	9e e8       	ldi	r25, 0x8E	; 142
    454a:	87 2f       	mov	r24, r23
    454c:	76 2f       	mov	r23, r22
    454e:	05 c0       	rjmp	.+10     	; 0x455a <__floatsisf+0x5e>
    4550:	66 23       	and	r22, r22
    4552:	71 f0       	breq	.+28     	; 0x4570 <__floatsisf+0x74>
    4554:	96 e8       	ldi	r25, 0x86	; 134
    4556:	86 2f       	mov	r24, r22
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	60 e0       	ldi	r22, 0x00	; 0
    455c:	2a f0       	brmi	.+10     	; 0x4568 <__floatsisf+0x6c>
    455e:	9a 95       	dec	r25
    4560:	66 0f       	add	r22, r22
    4562:	77 1f       	adc	r23, r23
    4564:	88 1f       	adc	r24, r24
    4566:	da f7       	brpl	.-10     	; 0x455e <__floatsisf+0x62>
    4568:	88 0f       	add	r24, r24
    456a:	96 95       	lsr	r25
    456c:	87 95       	ror	r24
    456e:	97 f9       	bld	r25, 7
    4570:	08 95       	ret

00004572 <__fp_cmp>:
    4572:	99 0f       	add	r25, r25
    4574:	00 08       	sbc	r0, r0
    4576:	55 0f       	add	r21, r21
    4578:	aa 0b       	sbc	r26, r26
    457a:	e0 e8       	ldi	r30, 0x80	; 128
    457c:	fe ef       	ldi	r31, 0xFE	; 254
    457e:	16 16       	cp	r1, r22
    4580:	17 06       	cpc	r1, r23
    4582:	e8 07       	cpc	r30, r24
    4584:	f9 07       	cpc	r31, r25
    4586:	c0 f0       	brcs	.+48     	; 0x45b8 <__fp_cmp+0x46>
    4588:	12 16       	cp	r1, r18
    458a:	13 06       	cpc	r1, r19
    458c:	e4 07       	cpc	r30, r20
    458e:	f5 07       	cpc	r31, r21
    4590:	98 f0       	brcs	.+38     	; 0x45b8 <__fp_cmp+0x46>
    4592:	62 1b       	sub	r22, r18
    4594:	73 0b       	sbc	r23, r19
    4596:	84 0b       	sbc	r24, r20
    4598:	95 0b       	sbc	r25, r21
    459a:	39 f4       	brne	.+14     	; 0x45aa <__fp_cmp+0x38>
    459c:	0a 26       	eor	r0, r26
    459e:	61 f0       	breq	.+24     	; 0x45b8 <__fp_cmp+0x46>
    45a0:	23 2b       	or	r18, r19
    45a2:	24 2b       	or	r18, r20
    45a4:	25 2b       	or	r18, r21
    45a6:	21 f4       	brne	.+8      	; 0x45b0 <__fp_cmp+0x3e>
    45a8:	08 95       	ret
    45aa:	0a 26       	eor	r0, r26
    45ac:	09 f4       	brne	.+2      	; 0x45b0 <__fp_cmp+0x3e>
    45ae:	a1 40       	sbci	r26, 0x01	; 1
    45b0:	a6 95       	lsr	r26
    45b2:	8f ef       	ldi	r24, 0xFF	; 255
    45b4:	81 1d       	adc	r24, r1
    45b6:	81 1d       	adc	r24, r1
    45b8:	08 95       	ret

000045ba <__fp_inf>:
    45ba:	97 f9       	bld	r25, 7
    45bc:	9f 67       	ori	r25, 0x7F	; 127
    45be:	80 e8       	ldi	r24, 0x80	; 128
    45c0:	70 e0       	ldi	r23, 0x00	; 0
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	08 95       	ret

000045c6 <__fp_nan>:
    45c6:	9f ef       	ldi	r25, 0xFF	; 255
    45c8:	80 ec       	ldi	r24, 0xC0	; 192
    45ca:	08 95       	ret

000045cc <__fp_powser>:
    45cc:	df 93       	push	r29
    45ce:	cf 93       	push	r28
    45d0:	1f 93       	push	r17
    45d2:	0f 93       	push	r16
    45d4:	ff 92       	push	r15
    45d6:	ef 92       	push	r14
    45d8:	df 92       	push	r13
    45da:	7b 01       	movw	r14, r22
    45dc:	8c 01       	movw	r16, r24
    45de:	68 94       	set
    45e0:	06 c0       	rjmp	.+12     	; 0x45ee <__fp_powser+0x22>
    45e2:	da 2e       	mov	r13, r26
    45e4:	ef 01       	movw	r28, r30
    45e6:	0e 94 75 23 	call	0x46ea	; 0x46ea <__mulsf3x>
    45ea:	fe 01       	movw	r30, r28
    45ec:	e8 94       	clt
    45ee:	a5 91       	lpm	r26, Z+
    45f0:	25 91       	lpm	r18, Z+
    45f2:	35 91       	lpm	r19, Z+
    45f4:	45 91       	lpm	r20, Z+
    45f6:	55 91       	lpm	r21, Z+
    45f8:	a6 f3       	brts	.-24     	; 0x45e2 <__fp_powser+0x16>
    45fa:	ef 01       	movw	r28, r30
    45fc:	0e 94 4b 21 	call	0x4296	; 0x4296 <__addsf3x>
    4600:	fe 01       	movw	r30, r28
    4602:	97 01       	movw	r18, r14
    4604:	a8 01       	movw	r20, r16
    4606:	da 94       	dec	r13
    4608:	69 f7       	brne	.-38     	; 0x45e4 <__fp_powser+0x18>
    460a:	df 90       	pop	r13
    460c:	ef 90       	pop	r14
    460e:	ff 90       	pop	r15
    4610:	0f 91       	pop	r16
    4612:	1f 91       	pop	r17
    4614:	cf 91       	pop	r28
    4616:	df 91       	pop	r29
    4618:	08 95       	ret

0000461a <__fp_pscA>:
    461a:	00 24       	eor	r0, r0
    461c:	0a 94       	dec	r0
    461e:	16 16       	cp	r1, r22
    4620:	17 06       	cpc	r1, r23
    4622:	18 06       	cpc	r1, r24
    4624:	09 06       	cpc	r0, r25
    4626:	08 95       	ret

00004628 <__fp_pscB>:
    4628:	00 24       	eor	r0, r0
    462a:	0a 94       	dec	r0
    462c:	12 16       	cp	r1, r18
    462e:	13 06       	cpc	r1, r19
    4630:	14 06       	cpc	r1, r20
    4632:	05 06       	cpc	r0, r21
    4634:	08 95       	ret

00004636 <__fp_round>:
    4636:	09 2e       	mov	r0, r25
    4638:	03 94       	inc	r0
    463a:	00 0c       	add	r0, r0
    463c:	11 f4       	brne	.+4      	; 0x4642 <__fp_round+0xc>
    463e:	88 23       	and	r24, r24
    4640:	52 f0       	brmi	.+20     	; 0x4656 <__fp_round+0x20>
    4642:	bb 0f       	add	r27, r27
    4644:	40 f4       	brcc	.+16     	; 0x4656 <__fp_round+0x20>
    4646:	bf 2b       	or	r27, r31
    4648:	11 f4       	brne	.+4      	; 0x464e <__fp_round+0x18>
    464a:	60 ff       	sbrs	r22, 0
    464c:	04 c0       	rjmp	.+8      	; 0x4656 <__fp_round+0x20>
    464e:	6f 5f       	subi	r22, 0xFF	; 255
    4650:	7f 4f       	sbci	r23, 0xFF	; 255
    4652:	8f 4f       	sbci	r24, 0xFF	; 255
    4654:	9f 4f       	sbci	r25, 0xFF	; 255
    4656:	08 95       	ret

00004658 <__fp_split3>:
    4658:	57 fd       	sbrc	r21, 7
    465a:	90 58       	subi	r25, 0x80	; 128
    465c:	44 0f       	add	r20, r20
    465e:	55 1f       	adc	r21, r21
    4660:	59 f0       	breq	.+22     	; 0x4678 <__fp_splitA+0x10>
    4662:	5f 3f       	cpi	r21, 0xFF	; 255
    4664:	71 f0       	breq	.+28     	; 0x4682 <__fp_splitA+0x1a>
    4666:	47 95       	ror	r20

00004668 <__fp_splitA>:
    4668:	88 0f       	add	r24, r24
    466a:	97 fb       	bst	r25, 7
    466c:	99 1f       	adc	r25, r25
    466e:	61 f0       	breq	.+24     	; 0x4688 <__fp_splitA+0x20>
    4670:	9f 3f       	cpi	r25, 0xFF	; 255
    4672:	79 f0       	breq	.+30     	; 0x4692 <__fp_splitA+0x2a>
    4674:	87 95       	ror	r24
    4676:	08 95       	ret
    4678:	12 16       	cp	r1, r18
    467a:	13 06       	cpc	r1, r19
    467c:	14 06       	cpc	r1, r20
    467e:	55 1f       	adc	r21, r21
    4680:	f2 cf       	rjmp	.-28     	; 0x4666 <__fp_split3+0xe>
    4682:	46 95       	lsr	r20
    4684:	f1 df       	rcall	.-30     	; 0x4668 <__fp_splitA>
    4686:	08 c0       	rjmp	.+16     	; 0x4698 <__fp_splitA+0x30>
    4688:	16 16       	cp	r1, r22
    468a:	17 06       	cpc	r1, r23
    468c:	18 06       	cpc	r1, r24
    468e:	99 1f       	adc	r25, r25
    4690:	f1 cf       	rjmp	.-30     	; 0x4674 <__fp_splitA+0xc>
    4692:	86 95       	lsr	r24
    4694:	71 05       	cpc	r23, r1
    4696:	61 05       	cpc	r22, r1
    4698:	08 94       	sec
    469a:	08 95       	ret

0000469c <__fp_zero>:
    469c:	e8 94       	clt

0000469e <__fp_szero>:
    469e:	bb 27       	eor	r27, r27
    46a0:	66 27       	eor	r22, r22
    46a2:	77 27       	eor	r23, r23
    46a4:	cb 01       	movw	r24, r22
    46a6:	97 f9       	bld	r25, 7
    46a8:	08 95       	ret

000046aa <__gesf2>:
    46aa:	0e 94 b9 22 	call	0x4572	; 0x4572 <__fp_cmp>
    46ae:	08 f4       	brcc	.+2      	; 0x46b2 <__gesf2+0x8>
    46b0:	8f ef       	ldi	r24, 0xFF	; 255
    46b2:	08 95       	ret

000046b4 <inverse>:
    46b4:	9b 01       	movw	r18, r22
    46b6:	ac 01       	movw	r20, r24
    46b8:	60 e0       	ldi	r22, 0x00	; 0
    46ba:	70 e0       	ldi	r23, 0x00	; 0
    46bc:	80 e8       	ldi	r24, 0x80	; 128
    46be:	9f e3       	ldi	r25, 0x3F	; 63
    46c0:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__divsf3>

000046c4 <__mulsf3>:
    46c4:	0e 94 75 23 	call	0x46ea	; 0x46ea <__mulsf3x>
    46c8:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__fp_round>
    46cc:	0e 94 0d 23 	call	0x461a	; 0x461a <__fp_pscA>
    46d0:	38 f0       	brcs	.+14     	; 0x46e0 <__mulsf3+0x1c>
    46d2:	0e 94 14 23 	call	0x4628	; 0x4628 <__fp_pscB>
    46d6:	20 f0       	brcs	.+8      	; 0x46e0 <__mulsf3+0x1c>
    46d8:	95 23       	and	r25, r21
    46da:	11 f0       	breq	.+4      	; 0x46e0 <__mulsf3+0x1c>
    46dc:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__fp_inf>
    46e0:	0c 94 e3 22 	jmp	0x45c6	; 0x45c6 <__fp_nan>
    46e4:	11 24       	eor	r1, r1
    46e6:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__fp_szero>

000046ea <__mulsf3x>:
    46ea:	0e 94 2c 23 	call	0x4658	; 0x4658 <__fp_split3>
    46ee:	70 f3       	brcs	.-36     	; 0x46cc <__mulsf3+0x8>

000046f0 <__mulsf3_pse>:
    46f0:	95 9f       	mul	r25, r21
    46f2:	c1 f3       	breq	.-16     	; 0x46e4 <__mulsf3+0x20>
    46f4:	95 0f       	add	r25, r21
    46f6:	50 e0       	ldi	r21, 0x00	; 0
    46f8:	55 1f       	adc	r21, r21
    46fa:	62 9f       	mul	r22, r18
    46fc:	f0 01       	movw	r30, r0
    46fe:	72 9f       	mul	r23, r18
    4700:	bb 27       	eor	r27, r27
    4702:	f0 0d       	add	r31, r0
    4704:	b1 1d       	adc	r27, r1
    4706:	63 9f       	mul	r22, r19
    4708:	aa 27       	eor	r26, r26
    470a:	f0 0d       	add	r31, r0
    470c:	b1 1d       	adc	r27, r1
    470e:	aa 1f       	adc	r26, r26
    4710:	64 9f       	mul	r22, r20
    4712:	66 27       	eor	r22, r22
    4714:	b0 0d       	add	r27, r0
    4716:	a1 1d       	adc	r26, r1
    4718:	66 1f       	adc	r22, r22
    471a:	82 9f       	mul	r24, r18
    471c:	22 27       	eor	r18, r18
    471e:	b0 0d       	add	r27, r0
    4720:	a1 1d       	adc	r26, r1
    4722:	62 1f       	adc	r22, r18
    4724:	73 9f       	mul	r23, r19
    4726:	b0 0d       	add	r27, r0
    4728:	a1 1d       	adc	r26, r1
    472a:	62 1f       	adc	r22, r18
    472c:	83 9f       	mul	r24, r19
    472e:	a0 0d       	add	r26, r0
    4730:	61 1d       	adc	r22, r1
    4732:	22 1f       	adc	r18, r18
    4734:	74 9f       	mul	r23, r20
    4736:	33 27       	eor	r19, r19
    4738:	a0 0d       	add	r26, r0
    473a:	61 1d       	adc	r22, r1
    473c:	23 1f       	adc	r18, r19
    473e:	84 9f       	mul	r24, r20
    4740:	60 0d       	add	r22, r0
    4742:	21 1d       	adc	r18, r1
    4744:	82 2f       	mov	r24, r18
    4746:	76 2f       	mov	r23, r22
    4748:	6a 2f       	mov	r22, r26
    474a:	11 24       	eor	r1, r1
    474c:	9f 57       	subi	r25, 0x7F	; 127
    474e:	50 40       	sbci	r21, 0x00	; 0
    4750:	9a f0       	brmi	.+38     	; 0x4778 <__mulsf3_pse+0x88>
    4752:	f1 f0       	breq	.+60     	; 0x4790 <__mulsf3_pse+0xa0>
    4754:	88 23       	and	r24, r24
    4756:	4a f0       	brmi	.+18     	; 0x476a <__mulsf3_pse+0x7a>
    4758:	ee 0f       	add	r30, r30
    475a:	ff 1f       	adc	r31, r31
    475c:	bb 1f       	adc	r27, r27
    475e:	66 1f       	adc	r22, r22
    4760:	77 1f       	adc	r23, r23
    4762:	88 1f       	adc	r24, r24
    4764:	91 50       	subi	r25, 0x01	; 1
    4766:	50 40       	sbci	r21, 0x00	; 0
    4768:	a9 f7       	brne	.-22     	; 0x4754 <__mulsf3_pse+0x64>
    476a:	9e 3f       	cpi	r25, 0xFE	; 254
    476c:	51 05       	cpc	r21, r1
    476e:	80 f0       	brcs	.+32     	; 0x4790 <__mulsf3_pse+0xa0>
    4770:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__fp_inf>
    4774:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__fp_szero>
    4778:	5f 3f       	cpi	r21, 0xFF	; 255
    477a:	e4 f3       	brlt	.-8      	; 0x4774 <__mulsf3_pse+0x84>
    477c:	98 3e       	cpi	r25, 0xE8	; 232
    477e:	d4 f3       	brlt	.-12     	; 0x4774 <__mulsf3_pse+0x84>
    4780:	86 95       	lsr	r24
    4782:	77 95       	ror	r23
    4784:	67 95       	ror	r22
    4786:	b7 95       	ror	r27
    4788:	f7 95       	ror	r31
    478a:	e7 95       	ror	r30
    478c:	9f 5f       	subi	r25, 0xFF	; 255
    478e:	c1 f7       	brne	.-16     	; 0x4780 <__mulsf3_pse+0x90>
    4790:	fe 2b       	or	r31, r30
    4792:	88 0f       	add	r24, r24
    4794:	91 1d       	adc	r25, r1
    4796:	96 95       	lsr	r25
    4798:	87 95       	ror	r24
    479a:	97 f9       	bld	r25, 7
    479c:	08 95       	ret

0000479e <square>:
    479e:	9b 01       	movw	r18, r22
    47a0:	ac 01       	movw	r20, r24
    47a2:	0c 94 62 23 	jmp	0x46c4	; 0x46c4 <__mulsf3>

000047a6 <__udivmodsi4>:
    47a6:	a1 e2       	ldi	r26, 0x21	; 33
    47a8:	1a 2e       	mov	r1, r26
    47aa:	aa 1b       	sub	r26, r26
    47ac:	bb 1b       	sub	r27, r27
    47ae:	fd 01       	movw	r30, r26
    47b0:	0d c0       	rjmp	.+26     	; 0x47cc <__udivmodsi4_ep>

000047b2 <__udivmodsi4_loop>:
    47b2:	aa 1f       	adc	r26, r26
    47b4:	bb 1f       	adc	r27, r27
    47b6:	ee 1f       	adc	r30, r30
    47b8:	ff 1f       	adc	r31, r31
    47ba:	a2 17       	cp	r26, r18
    47bc:	b3 07       	cpc	r27, r19
    47be:	e4 07       	cpc	r30, r20
    47c0:	f5 07       	cpc	r31, r21
    47c2:	20 f0       	brcs	.+8      	; 0x47cc <__udivmodsi4_ep>
    47c4:	a2 1b       	sub	r26, r18
    47c6:	b3 0b       	sbc	r27, r19
    47c8:	e4 0b       	sbc	r30, r20
    47ca:	f5 0b       	sbc	r31, r21

000047cc <__udivmodsi4_ep>:
    47cc:	66 1f       	adc	r22, r22
    47ce:	77 1f       	adc	r23, r23
    47d0:	88 1f       	adc	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	1a 94       	dec	r1
    47d6:	69 f7       	brne	.-38     	; 0x47b2 <__udivmodsi4_loop>
    47d8:	60 95       	com	r22
    47da:	70 95       	com	r23
    47dc:	80 95       	com	r24
    47de:	90 95       	com	r25
    47e0:	9b 01       	movw	r18, r22
    47e2:	ac 01       	movw	r20, r24
    47e4:	bd 01       	movw	r22, r26
    47e6:	cf 01       	movw	r24, r30
    47e8:	08 95       	ret

000047ea <__umulhisi3>:
    47ea:	a2 9f       	mul	r26, r18
    47ec:	b0 01       	movw	r22, r0
    47ee:	b3 9f       	mul	r27, r19
    47f0:	c0 01       	movw	r24, r0
    47f2:	a3 9f       	mul	r26, r19
    47f4:	70 0d       	add	r23, r0
    47f6:	81 1d       	adc	r24, r1
    47f8:	11 24       	eor	r1, r1
    47fa:	91 1d       	adc	r25, r1
    47fc:	b2 9f       	mul	r27, r18
    47fe:	70 0d       	add	r23, r0
    4800:	81 1d       	adc	r24, r1
    4802:	11 24       	eor	r1, r1
    4804:	91 1d       	adc	r25, r1
    4806:	08 95       	ret

00004808 <memset>:
    4808:	dc 01       	movw	r26, r24
    480a:	01 c0       	rjmp	.+2      	; 0x480e <memset+0x6>
    480c:	6d 93       	st	X+, r22
    480e:	41 50       	subi	r20, 0x01	; 1
    4810:	50 40       	sbci	r21, 0x00	; 0
    4812:	e0 f7       	brcc	.-8      	; 0x480c <memset+0x4>
    4814:	08 95       	ret

00004816 <strcat>:
    4816:	fb 01       	movw	r30, r22
    4818:	dc 01       	movw	r26, r24
    481a:	0d 90       	ld	r0, X+
    481c:	00 20       	and	r0, r0
    481e:	e9 f7       	brne	.-6      	; 0x481a <strcat+0x4>
    4820:	11 97       	sbiw	r26, 0x01	; 1
    4822:	01 90       	ld	r0, Z+
    4824:	0d 92       	st	X+, r0
    4826:	00 20       	and	r0, r0
    4828:	e1 f7       	brne	.-8      	; 0x4822 <strcat+0xc>
    482a:	08 95       	ret

0000482c <__itoa_ncheck>:
    482c:	bb 27       	eor	r27, r27
    482e:	4a 30       	cpi	r20, 0x0A	; 10
    4830:	31 f4       	brne	.+12     	; 0x483e <__itoa_ncheck+0x12>
    4832:	99 23       	and	r25, r25
    4834:	22 f4       	brpl	.+8      	; 0x483e <__itoa_ncheck+0x12>
    4836:	bd e2       	ldi	r27, 0x2D	; 45
    4838:	90 95       	com	r25
    483a:	81 95       	neg	r24
    483c:	9f 4f       	sbci	r25, 0xFF	; 255
    483e:	0c 94 22 24 	jmp	0x4844	; 0x4844 <__utoa_common>

00004842 <__utoa_ncheck>:
    4842:	bb 27       	eor	r27, r27

00004844 <__utoa_common>:
    4844:	fb 01       	movw	r30, r22
    4846:	55 27       	eor	r21, r21
    4848:	aa 27       	eor	r26, r26
    484a:	88 0f       	add	r24, r24
    484c:	99 1f       	adc	r25, r25
    484e:	aa 1f       	adc	r26, r26
    4850:	a4 17       	cp	r26, r20
    4852:	10 f0       	brcs	.+4      	; 0x4858 <__utoa_common+0x14>
    4854:	a4 1b       	sub	r26, r20
    4856:	83 95       	inc	r24
    4858:	50 51       	subi	r21, 0x10	; 16
    485a:	b9 f7       	brne	.-18     	; 0x484a <__utoa_common+0x6>
    485c:	a0 5d       	subi	r26, 0xD0	; 208
    485e:	aa 33       	cpi	r26, 0x3A	; 58
    4860:	08 f0       	brcs	.+2      	; 0x4864 <__utoa_common+0x20>
    4862:	a9 5d       	subi	r26, 0xD9	; 217
    4864:	a1 93       	st	Z+, r26
    4866:	00 97       	sbiw	r24, 0x00	; 0
    4868:	79 f7       	brne	.-34     	; 0x4848 <__utoa_common+0x4>
    486a:	b1 11       	cpse	r27, r1
    486c:	b1 93       	st	Z+, r27
    486e:	11 92       	st	Z+, r1
    4870:	cb 01       	movw	r24, r22
    4872:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <strrev>

00004876 <strrev>:
    4876:	dc 01       	movw	r26, r24
    4878:	fc 01       	movw	r30, r24
    487a:	67 2f       	mov	r22, r23
    487c:	71 91       	ld	r23, Z+
    487e:	77 23       	and	r23, r23
    4880:	e1 f7       	brne	.-8      	; 0x487a <strrev+0x4>
    4882:	32 97       	sbiw	r30, 0x02	; 2
    4884:	04 c0       	rjmp	.+8      	; 0x488e <strrev+0x18>
    4886:	7c 91       	ld	r23, X
    4888:	6d 93       	st	X+, r22
    488a:	70 83       	st	Z, r23
    488c:	62 91       	ld	r22, -Z
    488e:	ae 17       	cp	r26, r30
    4890:	bf 07       	cpc	r27, r31
    4892:	c8 f3       	brcs	.-14     	; 0x4886 <strrev+0x10>
    4894:	08 95       	ret

00004896 <_exit>:
    4896:	f8 94       	cli

00004898 <__stop_program>:
    4898:	ff cf       	rjmp	.-2      	; 0x4898 <__stop_program>

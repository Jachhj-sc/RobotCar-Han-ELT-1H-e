
RobotCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000302  00800100  000051c4  00005258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000051c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020e  00800402  00800402  0000555a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000555a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000558c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002210  00000000  00000000  000055cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00049d7a  00000000  00000000  000077dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033e1  00000000  00000000  00051556  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d849  00000000  00000000  00054937  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000c884  00000000  00000000  00062180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011136  00000000  00000000  0006ea04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004f18e  00000000  00000000  0007fb3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002188  00000000  00000000  000cecc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__ctors_end>
       4:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
       8:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
       c:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_3>
      10:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      14:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_5>
      18:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      1c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      20:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      24:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      28:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      2c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      30:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      34:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      38:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      3c:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__vector_15>
      40:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      44:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      48:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      4c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      50:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      54:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      58:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      5c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      60:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      64:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	bf 00       	.word	0x00bf	; ????
      98:	03 02       	muls	r16, r19
      9a:	03 04       	cpc	r0, r3
      9c:	03 05       	cpc	r16, r3
      9e:	04 06       	cpc	r0, r20
      a0:	0a 00       	.word	0x000a	; ????
      a2:	fe 07       	cpc	r31, r30
      a4:	fe 07       	cpc	r31, r30
      a6:	00 01       	movw	r0, r0
      a8:	42 02       	muls	r20, r18
      aa:	88 07       	cpc	r24, r24
      ac:	c4 20       	and	r12, r4
      ae:	05 00       	.word	0x0005	; ????
      b0:	62 07       	cpc	r22, r18
      b2:	21 07       	cpc	r18, r17
      b4:	39 43       	sbci	r19, 0x39	; 57
      b6:	c7 a0       	ldd	r12, Z+39	; 0x27
      b8:	04 22       	and	r0, r20
      ba:	07 9b       	sbis	0x00, 7	; 0
      bc:	52 47       	sbci	r21, 0x72	; 114
      be:	62 09       	sbc	r22, r2
      c0:	23 0e       	add	r2, r19
      c2:	3d 42       	sbci	r19, 0x2D	; 45
      c4:	4f 29       	or	r20, r15
      c6:	49 06       	cpc	r4, r25
      c8:	a5 32       	cpi	r26, 0x25	; 37
      ca:	28 a5       	ldd	r18, Y+40	; 0x28
      cc:	24 01       	movw	r4, r8
      ce:	24 0c       	add	r2, r4
      d0:	3d 42       	sbci	r19, 0x2D	; 45
      d2:	57 b6       	in	r5, 0x37	; 55
      d4:	d4 b6       	in	r13, 0x34	; 52
      d6:	24 d9       	rcall	.-3512   	; 0xfffff320 <__eeprom_end+0xff7ef320>
      d8:	22 00       	.word	0x0022	; ????
      da:	25 0c       	add	r2, r5
      dc:	3d 42       	sbci	r19, 0x2D	; 45
      de:	4f a4       	ldd	r4, Y+47	; 0x2f
      e0:	74 ab       	std	Z+52, r23	; 0x34
      e2:	b4 48       	sbci	r27, 0x84	; 132
      e4:	09 00       	.word	0x0009	; ????
      e6:	26 0d       	add	r18, r6
      e8:	3d 42       	sbci	r19, 0x2D	; 45
      ea:	4f 96       	adiw	r24, 0x1f	; 31
      ec:	44 49       	sbci	r20, 0x94	; 148
      ee:	56 49       	sbci	r21, 0x96	; 150
      f0:	a4 48       	sbci	r26, 0x84	; 132
      f2:	09 27       	eor	r16, r25
      f4:	06 19       	sub	r16, r6
      f6:	53 c7       	rjmp	.+3750   	; 0xf9e <sendTriggPulse+0x24>
      f8:	00 28       	or	r0, r0
      fa:	08 bb       	out	0x18, r16	; 24
      fc:	42 57       	subi	r20, 0x72	; 114
      fe:	52 aa       	std	Z+50, r5	; 0x32
     100:	15 29       	or	r17, r5
     102:	09 bb       	out	0x19, r16	; 25
     104:	42 47       	sbci	r20, 0x72	; 114
     106:	56 aa       	std	Z+54, r5	; 0x36
     108:	94 00       	.word	0x0094	; ????
     10a:	2a 0a       	sbc	r2, r26
     10c:	2d 46       	sbci	r18, 0x6D	; 109
     10e:	47 96       	adiw	r24, 0x17	; 23
     110:	54 06       	cpc	r5, r20
     112:	a5 2d       	mov	r26, r5
     114:	2b 0a       	sbc	r2, r27
     116:	2d 46       	sbci	r18, 0x6D	; 109
     118:	57 18       	sub	r5, r7
     11a:	0d 52       	subi	r16, 0x2D	; 45
     11c:	18 01       	movw	r2, r16
     11e:	2c 07       	cpc	r18, r28
     120:	9b 3e       	cpi	r25, 0xEB	; 235
     122:	8f 52       	subi	r24, 0x2F	; 47
     124:	02 2d       	mov	r16, r2
     126:	06 0d       	add	r16, r6
     128:	4e c7       	rjmp	.+3740   	; 0xfc6 <angleCalculator+0x14>
     12a:	20 2e       	mov	r2, r16
     12c:	08 9b       	sbis	0x01, 0	; 1
     12e:	3e 4f       	sbci	r19, 0xFE	; 254
     130:	b2 24       	eor	r11, r2
     132:	00 2f       	mov	r16, r16
     134:	08 3d       	cpi	r16, 0xD8	; 216
     136:	42 67       	ori	r20, 0x72	; 114
     138:	ad 63       	ori	r26, 0x3D	; 61
     13a:	08 30       	cpi	r16, 0x08	; 8
     13c:	0b 3d       	cpi	r16, 0xDB	; 219
     13e:	42 57       	subi	r20, 0x72	; 114
     140:	96 d4       	rcall	.+2348   	; 0xa6e <__stack+0x16f>
     142:	6c 49       	sbci	r22, 0x9C	; 156
     144:	2d 02       	muls	r18, r29
     146:	31 0a       	sbc	r3, r17
     148:	3d 42       	sbci	r19, 0x2D	; 45
     14a:	57 26       	eor	r5, r23
     14c:	25 61       	ori	r18, 0x15	; 21
     14e:	d3 20       	and	r13, r3
     150:	32 0c       	add	r3, r2
     152:	3d 42       	sbci	r19, 0x2D	; 45
     154:	cf 92       	push	r12
     156:	85 91       	lpm	r24, Z+
     158:	94 85       	ldd	r25, Z+12	; 0x0c
     15a:	83 00       	.word	0x0083	; ????
     15c:	33 0c       	add	r3, r3
     15e:	3d 42       	sbci	r19, 0x2D	; 45
     160:	c7 20       	and	r12, r7
     162:	66 99       	sbic	0x0c, 6	; 12
     164:	aa 25       	eor	r26, r10
     166:	0b 00       	.word	0x000b	; ????
     168:	34 0c       	add	r3, r4
     16a:	3d 42       	sbci	r19, 0x2D	; 45
     16c:	5f 26       	eor	r5, r31
     16e:	25 a5       	ldd	r18, Z+45	; 0x2d
     170:	64 d0       	rcall	.+200    	; 0x23a <__trampolines_end+0x1a4>
     172:	c2 04       	cpc	r12, r2
     174:	35 0b       	sbc	r19, r21
     176:	3d 42       	sbci	r19, 0x2D	; 45
     178:	c7 31       	cpi	r28, 0x17	; 23
     17a:	31 85       	ldd	r19, Z+9	; 0x09
     17c:	5a b2       	in	r5, 0x1a	; 26
     17e:	00 36       	cpi	r16, 0x60	; 96
     180:	0c 3d       	cpi	r16, 0xDC	; 220
     182:	42 97       	sbiw	r24, 0x12	; 18
     184:	94 85       	ldd	r25, Z+12	; 0x0c
     186:	89 49       	sbci	r24, 0x99	; 153
     188:	4b 16       	cp	r4, r27
     18a:	00 37       	cpi	r16, 0x70	; 112
     18c:	0b 3d       	cpi	r16, 0xDB	; 219
     18e:	42 c7       	rjmp	.+3716   	; 0x1014 <angleCalculator+0x62>
     190:	20 66       	ori	r18, 0x60	; 96
     192:	61 56       	subi	r22, 0x61	; 97
     194:	cc 00       	.word	0x00cc	; ????
     196:	38 0c       	add	r3, r8
     198:	3d 42       	sbci	r19, 0x2D	; 45
     19a:	cf 92       	push	r12
     19c:	69 c9       	rjmp	.-3374   	; 0xfffff470 <__eeprom_end+0xff7ef470>
     19e:	92 69       	ori	r25, 0x92	; 146
     1a0:	c9 02       	muls	r28, r25
     1a2:	39 0c       	add	r3, r9
     1a4:	3d 42       	sbci	r19, 0x2D	; 45
     1a6:	cf 92       	push	r12
     1a8:	49 8a       	std	Y+17, r4	; 0x11
     1aa:	12 66       	ori	r17, 0x62	; 98
     1ac:	91 04       	cpc	r9, r1
     1ae:	3a 0a       	sbc	r3, r26
     1b0:	bb 3e       	cpi	r27, 0xEB	; 235
     1b2:	4f b2       	in	r4, 0x1f	; 31
     1b4:	a4 c9       	rjmp	.-3256   	; 0xfffff4fe <__eeprom_end+0xff7ef4fe>
     1b6:	92 00       	.word	0x0092	; ????
     1b8:	3b 09       	sbc	r19, r11
     1ba:	bb 3e       	cpi	r27, 0xEB	; 235
     1bc:	4f b2       	in	r4, 0x1f	; 31
     1be:	a4 4a       	sbci	r26, 0xA4	; 164
     1c0:	09 3c       	cpi	r16, 0xC9	; 201
     1c2:	08 bc       	out	0x28, r0	; 40
     1c4:	42 5f       	subi	r20, 0xF2	; 242
     1c6:	d4 d8       	rcall	.-3672   	; 0xfffff370 <__eeprom_end+0xff7ef370>
     1c8:	00 3d       	cpi	r16, 0xD0	; 208
     1ca:	08 1d       	adc	r16, r8
     1cc:	4a c7       	rjmp	.+3732   	; 0x1062 <angleCalculator+0xb0>
     1ce:	a0 0e       	add	r10, r16
     1d0:	02 3e       	cpi	r16, 0xE2	; 226
     1d2:	08 bc       	out	0x28, r0	; 40
     1d4:	42 47       	sbci	r20, 0x72	; 114
     1d6:	d8 d4       	rcall	.+2480   	; 0xb88 <__stack+0x289>
     1d8:	06 3f       	cpi	r16, 0xF6	; 246
     1da:	0a 3d       	cpi	r16, 0xDA	; 218
     1dc:	42 cf       	rjmp	.-380    	; 0x62 <__SREG__+0x23>
     1de:	92 35       	cpi	r25, 0x52	; 82
     1e0:	e6 50       	subi	r30, 0x06	; 6
     1e2:	04 40       	sbci	r16, 0x04	; 4
     1e4:	0c 3d       	cpi	r16, 0xDC	; 220
     1e6:	42 cf       	rjmp	.-380    	; 0x6c <__SREG__+0x2d>
     1e8:	92 49       	sbci	r25, 0x92	; 146
     1ea:	4b 62       	ori	r20, 0x2B	; 43
     1ec:	49 17       	cp	r20, r25
     1ee:	00 41       	sbci	r16, 0x10	; 16
     1f0:	0c 3d       	cpi	r16, 0xDC	; 220
     1f2:	42 57       	subi	r20, 0x72	; 114
     1f4:	96 d4       	rcall	.+2348   	; 0xb22 <__stack+0x223>
     1f6:	b4 61       	ori	r27, 0x14	; 20
     1f8:	c8 b4       	in	r12, 0x28	; 40
     1fa:	00 42       	sbci	r16, 0x20	; 32
     1fc:	0d 3d       	cpi	r16, 0xDD	; 221
     1fe:	42 c7       	rjmp	.+3716   	; 0x1084 <angleCalculator+0xd2>
     200:	10 55       	subi	r17, 0x50	; 80
     202:	a2 64       	ori	r26, 0x42	; 66
     204:	aa 44       	sbci	r26, 0x4A	; 74
     206:	83 02       	muls	r24, r19
     208:	43 0a       	sbc	r4, r19
     20a:	3d 42       	sbci	r19, 0x2D	; 45
     20c:	cf 92       	push	r12
     20e:	89 6d       	ori	r24, 0xD9	; 217
     210:	c9 02       	muls	r28, r25
     212:	44 0f       	add	r20, r20
     214:	3d 42       	sbci	r19, 0x2D	; 45
     216:	c7 10       	cpse	r12, r7
     218:	55 a2       	std	Z+37, r5	; 0x25
     21a:	24 4a       	sbci	r18, 0xA4	; 164
     21c:	a2 24       	eor	r10, r2
     21e:	1a 14       	cp	r1, r10
     220:	00 45       	sbci	r16, 0x50	; 80
     222:	0b 3d       	cpi	r16, 0xDB	; 219
     224:	42 c7       	rjmp	.+3716   	; 0x10aa <angleCalculator+0xf8>
     226:	31 1c       	adc	r3, r1
     228:	92 30       	cpi	r25, 0x02	; 2
     22a:	1c 04       	cpc	r1, r12
     22c:	46 0a       	sbc	r4, r22
     22e:	3d 42       	sbci	r19, 0x2D	; 45
     230:	c7 31       	cpi	r28, 0x17	; 23
     232:	1c 92       	st	X, r1
     234:	b0 08       	sbc	r11, r0
     236:	47 0b       	sbc	r20, r23
     238:	3d 42       	sbci	r19, 0x2D	; 45
     23a:	cf 92       	push	r12
     23c:	89 a5       	ldd	r24, Y+41	; 0x29
     23e:	2d 59       	subi	r18, 0x9D	; 157
     240:	00 48       	sbci	r16, 0x80	; 128
     242:	0a 3d       	cpi	r16, 0xDA	; 218
     244:	42 47       	sbci	r20, 0x72	; 114
     246:	66 1b       	sub	r22, r22
     248:	86 cc       	rjmp	.-1780   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     24a:	16 49       	sbci	r17, 0x96	; 150
     24c:	08 bb       	out	0x18, r16	; 24
     24e:	42 c7       	rjmp	.+3716   	; 0x10d4 <angleCalculator+0x122>
     250:	12 75       	andi	r17, 0x52	; 82
     252:	19 4a       	sbci	r17, 0xA9	; 169
     254:	0a 3d       	cpi	r16, 0xDA	; 218
     256:	42 d7       	rcall	.+3716   	; 0x10dc <angleCalculator+0x12a>
     258:	16 b6       	in	r1, 0x36	; 54
     25a:	44 91       	lpm	r20, Z
     25c:	04 4b       	sbci	r16, 0xB4	; 180
     25e:	0d 3d       	cpi	r16, 0xDD	; 221
     260:	42 47       	sbci	r20, 0x72	; 114
     262:	26 25       	eor	r18, r6
     264:	25 2d       	mov	r18, r5
     266:	89 2a       	or	r8, r25
     268:	59 00       	.word	0x0059	; ????
     26a:	4c 08       	sbc	r4, r12
     26c:	3d 42       	sbci	r19, 0x2D	; 45
     26e:	47 d8       	rcall	.-3954   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
     270:	e3 20       	and	r14, r3
     272:	4d 0b       	sbc	r20, r29
     274:	3d 42       	sbci	r19, 0x2D	; 45
     276:	47 a6       	std	Z+47, r4	; 0x2f
     278:	2d 4b       	sbci	r18, 0xBD	; 189
     27a:	a2 d9       	rcall	.-3260   	; 0xfffff5c0 <__eeprom_end+0xff7ef5c0>
     27c:	02 4e       	sbci	r16, 0xE2	; 226
     27e:	0c 3d       	cpi	r16, 0xDC	; 220
     280:	42 47       	sbci	r20, 0x72	; 114
     282:	a6 4d       	sbci	r26, 0xD6	; 214
     284:	4a 22       	and	r4, r26
     286:	6d 5a       	subi	r22, 0xAD	; 173
     288:	00 4f       	sbci	r16, 0xF0	; 240
     28a:	0a 3d       	cpi	r16, 0xDA	; 218
     28c:	42 cf       	rjmp	.-380    	; 0x112 <__trampolines_end+0x7c>
     28e:	92 79       	andi	r25, 0x92	; 146
     290:	4b 16       	cp	r4, r27
     292:	00 50       	subi	r16, 0x00	; 0
     294:	0c 3d       	cpi	r16, 0xDC	; 220
     296:	42 c7       	rjmp	.+3716   	; 0x111c <angleCalculator+0x16a>
     298:	90 64       	ori	r25, 0x40	; 64
     29a:	da a0       	ldd	r13, Y+34	; 0x22
     29c:	84 45       	sbci	r24, 0x54	; 84
     29e:	00 51       	subi	r16, 0x10	; 16
     2a0:	0a 45       	sbci	r16, 0x5A	; 90
     2a2:	3e cf       	rjmp	.-388    	; 0x120 <__trampolines_end+0x8a>
     2a4:	92 79       	andi	r25, 0x92	; 146
     2a6:	a9 ac       	ldd	r10, Y+57	; 0x39
     2a8:	01 52       	subi	r16, 0x21	; 33
     2aa:	0d 3d       	cpi	r16, 0xDD	; 221
     2ac:	42 c7       	rjmp	.+3716   	; 0x1132 <angleCalculator+0x180>
     2ae:	90 64       	ori	r25, 0x40	; 64
     2b0:	da a0       	ldd	r13, Y+34	; 0x22
     2b2:	94 2a       	or	r9, r20
     2b4:	59 00       	.word	0x0059	; ????
     2b6:	53 0b       	sbc	r21, r19
     2b8:	3d 42       	sbci	r19, 0x2D	; 45
     2ba:	cf 92       	push	r12
     2bc:	a9 ab       	std	Y+49, r26	; 0x31
     2be:	96 2c       	mov	r9, r6
     2c0:	00 54       	subi	r16, 0x40	; 64
     2c2:	09 3d       	cpi	r16, 0xD9	; 217
     2c4:	42 c7       	rjmp	.+3716   	; 0x114a <angleCalculator+0x198>
     2c6:	20 85       	ldd	r18, Z+8	; 0x08
     2c8:	3d 01       	movw	r6, r26
     2ca:	55 09       	sbc	r21, r5
     2cc:	3d 42       	sbci	r19, 0x2D	; 45
     2ce:	47 e6       	ldi	r20, 0x67	; 103
     2d0:	5b b2       	in	r5, 0x1b	; 27
     2d2:	00 56       	subi	r16, 0x60	; 96
     2d4:	0d 3d       	cpi	r16, 0xDD	; 221
     2d6:	42 47       	sbci	r20, 0x72	; 114
     2d8:	66 4b       	sbci	r22, 0xB6	; 182
     2da:	4a 49       	sbci	r20, 0x9A	; 154
     2dc:	94 64       	ori	r25, 0x44	; 68
     2de:	11 00       	.word	0x0011	; ????
     2e0:	57 0a       	sbc	r5, r23
     2e2:	3d 42       	sbci	r19, 0x2D	; 45
     2e4:	47 e6       	ldi	r20, 0x67	; 103
     2e6:	92 28       	or	r9, r2
     2e8:	c9 2d       	mov	r28, r9
     2ea:	58 0b       	sbc	r21, r24
     2ec:	3d 42       	sbci	r19, 0x2D	; 45
     2ee:	47 a6       	std	Z+47, r4	; 0x2f
     2f0:	25 b5       	in	r18, 0x25	; 37
     2f2:	4a 4d       	sbci	r20, 0xDA	; 218
     2f4:	0b 59       	subi	r16, 0x9B	; 155
     2f6:	0a 3d       	cpi	r16, 0xDA	; 218
     2f8:	42 47       	sbci	r20, 0x72	; 114
     2fa:	a6 25       	eor	r26, r6
     2fc:	b5 b0       	in	r11, 0x05	; 5
     2fe:	09 5a       	subi	r16, 0xA9	; 169
     300:	0a 3d       	cpi	r16, 0xDA	; 218
     302:	42 c7       	rjmp	.+3716   	; 0x1188 <__vector_3+0x26>
     304:	20 66       	ori	r18, 0x60	; 96
     306:	1d 07       	cpc	r17, r29
     308:	01 5b       	subi	r16, 0xB1	; 177
     30a:	08 bb       	out	0x18, r16	; 24
     30c:	42 c7       	rjmp	.+3716   	; 0x1192 <__vector_3+0x30>
     30e:	10 75       	andi	r17, 0x50	; 80
     310:	1a 5c       	subi	r17, 0xCA	; 202
     312:	08 3d       	cpi	r16, 0xD8	; 216
     314:	42 47       	sbci	r20, 0x72	; 114
     316:	98 76       	andi	r25, 0x68	; 104
     318:	0c 5d       	subi	r16, 0xDC	; 220
     31a:	08 bb       	out	0x18, r16	; 24
     31c:	42 c7       	rjmp	.+3716   	; 0x11a2 <__vector_3+0x40>
     31e:	d4 69       	ori	r29, 0x94	; 148
     320:	08 5e       	subi	r16, 0xE8	; 232
     322:	08 1d       	adc	r16, r8
     324:	52 57       	subi	r21, 0x72	; 114
     326:	96 d4       	rcall	.+2348   	; 0xc54 <__stack+0x355>
     328:	02 5f       	subi	r16, 0xF2	; 242
     32a:	06 0d       	add	r16, r6
     32c:	3e c7       	rjmp	.+3708   	; 0x11aa <__vector_3+0x48>
     32e:	20 60       	ori	r18, 0x00	; 0
     330:	06 12       	cpse	r0, r22
     332:	5b 47       	sbci	r21, 0x7B	; 123
     334:	14 61       	ori	r17, 0x14	; 20
     336:	0a 2d       	mov	r16, r10
     338:	42 cf       	rjmp	.-380    	; 0x1be <__trampolines_end+0x128>
     33a:	9a 0c       	add	r9, r10
     33c:	5a 32       	cpi	r21, 0x2A	; 42
     33e:	04 62       	ori	r16, 0x24	; 36
     340:	0b 3d       	cpi	r16, 0xDB	; 219
     342:	42 47       	sbci	r20, 0x72	; 114
     344:	58 31       	cpi	r21, 0x18	; 24
     346:	69 93       	st	Y+, r22
     348:	a2 00       	.word	0x00a2	; ????
     34a:	63 0a       	sbc	r6, r19
     34c:	2d 42       	sbci	r18, 0x2D	; 45
     34e:	cf 92       	push	r12
     350:	89 59       	subi	r24, 0x99	; 153
     352:	b2 00       	.word	0x00b2	; ????
     354:	64 0a       	sbc	r6, r20
     356:	3d 42       	sbci	r19, 0x2D	; 45
     358:	67 c5       	rjmp	.+2766   	; 0xe28 <__stack+0x529>
     35a:	b4 49       	sbci	r27, 0x94	; 148
     35c:	8a 12       	cpse	r8, r26
     35e:	65 0a       	sbc	r6, r21
     360:	2d 42       	sbci	r18, 0x2D	; 45
     362:	cf 92       	push	r12
     364:	0d 43       	sbci	r16, 0x3D	; 61
     366:	ba 00       	.word	0x00ba	; ????
     368:	66 0b       	sbc	r22, r22
     36a:	3d 42       	sbci	r19, 0x2D	; 45
     36c:	97 54       	subi	r25, 0x47	; 71
     36e:	c9 86       	std	Y+9, r12	; 0x09
     370:	28 ac       	ldd	r2, Y+56	; 0x38
     372:	01 67       	ori	r16, 0x71	; 113
     374:	0c 3d       	cpi	r16, 0xDC	; 220
     376:	3a cf       	rjmp	.-396    	; 0x1ec <__trampolines_end+0x156>
     378:	a0 69       	ori	r26, 0x90	; 144
     37a:	c9 10       	cpse	r12, r9
     37c:	6a c9       	rjmp	.-3372   	; 0xfffff652 <__eeprom_end+0xff7ef652>
     37e:	02 68       	ori	r16, 0x82	; 130
     380:	0a 3d       	cpi	r16, 0xDA	; 218
     382:	42 47       	sbci	r20, 0x72	; 114
     384:	58 31       	cpi	r21, 0x18	; 24
     386:	69 b6       	in	r6, 0x39	; 57
     388:	00 69       	ori	r16, 0x90	; 144
     38a:	08 bb       	out	0x18, r16	; 24
     38c:	42 4f       	sbci	r20, 0xF2	; 242
     38e:	28 b5       	in	r18, 0x28	; 40
     390:	0c 6a       	ori	r16, 0xAC	; 172
     392:	0b cc       	rjmp	.-2026   	; 0xfffffbaa <__eeprom_end+0xff7efbaa>
     394:	3a 5f       	subi	r19, 0xFA	; 250
     396:	ac d5       	rcall	.+2904   	; 0xef0 <__stack+0x5f1>
     398:	24 29       	or	r18, r4
     39a:	51 00       	.word	0x0051	; ????
     39c:	6b 0b       	sbc	r22, r27
     39e:	3d 42       	sbci	r19, 0x2D	; 45
     3a0:	47 58       	subi	r20, 0x87	; 135
     3a2:	93 92       	.word	0x9293	; ????
     3a4:	a9 92       	st	Y+, r10
     3a6:	05 6c       	ori	r16, 0xC5	; 197
     3a8:	08 bb       	out	0x18, r16	; 24
     3aa:	42 87       	std	Z+10, r20	; 0x0a
     3ac:	d4 cb       	rjmp	.-2136   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3ae:	00 6d       	ori	r16, 0xD0	; 208
     3b0:	0b 2d       	mov	r16, r11
     3b2:	42 87       	std	Z+10, r20	; 0x0a
     3b4:	d2 a2       	std	Z+34, r13	; 0x22
     3b6:	24 4a       	sbci	r18, 0xA4	; 164
     3b8:	a2 05       	cpc	r26, r2
     3ba:	6e 09       	sbc	r22, r14
     3bc:	2d 42       	sbci	r18, 0x2D	; 45
     3be:	47 62       	ori	r20, 0x27	; 39
     3c0:	d2 6c       	ori	r29, 0xC2	; 194
     3c2:	01 6f       	ori	r16, 0xF1	; 241
     3c4:	09 2d       	mov	r16, r9
     3c6:	42 cf       	rjmp	.-380    	; 0x24c <__trampolines_end+0x1b6>
     3c8:	92 d9       	rcall	.-3292   	; 0xfffff6ee <__eeprom_end+0xff7ef6ee>
     3ca:	92 05       	cpc	r25, r2
     3cc:	70 0c       	add	r7, r0
     3ce:	3d 3a       	cpi	r19, 0xAD	; 173
     3d0:	47 62       	ori	r20, 0x27	; 39
     3d2:	d2 26       	eor	r13, r18
     3d4:	45 09       	sbc	r20, r5
     3d6:	43 00       	.word	0x0043	; ????
     3d8:	71 0a       	sbc	r7, r17
     3da:	3d 3a       	cpi	r19, 0xAD	; 173
     3dc:	8f 69       	ori	r24, 0x9F	; 159
     3de:	93 14       	cp	r9, r3
     3e0:	25 2c       	mov	r2, r5
     3e2:	72 09       	sbc	r23, r2
     3e4:	2d 42       	sbci	r18, 0x2D	; 45
     3e6:	47 62       	ori	r20, 0x27	; 39
     3e8:	12 8b       	std	Z+18, r17	; 0x12
     3ea:	00 73       	andi	r16, 0x30	; 48
     3ec:	09 2d       	mov	r16, r9
     3ee:	42 cf       	rjmp	.-380    	; 0x274 <__trampolines_end+0x1de>
     3f0:	92 1e       	adc	r9, r18
     3f2:	14 00       	.word	0x0014	; ????
     3f4:	74 0c       	add	r7, r4
     3f6:	3d 42       	sbci	r19, 0x2D	; 45
     3f8:	4f 98       	cbi	0x09, 7	; 9
     3fa:	0d 51       	subi	r16, 0x1D	; 29
     3fc:	58 8a       	std	Y+16, r5	; 0x10
     3fe:	14 00       	.word	0x0014	; ????
     400:	75 09       	sbc	r23, r5
     402:	2d 42       	sbci	r18, 0x2D	; 45
     404:	47 e6       	ldi	r20, 0x67	; 103
     406:	a4 28       	or	r10, r4
     408:	01 76       	andi	r16, 0x61	; 97
     40a:	0b 2d       	mov	r16, r11
     40c:	42 47       	sbci	r20, 0x72	; 114
     40e:	a6 25       	eor	r26, r6
     410:	a5 24       	eor	r10, r5
     412:	8b 00       	.word	0x008b	; ????
     414:	77 0a       	sbc	r7, r23
     416:	2d 42       	sbci	r18, 0x2D	; 45
     418:	47 66       	ori	r20, 0x67	; 103
     41a:	49 94       	.word	0x9449	; ????
     41c:	2e 00       	.word	0x002e	; ????
     41e:	78 0a       	sbc	r7, r24
     420:	2d 42       	sbci	r18, 0x2D	; 45
     422:	47 96       	adiw	r24, 0x17	; 23
     424:	d4 2a       	or	r13, r20
     426:	b5 00       	.word	0x00b5	; ????
     428:	79 0c       	add	r7, r9
     42a:	3d 3a       	cpi	r19, 0xAD	; 173
     42c:	47 66       	ori	r20, 0x67	; 103
     42e:	52 94       	swap	r5
     430:	50 4b       	sbci	r21, 0xB0	; 176
     432:	16 00       	.word	0x0016	; ????
     434:	7a 09       	sbc	r23, r10
     436:	2d 42       	sbci	r18, 0x2D	; 45
     438:	c7 a0       	ldd	r12, Z+39	; 0x27
     43a:	b5 0d       	add	r27, r5
     43c:	02 7b       	andi	r16, 0xB2	; 178
     43e:	0a bc       	out	0x2a, r0	; 42
     440:	42 97       	sbiw	r24, 0x12	; 18
     442:	12 26       	eor	r1, r18
     444:	62 14       	cp	r6, r2
     446:	0a 7c       	andi	r16, 0xCA	; 202
     448:	06 39       	cpi	r16, 0x96	; 150
     44a:	43 c7       	rjmp	.+3718   	; 0x12d2 <__vector_3+0x170>
     44c:	21 7d       	andi	r18, 0xD1	; 209
     44e:	0b bc       	out	0x2b, r0	; 43
     450:	42 87       	std	Z+10, r20	; 0x0a
     452:	18 85       	ldd	r17, Y+8	; 0x08
     454:	4a 98       	cbi	0x09, 2	; 9
     456:	48 00       	.word	0x0048	; ????
     458:	7e 09       	sbc	r23, r14
     45a:	1d 52       	subi	r17, 0x2D	; 45
     45c:	4f a4       	ldd	r4, Y+47	; 0x2f
     45e:	24 52       	subi	r18, 0x24	; 36
     460:	02 a0       	ldd	r0, Z+34	; 0x22
     462:	05 00       	.word	0x0005	; ????
     464:	62 07       	cpc	r22, r18
     466:	a1 07       	cpc	r26, r17
     468:	39 43       	sbci	r19, 0x39	; 57
     46a:	47 32       	cpi	r20, 0x27	; 39
     46c:	08 a2       	std	Y+32, r0	; 0x20
     46e:	0e 3d       	cpi	r16, 0xDE	; 222
     470:	3e 57       	subi	r19, 0x7E	; 126
     472:	36 28       	or	r3, r6
     474:	51 12       	cpse	r5, r17
     476:	25 d9       	rcall	.-3510   	; 0xfffff6c2 <__eeprom_end+0xff7ef6c2>
     478:	10 45       	sbci	r17, 0x50	; 80
     47a:	00 a3       	std	Z+32, r16	; 0x20
     47c:	0c 3d       	cpi	r16, 0xDC	; 220
     47e:	42 97       	sbiw	r24, 0x12	; 18
     480:	54 c9       	rjmp	.-3416   	; 0xfffff72a <__eeprom_end+0xff7ef72a>
     482:	b6 30       	cpi	r27, 0x06	; 6
     484:	52 14       	cp	r5, r2
     486:	00 a4       	ldd	r0, Z+40	; 0x28
     488:	0b 2d       	mov	r16, r11
     48a:	42 47       	sbci	r20, 0x72	; 114
     48c:	96 4c       	sbci	r25, 0xC6	; 198
     48e:	49 b4       	in	r4, 0x29	; 41
     490:	64 01       	movw	r12, r8
     492:	a5 0d       	add	r26, r5
     494:	45 3e       	cpi	r20, 0xE5	; 229
     496:	47 a6       	std	Z+47, r4	; 0x2f
     498:	25 b5       	in	r18, 0x25	; 37
     49a:	68 90       	.word	0x9068	; ????
     49c:	c2 12       	cpse	r12, r18
     49e:	00 a6       	std	Z+40, r0	; 0x28
     4a0:	06 39       	cpi	r16, 0x96	; 150
     4a2:	43 c7       	rjmp	.+3718   	; 0x132a <__vector_3+0x1c8>
     4a4:	32 a7       	std	Z+42, r19	; 0x2a
     4a6:	0b 45       	sbci	r16, 0x5B	; 91
     4a8:	3e cf       	rjmp	.-388    	; 0x326 <__trampolines_end+0x290>
     4aa:	12 4e       	sbci	r17, 0xE2	; 226
     4ac:	9d c6       	rjmp	.+3386   	; 0x11e8 <__vector_3+0x86>
     4ae:	64 01       	movw	r12, r8
     4b0:	a8 06       	cpc	r10, r24
     4b2:	8b 5e       	subi	r24, 0xEB	; 235
     4b4:	47 12       	cpse	r4, r23
     4b6:	a9 0d       	add	r26, r9
     4b8:	3d 42       	sbci	r19, 0x2D	; 45
     4ba:	cf 92       	push	r12
     4bc:	29 c9       	rjmp	.-3502   	; 0xfffff710 <__eeprom_end+0xff7ef710>
     4be:	a4 24       	eor	r10, r4
     4c0:	5a b2       	in	r5, 0x1a	; 26
     4c2:	00 aa       	std	Z+48, r0	; 0x30
     4c4:	0a b4       	in	r0, 0x2a	; 42
     4c6:	46 cf       	rjmp	.-372    	; 0x354 <__trampolines_end+0x2be>
     4c8:	10 29       	or	r17, r0
     4ca:	4a 71       	andi	r20, 0x1A	; 26
     4cc:	08 ab       	std	Y+48, r16	; 0x30
     4ce:	0c 2e       	mov	r0, r28
     4d0:	42 57       	subi	r20, 0x72	; 114
     4d2:	25 4a       	sbci	r18, 0xA5	; 165
     4d4:	a2 2c       	mov	r10, r2
     4d6:	ca a2       	std	Y+34, r12	; 0x22
     4d8:	00 ac       	ldd	r0, Z+56	; 0x38
     4da:	07 94       	ror	r0
     4dc:	4a c7       	rjmp	.+3732   	; 0x1372 <__vector_3+0x210>
     4de:	90 05       	cpc	r25, r0
     4e0:	ad 06       	cpc	r10, r29
     4e2:	8c 4e       	sbci	r24, 0xEC	; 236
     4e4:	c7 10       	cpse	r12, r7
     4e6:	ae 0c       	add	r10, r14
     4e8:	3d 42       	sbci	r19, 0x2D	; 45
     4ea:	cf 92       	push	r12
     4ec:	0d c9       	rjmp	.-3558   	; 0xfffff708 <__eeprom_end+0xff7ef708>
     4ee:	34 69       	ori	r19, 0x94	; 148
     4f0:	c9 02       	muls	r28, r25
     4f2:	af 06       	cpc	r10, r31
     4f4:	0d 5e       	subi	r16, 0xED	; 237
     4f6:	c7 20       	and	r12, r7
     4f8:	b0 07       	cpc	r27, r16
     4fa:	9b 52       	subi	r25, 0x2B	; 43
     4fc:	4f 17       	cp	r20, r31
     4fe:	00 b1       	in	r16, 0x00	; 0
     500:	0b 35       	cpi	r16, 0x5B	; 91
     502:	42 57       	subi	r20, 0x72	; 114
     504:	18 0d       	add	r17, r8
     506:	52 18       	sub	r5, r2
     508:	0d 02       	muls	r16, r29
     50a:	b2 09       	sbc	r27, r2
     50c:	ac 4e       	sbci	r26, 0xEC	; 236
     50e:	8f 12       	cpse	r8, r31
     510:	35 0d       	add	r19, r5
     512:	01 b3       	in	r16, 0x11	; 17
     514:	09 ac       	ldd	r0, Y+57	; 0x39
     516:	4e c7       	rjmp	.+3740   	; 0x13b4 <__vector_3+0x252>
     518:	98 88       	ldd	r9, Y+16	; 0x10
     51a:	43 02       	muls	r20, r19
     51c:	b4 06       	cpc	r11, r20
     51e:	12 5b       	subi	r17, 0xB2	; 178
     520:	8f 02       	muls	r24, r31
     522:	b5 0a       	sbc	r11, r21
     524:	35 3e       	cpi	r19, 0xE5	; 229
     526:	47 66       	ori	r20, 0x67	; 103
     528:	9b 14       	cp	r9, r11
     52a:	25 04       	cpc	r2, r5
     52c:	b6 0f       	add	r27, r22
     52e:	3d 42       	sbci	r19, 0x2D	; 45
     530:	cf 30       	cpi	r28, 0x0F	; 15
     532:	24 43       	sbci	r18, 0x34	; 52
     534:	92 28       	or	r9, r2
     536:	51 12       	cpse	r5, r17
     538:	25 51       	subi	r18, 0x15	; 21
     53a:	12 b7       	in	r17, 0x32	; 50
     53c:	06 09       	sbc	r16, r6
     53e:	4f 47       	sbci	r20, 0x7F	; 127
     540:	00 b8       	out	0x00, r0	; 0
     542:	06 12       	cpse	r0, r22
     544:	3b 8f       	std	Y+27, r19	; 0x1b
     546:	02 b9       	out	0x02, r16	; 2
     548:	08 ab       	std	Y+48, r16	; 0x30
     54a:	4e 4f       	sbci	r20, 0xFE	; 254
     54c:	22 55       	subi	r18, 0x52	; 82
     54e:	06 ba       	out	0x16, r0	; 22
     550:	0a b4       	in	r0, 0x2a	; 42
     552:	46 8f       	std	Z+30, r20	; 0x1e
     554:	12 49       	sbci	r17, 0x92	; 146
     556:	89 3a       	cpi	r24, 0xA9	; 169
     558:	04 bb       	out	0x14, r16	; 20
     55a:	0d 2e       	mov	r0, r29
     55c:	42 47       	sbci	r20, 0x72	; 114
     55e:	94 45       	sbci	r25, 0x54	; 84
     560:	59 94       	.word	0x9459	; ????
     562:	44 49       	sbci	r20, 0x94	; 148
     564:	14 01       	movw	r2, r8
     566:	bc 0d       	add	r27, r12
     568:	4e 3e       	cpi	r20, 0xEE	; 238
     56a:	4f a8       	ldd	r4, Y+55	; 0x37
     56c:	16 a7       	std	Z+46, r17	; 0x2e
     56e:	50 4b       	sbci	r21, 0xB0	; 176
     570:	a2 21       	and	r26, r2
     572:	0d bd       	out	0x2d, r16	; 45
     574:	0c 4e       	sbci	r16, 0xEC	; 236
     576:	3e 4f       	sbci	r19, 0xFE	; 254
     578:	a8 16       	cp	r10, r24
     57a:	97 30       	cpi	r25, 0x07	; 7
     57c:	49 c3       	rjmp	.+1682   	; 0xc10 <__stack+0x311>
     57e:	70 be       	out	0x30, r7	; 48
     580:	0e 4d       	sbci	r16, 0xDE	; 222
     582:	3e 87       	std	Y+14, r19	; 0x0e
     584:	9a a5       	ldd	r25, Y+42	; 0x2a
     586:	91 94       	neg	r9
     588:	49 49       	sbci	r20, 0x99	; 153
     58a:	32 84       	ldd	r3, Z+10	; 0x0a
     58c:	01 bf       	out	0x31, r16	; 49
     58e:	0a 3d       	cpi	r16, 0xDA	; 218
     590:	42 57       	subi	r20, 0x72	; 114
     592:	0e 85       	ldd	r16, Y+14	; 0x0e
     594:	59 cb       	rjmp	.-2382   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     596:	02 c0       	rjmp	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     598:	0c 45       	sbci	r16, 0x5C	; 92
     59a:	42 4f       	sbci	r20, 0xF2	; 242
     59c:	9a 2d       	mov	r25, r10
     59e:	99 36       	cpi	r25, 0x69	; 105
     5a0:	0c 99       	sbic	0x01, 4	; 1
     5a2:	16 c1       	rjmp	.+556    	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     5a4:	0c 45       	sbci	r16, 0x5C	; 92
     5a6:	42 5f       	subi	r20, 0xF2	; 242
     5a8:	6d c9       	rjmp	.-3366   	; 0xfffff884 <__eeprom_end+0xff7ef884>
     5aa:	b4 61       	ori	r27, 0x14	; 20
     5ac:	c8 b4       	in	r12, 0x28	; 40
     5ae:	00 c2       	rjmp	.+1024   	; 0x9b0 <__stack+0xb1>
     5b0:	0d 45       	sbci	r16, 0x5D	; 93
     5b2:	42 57       	subi	r20, 0x72	; 114
     5b4:	96 44       	sbci	r25, 0x46	; 70
     5b6:	4b a6       	std	Y+43, r4	; 0x2b
     5b8:	0d 43       	sbci	r16, 0x3D	; 61
     5ba:	a6 05       	cpc	r26, r6
     5bc:	c3 0d       	add	r28, r3
     5be:	45 42       	sbci	r20, 0x25	; 37
     5c0:	4f a4       	ldd	r4, Y+47	; 0x2f
     5c2:	48 4b       	sbci	r20, 0xB8	; 184
     5c4:	a6 0d       	add	r26, r6
     5c6:	43 a6       	std	Z+43, r4	; 0x2b
     5c8:	05 c4       	rjmp	.+2058   	; 0xdd4 <__stack+0x4d5>
     5ca:	0c 45       	sbci	r16, 0x5C	; 92
     5cc:	42 4f       	sbci	r20, 0xF2	; 242
     5ce:	1d 58       	subi	r17, 0x8D	; 141
     5d0:	32 6d       	ori	r19, 0xD2	; 210
     5d2:	18 32       	cpi	r17, 0x28	; 40
     5d4:	2d c5       	rjmp	.+2650   	; 0x1030 <angleCalculator+0x7e>
     5d6:	0d 45       	sbci	r16, 0x5D	; 93
     5d8:	42 57       	subi	r20, 0x72	; 114
     5da:	96 44       	sbci	r25, 0x46	; 70
     5dc:	4b a6       	std	Y+43, r4	; 0x2b
     5de:	0d 43       	sbci	r16, 0x3D	; 61
     5e0:	a6 05       	cpc	r26, r6
     5e2:	c6 0c       	add	r12, r6
     5e4:	3e 42       	sbci	r19, 0x2E	; 46
     5e6:	d7 90       	elpm	r13, Z+
     5e8:	94 9a       	sbi	0x12, 4	; 18
     5ea:	86 21       	and	r24, r6
     5ec:	6a 1a       	sub	r6, r26
     5ee:	c7 0b       	sbc	r28, r23
     5f0:	4d 3a       	cpi	r20, 0xAD	; 173
     5f2:	cf 92       	push	r12
     5f4:	89 6d       	ori	r24, 0xD9	; 217
     5f6:	c9 56       	subi	r28, 0x69	; 105
     5f8:	03 c8       	rjmp	.-4090   	; 0xfffff600 <__eeprom_end+0xff7ef600>
     5fa:	0c 45       	sbci	r16, 0x5C	; 92
     5fc:	42 4f       	sbci	r20, 0xF2	; 242
     5fe:	36 8c       	ldd	r3, Z+30	; 0x1e
     600:	e1 90       	ld	r14, Z+
     602:	84 e1       	ldi	r24, 0x14	; 20
     604:	20 c9       	rjmp	.-3520   	; 0xfffff846 <__eeprom_end+0xff7ef846>
     606:	0c 45       	sbci	r16, 0x5C	; 92
     608:	42 5f       	subi	r20, 0xF2	; 242
     60a:	32 8c       	ldd	r3, Z+26	; 0x1a
     60c:	e1 90       	ld	r14, Z+
     60e:	84 e1       	ldi	r24, 0x14	; 20
     610:	20 ca       	rjmp	.-3008   	; 0xfffffa52 <__eeprom_end+0xff7efa52>
     612:	0c 45       	sbci	r16, 0x5C	; 92
     614:	42 57       	subi	r20, 0x72	; 114
     616:	34 8c       	ldd	r3, Z+28	; 0x1c
     618:	e1 90       	ld	r14, Z+
     61a:	84 e1       	ldi	r24, 0x14	; 20
     61c:	20 cb       	rjmp	.-2496   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
     61e:	0c 45       	sbci	r16, 0x5C	; 92
     620:	42 4f       	sbci	r20, 0xF2	; 242
     622:	65 18       	sub	r6, r5
     624:	c3 21       	and	r28, r3
     626:	09 c3       	rjmp	.+1554   	; 0xc3a <__stack+0x33b>
     628:	41 cc       	rjmp	.-1918   	; 0xfffffeac <__eeprom_end+0xff7efeac>
     62a:	0a c3       	rjmp	.+1556   	; 0xc40 <__stack+0x341>
     62c:	42 47       	sbci	r20, 0x72	; 114
     62e:	96 2c       	mov	r9, r6
     630:	51 cb       	rjmp	.-2398   	; 0xfffffcd4 <__eeprom_end+0xff7efcd4>
     632:	00 cd       	rjmp	.-1536   	; 0x34 <__FUSE_REGION_LENGTH__+0x31>
     634:	0a c3       	rjmp	.+1556   	; 0xc4a <__stack+0x34b>
     636:	42 57       	subi	r20, 0x72	; 114
     638:	92 2c       	mov	r9, r2
     63a:	51 cb       	rjmp	.-2398   	; 0xfffffcde <__eeprom_end+0xff7efcde>
     63c:	00 ce       	rjmp	.-1024   	; 0x23e <__trampolines_end+0x1a8>
     63e:	0a c3       	rjmp	.+1556   	; 0xc54 <__stack+0x355>
     640:	42 4f       	sbci	r20, 0xF2	; 242
     642:	65 48       	sbci	r22, 0x85	; 133
     644:	a2 96       	adiw	r28, 0x22	; 34
     646:	01 cf       	rjmp	.-510    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     648:	0a c3       	rjmp	.+1556   	; 0xc5e <__stack+0x35f>
     64a:	42 47       	sbci	r20, 0x72	; 114
     64c:	92 2d       	mov	r25, r2
     64e:	51 cb       	rjmp	.-2398   	; 0xfffffcf2 <__eeprom_end+0xff7efcf2>
     650:	00 d0       	rcall	.+0      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     652:	0e 3d       	cpi	r16, 0xDE	; 222
     654:	42 c7       	rjmp	.+3716   	; 0x14da <setup_display+0x24>
     656:	10 55       	subi	r17, 0x50	; 80
     658:	a2 21       	and	r26, r2
     65a:	29 25       	eor	r18, r9
     65c:	d1 a0       	ldd	r13, Z+33	; 0x21
     65e:	00 d1       	rcall	.+512    	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     660:	0c 45       	sbci	r16, 0x5C	; 92
     662:	42 57       	subi	r20, 0x72	; 114
     664:	d2 6d       	ori	r29, 0xD2	; 210
     666:	52 12       	cpse	r5, r18
     668:	69 d3       	rcall	.+1746   	; 0xd3c <__stack+0x43d>
     66a:	02 d2       	rcall	.+1028   	; 0xa70 <__stack+0x171>
     66c:	0b 45       	sbci	r16, 0x5B	; 91
     66e:	42 4f       	sbci	r20, 0xF2	; 242
     670:	9a 2d       	mov	r25, r10
     672:	99 5b       	subi	r25, 0xB9	; 185
     674:	b2 00       	.word	0x00b2	; ????
     676:	d3 0a       	sbc	r13, r19
     678:	45 42       	sbci	r20, 0x25	; 37
     67a:	5f 6d       	ori	r21, 0xDF	; 223
     67c:	c9 dc       	rcall	.-1646   	; 0x10 <__FUSE_REGION_LENGTH__+0xd>
     67e:	92 05       	cpc	r25, r2
     680:	d4 0c       	add	r13, r4
     682:	45 42       	sbci	r20, 0x25	; 37
     684:	57 96       	adiw	r26, 0x17	; 23
     686:	44 4b       	sbci	r20, 0xB4	; 180
     688:	e6 96       	adiw	r28, 0x36	; 54
     68a:	2c 00       	.word	0x002c	; ????
     68c:	d5 0b       	sbc	r29, r21
     68e:	45 42       	sbci	r20, 0x25	; 37
     690:	57 d2       	rcall	.+1198   	; 0xb40 <__stack+0x241>
     692:	b4 64       	ori	r27, 0x44	; 68
     694:	6e c9       	rjmp	.-3364   	; 0xfffff972 <__eeprom_end+0xff7ef972>
     696:	02 d6       	rcall	.+3076   	; 0x129c <__vector_3+0x13a>
     698:	0b 45       	sbci	r16, 0x5B	; 91
     69a:	42 4f       	sbci	r20, 0xF2	; 242
     69c:	1d 58       	subi	r17, 0x8D	; 141
     69e:	32 b7       	in	r19, 0x32	; 50
     6a0:	64 01       	movw	r12, r8
     6a2:	d7 0a       	sbc	r13, r23
     6a4:	2d 42       	sbci	r18, 0x2D	; 45
     6a6:	47 96       	adiw	r24, 0x17	; 23
     6a8:	d4 2a       	or	r13, r20
     6aa:	b5 00       	.word	0x00b5	; ????
     6ac:	d8 0c       	add	r13, r8
     6ae:	3d 42       	sbci	r19, 0x2D	; 45
     6b0:	cf 12       	cpse	r12, r31
     6b2:	5d 92       	st	X+, r5
     6b4:	69 4a       	sbci	r22, 0xA9	; 169
     6b6:	16 00       	.word	0x0016	; ????
     6b8:	d9 0a       	sbc	r13, r25
     6ba:	45 42       	sbci	r20, 0x25	; 37
     6bc:	4f 1a       	sub	r4, r31
     6be:	65 de       	rcall	.-822    	; 0x38a <__trampolines_end+0x2f4>
     6c0:	92 05       	cpc	r25, r2
     6c2:	da 0a       	sbc	r13, r26
     6c4:	45 42       	sbci	r20, 0x25	; 37
     6c6:	5f 29       	or	r21, r15
     6c8:	f3 96       	adiw	r30, 0x33	; 51
     6ca:	2c 00       	.word	0x002c	; ????
     6cc:	db 0b       	sbc	r29, r27
     6ce:	45 42       	sbci	r20, 0x25	; 37
     6d0:	57 96       	adiw	r26, 0x17	; 23
     6d2:	c4 99       	sbic	0x18, 4	; 24
     6d4:	5b b2       	in	r5, 0x1b	; 27
     6d6:	00 dc       	rcall	.-2048   	; 0xfffffed8 <__eeprom_end+0xff7efed8>
     6d8:	0a 45       	sbci	r16, 0x5A	; 90
     6da:	42 4f       	sbci	r20, 0xF2	; 242
     6dc:	39 f3       	breq	.-50     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     6de:	96 2c       	mov	r9, r6
     6e0:	00 dd       	rcall	.-1536   	; 0xe2 <__trampolines_end+0x4c>
     6e2:	0b 45       	sbci	r16, 0x5B	; 91
     6e4:	42 5f       	subi	r20, 0xF2	; 242
     6e6:	29 d3       	rcall	.+1618   	; 0xd3a <__stack+0x43b>
     6e8:	92 5a       	subi	r25, 0xA2	; 162
     6ea:	58 02       	muls	r21, r24
     6ec:	de 0c       	add	r13, r14
     6ee:	3d 42       	sbci	r19, 0x2D	; 45
     6f0:	47 38       	cpi	r20, 0x87	; 135
     6f2:	24 d9       	rcall	.-3512   	; 0xfffff93c <__eeprom_end+0xff7ef93c>
     6f4:	a0 84       	ldd	r10, Z+8	; 0x08
     6f6:	45 00       	.word	0x0045	; ????
     6f8:	df 0d       	add	r29, r15
     6fa:	3d 42       	sbci	r19, 0x2D	; 45
     6fc:	cf 92       	push	r12
     6fe:	49 49       	sbci	r20, 0x99	; 153
     700:	a9 92       	st	Y+, r10
     702:	29 0a       	sbc	r2, r25
     704:	00 e0       	ldi	r16, 0x00	; 0
     706:	0c 45       	sbci	r16, 0x5C	; 92
     708:	42 4f       	sbci	r20, 0xF2	; 242
     70a:	9a 23       	and	r25, r26
     70c:	6b 32       	cpi	r22, 0x2B	; 43
     70e:	68 c9       	rjmp	.-3376   	; 0xfffff9e0 <__eeprom_end+0xff7ef9e0>
     710:	10 e1       	ldi	r17, 0x10	; 16
     712:	0c 45       	sbci	r16, 0x5C	; 92
     714:	42 5f       	subi	r20, 0xF2	; 242
     716:	1d 59       	subi	r17, 0x9D	; 157
     718:	93 41       	sbci	r25, 0x13	; 19
     71a:	4b 86       	std	Y+11, r4	; 0x0b
     71c:	00 e2       	ldi	r16, 0x20	; 32
     71e:	0d 45       	sbci	r16, 0x5D	; 93
     720:	42 57       	subi	r20, 0x72	; 114
     722:	96 e4       	ldi	r25, 0x46	; 70
     724:	c0 9a       	sbi	0x18, 0	; 24
     726:	0c 5a       	subi	r16, 0xAC	; 172
     728:	32 04       	cpc	r3, r2
     72a:	e3 0d       	add	r30, r3
     72c:	45 42       	sbci	r20, 0x25	; 37
     72e:	57 d2       	rcall	.+1198   	; 0xbde <__stack+0x2df>
     730:	0e ac       	ldd	r0, Y+62	; 0x3e
     732:	c9 a0       	ldd	r12, Y+33	; 0x21
     734:	25 43       	sbci	r18, 0x35	; 53
     736:	00 e4       	ldi	r16, 0x40	; 64
     738:	0c 3d       	cpi	r16, 0xDC	; 220
     73a:	42 4f       	sbci	r20, 0xF2	; 242
     73c:	1d 58       	subi	r17, 0x8D	; 141
     73e:	93 41       	sbci	r25, 0x13	; 19
     740:	4b 86       	std	Y+11, r4	; 0x0b
     742:	00 e5       	ldi	r16, 0x50	; 80
     744:	0d 45       	sbci	r16, 0x5D	; 93
     746:	42 57       	subi	r20, 0x72	; 114
     748:	96 64       	ori	r25, 0x46	; 70
     74a:	d9 9a       	sbi	0x1b, 1	; 27
     74c:	0c 5a       	subi	r16, 0xAC	; 172
     74e:	32 04       	cpc	r3, r2
     750:	e6 0c       	add	r14, r6
     752:	2e 42       	sbci	r18, 0x2E	; 46
     754:	cf 10       	cpse	r12, r15
     756:	26 c9       	rjmp	.-3508   	; 0xfffff9a4 <__eeprom_end+0xff7ef9a4>
     758:	30 65       	ori	r19, 0x50	; 80
     75a:	83 00       	.word	0x0083	; ????
     75c:	e7 0b       	sbc	r30, r23
     75e:	3d 3a       	cpi	r19, 0xAD	; 173
     760:	cf 92       	push	r12
     762:	89 59       	subi	r24, 0x99	; 153
     764:	b2 d5       	rcall	.+2916   	; 0x12ca <__vector_3+0x168>
     766:	00 e8       	ldi	r16, 0x80	; 128
     768:	0c 45       	sbci	r16, 0x5C	; 92
     76a:	42 4f       	sbci	r20, 0xF2	; 242
     76c:	9a 23       	and	r25, r26
     76e:	4b 36       	cpi	r20, 0x6B	; 107
     770:	0c e9       	ldi	r16, 0x9C	; 156
     772:	02 e9       	ldi	r16, 0x92	; 146
     774:	0c 45       	sbci	r16, 0x5C	; 92
     776:	42 5f       	subi	r20, 0xF2	; 242
     778:	1d 59       	subi	r17, 0x9D	; 157
     77a:	b2 61       	ori	r27, 0x12	; 18
     77c:	48 17       	cp	r20, r24
     77e:	00 ea       	ldi	r16, 0xA0	; 160
     780:	0d 45       	sbci	r16, 0x5D	; 93
     782:	42 57       	subi	r20, 0x72	; 114
     784:	96 e4       	ldi	r25, 0x46	; 70
     786:	c0 92 0d 43 	sts	0x430D, r12	; 0x80430d <__bss_end+0x3cfd>
     78a:	ba 00       	.word	0x00ba	; ????
     78c:	eb 0c       	add	r14, r11
     78e:	3d 42       	sbci	r19, 0x2D	; 45
     790:	4f 1d       	adc	r20, r15
     792:	58 b2       	in	r5, 0x18	; 24
     794:	61 48       	sbci	r22, 0x81	; 129
     796:	17 00       	.word	0x0017	; ????
     798:	ec 09       	sbc	r30, r12
     79a:	c3 42       	sbci	r28, 0x23	; 35
     79c:	47 16       	cp	r4, r23
     79e:	4a 2d       	mov	r20, r10
     7a0:	03 ed       	ldi	r16, 0xD3	; 211
     7a2:	08 c3       	rjmp	.+1552   	; 0xdb4 <__stack+0x4b5>
     7a4:	42 4f       	sbci	r20, 0xF2	; 242
     7a6:	55 6a       	ori	r21, 0xA5	; 165
     7a8:	19 ee       	ldi	r17, 0xE9	; 233
     7aa:	08 c3       	rjmp	.+1552   	; 0xdbc <__stack+0x4bd>
     7ac:	42 4f       	sbci	r20, 0xF2	; 242
     7ae:	9b d4       	rcall	.+2358   	; 0x10e6 <angleCalculator+0x134>
     7b0:	32 ef       	ldi	r19, 0xF2	; 242
     7b2:	09 bb       	out	0x19, r16	; 25
     7b4:	42 47       	sbci	r20, 0x72	; 114
     7b6:	92 49       	sbci	r25, 0x92	; 146
     7b8:	2d 03       	fmul	r18, r21
     7ba:	f0 0b       	sbc	r31, r16
     7bc:	3d 42       	sbci	r19, 0x2D	; 45
     7be:	87 2a       	or	r8, r23
     7c0:	2d 99       	sbic	0x05, 5	; 5
     7c2:	2d 59       	subi	r18, 0x9D	; 157
     7c4:	00 f1       	brcs	.+64     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7c6:	0b 45       	sbci	r16, 0x5B	; 91
     7c8:	42 57       	subi	r20, 0x72	; 114
     7ca:	d2 9c       	mul	r13, r2
     7cc:	98 34       	cpi	r25, 0x48	; 72
     7ce:	5b 00       	.word	0x005b	; ????
     7d0:	f2 0c       	add	r15, r2
     7d2:	45 42       	sbci	r20, 0x25	; 37
     7d4:	4f 9a       	sbi	0x09, 7	; 9
     7d6:	23 4b       	sbci	r18, 0xB3	; 179
     7d8:	66 4b       	sbci	r22, 0xB6	; 182
     7da:	16 00       	.word	0x0016	; ????
     7dc:	f3 0b       	sbc	r31, r19
     7de:	45 42       	sbci	r20, 0x25	; 37
     7e0:	5f 1d       	adc	r21, r15
     7e2:	59 32       	cpi	r21, 0x29	; 41
     7e4:	5b b2       	in	r5, 0x1b	; 27
     7e6:	00 f4       	brcc	.+0      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7e8:	0c 45       	sbci	r16, 0x5C	; 92
     7ea:	42 57       	subi	r20, 0x72	; 114
     7ec:	96 e4       	ldi	r25, 0x46	; 70
     7ee:	c0 92 d9 92 	sts	0x92D9, r12	; 0x8092d9 <__bss_end+0x8cc9>
     7f2:	05 f5       	brhc	.+64     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     7f4:	0c 45       	sbci	r16, 0x5C	; 92
     7f6:	42 57       	subi	r20, 0x72	; 114
     7f8:	d2 0e       	add	r13, r18
     7fa:	2c 99       	sbic	0x05, 4	; 5
     7fc:	2d 59       	subi	r18, 0x9D	; 157
     7fe:	00 f6       	brcc	.-128    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     800:	0b 3d       	cpi	r16, 0xDB	; 219
     802:	42 4f       	sbci	r20, 0xF2	; 242
     804:	1d 58       	subi	r17, 0x8D	; 141
     806:	32 5b       	subi	r19, 0xB2	; 178
     808:	b2 00       	.word	0x00b2	; ????
     80a:	f7 0a       	sbc	r15, r23
     80c:	2d 46       	sbci	r18, 0x6D	; 109
     80e:	57 0e       	add	r5, r23
     810:	0c 3a       	cpi	r16, 0xAC	; 172
     812:	10 01       	movw	r2, r0
     814:	f8 0b       	sbc	r31, r24
     816:	2d 42       	sbci	r18, 0x2D	; 45
     818:	cf 20       	and	r12, r15
     81a:	2d c9       	rjmp	.-3494   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
     81c:	34 28       	or	r3, r4
     81e:	00 f9       	bld	r16, 0
     820:	0b 45       	sbci	r16, 0x5B	; 91
     822:	42 4f       	sbci	r20, 0xF2	; 242
     824:	9a 03       	fmulsu	r17, r18
     826:	99 93       	st	Y+, r25
     828:	a2 04       	cpc	r10, r2
     82a:	fa 0a       	sbc	r15, r26
     82c:	45 42       	sbci	r20, 0x25	; 37
     82e:	5f 1d       	adc	r21, r15
     830:	c8 9c       	mul	r12, r8
     832:	14 25       	eor	r17, r4
     834:	fb 0b       	sbc	r31, r27
     836:	45 42       	sbci	r20, 0x25	; 37
     838:	57 96       	adiw	r26, 0x17	; 23
     83a:	c4 99       	sbic	0x18, 4	; 24
     83c:	93 a2       	std	Z+35, r9	; 0x23
     83e:	04 fc       	sbrc	r0, 4
     840:	0a 3d       	cpi	r16, 0xDA	; 218
     842:	42 4f       	sbci	r20, 0xF2	; 242
     844:	39 73       	andi	r19, 0x39	; 57
     846:	52 94       	swap	r5
     848:	00 fd       	sbrc	r16, 0
     84a:	0d 4d       	sbci	r16, 0xDD	; 221
     84c:	3a 5f       	subi	r19, 0xFA	; 250
     84e:	29 33       	cpi	r18, 0x39	; 57
     850:	29 4a       	sbci	r18, 0xA9	; 169
     852:	a8 25       	eor	r26, r8
     854:	0b 00       	.word	0x000b	; ????
     856:	fe 0c       	add	r15, r14
     858:	45 3a       	cpi	r20, 0xA5	; 165
     85a:	47 38       	cpi	r20, 0x87	; 135
     85c:	24 99       	sbic	0x04, 4	; 4
     85e:	6d 50       	subi	r22, 0x0D	; 13
     860:	c2 10       	cpse	r12, r2
     862:	ff 0d       	add	r31, r15
     864:	4d 3a       	cpi	r20, 0xAD	; 173
     866:	4f 39       	cpi	r20, 0x9F	; 159
     868:	33 29       	or	r19, r3
     86a:	4a a8       	ldd	r4, Y+50	; 0x32
     86c:	25 0b       	sbc	r18, r21
     86e:	00 00       	nop
     870:	00 00       	nop
     872:	04 ff       	sbrs	r16, 4
     874:	ff 00       	.word	0x00ff	; ????
	...

00000877 <u8g2_font_5x7_tf>:
     877:	bf 00 02 02 03 03 03 04 04 05 07 00 ff 06 ff 06     ................
     887:	00 01 12 02 2f 06 70 20 05 00 bd 01 21 06 b1 b1     ..../.p ....!...
     897:	19 29 22 07 5b b7 49 56 00 23 0a 2d b1 ab 86 aa     .)".[.IV.#.-....
     8a7:	86 aa 00 24 0a 2d b1 5b 35 d8 20 a5 05 25 09 34     ...$.-.[5. ..%.4
     8b7:	b1 c9 20 f6 06 01 26 09 2c b1 8b 29 56 31 05 27     .. ...&.,..)V1.'
     8c7:	05 99 b7 19 28 07 72 b1 53 cd 00 29 08 72 b1 89     ....(.r.S..).r..
     8d7:	a9 52 00 2a 07 6b b1 49 d5 6a 2b 0a 2d b1 cd 28     .R.*.k.I.j+.-..(
     8e7:	0e 99 51 04 2c 07 5b af 53 25 00 2d 06 0c b5 19     ..Q.,.[.S%.-....
     8f7:	01 2e 06 52 b1 19 01 2f 07 24 b3 07 b1 0d 30 08     ...R.../.$....0.
     907:	73 b1 ab 5c 15 00 31 07 73 b1 4b b2 35 32 0a 34     s..\..1.s.K.52.4
     917:	b1 53 31 83 58 8e 00 33 0b 34 b1 19 19 24 8d 64     .S1.X..3.4...$.d
     927:	52 00 34 0a 34 b1 8d aa 1a 31 83 04 35 0a 34 b1     R.4.4....1..5.4.
     937:	19 1a 6c 24 93 02 36 0a 34 b1 53 19 ac 28 93 02     ..l$..6.4.S..(..
     947:	37 0b 34 b1 19 19 c4 0c 62 06 11 38 0a 34 b1 53     7.4.....b..8.4.S
     957:	31 a9 28 93 02 39 0a 34 b1 53 51 a6 0d 92 02 3a     1.(..9.4.SQ....:
     967:	07 6a b1 19 71 04 3b 08 33 af b3 91 2a 01 3c 08     .j..q.;.3...*.<.
     977:	6b b1 4d 35 c8 20 3d 08 1c b3 19 19 8d 00 3e 09     k.M5. =.......>.
     987:	6b b1 c9 20 83 54 02 3f 09 73 b1 6b a6 0c 13 00     k.. .T.?.s.k....
     997:	40 09 34 b1 53 51 dd 48 01 41 09 34 b1 53 51 8e     @.4.SQ.H.A.4.SQ.
     9a7:	29 03 42 0a 34 b1 59 71 a4 28 47 02 43 0b 34 b1     ).B.4.Yq.(G.C.4.
     9b7:	53 51 83 0c 62 52 00 44 09 34 b1 59 d1 39 12 00     SQ..bR.D.4.Y.9..
     9c7:	45 0b 34 b1 19 1a ac 0c 32 18 01 46 0b 34 b1 19     E.4.....2..F.4..
     9d7:	1a ac 0c 32 c8 00 47 0a 34 b1 53 51 83 34 d3 00     ...2..G.4.SQ.4..
     9e7:	48 08 34 b1 89 72 4c 33 49 07 73 b1 59 b1 35 4a     H.4..rL3I.s.Y.5J
     9f7:	0b 34 b1 07 19 64 90 81 4c 0a 4b 0a 34 b1 89 2a     .4...d..L.K.4..*
     a07:	49 99 ca 00 4c 0c 34 b1 c9 20 83 0c 32 c8 60 04     I...L.4.. ..2.`.
     a17:	4d 09 34 b1 89 e3 88 66 00 4e 08 34 b1 89 6b a9     M.4....f.N.4..k.
     a27:	33 4f 09 34 b1 53 d1 99 14 00 50 0a 34 b1 59 51     3O.4.S....P.4.YQ
     a37:	8e 94 41 06 51 0a 3c af 53 d1 5c 49 a3 00 52 09     ..A.Q.<.S.\I..R.
     a47:	34 b1 59 51 8e d4 0c 53 0a 34 b1 53 31 65 54 26     4.YQ...S.4.S1eT&
     a57:	05 54 07 73 b1 59 b1 0b 55 08 34 b1 89 9e 49 01     .T.s.Y..U.4...I.
     a67:	56 09 34 b1 89 ce 24 15 00 57 09 34 b1 89 e6 38     V.4...$..W.4...8
     a77:	62 00 58 0a 34 b1 89 32 49 15 65 00 59 08 73 b1     b.X.4..2I.e.Y.s.
     a87:	49 56 59 01 5a 0a 34 b1 19 19 c4 36 18 01 5b 07     IVY.Z.4....6..[.
     a97:	73 b1 19 b1 39 5c 09 24 b3 c9 28 a3 8c 02 5d 07     s...9\.$..(...].
     aa7:	73 b1 99 cd 11 5e 05 53 b9 6b 5f 06 0c b1 19 01     s....^.S.k_.....
     ab7:	60 06 52 b9 89 01 61 08 24 b1 1b 51 a9 02 62 0b     `.R...a.$..Q..b.
     ac7:	34 b1 c9 20 83 15 e5 48 00 63 07 23 b1 9b 19 08     4.. ...H.c.#....
     ad7:	64 0a 34 b1 07 19 a4 11 65 1a 65 09 24 b1 53 69     d.4.....e.e.$.Si
     ae7:	64 a0 00 66 09 34 b1 ad ca 99 41 04 67 09 2c af     d..f.4....A.g.,.
     af7:	1b 31 a9 8c 06 68 0a 34 b1 c9 20 83 15 cd 00 69     .1...h.4.. ....i
     b07:	08 73 b1 cb 48 56 03 6a 09 7b af cd b0 54 15 00     .s..HV.j.{...T..
     b17:	6b 0b 34 b1 c9 20 83 94 64 2a 03 6c 07 73 b1 91     k.4.. ..d*.l.s..
     b27:	5d 03 6d 08 24 b1 49 69 48 19 6e 07 24 b1 59 d1     ].m.$.IiH.n.$.Y.
     b37:	0c 6f 08 24 b1 53 51 26 05 70 09 2c af 59 51 8e     .o.$.SQ&.p.,.YQ.
     b47:	94 01 71 09 2c af 1b 51 a6 0d 02 72 08 24 b1 59     ..q.,..Q...r.$.Y
     b57:	51 83 0c 73 08 24 b1 1b 1a 0d 05 74 0a 34 b1 cb     Q..s.$.....t.4..
     b67:	20 ce 0c 32 12 75 07 24 b1 89 66 1a 76 07 63 b1      ..2.u.$..f.v.c.
     b77:	49 56 05 77 07 24 b1 89 72 1c 78 08 24 b1 89 49     IV.w.$..r.x.$..I
     b87:	aa 18 79 09 2c af 89 32 95 25 00 7a 08 24 b1 19     ..y.,..2.%.z.$..
     b97:	b1 1c 01 7b 08 73 b1 4d 49 d6 20 7c 05 b1 b1 39     ...{.s.MI. |...9
     ba7:	7d 0a 73 b1 c9 20 aa 98 22 00 7e 07 14 b9 4b 2a     }.s.. ..".~...K*
     bb7:	01 a0 05 00 bd 01 a1 06 b1 b1 49 23 a2 09 34 af     ..........I#..4.
     bc7:	8d 23 35 67 02 a3 08 2c b1 55 71 56 02 a4 0b 2d     .#5g...,.UqV...-
     bd7:	b1 c9 20 cd 14 57 06 01 a5 09 73 b1 49 aa 5a 31     .. ..W....s.I.Z1
     be7:	01 a6 06 a9 b1 51 02 a7 08 7b af 9b aa 92 0b a8     .....Q...{......
     bf7:	06 4b bb 49 01 a9 0d 3d af 5b 19 a8 34 55 d2 20     .K.I...=.[..4U. 
     c07:	2d 00 aa 06 1b b7 5b 49 ab 07 1d b3 8b b2 01 ac     -.....[I........
     c17:	07 14 b3 19 19 04 ad 05 4b b5 19 ae 0c 3d af 5b     ........K....=.[
     c27:	19 8c 34 a7 06 69 01 af 06 0c bb 19 01 b0 06 5b     ..4..i.........[
     c37:	b7 eb 02 b1 0b 35 b1 cd 28 0e 99 51 1c 02 b2 06     .....5..(..Q....
     c47:	62 b5 51 06 b3 06 62 b5 19 69 b4 06 52 b9 53 00     b.Q...b..i..R.S.
     c57:	b5 08 2c af 89 e6 48 19 b6 08 34 b1 1b 6a f5 03     ..,...H...4..j..
     c67:	b7 06 52 b5 19 01 b8 06 52 af 53 00 b9 07 63 b5     ..R.....R.S...c.
     c77:	4b 32 0d ba 06 1b b7 eb 02 bb 08 1d b3 89 a5 4c     K2.............L
     c87:	00 bc 0c 3c af c9 20 83 0c 62 54 1b 04 bd 0d 3c     ...<.. ..bT....<
     c97:	af c9 20 83 0c 92 06 31 03 01 be 0b 3c af 91 1a     .. ....1....<...
     ca7:	44 15 d5 06 01 bf 09 73 b1 cb 30 c5 54 01 c0 09     D......s..0.T...
     cb7:	34 b1 53 51 8e 29 03 c1 09 34 b1 53 51 8e 29 03     4.SQ.)...4.SQ.).
     cc7:	c2 09 34 b1 53 51 8e 29 03 c3 09 34 b1 53 51 8e     ..4.SQ.)...4.SQ.
     cd7:	29 03 c4 0a 34 b1 89 49 c5 31 65 00 c5 09 34 b1     )...4..I.1e...4.
     ce7:	93 2a 8e 29 03 c6 09 34 b1 1b a9 1a aa 25 c7 0b     .*.)...4.....%..
     cf7:	3c af 53 51 83 0c 62 92 11 c8 0b 34 b1 19 1a ac     <.SQ..b....4....
     d07:	0c 32 18 01 c9 0b 34 b1 19 1a ac 0c 32 18 01 ca     .2....4.....2...
     d17:	0b 34 b1 19 1a ac 0c 32 18 01 cb 0b 34 b1 19 1a     .4.....2....4...
     d27:	ac 0c 32 18 01 cc 07 73 b1 59 b1 35 cd 07 73 b1     ..2....s.Y.5..s.
     d37:	59 b1 35 ce 07 73 b1 59 b1 35 cf 07 73 b1 59 b1     Y.5..s.Y.5..s.Y.
     d47:	35 d0 09 34 b1 99 69 75 8d 04 d1 08 34 b1 49 73     5..4..iu....4.Is
     d57:	a9 33 d2 09 34 b1 53 d1 99 14 00 d3 09 34 b1 53     .3..4.S......4.S
     d67:	d1 99 14 00 d4 09 34 b1 53 d1 99 14 00 d5 09 34     ......4.S......4
     d77:	b1 53 d1 99 14 00 d6 0a 34 b1 89 49 45 33 29 00     .S......4..IE3).
     d87:	d7 08 24 b1 89 49 aa 18 d8 09 34 b1 1b e9 48 47     ..$..I....4...HG
     d97:	02 d9 08 34 b1 89 9e 49 01 da 08 34 b1 89 9e 49     ...4...I...4...I
     da7:	01 db 08 34 b1 89 9e 49 01 dc 0a 34 b1 89 19 45     ...4...I...4...E
     db7:	33 29 00 dd 08 73 b1 49 56 59 01 de 0b 34 b1 c9     3)...s.IVY...4..
     dc7:	60 c5 91 32 c8 00 df 09 34 b1 53 51 95 56 02 e0     `..2....4.SQ.V..
     dd7:	0a 34 b1 cb 28 8e a8 54 01 e1 09 34 b1 ad c1 88     .4..(..T...4....
     de7:	4a 15 e2 09 34 b1 ad d2 88 4a 15 e3 0a 34 b1 4b     J...4....J...4.K
     df7:	2a 8e a8 54 01 e4 09 34 b1 ab e1 88 4a 15 e5 09     *..T...4....J...
     e07:	34 b1 93 72 44 a5 0a e6 08 24 b1 1b 69 c5 01 e7     4..rD....$..i...
     e17:	08 6b af 9b 19 a8 04 e8 0b 34 b1 cb 28 aa 34 32     .k.......4..(.42
     e27:	50 00 e9 0a 34 b1 ad 81 4a 23 03 05 ea 0b 34 b1     P...4...J#....4.
     e37:	8b 29 aa 34 32 50 00 eb 0b 34 b1 49 99 50 69 64     .).42P...4.I.Pid
     e47:	a0 00 ec 08 73 b1 c9 20 c9 6a ed 07 73 b1 2b 65     ....s.. .j..s.+e
     e57:	35 ee 07 73 b1 ab 66 35 ef 08 73 b1 49 19 c8 6a     5..s..f5..s.I..j
     e67:	f0 0a 34 b1 cb c8 8a 32 29 00 f1 09 34 b1 4b 2a     ..4....2)...4.K*
     e77:	ad 68 06 f2 0a 34 b1 cb 28 aa 28 93 02 f3 0a 34     .h...4..(.(....4
     e87:	b1 ad 81 8a 32 29 00 f4 0a 34 b1 d3 84 8a 32 29     ....2)...4....2)
     e97:	00 f5 0a 34 b1 4b 2a aa 28 93 02 f6 0a 34 b1 ab     ...4.K*.(....4..
     ea7:	a1 8a 32 29 00 f7 09 2c b1 d3 70 64 a8 00 f8 09     ..2)...,..pd....
     eb7:	24 b1 1b 69 a4 91 00 f9 09 34 b1 cb a8 34 d3 00     $..i.....4...4..
     ec7:	fa 07 34 b1 6d 9a 69 fb 08 34 b1 d3 30 9a 69 fc     ..4.m.i..4..0.i.
     ed7:	09 34 b1 ab 51 34 d3 00 fd 09 3c af 6d ca 54 96     .4..Q4....<.m.T.
     ee7:	00 fe 0a 34 af c9 60 45 39 52 06 ff 0a 3c af ab     ...4..`E9R...<..
     ef7:	51 94 a9 2c 01 00 00 00 04 ff ff 00 00              Q..,.........

00000f04 <__ctors_end>:
     f04:	11 24       	eor	r1, r1
     f06:	1f be       	out	0x3f, r1	; 63
     f08:	cf ef       	ldi	r28, 0xFF	; 255
     f0a:	d8 e0       	ldi	r29, 0x08	; 8
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	cd bf       	out	0x3d, r28	; 61

00000f10 <__do_copy_data>:
     f10:	14 e0       	ldi	r17, 0x04	; 4
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b1 e0       	ldi	r27, 0x01	; 1
     f16:	e4 ec       	ldi	r30, 0xC4	; 196
     f18:	f1 e5       	ldi	r31, 0x51	; 81
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <__do_copy_data+0x10>
     f1c:	05 90       	lpm	r0, Z+
     f1e:	0d 92       	st	X+, r0
     f20:	a2 30       	cpi	r26, 0x02	; 2
     f22:	b1 07       	cpc	r27, r17
     f24:	d9 f7       	brne	.-10     	; 0xf1c <__do_copy_data+0xc>

00000f26 <__do_clear_bss>:
     f26:	26 e0       	ldi	r18, 0x06	; 6
     f28:	a2 e0       	ldi	r26, 0x02	; 2
     f2a:	b4 e0       	ldi	r27, 0x04	; 4
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <.do_clear_bss_start>

00000f2e <.do_clear_bss_loop>:
     f2e:	1d 92       	st	X+, r1

00000f30 <.do_clear_bss_start>:
     f30:	a0 31       	cpi	r26, 0x10	; 16
     f32:	b2 07       	cpc	r27, r18
     f34:	e1 f7       	brne	.-8      	; 0xf2e <.do_clear_bss_loop>
     f36:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <main>
     f3a:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <_exit>

00000f3e <__bad_interrupt>:
     f3e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f42 <initDistanceSensor>:
int *pDistance;
int *pAngle_tmp;

void initDistanceSensor(int *pDist, int *pAngle){
	//initialize ultrasonic sensor
	pDistance = pDist;
     f42:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <pDistance+0x1>
     f46:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <pDistance>
	pAngle_tmp = pAngle;
     f4a:	70 93 45 05 	sts	0x0545, r23	; 0x800545 <pAngle_tmp+0x1>
     f4e:	60 93 44 05 	sts	0x0544, r22	; 0x800544 <pAngle_tmp>
	//setup the DDR register and the pin change mask
	
	DDRB |= (1<<TRIGG0);
     f52:	21 9a       	sbi	0x04, 1	; 4
	DDRB &= ~(1<<ECHO0);
     f54:	22 98       	cbi	0x04, 2	; 4
	DDRB |= (1<<TRIGG1);
     f56:	24 9a       	sbi	0x04, 4	; 4
	DDRB &= ~(1<<ECHO1);
     f58:	25 98       	cbi	0x04, 5	; 4

	PCMSK0 |= (1<<ECHO0) | (1<<ECHO1);;
     f5a:	eb e6       	ldi	r30, 0x6B	; 107
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	84 62       	ori	r24, 0x24	; 36
     f62:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE0);
     f64:	e8 e6       	ldi	r30, 0x68	; 104
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24

	//Timer
	TCCR1B |= (1<<CS11)|(1<<CS10);//counter 1 in register TCNT1  - 4 uS/c clk/64 prescaler
     f6e:	e1 e8       	ldi	r30, 0x81	; 129
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	83 60       	ori	r24, 0x03	; 3
     f76:	80 83       	st	Z, r24
     f78:	08 95       	ret

00000f7a <sendTriggPulse>:
}

void sendTriggPulse(int device){
	TCNT1 = 0;
     f7a:	e4 e8       	ldi	r30, 0x84	; 132
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	11 82       	std	Z+1, r1	; 0x01
     f80:	10 82       	st	Z, r1
	int pulseStartTimeC = TCNT1;
     f82:	20 81       	ld	r18, Z
     f84:	31 81       	ldd	r19, Z+1	; 0x01
	PORTB |= (1<<device);
     f86:	95 b1       	in	r25, 0x05	; 5
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <sendTriggPulse+0x18>
     f8e:	44 0f       	add	r20, r20
     f90:	55 1f       	adc	r21, r21
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <sendTriggPulse+0x14>
     f96:	94 2b       	or	r25, r20
     f98:	95 b9       	out	0x05, r25	; 5
	
	while (TCNT1 < pulseStartTimeC + triggPulsLengthC);//wait the right amount of time min 10 uS
     f9a:	2e 5f       	subi	r18, 0xFE	; 254
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	82 17       	cp	r24, r18
     fa4:	93 07       	cpc	r25, r19
     fa6:	d8 f3       	brcs	.-10     	; 0xf9e <sendTriggPulse+0x24>
	
	PORTB &= ~(1<<device);
     fa8:	85 b1       	in	r24, 0x05	; 5
     faa:	40 95       	com	r20
     fac:	48 23       	and	r20, r24
     fae:	45 b9       	out	0x05, r20	; 5
     fb0:	08 95       	ret

00000fb2 <angleCalculator>:
}

void angleCalculator(void){
     fb2:	8f 92       	push	r8
     fb4:	9f 92       	push	r9
     fb6:	af 92       	push	r10
     fb8:	bf 92       	push	r11
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
	if (echoDistance[0] <= 20 && echoDistance[1] >= echoDistance[0])
     fc6:	c0 90 52 05 	lds	r12, 0x0552	; 0x800552 <echoDistance>
     fca:	d0 90 53 05 	lds	r13, 0x0553	; 0x800553 <echoDistance+0x1>
     fce:	e0 90 54 05 	lds	r14, 0x0554	; 0x800554 <echoDistance+0x2>
     fd2:	f0 90 55 05 	lds	r15, 0x0555	; 0x800555 <echoDistance+0x3>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 ea       	ldi	r20, 0xA0	; 160
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__cmpsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	0c f4       	brge	.+2      	; 0xfec <angleCalculator+0x3a>
     fea:	4b c0       	rjmp	.+150    	; 0x1082 <angleCalculator+0xd0>
     fec:	80 90 56 05 	lds	r8, 0x0556	; 0x800556 <echoDistance+0x4>
     ff0:	90 90 57 05 	lds	r9, 0x0557	; 0x800557 <echoDistance+0x5>
     ff4:	a0 90 58 05 	lds	r10, 0x0558	; 0x800558 <echoDistance+0x6>
     ff8:	b0 90 59 05 	lds	r11, 0x0559	; 0x800559 <echoDistance+0x7>
     ffc:	a5 01       	movw	r20, r10
     ffe:	94 01       	movw	r18, r8
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__cmpsf2>
    1008:	18 16       	cp	r1, r24
    100a:	dc f1       	brlt	.+118    	; 0x1082 <angleCalculator+0xd0>
	{

		length = (echoDistance[1] - echoDistance[0]);
    100c:	a7 01       	movw	r20, r14
    100e:	96 01       	movw	r18, r12
    1010:	c5 01       	movw	r24, r10
    1012:	b4 01       	movw	r22, r8
    1014:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__subsf3>
    1018:	60 93 46 05 	sts	0x0546, r22	; 0x800546 <length>
    101c:	70 93 47 05 	sts	0x0547, r23	; 0x800547 <length+0x1>
    1020:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <length+0x2>
    1024:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <length+0x3>
		differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
    1028:	23 e3       	ldi	r18, 0x33	; 51
    102a:	33 e3       	ldi	r19, 0x33	; 51
    102c:	43 ed       	ldi	r20, 0xD3	; 211
    102e:	50 e4       	ldi	r21, 0x40	; 64
    1030:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divsf3>
    1034:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <differenceLength>
    1038:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <differenceLength+0x1>
    103c:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <differenceLength+0x2>
    1040:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <differenceLength+0x3>
		angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
    1044:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <atan>
    1048:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <angleradian>
    104c:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <angleradian+0x1>
    1050:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <angleradian+0x2>
    1054:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <angleradian+0x3>
		angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	44 e3       	ldi	r20, 0x34	; 52
    105e:	53 e4       	ldi	r21, 0x43	; 67
    1060:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    1064:	23 ec       	ldi	r18, 0xC3	; 195
    1066:	35 ef       	ldi	r19, 0xF5	; 245
    1068:	48 e4       	ldi	r20, 0x48	; 72
    106a:	50 e4       	ldi	r21, 0x40	; 64
    106c:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divsf3>
    1070:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <angledegree>
    1074:	70 93 41 05 	sts	0x0541, r23	; 0x800541 <angledegree+0x1>
    1078:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <angledegree+0x2>
    107c:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <angledegree+0x3>
    1080:	55 c0       	rjmp	.+170    	; 0x112c <angleCalculator+0x17a>
	}
	else if (echoDistance[1] <= 20 && echoDistance[0] >= echoDistance[1])
    1082:	80 90 56 05 	lds	r8, 0x0556	; 0x800556 <echoDistance+0x4>
    1086:	90 90 57 05 	lds	r9, 0x0557	; 0x800557 <echoDistance+0x5>
    108a:	a0 90 58 05 	lds	r10, 0x0558	; 0x800558 <echoDistance+0x6>
    108e:	b0 90 59 05 	lds	r11, 0x0559	; 0x800559 <echoDistance+0x7>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 ea       	ldi	r20, 0xA0	; 160
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	c5 01       	movw	r24, r10
    109c:	b4 01       	movw	r22, r8
    109e:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__cmpsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	0c f4       	brge	.+2      	; 0x10a8 <angleCalculator+0xf6>
    10a6:	42 c0       	rjmp	.+132    	; 0x112c <angleCalculator+0x17a>
    10a8:	a5 01       	movw	r20, r10
    10aa:	94 01       	movw	r18, r8
    10ac:	c7 01       	movw	r24, r14
    10ae:	b6 01       	movw	r22, r12
    10b0:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__gesf2>
    10b4:	88 23       	and	r24, r24
    10b6:	d4 f1       	brlt	.+116    	; 0x112c <angleCalculator+0x17a>
	{

		length = (echoDistance[0] - echoDistance[1]);
    10b8:	a5 01       	movw	r20, r10
    10ba:	94 01       	movw	r18, r8
    10bc:	c7 01       	movw	r24, r14
    10be:	b6 01       	movw	r22, r12
    10c0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__subsf3>
    10c4:	60 93 46 05 	sts	0x0546, r22	; 0x800546 <length>
    10c8:	70 93 47 05 	sts	0x0547, r23	; 0x800547 <length+0x1>
    10cc:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <length+0x2>
    10d0:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <length+0x3>
		differenceLength = length / sensorseperate; //calculate the number that needs to be put in the arctan.
    10d4:	23 e3       	ldi	r18, 0x33	; 51
    10d6:	33 e3       	ldi	r19, 0x33	; 51
    10d8:	43 ed       	ldi	r20, 0xD3	; 211
    10da:	50 e4       	ldi	r21, 0x40	; 64
    10dc:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divsf3>
    10e0:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <differenceLength>
    10e4:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <differenceLength+0x1>
    10e8:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <differenceLength+0x2>
    10ec:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <differenceLength+0x3>
		angleradian = atan(differenceLength); //calculate the angle from the wall in radian.
    10f0:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <atan>
    10f4:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <angleradian>
    10f8:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <angleradian+0x1>
    10fc:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <angleradian+0x2>
    1100:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <angleradian+0x3>
		angledegree = angleradian * 180 / 3.14; //calculate the angle from the wall in degrees.
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	44 e3       	ldi	r20, 0x34	; 52
    110a:	53 e4       	ldi	r21, 0x43	; 67
    110c:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    1110:	23 ec       	ldi	r18, 0xC3	; 195
    1112:	35 ef       	ldi	r19, 0xF5	; 245
    1114:	48 e4       	ldi	r20, 0x48	; 72
    1116:	50 e4       	ldi	r21, 0x40	; 64
    1118:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divsf3>
    111c:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <angledegree>
    1120:	70 93 41 05 	sts	0x0541, r23	; 0x800541 <angledegree+0x1>
    1124:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <angledegree+0x2>
    1128:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <angledegree+0x3>
	}
	else{

	}
	*pAngle_tmp = (int) angledegree;
    112c:	c0 91 44 05 	lds	r28, 0x0544	; 0x800544 <pAngle_tmp>
    1130:	d0 91 45 05 	lds	r29, 0x0545	; 0x800545 <pAngle_tmp+0x1>
    1134:	60 91 40 05 	lds	r22, 0x0540	; 0x800540 <angledegree>
    1138:	70 91 41 05 	lds	r23, 0x0541	; 0x800541 <angledegree+0x1>
    113c:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <angledegree+0x2>
    1140:	90 91 43 05 	lds	r25, 0x0543	; 0x800543 <angledegree+0x3>
    1144:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    1148:	79 83       	std	Y+1, r23	; 0x01
    114a:	68 83       	st	Y, r22
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	08 95       	ret

00001162 <__vector_3>:


ISR(PCINT0_vect){//PD
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
	static int runcount2 = 0;
	static int runcount1 = 0;
	//check which device it is and keep that device for the falling edge
	static int prevDevice;
	static int device;
	device = PINB;
    118c:	83 b1       	in	r24, 0x03	; 3
	device &= ~(1<<PORTB7);
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <device.1739+0x1>
    1196:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <device.1739>
	
	if (device == 0)
    119a:	89 2b       	or	r24, r25
    119c:	41 f4       	brne	.+16     	; 0x11ae <__vector_3+0x4c>
	{
		device = prevDevice;//save the current device
    119e:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <prevDevice.1738>
    11a2:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <prevDevice.1738+0x1>
    11a6:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <device.1739+0x1>
    11aa:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <device.1739>
	}
	
	switch(device){
    11ae:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <device.1739>
    11b2:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <device.1739+0x1>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <__vector_3+0x5c>
    11bc:	73 c0       	rjmp	.+230    	; 0x12a4 <__vector_3+0x142>
    11be:	1c f4       	brge	.+6      	; 0x11c6 <__vector_3+0x64>
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	49 f0       	breq	.+18     	; 0x11d6 <__vector_3+0x74>
    11c4:	d7 c0       	rjmp	.+430    	; 0x1374 <__vector_3+0x212>
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	91 05       	cpc	r25, r1
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <__vector_3+0x74>
    11cc:	80 32       	cpi	r24, 0x20	; 32
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__vector_3+0x72>
    11d2:	68 c0       	rjmp	.+208    	; 0x12a4 <__vector_3+0x142>
    11d4:	cf c0       	rjmp	.+414    	; 0x1374 <__vector_3+0x212>
		case (1<<ECHO0):
		case 0:
		//if device is device 0 or if the pin ECHO0 gave a high
		if (runcount2 == 0)
    11d6:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <runcount2.1736>
    11da:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <runcount2.1736+0x1>
    11de:	23 2b       	or	r18, r19
    11e0:	c1 f4       	brne	.+48     	; 0x1212 <__vector_3+0xb0>
		{
			prevDevice = 0;
    11e2:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <prevDevice.1738+0x1>
    11e6:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <prevDevice.1738>
			TCNT1 = 0;
    11ea:	e4 e8       	ldi	r30, 0x84	; 132
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	11 82       	std	Z+1, r1	; 0x01
    11f0:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <risingEdgeTimeC+0x1>
    11fa:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <risingEdgeTimeC>
			
			runcount2++;
    11fe:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <runcount2.1736>
    1202:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <runcount2.1736+0x1>
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <runcount2.1736+0x1>
    120c:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <runcount2.1736>
    1210:	b1 c0       	rjmp	.+354    	; 0x1374 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -1;
    1212:	2f ef       	ldi	r18, 0xFF	; 255
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	30 93 07 04 	sts	0x0407, r19	; 0x800407 <prevDevice.1738+0x1>
    121a:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    121e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1222:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1226:	70 93 11 04 	sts	0x0411, r23	; 0x800411 <fallingEdgeTimeC+0x1>
    122a:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <fallingEdgeTimeC>
			
			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    122e:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <risingEdgeTimeC>
    1232:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <risingEdgeTimeC+0x1>
    1236:	62 1b       	sub	r22, r18
    1238:	73 0b       	sbc	r23, r19
    123a:	8b 01       	movw	r16, r22
    123c:	07 2e       	mov	r0, r23
    123e:	00 0c       	add	r0, r0
    1240:	22 0b       	sbc	r18, r18
    1242:	33 0b       	sbc	r19, r19
    1244:	00 93 0c 04 	sts	0x040C, r16	; 0x80040c <echoHighLevelTimeC>
    1248:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <echoHighLevelTimeC+0x1>
    124c:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <echoHighLevelTimeC+0x2>
    1250:	30 93 0f 04 	sts	0x040F, r19	; 0x80040f <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	70 93 0b 04 	sts	0x040B, r23	; 0x80040b <echoHighLevelTimeuS+0x1>
    1260:	60 93 0a 04 	sts	0x040A, r22	; 0x80040a <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal0;// in cm
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	ec 01       	movw	r28, r24
    126e:	ce 5a       	subi	r28, 0xAE	; 174
    1270:	da 4f       	sbci	r29, 0xFA	; 250
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 08 27 	call	0x4e10	; 0x4e10 <__floatunsisf>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	48 e6       	ldi	r20, 0x68	; 104
    1280:	52 e4       	ldi	r21, 0x42	; 66
    1282:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divsf3>
    1286:	26 e6       	ldi	r18, 0x66	; 102
    1288:	36 e6       	ldi	r19, 0x66	; 102
    128a:	46 ee       	ldi	r20, 0xE6	; 230
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    1292:	68 83       	st	Y, r22
    1294:	79 83       	std	Y+1, r23	; 0x01
    1296:	8a 83       	std	Y+2, r24	; 0x02
    1298:	9b 83       	std	Y+3, r25	; 0x03
			
			runcount2 = 0;
    129a:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <runcount2.1736+0x1>
    129e:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <runcount2.1736>
    12a2:	68 c0       	rjmp	.+208    	; 0x1374 <__vector_3+0x212>
		break;
		
		//use for multiple sound sensors
		case (1 << ECHO1):
		case 1:
		if (runcount1 == 0)
    12a4:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <__data_end>
    12a8:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <__data_end+0x1>
    12ac:	23 2b       	or	r18, r19
    12ae:	d1 f4       	brne	.+52     	; 0x12e4 <__vector_3+0x182>
		{
			prevDevice = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <prevDevice.1738+0x1>
    12b8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <prevDevice.1738>
			TCNT1 = 0;
    12bc:	e4 e8       	ldi	r30, 0x84	; 132
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	11 82       	std	Z+1, r1	; 0x01
    12c2:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <risingEdgeTimeC+0x1>
    12cc:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <risingEdgeTimeC>

			runcount1++;
    12d0:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__data_end>
    12d4:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <__data_end+0x1>
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
    12de:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
    12e2:	48 c0       	rjmp	.+144    	; 0x1374 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -2;
    12e4:	2e ef       	ldi	r18, 0xFE	; 254
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	30 93 07 04 	sts	0x0407, r19	; 0x800407 <prevDevice.1738+0x1>
    12ec:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    12f0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12f4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12f8:	70 93 11 04 	sts	0x0411, r23	; 0x800411 <fallingEdgeTimeC+0x1>
    12fc:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <fallingEdgeTimeC>

			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    1300:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <risingEdgeTimeC>
    1304:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <risingEdgeTimeC+0x1>
    1308:	62 1b       	sub	r22, r18
    130a:	73 0b       	sbc	r23, r19
    130c:	8b 01       	movw	r16, r22
    130e:	07 2e       	mov	r0, r23
    1310:	00 0c       	add	r0, r0
    1312:	22 0b       	sbc	r18, r18
    1314:	33 0b       	sbc	r19, r19
    1316:	00 93 0c 04 	sts	0x040C, r16	; 0x80040c <echoHighLevelTimeC>
    131a:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <echoHighLevelTimeC+0x1>
    131e:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <echoHighLevelTimeC+0x2>
    1322:	30 93 0f 04 	sts	0x040F, r19	; 0x80040f <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	70 93 0b 04 	sts	0x040B, r23	; 0x80040b <echoHighLevelTimeuS+0x1>
    1332:	60 93 0a 04 	sts	0x040A, r22	; 0x80040a <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal1;// in cm
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	ec 01       	movw	r28, r24
    1340:	ce 5a       	subi	r28, 0xAE	; 174
    1342:	da 4f       	sbci	r29, 0xFA	; 250
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 08 27 	call	0x4e10	; 0x4e10 <__floatunsisf>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	48 e6       	ldi	r20, 0x68	; 104
    1352:	52 e4       	ldi	r21, 0x42	; 66
    1354:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divsf3>
    1358:	26 e6       	ldi	r18, 0x66	; 102
    135a:	36 e6       	ldi	r19, 0x66	; 102
    135c:	46 ee       	ldi	r20, 0xE6	; 230
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    1364:	68 83       	st	Y, r22
    1366:	79 83       	std	Y+1, r23	; 0x01
    1368:	8a 83       	std	Y+2, r24	; 0x02
    136a:	9b 83       	std	Y+3, r25	; 0x03

			runcount1 = 0;
    136c:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <__data_end+0x1>
    1370:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <__data_end>
		}
		break;
	}
	*pDistance = (int) echoDistance[0];
    1374:	c0 91 3e 05 	lds	r28, 0x053E	; 0x80053e <pDistance>
    1378:	d0 91 3f 05 	lds	r29, 0x053F	; 0x80053f <pDistance+0x1>
    137c:	02 e5       	ldi	r16, 0x52	; 82
    137e:	15 e0       	ldi	r17, 0x05	; 5
    1380:	f8 01       	movw	r30, r16
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    138e:	79 83       	std	Y+1, r23	; 0x01
    1390:	68 83       	st	Y, r22
	*pDistance += (int) echoDistance[1];
    1392:	c0 91 3e 05 	lds	r28, 0x053E	; 0x80053e <pDistance>
    1396:	d0 91 3f 05 	lds	r29, 0x053F	; 0x80053f <pDistance+0x1>
    139a:	f8 01       	movw	r30, r16
    139c:	64 81       	ldd	r22, Z+4	; 0x04
    139e:	75 81       	ldd	r23, Z+5	; 0x05
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	97 81       	ldd	r25, Z+7	; 0x07
    13a4:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    13a8:	28 81       	ld	r18, Y
    13aa:	39 81       	ldd	r19, Y+1	; 0x01
    13ac:	62 0f       	add	r22, r18
    13ae:	73 1f       	adc	r23, r19
    13b0:	79 83       	std	Y+1, r23	; 0x01
    13b2:	68 83       	st	Y, r22
	*pDistance /= 2;
    13b4:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <pDistance>
    13b8:	f0 91 3f 05 	lds	r31, 0x053F	; 0x80053f <pDistance+0x1>
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	99 23       	and	r25, r25
    13c2:	0c f4       	brge	.+2      	; 0x13c6 <__vector_3+0x264>
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	95 95       	asr	r25
    13c8:	87 95       	ror	r24
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
}
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_5>:
#include "avr/io.h"
#include "screencontroller.h"
#include "USART_RS232_H_file.h"

ISR(PCINT2_vect)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	2a 97       	sbiw	r28, 0x0a	; 10
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	cd bf       	out	0x3d, r28	; 61
	if( !(PIND & (1<<PCINT16) )){
    1428:	48 99       	sbic	0x09, 0	; 9
    142a:	09 c0       	rjmp	.+18     	; 0x143e <__vector_5+0x46>
	char receivedStr[BL_BUFFERSIZE];
	USART_ReceiveString(receivedStr);
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	0e 94 a9 23 	call	0x4752	; 0x4752 <USART_ReceiveString>
	USART_BluetoothChanger(receivedStr);
    1434:	ce 01       	movw	r24, r28
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <USART_BluetoothChanger>
    143c:	23 c0       	rjmp	.+70     	; 0x1484 <__vector_5+0x8c>
	}else{
		if ( (BUTTON_PIN & (1<<DOWN)) == 0 )
    143e:	4c 99       	sbic	0x09, 4	; 9
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <__vector_5+0x58>
		keyPressed = DOWN;
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <keyPressed+0x1>
    144a:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <keyPressed>
    144e:	1a c0       	rjmp	.+52     	; 0x1484 <__vector_5+0x8c>
		else
		if ( (BUTTON_PIN & (1<<UP)) == 0 )
    1450:	4d 99       	sbic	0x09, 5	; 9
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <__vector_5+0x6a>
		keyPressed = UP;
    1454:	85 e0       	ldi	r24, 0x05	; 5
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <keyPressed+0x1>
    145c:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <keyPressed>
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <__vector_5+0x8c>
		else
		if ( (BUTTON_PIN & (1<<BACK)) == 0 )
    1462:	4e 99       	sbic	0x09, 6	; 9
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <__vector_5+0x7c>
		keyPressed = BACK;
    1466:	86 e0       	ldi	r24, 0x06	; 6
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <keyPressed+0x1>
    146e:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <keyPressed>
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <__vector_5+0x8c>
		else
		if ( (BUTTON_PIN & (1<<SELECT)) == 0 )
    1474:	4f 99       	sbic	0x09, 7	; 9
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <__vector_5+0x8c>
		keyPressed = SELECT;
    1478:	87 e0       	ldi	r24, 0x07	; 7
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <keyPressed+0x1>
    1480:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <keyPressed>
	}
    1484:	2a 96       	adiw	r28, 0x0a	; 10
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <setup_display>:
int8_t *main_currentPage = 0;

unsigned int Time_ms = 0;//accuracy is fluctuating
unsigned int Time_min = 0;//accurate

void setup_display(void){
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
	//screen initialization
	main_currentPage = u8g2_setup(Settings, &Settings[1], &steer, &distance, &angle_deg); //save the address of the currentPage
    14ba:	00 e2       	ldi	r16, 0x20	; 32
    14bc:	14 e0       	ldi	r17, 0x04	; 4
    14be:	2a e0       	ldi	r18, 0x0A	; 10
    14c0:	31 e0       	ldi	r19, 0x01	; 1
    14c2:	42 e2       	ldi	r20, 0x22	; 34
    14c4:	54 e0       	ldi	r21, 0x04	; 4
    14c6:	62 e0       	ldi	r22, 0x02	; 2
    14c8:	71 e0       	ldi	r23, 0x01	; 1
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <u8g2_setup>
    14d2:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <main_currentPage+0x1>
    14d6:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <main_currentPage>
	sys_init();
    14da:	0e 94 c7 0c 	call	0x198e	; 0x198e <sys_init>
	but_init();
    14de:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <but_init>
	timeInit(&Time_min, &Time_ms);
    14e2:	6c e1       	ldi	r22, 0x1C	; 28
    14e4:	74 e0       	ldi	r23, 0x04	; 4
    14e6:	8a e1       	ldi	r24, 0x1A	; 26
    14e8:	94 e0       	ldi	r25, 0x04	; 4
    14ea:	0e 94 cd 0c 	call	0x199a	; 0x199a <timeInit>
	ADCinit();
    14ee:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <ADCinit>
}
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <pwmUpdate>:
	static unsigned short rightwheelSpeed = 0; //0 -255
	static unsigned short leftwheelSpeed = 0; //0-255
	
	//standard mode

	if(speed >= 0){//drive forwards
    14f8:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <speed>
    14fc:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <speed+0x1>
    1500:	99 23       	and	r25, r25
    1502:	0c f4       	brge	.+2      	; 0x1506 <pwmUpdate+0xe>
    1504:	5e c0       	rjmp	.+188    	; 0x15c2 <pwmUpdate+0xca>
		SetDriveForward();
    1506:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <SetDriveForward>
		leftwheelSpeed = speed + steer;
    150a:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <speed>
    150e:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <speed+0x1>
    1512:	40 91 22 04 	lds	r20, 0x0422	; 0x800422 <steer>
    1516:	50 91 23 04 	lds	r21, 0x0423	; 0x800423 <steer+0x1>
    151a:	9c 01       	movw	r18, r24
    151c:	24 0f       	add	r18, r20
    151e:	35 1f       	adc	r19, r21
    1520:	b9 01       	movw	r22, r18
    1522:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <leftwheelSpeed.8960+0x1>
    1526:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <leftwheelSpeed.8960>
		rightwheelSpeed = speed - steer;
    152a:	84 1b       	sub	r24, r20
    152c:	95 0b       	sbc	r25, r21
		
		if (speed - steer < 0){
    152e:	2a f4       	brpl	.+10     	; 0x153a <pwmUpdate+0x42>
			rightwheelSpeed = 0;
    1530:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <rightwheelSpeed.8959+0x1>
    1534:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <rightwheelSpeed.8959>
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <pwmUpdate+0x5e>
			}else if(speed - steer >= 255){
    153a:	8f 3f       	cpi	r24, 0xFF	; 255
    153c:	91 05       	cpc	r25, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <pwmUpdate+0x52>
	//standard mode

	if(speed >= 0){//drive forwards
		SetDriveForward();
		leftwheelSpeed = speed + steer;
		rightwheelSpeed = speed - steer;
    1540:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <rightwheelSpeed.8959+0x1>
    1544:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <rightwheelSpeed.8959>
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <pwmUpdate+0x5e>
		
		if (speed - steer < 0){
			rightwheelSpeed = 0;
			}else if(speed - steer >= 255){
			rightwheelSpeed = 255;
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <rightwheelSpeed.8959+0x1>
    1552:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <rightwheelSpeed.8959>
		}
		if (speed + steer < 0){
    1556:	33 23       	and	r19, r19
    1558:	2c f4       	brge	.+10     	; 0x1564 <pwmUpdate+0x6c>
			leftwheelSpeed = 0;
    155a:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <leftwheelSpeed.8960+0x1>
    155e:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <leftwheelSpeed.8960>
    1562:	1a c0       	rjmp	.+52     	; 0x1598 <pwmUpdate+0xa0>
			}else if(speed + steer >= 255){
    1564:	2f 3f       	cpi	r18, 0xFF	; 255
    1566:	31 05       	cpc	r19, r1
    1568:	4c f0       	brlt	.+18     	; 0x157c <pwmUpdate+0x84>
			leftwheelSpeed = 255;
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <leftwheelSpeed.8960+0x1>
    1572:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <leftwheelSpeed.8960>
		}
		
		if (leftwheelSpeed > 10 && leftwheelSpeed < Settings[3]){
    1576:	6f ef       	ldi	r22, 0xFF	; 255
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <pwmUpdate+0x8a>
    157c:	6b 30       	cpi	r22, 0x0B	; 11
    157e:	71 05       	cpc	r23, r1
    1580:	58 f0       	brcs	.+22     	; 0x1598 <pwmUpdate+0xa0>
    1582:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Settings+0x6>
    1586:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Settings+0x7>
    158a:	68 17       	cp	r22, r24
    158c:	79 07       	cpc	r23, r25
    158e:	20 f4       	brcc	.+8      	; 0x1598 <pwmUpdate+0xa0>
			leftwheelSpeed = Settings[3];
    1590:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <leftwheelSpeed.8960+0x1>
    1594:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <leftwheelSpeed.8960>
		}
		if (rightwheelSpeed > 10 && rightwheelSpeed < Settings[3]){
    1598:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <rightwheelSpeed.8959>
    159c:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <rightwheelSpeed.8959+0x1>
    15a0:	8b 30       	cpi	r24, 0x0B	; 11
    15a2:	91 05       	cpc	r25, r1
    15a4:	08 f4       	brcc	.+2      	; 0x15a8 <pwmUpdate+0xb0>
    15a6:	6b c0       	rjmp	.+214    	; 0x167e <pwmUpdate+0x186>
    15a8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Settings+0x6>
    15ac:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <Settings+0x7>
    15b0:	82 17       	cp	r24, r18
    15b2:	93 07       	cpc	r25, r19
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <pwmUpdate+0xc0>
    15b6:	63 c0       	rjmp	.+198    	; 0x167e <pwmUpdate+0x186>
			rightwheelSpeed = Settings[3];
    15b8:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <rightwheelSpeed.8959+0x1>
    15bc:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <rightwheelSpeed.8959>
    15c0:	5e c0       	rjmp	.+188    	; 0x167e <pwmUpdate+0x186>
		}
		
		}else{//drive backwards
		SetDriveBackward();
    15c2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <SetDriveBackward>
		
		//change speed to a positive variable again.
		//speed *= -1;
		
		leftwheelSpeed = -speed + steer;
    15c6:	40 91 22 04 	lds	r20, 0x0422	; 0x800422 <steer>
    15ca:	50 91 23 04 	lds	r21, 0x0423	; 0x800423 <steer+0x1>
    15ce:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <speed>
    15d2:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <speed+0x1>
    15d6:	9a 01       	movw	r18, r20
    15d8:	28 1b       	sub	r18, r24
    15da:	39 0b       	sbc	r19, r25
    15dc:	b9 01       	movw	r22, r18
    15de:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <leftwheelSpeed.8960+0x1>
    15e2:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <leftwheelSpeed.8960>
		rightwheelSpeed = -speed - steer;
    15e6:	91 95       	neg	r25
    15e8:	81 95       	neg	r24
    15ea:	91 09       	sbc	r25, r1
    15ec:	84 1b       	sub	r24, r20
    15ee:	95 0b       	sbc	r25, r21
		
		if (-speed - steer < 0){
    15f0:	2a f4       	brpl	.+10     	; 0x15fc <pwmUpdate+0x104>
			rightwheelSpeed = 0;
    15f2:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <rightwheelSpeed.8959+0x1>
    15f6:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <rightwheelSpeed.8959>
    15fa:	0e c0       	rjmp	.+28     	; 0x1618 <pwmUpdate+0x120>
			}else if(-speed - steer >= 255){
    15fc:	8f 3f       	cpi	r24, 0xFF	; 255
    15fe:	91 05       	cpc	r25, r1
    1600:	2c f4       	brge	.+10     	; 0x160c <pwmUpdate+0x114>
		
		//change speed to a positive variable again.
		//speed *= -1;
		
		leftwheelSpeed = -speed + steer;
		rightwheelSpeed = -speed - steer;
    1602:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <rightwheelSpeed.8959+0x1>
    1606:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <rightwheelSpeed.8959>
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <pwmUpdate+0x120>
		
		if (-speed - steer < 0){
			rightwheelSpeed = 0;
			}else if(-speed - steer >= 255){
			rightwheelSpeed = 255;
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <rightwheelSpeed.8959+0x1>
    1614:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <rightwheelSpeed.8959>
		}
		if (-speed + steer < 0){
    1618:	33 23       	and	r19, r19
    161a:	2c f4       	brge	.+10     	; 0x1626 <pwmUpdate+0x12e>
			leftwheelSpeed = 0;
    161c:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <leftwheelSpeed.8960+0x1>
    1620:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <leftwheelSpeed.8960>
    1624:	1a c0       	rjmp	.+52     	; 0x165a <pwmUpdate+0x162>
			}else if(-speed + steer >= 255){
    1626:	2f 3f       	cpi	r18, 0xFF	; 255
    1628:	31 05       	cpc	r19, r1
    162a:	4c f0       	brlt	.+18     	; 0x163e <pwmUpdate+0x146>
			leftwheelSpeed = 255;
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <leftwheelSpeed.8960+0x1>
    1634:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <leftwheelSpeed.8960>
		}
		if (leftwheelSpeed > 10 && leftwheelSpeed < Settings[3]){
    1638:	6f ef       	ldi	r22, 0xFF	; 255
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <pwmUpdate+0x14c>
    163e:	6b 30       	cpi	r22, 0x0B	; 11
    1640:	71 05       	cpc	r23, r1
    1642:	58 f0       	brcs	.+22     	; 0x165a <pwmUpdate+0x162>
    1644:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Settings+0x6>
    1648:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Settings+0x7>
    164c:	68 17       	cp	r22, r24
    164e:	79 07       	cpc	r23, r25
    1650:	20 f4       	brcc	.+8      	; 0x165a <pwmUpdate+0x162>
			leftwheelSpeed = Settings[3];
    1652:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <leftwheelSpeed.8960+0x1>
    1656:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <leftwheelSpeed.8960>
		}
		if (rightwheelSpeed > 10 && rightwheelSpeed < Settings[3]){
    165a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <rightwheelSpeed.8959>
    165e:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <rightwheelSpeed.8959+0x1>
    1662:	8b 30       	cpi	r24, 0x0B	; 11
    1664:	91 05       	cpc	r25, r1
    1666:	58 f0       	brcs	.+22     	; 0x167e <pwmUpdate+0x186>
    1668:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Settings+0x6>
    166c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <Settings+0x7>
    1670:	82 17       	cp	r24, r18
    1672:	93 07       	cpc	r25, r19
    1674:	20 f4       	brcc	.+8      	; 0x167e <pwmUpdate+0x186>
			rightwheelSpeed = Settings[3];
    1676:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <rightwheelSpeed.8959+0x1>
    167a:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <rightwheelSpeed.8959>
		}
	}
	//speed *= -1; // revert changes so the value stays the same
	PWM_digPin9_Output(leftwheelSpeed);//left
    167e:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <leftwheelSpeed.8960>
    1682:	0e 94 4a 0c 	call	0x1894	; 0x1894 <PWM_digPin9_Output>
	PWM_digPin10_Output(rightwheelSpeed);//right
    1686:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <rightwheelSpeed.8959>
    168a:	0e 94 4d 0c 	call	0x189a	; 0x189a <PWM_digPin10_Output>
    168e:	08 95       	ret

00001690 <soundEchoCycle>:

void soundEchoCycle(void){
	
	static int count = 0;
	//add here the code for the cycle it needs to perform to trigger all the sound sensors
	if (TCNT1 >= cycleLengthC && count == 0){
    1690:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1694:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1698:	88 39       	cpi	r24, 0x98	; 152
    169a:	9a 43       	sbci	r25, 0x3A	; 58
    169c:	88 f0       	brcs	.+34     	; 0x16c0 <soundEchoCycle+0x30>
    169e:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <count.8964>
    16a2:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <count.8964+0x1>
    16a6:	89 2b       	or	r24, r25
    16a8:	59 f4       	brne	.+22     	; 0x16c0 <soundEchoCycle+0x30>
		sendTriggPulse(TRIGG1);
    16aa:	84 e0       	ldi	r24, 0x04	; 4
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 bd 07 	call	0xf7a	; 0xf7a <sendTriggPulse>
		count = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <count.8964+0x1>
    16ba:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <count.8964>
    16be:	15 c0       	rjmp	.+42     	; 0x16ea <soundEchoCycle+0x5a>
	}
	else if(TCNT1 >= cycleLengthC && count == 1){
    16c0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16c4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16c8:	88 39       	cpi	r24, 0x98	; 152
    16ca:	9a 43       	sbci	r25, 0x3A	; 58
    16cc:	70 f0       	brcs	.+28     	; 0x16ea <soundEchoCycle+0x5a>
    16ce:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <count.8964>
    16d2:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <count.8964+0x1>
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	41 f4       	brne	.+16     	; 0x16ea <soundEchoCycle+0x5a>
		sendTriggPulse(TRIGG0);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 bd 07 	call	0xf7a	; 0xf7a <sendTriggPulse>
		count = 0;
    16e2:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <count.8964+0x1>
    16e6:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <count.8964>
	}
	angleCalculator();
    16ea:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <angleCalculator>
    16ee:	08 95       	ret

000016f0 <main>:

int main()
{
	
	
	initBluetooth(Settings, &speed, &steer);
    16f0:	42 e2       	ldi	r20, 0x22	; 34
    16f2:	54 e0       	ldi	r21, 0x04	; 4
    16f4:	64 e2       	ldi	r22, 0x24	; 36
    16f6:	74 e0       	ldi	r23, 0x04	; 4
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <initBluetooth>
	
	setup_display();
    1700:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <setup_display>
	
	initDistanceSensor(&distance, &angle_deg);//the default pins are setup in soundsensor.h
    1704:	60 e2       	ldi	r22, 0x20	; 32
    1706:	74 e0       	ldi	r23, 0x04	; 4
    1708:	8a e0       	ldi	r24, 0x0A	; 10
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 a1 07 	call	0xf42	; 0xf42 <initDistanceSensor>
	
	initPWM();
    1710:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <initPWM>
	sei();
    1714:	78 94       	sei
		soundEchoCycle();
		//the variable with distance info echoDistance[deviceNum] for example echoDistance[0];


		//run Autonomous Test Mode
		if(Settings[0] == 1){
    1716:	c0 e0       	ldi	r28, 0x00	; 0
    1718:	d1 e0       	ldi	r29, 0x01	; 1
	sei();


	while(1){
		
		screenRoutine();//function for updating the display.
    171a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <screenRoutine>
		
		
		soundEchoCycle();
    171e:	0e 94 48 0b 	call	0x1690	; 0x1690 <soundEchoCycle>
		//the variable with distance info echoDistance[deviceNum] for example echoDistance[0];


		//run Autonomous Test Mode
		if(Settings[0] == 1){
    1722:	88 81       	ld	r24, Y
    1724:	99 81       	ldd	r25, Y+1	; 0x01
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	09 f0       	breq	.+2      	; 0x172e <main+0x3e>
    172c:	6e c0       	rjmp	.+220    	; 0x180a <main+0x11a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	83 e2       	ldi	r24, 0x23	; 35
    1732:	94 ef       	ldi	r25, 0xF4	; 244
    1734:	21 50       	subi	r18, 0x01	; 1
    1736:	80 40       	sbci	r24, 0x00	; 0
    1738:	90 40       	sbci	r25, 0x00	; 0
    173a:	e1 f7       	brne	.-8      	; 0x1734 <main+0x44>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <main+0x4e>
    173e:	00 00       	nop
			_delay_ms(5000);
			
			
			speed = Settings[3];
    1740:	8e 81       	ldd	r24, Y+6	; 0x06
    1742:	9f 81       	ldd	r25, Y+7	; 0x07
    1744:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <speed+0x1>
    1748:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <speed>
			pwmUpdate();
    174c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
    1750:	2f ef       	ldi	r18, 0xFF	; 255
    1752:	8d e3       	ldi	r24, 0x3D	; 61
    1754:	99 e4       	ldi	r25, 0x49	; 73
    1756:	21 50       	subi	r18, 0x01	; 1
    1758:	80 40       	sbci	r24, 0x00	; 0
    175a:	90 40       	sbci	r25, 0x00	; 0
    175c:	e1 f7       	brne	.-8      	; 0x1756 <main+0x66>
    175e:	00 c0       	rjmp	.+0      	; 0x1760 <main+0x70>
    1760:	00 00       	nop
			_delay_ms(1500);
			
			speed = 0;
    1762:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <speed+0x1>
    1766:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <speed>
			steer = Settings[3]+40;
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	88 96       	adiw	r24, 0x28	; 40
    1770:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <steer+0x1>
    1774:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <steer>
			pwmUpdate();
    1778:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
    177c:	2f ef       	ldi	r18, 0xFF	; 255
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	93 e5       	ldi	r25, 0x53	; 83
    1782:	21 50       	subi	r18, 0x01	; 1
    1784:	80 40       	sbci	r24, 0x00	; 0
    1786:	90 40       	sbci	r25, 0x00	; 0
    1788:	e1 f7       	brne	.-8      	; 0x1782 <main+0x92>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <main+0x9c>
    178c:	00 00       	nop
			_delay_ms(1700);
			
			speed = -Settings[3];
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	9f 81       	ldd	r25, Y+7	; 0x07
    1792:	91 95       	neg	r25
    1794:	81 95       	neg	r24
    1796:	91 09       	sbc	r25, r1
    1798:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <speed+0x1>
    179c:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <speed>
			pwmUpdate();
    17a0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
    17a4:	2f ef       	ldi	r18, 0xFF	; 255
    17a6:	83 ed       	ldi	r24, 0xD3	; 211
    17a8:	90 e3       	ldi	r25, 0x30	; 48
    17aa:	21 50       	subi	r18, 0x01	; 1
    17ac:	80 40       	sbci	r24, 0x00	; 0
    17ae:	90 40       	sbci	r25, 0x00	; 0
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <main+0xba>
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <main+0xc4>
    17b4:	00 00       	nop
			_delay_ms(1000);
			
			speed  = 0;
    17b6:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <speed+0x1>
    17ba:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <speed>
			steer = Settings[3]+40;
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	9f 81       	ldd	r25, Y+7	; 0x07
    17c2:	88 96       	adiw	r24, 0x28	; 40
    17c4:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <steer+0x1>
    17c8:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <steer>
			pwmUpdate();
    17cc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
    17d0:	2f ef       	ldi	r18, 0xFF	; 255
    17d2:	83 ed       	ldi	r24, 0xD3	; 211
    17d4:	90 e3       	ldi	r25, 0x30	; 48
    17d6:	21 50       	subi	r18, 0x01	; 1
    17d8:	80 40       	sbci	r24, 0x00	; 0
    17da:	90 40       	sbci	r25, 0x00	; 0
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <main+0xe6>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <main+0xf0>
    17e0:	00 00       	nop
			_delay_ms(1000);

			speed = Settings[3];
    17e2:	8e 81       	ldd	r24, Y+6	; 0x06
    17e4:	9f 81       	ldd	r25, Y+7	; 0x07
    17e6:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <speed+0x1>
    17ea:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <speed>
			pwmUpdate();
    17ee:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
    17f2:	2f ef       	ldi	r18, 0xFF	; 255
    17f4:	8d e3       	ldi	r24, 0x3D	; 61
    17f6:	99 e4       	ldi	r25, 0x49	; 73
    17f8:	21 50       	subi	r18, 0x01	; 1
    17fa:	80 40       	sbci	r24, 0x00	; 0
    17fc:	90 40       	sbci	r25, 0x00	; 0
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <main+0x108>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <main+0x112>
    1802:	00 00       	nop
			_delay_ms(1500);
			
			Settings[0] = 0;
    1804:	19 82       	std	Y+1, r1	; 0x01
    1806:	18 82       	st	Y, r1
    1808:	88 cf       	rjmp	.-240    	; 0x171a <main+0x2a>
			
			}else if(Settings[0] == 2){
    180a:	02 97       	sbiw	r24, 0x02	; 2
    180c:	41 f5       	brne	.+80     	; 0x185e <main+0x16e>
			
			speed = Settings[3];
    180e:	8e 81       	ldd	r24, Y+6	; 0x06
    1810:	9f 81       	ldd	r25, Y+7	; 0x07
    1812:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <speed+0x1>
    1816:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <speed>
			pwmUpdate();
    181a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
    181e:	2f ef       	ldi	r18, 0xFF	; 255
    1820:	87 ea       	ldi	r24, 0xA7	; 167
    1822:	91 e6       	ldi	r25, 0x61	; 97
    1824:	21 50       	subi	r18, 0x01	; 1
    1826:	80 40       	sbci	r24, 0x00	; 0
    1828:	90 40       	sbci	r25, 0x00	; 0
    182a:	e1 f7       	brne	.-8      	; 0x1824 <main+0x134>
    182c:	00 c0       	rjmp	.+0      	; 0x182e <main+0x13e>
    182e:	00 00       	nop
			_delay_ms(2000);
			
			speed = -Settings[3];
    1830:	8e 81       	ldd	r24, Y+6	; 0x06
    1832:	9f 81       	ldd	r25, Y+7	; 0x07
    1834:	91 95       	neg	r25
    1836:	81 95       	neg	r24
    1838:	91 09       	sbc	r25, r1
    183a:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <speed+0x1>
    183e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <speed>
			pwmUpdate();
    1842:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
			
			Settings[0] = 0;
    1846:	19 82       	std	Y+1, r1	; 0x01
    1848:	18 82       	st	Y, r1
    184a:	2f ef       	ldi	r18, 0xFF	; 255
    184c:	87 ea       	ldi	r24, 0xA7	; 167
    184e:	91 e6       	ldi	r25, 0x61	; 97
    1850:	21 50       	subi	r18, 0x01	; 1
    1852:	80 40       	sbci	r24, 0x00	; 0
    1854:	90 40       	sbci	r25, 0x00	; 0
    1856:	e1 f7       	brne	.-8      	; 0x1850 <main+0x160>
    1858:	00 c0       	rjmp	.+0      	; 0x185a <main+0x16a>
    185a:	00 00       	nop
    185c:	5e cf       	rjmp	.-324    	; 0x171a <main+0x2a>
			_delay_ms(2000);
			}else{
			pwmUpdate();//change the speed of the motors.
    185e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <pwmUpdate>
    1862:	5b cf       	rjmp	.-330    	; 0x171a <main+0x2a>

00001864 <PWM_digPin9_init>:
}

// - - - DIGITAL PIN 9 PWM (PB1-OC1A) - - - //
void PWM_digPin9_init(bool invert_pwm9)
{
	if (invert_pwm9 == 1)
    1864:	88 23       	and	r24, r24
    1866:	31 f0       	breq	.+12     	; 0x1874 <PWM_digPin9_init+0x10>
	{
		TCCR2A |= (1 << WGM20) | (1 << WGM21) | (1 << COM2A1) | (1 << COM2A0)| (1 << COM2B1) | (1 << COM2B0);
    1868:	e0 eb       	ldi	r30, 0xB0	; 176
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	83 6f       	ori	r24, 0xF3	; 243
    1870:	80 83       	st	Z, r24
    1872:	05 c0       	rjmp	.+10     	; 0x187e <PWM_digPin9_init+0x1a>
	}

	else {
		TCCR2A |= (1 << WGM20) | (1 << WGM21) | (1 << COM2A1) | (1 << COM1B1);
    1874:	e0 eb       	ldi	r30, 0xB0	; 176
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	83 6a       	ori	r24, 0xA3	; 163
    187c:	80 83       	st	Z, r24
	}

	TCCR2B |= (1 << CS22);
    187e:	e1 eb       	ldi	r30, 0xB1	; 177
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	84 60       	ori	r24, 0x04	; 4
    1886:	80 83       	st	Z, r24
	DDRB |= (1 << PINB3);//PB3
    1888:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= (1 << PIND3);//PD3
    188a:	53 9a       	sbi	0x0a, 3	; 10
	DDRC |= (1 << PINC0) | (1 << PINC1);
    188c:	87 b1       	in	r24, 0x07	; 7
    188e:	83 60       	ori	r24, 0x03	; 3
    1890:	87 b9       	out	0x07, r24	; 7
    1892:	08 95       	ret

00001894 <PWM_digPin9_Output>:
}

void PWM_digPin9_Output(uint8_t duty)
{
	//0-255
	OCR2A = duty;
    1894:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    1898:	08 95       	ret

0000189a <PWM_digPin10_Output>:
}
// - - - DIGITAL PIN 10 PWM (PB2-OC1B) - - - //
void PWM_digPin10_Output(uint8_t duty)
{
	//0-255
	OCR2B = duty;
    189a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    189e:	08 95       	ret

000018a0 <SetDriveForward>:
}


void SetDriveForward(){
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
    18a0:	88 b1       	in	r24, 0x08	; 8
    18a2:	83 60       	ori	r24, 0x03	; 3
    18a4:	88 b9       	out	0x08, r24	; 8
    18a6:	08 95       	ret

000018a8 <initPWM>:

#define true 1
#define false 0

void initPWM(){
	PWM_digPin9_init(0);
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	0e 94 32 0c 	call	0x1864	; 0x1864 <PWM_digPin9_init>
	SetDriveForward();
    18ae:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <SetDriveForward>
    18b2:	08 95       	ret

000018b4 <SetDriveBackward>:
void SetDriveForward(){
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
}

void SetDriveBackward(){
	PORTC &= ~((1 << PORTC0) | (1 << PORTC1));
    18b4:	88 b1       	in	r24, 0x08	; 8
    18b6:	8c 7f       	andi	r24, 0xFC	; 252
    18b8:	88 b9       	out	0x08, r24	; 8
    18ba:	08 95       	ret

000018bc <u8g2_setup>:
unsigned int *pTime_min;

#define Time_cal 305 //ms calibration

int8_t * u8g2_setup(int pSettings[settings], int *pSpeed, int *pDirection, int *pDistance, int *pangdeg)
{
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
	settingVal = &pSettings[0];
    18c0:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <settingVal+0x1>
    18c4:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <settingVal>
	angleHold = pangdeg;
    18c8:	10 93 06 06 	sts	0x0606, r17	; 0x800606 <angleHold+0x1>
    18cc:	00 93 05 06 	sts	0x0605, r16	; 0x800605 <angleHold>
	speedHold = pSpeed;
    18d0:	70 93 6f 05 	sts	0x056F, r23	; 0x80056f <speedHold+0x1>
    18d4:	60 93 6e 05 	sts	0x056E, r22	; 0x80056e <speedHold>
	directionHold = pDirection;
    18d8:	50 93 f3 05 	sts	0x05F3, r21	; 0x8005f3 <directionHold+0x1>
    18dc:	40 93 f2 05 	sts	0x05F2, r20	; 0x8005f2 <directionHold>
	distanceHold = pDistance;
    18e0:	30 93 ef 05 	sts	0x05EF, r19	; 0x8005ef <distanceHold+0x1>
    18e4:	20 93 ee 05 	sts	0x05EE, r18	; 0x8005ee <distanceHold>
	
	//u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
	u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    18e8:	26 e3       	ldi	r18, 0x36	; 54
    18ea:	30 e2       	ldi	r19, 0x20	; 32
    18ec:	4b ef       	ldi	r20, 0xFB	; 251
    18ee:	5f e1       	ldi	r21, 0x1F	; 31
    18f0:	60 e6       	ldi	r22, 0x60	; 96
    18f2:	72 e0       	ldi	r23, 0x02	; 2
    18f4:	8e e7       	ldi	r24, 0x7E	; 126
    18f6:	95 e0       	ldi	r25, 0x05	; 5
    18f8:	0e 94 8a 19 	call	0x3314	; 0x3314 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>
	
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    18fc:	88 e7       	ldi	r24, 0x78	; 120
    18fe:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    1902:	8e e7       	ldi	r24, 0x7E	; 126
    1904:	95 e0       	ldi	r25, 0x05	; 5
    1906:	0e 94 33 22 	call	0x4466	; 0x4466 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	8e e7       	ldi	r24, 0x7E	; 126
    190e:	95 e0       	ldi	r25, 0x05	; 5
    1910:	0e 94 3e 22 	call	0x447c	; 0x447c <u8x8_SetPowerSave>
	
	screenDiv = screenDiv / screenDivholder;//for better resolution
    1914:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <screenDivholder>
    1918:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <screenDivholder+0x1>
    191c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <screenDivholder+0x2>
    1920:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <screenDivholder+0x3>
    1924:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <screenDiv>
    1928:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <screenDiv+0x1>
    192c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <screenDiv+0x2>
    1930:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <screenDiv+0x3>
    1934:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divsf3>
    1938:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <screenDiv>
    193c:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <screenDiv+0x1>
    1940:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <screenDiv+0x2>
    1944:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <screenDiv+0x3>

	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);
    1948:	66 e9       	ldi	r22, 0x96	; 150
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	8e e7       	ldi	r24, 0x7E	; 126
    194e:	95 e0       	ldi	r25, 0x05	; 5
    1950:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <u8g2_SetFont>
	textHeight = u8g2_GetMaxCharHeight(&u8g2);
    1954:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <u8g2+0x50>
    1958:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <textHeight>
	maxCharWidth = u8g2_GetMaxCharWidth(&u8g2);
    195c:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <u8g2+0x4f>
    1960:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <maxCharWidth>
	
	u8g2_SetFontDirection(&u8g2, 0);//0: 0deg 1:90deg 2: 180deg 3: 270deg
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	8e e7       	ldi	r24, 0x7E	; 126
    1968:	95 e0       	ldi	r25, 0x05	; 5
    196a:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <u8g2_SetFontDirection>
	
	selections[MENUPAGE] = menuChoices;
    196e:	e6 ef       	ldi	r30, 0xF6	; 246
    1970:	f5 e0       	ldi	r31, 0x05	; 5
    1972:	84 e0       	ldi	r24, 0x04	; 4
    1974:	81 83       	std	Z+1, r24	; 0x01
	selections[SETTINGPAGE] = settings;
    1976:	85 e0       	ldi	r24, 0x05	; 5
    1978:	85 83       	std	Z+5, r24	; 0x05
	selectionsVis[MENUPAGE] = menuChoicesVis;
    197a:	e4 ee       	ldi	r30, 0xE4	; 228
    197c:	f5 e0       	ldi	r31, 0x05	; 5
    197e:	93 e0       	ldi	r25, 0x03	; 3
    1980:	91 83       	std	Z+1, r25	; 0x01
	selectionsVis[SETTINGPAGE] = settingsVis;
    1982:	85 83       	std	Z+5, r24	; 0x05
	return &currentPage;
}
    1984:	8b e3       	ldi	r24, 0x3B	; 59
    1986:	94 e0       	ldi	r25, 0x04	; 4
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <sys_init>:

void sys_init(void)
{
	#if defined(__AVR__)
	/* select minimal prescaler (max system speed) */
	CLKPR = 0x80;
    198e:	e1 e6       	ldi	r30, 0x61	; 97
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 e8       	ldi	r24, 0x80	; 128
    1994:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1996:	10 82       	st	Z, r1
    1998:	08 95       	ret

0000199a <timeInit>:
}

//Time________________________________________________________________________________________________________________________________________________

void timeInit(unsigned int *ptime_min, unsigned int *ptime_ms){
	pTime_min = ptime_min;
    199a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pTime_min+0x1>
    199e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pTime_min>
	pTime_ms = ptime_ms;
    19a2:	70 93 7d 05 	sts	0x057D, r23	; 0x80057d <pTime_ms+0x1>
    19a6:	60 93 7c 05 	sts	0x057C, r22	; 0x80057c <pTime_ms>
	TCCR0B |= (1<<CS00) | (1<<CS01);
    19aa:	85 b5       	in	r24, 0x25	; 37
    19ac:	83 60       	ori	r24, 0x03	; 3
    19ae:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0B);
    19b0:	ee e6       	ldi	r30, 0x6E	; 110
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	84 60       	ori	r24, 0x04	; 4
    19b8:	80 83       	st	Z, r24
	OCR0B = 250;//to attain roughly 1 ms for every overflow. this roughness gets calibrated further in the code.
    19ba:	8a ef       	ldi	r24, 0xFA	; 250
    19bc:	88 bd       	out	0x28, r24	; 40
    19be:	08 95       	ret

000019c0 <__vector_15>:
}



ISR(TIMER0_COMPB_vect){
    19c0:	1f 92       	push	r1
    19c2:	0f 92       	push	r0
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	0f 92       	push	r0
    19c8:	11 24       	eor	r1, r1
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	ef 93       	push	r30
    19d8:	ff 93       	push	r31
	//this routine updates the time variables.
	static int rCount = 0;
	
	if (_Time_ms >= 60000){
    19da:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <_Time_ms>
    19de:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <_Time_ms+0x1>
    19e2:	80 36       	cpi	r24, 0x60	; 96
    19e4:	2a ee       	ldi	r18, 0xEA	; 234
    19e6:	92 07       	cpc	r25, r18
    19e8:	b8 f0       	brcs	.+46     	; 0x1a18 <__vector_15+0x58>
		_Time_ms = Time_cal-117;//Formula for the minutes. pTime_ms = (Time_cal-c): c = 0.615384615*Time_cal
    19ea:	8c eb       	ldi	r24, 0xBC	; 188
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <_Time_ms+0x1>
    19f2:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <_Time_ms>
		_Time_min++;
    19f6:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <_Time_min>
    19fa:	90 91 f1 05 	lds	r25, 0x05F1	; 0x8005f1 <_Time_min+0x1>
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	90 93 f1 05 	sts	0x05F1, r25	; 0x8005f1 <_Time_min+0x1>
    1a04:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <_Time_min>
		rCount = 0;
    1a08:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rCount.9238+0x1>
    1a0c:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rCount.9238>
		reDrawRequiredTime = 1; //update the screen so the overlay shows the right minutes.
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <reDrawRequiredTime>
    1a16:	18 c0       	rjmp	.+48     	; 0x1a48 <__vector_15+0x88>
	}else if (rCount++ >= 13000)
    1a18:	20 91 35 04 	lds	r18, 0x0435	; 0x800435 <rCount.9238>
    1a1c:	30 91 36 04 	lds	r19, 0x0436	; 0x800436 <rCount.9238+0x1>
    1a20:	a9 01       	movw	r20, r18
    1a22:	4f 5f       	subi	r20, 0xFF	; 255
    1a24:	5f 4f       	sbci	r21, 0xFF	; 255
    1a26:	50 93 36 04 	sts	0x0436, r21	; 0x800436 <rCount.9238+0x1>
    1a2a:	40 93 35 04 	sts	0x0435, r20	; 0x800435 <rCount.9238>
    1a2e:	28 3c       	cpi	r18, 0xC8	; 200
    1a30:	32 43       	sbci	r19, 0x32	; 50
    1a32:	54 f0       	brlt	.+20     	; 0x1a48 <__vector_15+0x88>
	{
		_Time_ms = _Time_ms + Time_cal;
    1a34:	8f 5c       	subi	r24, 0xCF	; 207
    1a36:	9e 4f       	sbci	r25, 0xFE	; 254
    1a38:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <_Time_ms+0x1>
    1a3c:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <_Time_ms>
		rCount = 0;
    1a40:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rCount.9238+0x1>
    1a44:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rCount.9238>
	}

	_Time_ms++;
    1a48:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <_Time_ms>
    1a4c:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <_Time_ms+0x1>
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <_Time_ms+0x1>
    1a56:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <_Time_ms>
	
	*pTime_ms = _Time_ms;
    1a5a:	e0 91 7c 05 	lds	r30, 0x057C	; 0x80057c <pTime_ms>
    1a5e:	f0 91 7d 05 	lds	r31, 0x057D	; 0x80057d <pTime_ms+0x1>
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
	*pTime_min = _Time_min;
    1a66:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <pTime_min>
    1a6a:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <pTime_min+0x1>
    1a6e:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <_Time_min>
    1a72:	90 91 f1 05 	lds	r25, 0x05F1	; 0x8005f1 <_Time_min+0x1>
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
}
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	5f 91       	pop	r21
    1a84:	4f 91       	pop	r20
    1a86:	3f 91       	pop	r19
    1a88:	2f 91       	pop	r18
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	1f 90       	pop	r1
    1a92:	18 95       	reti

00001a94 <getTimeToChar>:

void getTimeToChar(char *s, int TemplateOption){
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <getTimeToChar+0xe>
    1aa2:	1f 92       	push	r1
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	8c 01       	movw	r16, r24
    1aaa:	7b 01       	movw	r14, r22
	//pTime_min and pTime_ms are global variables.
	strcpy(s, ""); // empty string s
    1aac:	fc 01       	movw	r30, r24
    1aae:	10 82       	st	Z, r1
	char Buff[3] = {0, 0, 0};
    1ab0:	19 82       	std	Y+1, r1	; 0x01
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
    1ab4:	1b 82       	std	Y+3, r1	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1ab6:	4a e0       	ldi	r20, 0x0A	; 10
    1ab8:	be 01       	movw	r22, r28
    1aba:	6f 5f       	subi	r22, 0xFF	; 255
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <_Time_min>
    1ac2:	90 91 f1 05 	lds	r25, 0x05F1	; 0x8005f1 <_Time_min+0x1>
    1ac6:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
	
	itoa(_Time_min, Buff, 10);
	
	if(_Time_min < 10){
    1aca:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <_Time_min>
    1ace:	90 91 f1 05 	lds	r25, 0x05F1	; 0x8005f1 <_Time_min+0x1>
    1ad2:	0a 97       	sbiw	r24, 0x0a	; 10
    1ad4:	48 f4       	brcc	.+18     	; 0x1ae8 <getTimeToChar+0x54>
		strcat(s, "0");
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	01 90       	ld	r0, Z+
    1ada:	00 20       	and	r0, r0
    1adc:	e9 f7       	brne	.-6      	; 0x1ad8 <getTimeToChar+0x44>
    1ade:	31 97       	sbiw	r30, 0x01	; 1
    1ae0:	80 e3       	ldi	r24, 0x30	; 48
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	80 83       	st	Z, r24
	}
	strcat(s, Buff);
    1ae8:	be 01       	movw	r22, r28
    1aea:	6f 5f       	subi	r22, 0xFF	; 255
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	c8 01       	movw	r24, r16
    1af0:	0e 94 97 28 	call	0x512e	; 0x512e <strcat>
    1af4:	20 91 f4 05 	lds	r18, 0x05F4	; 0x8005f4 <_Time_ms>
    1af8:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <_Time_ms+0x1>
    1afc:	36 95       	lsr	r19
    1afe:	27 95       	ror	r18
    1b00:	36 95       	lsr	r19
    1b02:	27 95       	ror	r18
    1b04:	36 95       	lsr	r19
    1b06:	27 95       	ror	r18
    1b08:	a5 ec       	ldi	r26, 0xC5	; 197
    1b0a:	b0 e2       	ldi	r27, 0x20	; 32
    1b0c:	0e 94 81 28 	call	0x5102	; 0x5102 <__umulhisi3>
    1b10:	4a e0       	ldi	r20, 0x0A	; 10
    1b12:	be 01       	movw	r22, r28
    1b14:	6f 5f       	subi	r22, 0xFF	; 255
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	92 95       	swap	r25
    1b1a:	82 95       	swap	r24
    1b1c:	8f 70       	andi	r24, 0x0F	; 15
    1b1e:	89 27       	eor	r24, r25
    1b20:	9f 70       	andi	r25, 0x0F	; 15
    1b22:	89 27       	eor	r24, r25
    1b24:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
	
	itoa((_Time_ms/1000), Buff, 10);
	strcat(s, ":");
    1b28:	f8 01       	movw	r30, r16
    1b2a:	01 90       	ld	r0, Z+
    1b2c:	00 20       	and	r0, r0
    1b2e:	e9 f7       	brne	.-6      	; 0x1b2a <getTimeToChar+0x96>
    1b30:	31 97       	sbiw	r30, 0x01	; 1
    1b32:	8a e3       	ldi	r24, 0x3A	; 58
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
	
	switch (TemplateOption){
    1b3a:	ea 94       	dec	r14
    1b3c:	ef 28       	or	r14, r15
    1b3e:	b1 f4       	brne	.+44     	; 0x1b6c <getTimeToChar+0xd8>
		//only have the minutes:> 00:
		break;
		
		case 1:
		//include minutes and seconds:> 00:00
		if(_Time_ms/1000 < 10){
    1b40:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <_Time_ms>
    1b44:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <_Time_ms+0x1>
    1b48:	80 31       	cpi	r24, 0x10	; 16
    1b4a:	97 42       	sbci	r25, 0x27	; 39
    1b4c:	48 f4       	brcc	.+18     	; 0x1b60 <getTimeToChar+0xcc>
			strcat(s, "0");
    1b4e:	f8 01       	movw	r30, r16
    1b50:	01 90       	ld	r0, Z+
    1b52:	00 20       	and	r0, r0
    1b54:	e9 f7       	brne	.-6      	; 0x1b50 <getTimeToChar+0xbc>
    1b56:	31 97       	sbiw	r30, 0x01	; 1
    1b58:	80 e3       	ldi	r24, 0x30	; 48
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
		}
		strcat(s, Buff);
    1b60:	be 01       	movw	r22, r28
    1b62:	6f 5f       	subi	r22, 0xFF	; 255
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	c8 01       	movw	r24, r16
    1b68:	0e 94 97 28 	call	0x512e	; 0x512e <strcat>
		break;
	}
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	08 95       	ret

00001b80 <ADCinit>:


//Battery_____________________________________________________________________________________________________________________________________________
void ADCinit(void){
	ADMUX |= (1<<REFS0) | (1<<MUX1);
    1b80:	ec e7       	ldi	r30, 0x7C	; 124
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	82 64       	ori	r24, 0x42	; 66
    1b88:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    1b8a:	ea e7       	ldi	r30, 0x7A	; 122
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	87 6e       	ori	r24, 0xE7	; 231
    1b92:	80 83       	st	Z, r24
    1b94:	08 95       	ret

00001b96 <updateBatterySens>:
	
}

int updateBatterySens(){
	static int ADCval = 0;
	ADCval = ADC;
    1b96:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1b9a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	//mimicking a battery voltage by a pot meter.

	return ADCval;
}
    1b9e:	08 95       	ret

00001ba0 <choiceAdder>:
		
		reDrawRequiredTime = 0;
	}
}

void choiceAdder(int8_t addValue){ //change the selection in the menu
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
	currentChoice[currentPage] += addValue;
    1ba4:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <currentPage>
    1ba8:	02 2e       	mov	r0, r18
    1baa:	00 0c       	add	r0, r0
    1bac:	33 0b       	sbc	r19, r19
    1bae:	f9 01       	movw	r30, r18
    1bb0:	e3 5a       	subi	r30, 0xA3	; 163
    1bb2:	fa 4f       	sbci	r31, 0xFA	; 250
    1bb4:	90 81       	ld	r25, Z
    1bb6:	98 0f       	add	r25, r24
    1bb8:	90 83       	st	Z, r25
	
	if(selectEnable == 1){
    1bba:	40 91 07 06 	lds	r20, 0x0607	; 0x800607 <selectEnable>
    1bbe:	44 23       	and	r20, r20
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <choiceAdder+0x24>
    1bc2:	5a c0       	rjmp	.+180    	; 0x1c78 <choiceAdder+0xd8>
		if (currentChoice[currentPage] > selections[currentPage]-1)
    1bc4:	f9 01       	movw	r30, r18
    1bc6:	ea 50       	subi	r30, 0x0A	; 10
    1bc8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bca:	e0 81       	ld	r30, Z
    1bcc:	4e 2f       	mov	r20, r30
    1bce:	0e 2e       	mov	r0, r30
    1bd0:	00 0c       	add	r0, r0
    1bd2:	55 0b       	sbc	r21, r21
    1bd4:	41 50       	subi	r20, 0x01	; 1
    1bd6:	51 09       	sbc	r21, r1
    1bd8:	69 2f       	mov	r22, r25
    1bda:	09 2e       	mov	r0, r25
    1bdc:	00 0c       	add	r0, r0
    1bde:	77 0b       	sbc	r23, r23
    1be0:	46 17       	cp	r20, r22
    1be2:	57 07       	cpc	r21, r23
    1be4:	4c f4       	brge	.+18     	; 0x1bf8 <choiceAdder+0x58>
		{
			currentChoice[currentPage] = 0;
    1be6:	f9 01       	movw	r30, r18
    1be8:	e3 5a       	subi	r30, 0xA3	; 163
    1bea:	fa 4f       	sbci	r31, 0xFA	; 250
    1bec:	10 82       	st	Z, r1
			Scroll[currentPage] = 0;
    1bee:	f9 01       	movw	r30, r18
    1bf0:	ee 58       	subi	r30, 0x8E	; 142
    1bf2:	fa 4f       	sbci	r31, 0xFA	; 250
    1bf4:	10 82       	st	Z, r1
    1bf6:	11 c0       	rjmp	.+34     	; 0x1c1a <choiceAdder+0x7a>
		}
		if (currentChoice[currentPage] < 0)
    1bf8:	99 23       	and	r25, r25
    1bfa:	7c f4       	brge	.+30     	; 0x1c1a <choiceAdder+0x7a>
		{
			currentChoice[currentPage] = selections[currentPage]-1;
    1bfc:	d9 01       	movw	r26, r18
    1bfe:	a3 5a       	subi	r26, 0xA3	; 163
    1c00:	ba 4f       	sbci	r27, 0xFA	; 250
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	9e 0f       	add	r25, r30
    1c06:	9c 93       	st	X, r25
			Scroll[currentPage] = selectionsVis[currentPage] - selections[currentPage];
    1c08:	d9 01       	movw	r26, r18
    1c0a:	ae 58       	subi	r26, 0x8E	; 142
    1c0c:	ba 4f       	sbci	r27, 0xFA	; 250
    1c0e:	e9 01       	movw	r28, r18
    1c10:	cc 51       	subi	r28, 0x1C	; 28
    1c12:	da 4f       	sbci	r29, 0xFA	; 250
    1c14:	98 81       	ld	r25, Y
    1c16:	9e 1b       	sub	r25, r30
    1c18:	9c 93       	st	X, r25
		}
		if(currentChoice[currentPage] >= selectionsVis[currentPage] - Scroll[currentPage]){
    1c1a:	f9 01       	movw	r30, r18
    1c1c:	e3 5a       	subi	r30, 0xA3	; 163
    1c1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c20:	60 81       	ld	r22, Z
    1c22:	06 2e       	mov	r0, r22
    1c24:	00 0c       	add	r0, r0
    1c26:	77 0b       	sbc	r23, r23
    1c28:	f9 01       	movw	r30, r18
    1c2a:	ee 58       	subi	r30, 0x8E	; 142
    1c2c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c2e:	90 81       	ld	r25, Z
    1c30:	f9 01       	movw	r30, r18
    1c32:	ec 51       	subi	r30, 0x1C	; 28
    1c34:	fa 4f       	sbci	r31, 0xFA	; 250
    1c36:	40 81       	ld	r20, Z
    1c38:	04 2e       	mov	r0, r20
    1c3a:	00 0c       	add	r0, r0
    1c3c:	55 0b       	sbc	r21, r21
    1c3e:	49 1b       	sub	r20, r25
    1c40:	51 09       	sbc	r21, r1
    1c42:	97 fd       	sbrc	r25, 7
    1c44:	53 95       	inc	r21
    1c46:	64 17       	cp	r22, r20
    1c48:	75 07       	cpc	r23, r21
    1c4a:	2c f0       	brlt	.+10     	; 0x1c56 <choiceAdder+0xb6>
			Scroll[currentPage] += -addValue;
    1c4c:	f9 01       	movw	r30, r18
    1c4e:	ee 58       	subi	r30, 0x8E	; 142
    1c50:	fa 4f       	sbci	r31, 0xFA	; 250
    1c52:	98 1b       	sub	r25, r24
    1c54:	90 83       	st	Z, r25
		}
		if (currentChoice[currentPage] < -Scroll[currentPage]){
    1c56:	f9 01       	movw	r30, r18
    1c58:	ee 58       	subi	r30, 0x8E	; 142
    1c5a:	fa 4f       	sbci	r31, 0xFA	; 250
    1c5c:	90 81       	ld	r25, Z
    1c5e:	e9 2f       	mov	r30, r25
    1c60:	ff 27       	eor	r31, r31
    1c62:	e1 95       	neg	r30
    1c64:	0c f4       	brge	.+2      	; 0x1c68 <choiceAdder+0xc8>
    1c66:	f0 95       	com	r31
    1c68:	6e 17       	cp	r22, r30
    1c6a:	7f 07       	cpc	r23, r31
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <choiceAdder+0xd8>
			Scroll[currentPage] += -addValue;
    1c6e:	f9 01       	movw	r30, r18
    1c70:	ee 58       	subi	r30, 0x8E	; 142
    1c72:	fa 4f       	sbci	r31, 0xFA	; 250
    1c74:	98 1b       	sub	r25, r24
    1c76:	90 83       	st	Z, r25
		}
	}
}
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <pageHistory>:
int8_t pageHistory(_Bool GetPrevpage, int pageNum){
	#define historyBuff 4
	static short history[historyBuff];//initialize first page in case you don't use the start up screen.
	static short i = -1;
	
	if (!GetPrevpage)
    1c7e:	81 11       	cpse	r24, r1
    1c80:	15 c0       	rjmp	.+42     	; 0x1cac <pageHistory+0x2e>
	{
		if (i < historyBuff-1){
    1c82:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i.9269>
    1c86:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <i.9269+0x1>
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	44 f5       	brge	.+80     	; 0x1ce0 <pageHistory+0x62>
			history[++i] = pageNum;
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <i.9269+0x1>
    1c96:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i.9269>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	e3 5d       	subi	r30, 0xD3	; 211
    1ca2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca4:	71 83       	std	Z+1, r23	; 0x01
    1ca6:	60 83       	st	Z, r22
		}
		return -1;
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	08 95       	ret
		}else{
		
		if (i <= 0)
    1cac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i.9269>
    1cb0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <i.9269+0x1>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	19 06       	cpc	r1, r25
    1cb8:	3c f0       	brlt	.+14     	; 0x1cc8 <pageHistory+0x4a>
		{
			return history[i];
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	e3 5d       	subi	r30, 0xD3	; 211
    1cc2:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc4:	80 81       	ld	r24, Z
    1cc6:	08 95       	ret
			}else{
			return history[--i];
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <i.9269+0x1>
    1cce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i.9269>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	e3 5d       	subi	r30, 0xD3	; 211
    1cda:	fb 4f       	sbci	r31, 0xFB	; 251
    1cdc:	80 81       	ld	r24, Z
    1cde:	08 95       	ret
	if (!GetPrevpage)
	{
		if (i < historyBuff-1){
			history[++i] = pageNum;
		}
		return -1;
    1ce0:	8f ef       	ldi	r24, 0xFF	; 255
			return history[i];
			}else{
			return history[--i];
		}
	}
}
    1ce2:	08 95       	ret

00001ce4 <pageSel>:
}

void pageSel(void){
	//code for managing the pageNumbers
	#define firstPage 2
	if (selectEnable){
    1ce4:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <selectEnable>
    1ce8:	88 23       	and	r24, r24
    1cea:	f9 f0       	breq	.+62     	; 0x1d2a <pageSel+0x46>
		if (currentPage == MENUPAGE){
    1cec:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <currentPage>
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	31 f4       	brne	.+12     	; 0x1d00 <pageSel+0x1c>
			currentPage = currentChoice[MENUPAGE] + firstPage; //increment with two because the menu choice pages start at 2
    1cf4:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <currentChoice+0x1>
    1cf8:	8e 5f       	subi	r24, 0xFE	; 254
    1cfa:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <currentPage>
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <pageSel+0x36>
			}else if(currentPage == 0){
    1d00:	81 11       	cpse	r24, r1
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <pageSel+0x28>
			currentPage = MENUPAGE;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <currentPage>
    1d0a:	07 c0       	rjmp	.+14     	; 0x1d1a <pageSel+0x36>
			}else{
			if(currentPage == 5){
    1d0c:	85 30       	cpi	r24, 0x05	; 5
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <pageSel+0x36>
				currentPage = currentChoice[5]+ 1 + 5;
    1d10:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <currentChoice+0x5>
    1d14:	8a 5f       	subi	r24, 0xFA	; 250
    1d16:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <currentPage>
			}
			
		}
		pageHistory(0, currentPage);//update page history
    1d1a:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <currentPage>
    1d1e:	06 2e       	mov	r0, r22
    1d20:	00 0c       	add	r0, r0
    1d22:	77 0b       	sbc	r23, r23
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <pageHistory>
    1d2a:	08 95       	ret

00001d2c <but_init>:

//the routine that gets run when the pin change interrupt gets triggered on portD for the enabled pins


void but_init(void){
	BUTTON_REG &= ~((1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK));     // set pinD 4 5 6 and 7 as an input
    1d2c:	8a b1       	in	r24, 0x0a	; 10
    1d2e:	8f 70       	andi	r24, 0x0F	; 15
    1d30:	8a b9       	out	0x0a, r24	; 10
	// is now an input
	BUTTON_PORT |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);    // turn On the Pull-up on all those pins
    1d32:	8b b1       	in	r24, 0x0b	; 11
    1d34:	80 6f       	ori	r24, 0xF0	; 240
    1d36:	8b b9       	out	0x0b, r24	; 11
	// is now an input with pull-up enabled

	if (BUTTON_PORT == PORTB){
    1d38:	9b b1       	in	r25, 0x0b	; 11
    1d3a:	85 b1       	in	r24, 0x05	; 5
    1d3c:	98 13       	cpse	r25, r24
    1d3e:	0b c0       	rjmp	.+22     	; 0x1d56 <but_init+0x2a>
		//interrupt setup
		PCICR |= (1<<PCIE0);
    1d40:	e8 e6       	ldi	r30, 0x68	; 104
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	81 60       	ori	r24, 0x01	; 1
    1d48:	80 83       	st	Z, r24
		PCMSK0 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1d4a:	eb e6       	ldi	r30, 0x6B	; 107
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 6f       	ori	r24, 0xF0	; 240
    1d52:	80 83       	st	Z, r24
    1d54:	1d c0       	rjmp	.+58     	; 0x1d90 <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTC){
    1d56:	9b b1       	in	r25, 0x0b	; 11
    1d58:	88 b1       	in	r24, 0x08	; 8
    1d5a:	98 13       	cpse	r25, r24
    1d5c:	0b c0       	rjmp	.+22     	; 0x1d74 <but_init+0x48>
		//interrupt setup
		PCICR |= (1<<PCIE1);
    1d5e:	e8 e6       	ldi	r30, 0x68	; 104
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	82 60       	ori	r24, 0x02	; 2
    1d66:	80 83       	st	Z, r24
		PCMSK1 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1d68:	ec e6       	ldi	r30, 0x6C	; 108
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 6f       	ori	r24, 0xF0	; 240
    1d70:	80 83       	st	Z, r24
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTD){
    1d74:	9b b1       	in	r25, 0x0b	; 11
    1d76:	8b b1       	in	r24, 0x0b	; 11
    1d78:	98 13       	cpse	r25, r24
    1d7a:	0a c0       	rjmp	.+20     	; 0x1d90 <but_init+0x64>
		//interrupt setup
		PCICR |= (1<<PCIE2);
    1d7c:	e8 e6       	ldi	r30, 0x68	; 104
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	84 60       	ori	r24, 0x04	; 4
    1d84:	80 83       	st	Z, r24
		PCMSK2 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1d86:	ed e6       	ldi	r30, 0x6D	; 109
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 6f       	ori	r24, 0xF0	; 240
    1d8e:	80 83       	st	Z, r24
    1d90:	2f ef       	ldi	r18, 0xFF	; 255
    1d92:	83 ec       	ldi	r24, 0xC3	; 195
    1d94:	99 e0       	ldi	r25, 0x09	; 9
    1d96:	21 50       	subi	r18, 0x01	; 1
    1d98:	80 40       	sbci	r24, 0x00	; 0
    1d9a:	90 40       	sbci	r25, 0x00	; 0
    1d9c:	e1 f7       	brne	.-8      	; 0x1d96 <but_init+0x6a>
    1d9e:	00 c0       	rjmp	.+0      	; 0x1da0 <but_init+0x74>
    1da0:	00 00       	nop
    1da2:	08 95       	ret

00001da4 <updateButtons>:

	_delay_ms(200);//to prevent accidental interrupt triggering/ dirty fix
}

void updateButtons(void){
	switch (keyPressed)
    1da4:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <keyPressed>
    1da8:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <keyPressed+0x1>
    1dac:	85 30       	cpi	r24, 0x05	; 5
    1dae:	91 05       	cpc	r25, r1
    1db0:	19 f1       	breq	.+70     	; 0x1df8 <updateButtons+0x54>
    1db2:	1c f4       	brge	.+6      	; 0x1dba <updateButtons+0x16>
    1db4:	04 97       	sbiw	r24, 0x04	; 4
    1db6:	59 f1       	breq	.+86     	; 0x1e0e <updateButtons+0x6a>
    1db8:	08 95       	ret
    1dba:	86 30       	cpi	r24, 0x06	; 6
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	19 f0       	breq	.+6      	; 0x1dc6 <updateButtons+0x22>
    1dc0:	07 97       	sbiw	r24, 0x07	; 7
    1dc2:	81 f0       	breq	.+32     	; 0x1de4 <updateButtons+0x40>
    1dc4:	08 95       	ret
	{
		case BACK:
		currentPage = pageHistory(1, 0);
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <pageHistory>
    1dd0:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <currentPage>
		reDrawRequired = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;//reset key pressed
    1dda:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <keyPressed+0x1>
    1dde:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <keyPressed>
		break;
    1de2:	08 95       	ret
		
		case SELECT:
		pageSel();
    1de4:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <pageSel>
		reDrawRequired = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;
    1dee:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <keyPressed+0x1>
    1df2:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <keyPressed>
		break;
    1df6:	08 95       	ret
		
		case UP:
		choiceAdder(-1);
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <choiceAdder>
		reDrawRequired = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;
    1e04:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <keyPressed+0x1>
    1e08:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <keyPressed>
		break;
    1e0c:	08 95       	ret
		
		case DOWN:
		choiceAdder(+1);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <choiceAdder>
		reDrawRequired = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;
    1e1a:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <keyPressed+0x1>
    1e1e:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <keyPressed>
    1e22:	08 95       	ret

00001e24 <MenuStyle0>:
}


//pages_______________________________________________________________________________________________________________________________________________

void MenuStyle0(void){
    1e24:	2f 92       	push	r2
    1e26:	3f 92       	push	r3
    1e28:	4f 92       	push	r4
    1e2a:	5f 92       	push	r5
    1e2c:	6f 92       	push	r6
    1e2e:	7f 92       	push	r7
    1e30:	8f 92       	push	r8
    1e32:	9f 92       	push	r9
    1e34:	af 92       	push	r10
    1e36:	bf 92       	push	r11
    1e38:	cf 92       	push	r12
    1e3a:	df 92       	push	r13
    1e3c:	ef 92       	push	r14
    1e3e:	0f 93       	push	r16
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <MenuStyle0+0x22>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <MenuStyle0+0x24>
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	//int yStat = (y+(height/2)+3);
	selectEnable = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <selectEnable>
    1e52:	0f 2e       	mov	r0, r31
    1e54:	f1 e2       	ldi	r31, 0x21	; 33
    1e56:	cf 2e       	mov	r12, r31
    1e58:	f1 e0       	ldi	r31, 0x01	; 1
    1e5a:	df 2e       	mov	r13, r31
    1e5c:	f0 2d       	mov	r31, r0
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1e5e:	1c 82       	std	Y+4, r1	; 0x04
    1e60:	1b 82       	std	Y+3, r1	; 0x03
		if(i == currentChoice[currentPage]){
    1e62:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <currentPage>
    1e66:	0e 2e       	mov	r0, r30
    1e68:	00 0c       	add	r0, r0
    1e6a:	ff 0b       	sbc	r31, r31
    1e6c:	e3 5a       	subi	r30, 0xA3	; 163
    1e6e:	fa 4f       	sbci	r31, 0xFA	; 250
    1e70:	80 81       	ld	r24, Z
    1e72:	08 2e       	mov	r0, r24
    1e74:	00 0c       	add	r0, r0
    1e76:	99 0b       	sbc	r25, r25
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	82 17       	cp	r24, r18
    1e7e:	93 07       	cpc	r25, r19
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <MenuStyle0+0x60>
    1e82:	9d c0       	rjmp	.+314    	; 0x1fbe <MenuStyle0+0x19a>
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
			height = screenDiv - Margin;
    1e84:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    1e88:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    1e8c:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    1e90:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
			
			x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1e94:	b9 01       	movw	r22, r18
    1e96:	33 0f       	add	r19, r19
    1e98:	88 0b       	sbc	r24, r24
    1e9a:	99 0b       	sbc	r25, r25
    1e9c:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    1ea0:	a3 01       	movw	r20, r6
    1ea2:	92 01       	movw	r18, r4
    1ea4:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e1       	ldi	r20, 0x10	; 16
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    1eb4:	4b 01       	movw	r8, r22
    1eb6:	5c 01       	movw	r10, r24
    1eb8:	60 91 73 05 	lds	r22, 0x0573	; 0x800573 <Scroll+0x1>
    1ebc:	06 2e       	mov	r0, r22
    1ebe:	00 0c       	add	r0, r0
    1ec0:	77 0b       	sbc	r23, r23
    1ec2:	88 0b       	sbc	r24, r24
    1ec4:	99 0b       	sbc	r25, r25
    1ec6:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    1eca:	a3 01       	movw	r20, r6
    1ecc:	92 01       	movw	r18, r4
    1ece:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	c5 01       	movw	r24, r10
    1ed8:	b4 01       	movw	r22, r8
    1eda:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    1ede:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    1ee2:	4b 01       	movw	r8, r22
    1ee4:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    1ee6:	69 30       	cpi	r22, 0x09	; 9
    1ee8:	71 05       	cpc	r23, r1
    1eea:	0c f4       	brge	.+2      	; 0x1eee <MenuStyle0+0xca>
    1eec:	d6 c0       	rjmp	.+428    	; 0x209a <MenuStyle0+0x276>
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
		if(i == currentChoice[currentPage]){
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
    1eee:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <currentFrame>
    1ef2:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <currentFrame+0x1>
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	00 24       	eor	r0, r0
    1efc:	36 95       	lsr	r19
    1efe:	27 95       	ror	r18
    1f00:	07 94       	ror	r0
    1f02:	36 95       	lsr	r19
    1f04:	27 95       	ror	r18
    1f06:	07 94       	ror	r0
    1f08:	32 2f       	mov	r19, r18
    1f0a:	20 2d       	mov	r18, r0
    1f0c:	ab ea       	ldi	r26, 0xAB	; 171
    1f0e:	ba ea       	ldi	r27, 0xAA	; 170
    1f10:	0e 94 81 28 	call	0x5102	; 0x5102 <__umulhisi3>
    1f14:	96 95       	lsr	r25
    1f16:	87 95       	ror	r24
    1f18:	1c 01       	movw	r2, r24
    1f1a:	ef e3       	ldi	r30, 0x3F	; 63
    1f1c:	2e 0e       	add	r2, r30
    1f1e:	31 1c       	adc	r3, r1
			height = screenDiv - Margin;
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	50 e4       	ldi	r21, 0x40	; 64
    1f28:	c3 01       	movw	r24, r6
    1f2a:	b2 01       	movw	r22, r4
    1f2c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__subsf3>
    1f30:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    1f34:	56 2e       	mov	r5, r22
    1f36:	47 2e       	mov	r4, r23
			
			x = (screenWidth/2) - width / 2;
    1f38:	31 01       	movw	r6, r2
    1f3a:	33 20       	and	r3, r3
    1f3c:	1c f4       	brge	.+6      	; 0x1f44 <MenuStyle0+0x120>
    1f3e:	ff ef       	ldi	r31, 0xFF	; 255
    1f40:	6f 1a       	sub	r6, r31
    1f42:	7f 0a       	sbc	r7, r31
    1f44:	75 94       	asr	r7
    1f46:	67 94       	ror	r6
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1f48:	61 e0       	ldi	r22, 0x01	; 1
    1f4a:	8e e7       	ldi	r24, 0x7E	; 126
    1f4c:	95 e0       	ldi	r25, 0x05	; 5
    1f4e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    1f52:	20 e4       	ldi	r18, 0x40	; 64
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	26 19       	sub	r18, r6
    1f58:	37 09       	sbc	r19, r7
    1f5a:	3a 83       	std	Y+2, r19	; 0x02
    1f5c:	29 83       	std	Y+1, r18	; 0x01
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	f3 e0       	ldi	r31, 0x03	; 3
    1f62:	ef 2e       	mov	r14, r31
    1f64:	f0 2d       	mov	r31, r0
    1f66:	05 2d       	mov	r16, r5
    1f68:	22 2d       	mov	r18, r2
    1f6a:	48 2d       	mov	r20, r8
    1f6c:	69 81       	ldd	r22, Y+1	; 0x01
    1f6e:	8e e7       	ldi	r24, 0x7E	; 126
    1f70:	95 e0       	ldi	r25, 0x05	; 5
    1f72:	0e 94 93 16 	call	0x2d26	; 0x2d26 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	8e e7       	ldi	r24, 0x7E	; 126
    1f7a:	95 e0       	ldi	r25, 0x05	; 5
    1f7c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2 , y+(height/2)+3, menuStrings[i]);
    1f80:	45 2d       	mov	r20, r5
    1f82:	54 2d       	mov	r21, r4
    1f84:	55 23       	and	r21, r21
    1f86:	14 f4       	brge	.+4      	; 0x1f8c <MenuStyle0+0x168>
    1f88:	4f 5f       	subi	r20, 0xFF	; 255
    1f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8c:	55 95       	asr	r21
    1f8e:	47 95       	ror	r20
    1f90:	4d 5f       	subi	r20, 0xFD	; 253
    1f92:	74 2e       	mov	r7, r20
    1f94:	78 0c       	add	r7, r8
    1f96:	39 81       	ldd	r19, Y+1	; 0x01
    1f98:	63 0e       	add	r6, r19
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	40 80       	ld	r4, Z
    1f9e:	51 80       	ldd	r5, Z+1	; 0x01
    1fa0:	b2 01       	movw	r22, r4
    1fa2:	8e e7       	ldi	r24, 0x7E	; 126
    1fa4:	95 e0       	ldi	r25, 0x05	; 5
    1fa6:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    1faa:	86 95       	lsr	r24
    1fac:	66 2d       	mov	r22, r6
    1fae:	68 1b       	sub	r22, r24
    1fb0:	92 01       	movw	r18, r4
    1fb2:	47 2d       	mov	r20, r7
    1fb4:	8e e7       	ldi	r24, 0x7E	; 126
    1fb6:	95 e0       	ldi	r25, 0x05	; 5
    1fb8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
    1fbc:	6e c0       	rjmp	.+220    	; 0x209a <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    1fbe:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    1fc2:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    1fc6:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    1fca:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	33 0f       	add	r19, r19
    1fd6:	88 0b       	sbc	r24, r24
    1fd8:	99 0b       	sbc	r25, r25
    1fda:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    1fde:	a3 01       	movw	r20, r6
    1fe0:	92 01       	movw	r18, r4
    1fe2:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e1       	ldi	r20, 0x10	; 16
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    1ff2:	4b 01       	movw	r8, r22
    1ff4:	5c 01       	movw	r10, r24
    1ff6:	60 91 73 05 	lds	r22, 0x0573	; 0x800573 <Scroll+0x1>
    1ffa:	06 2e       	mov	r0, r22
    1ffc:	00 0c       	add	r0, r0
    1ffe:	77 0b       	sbc	r23, r23
    2000:	88 0b       	sbc	r24, r24
    2002:	99 0b       	sbc	r25, r25
    2004:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    2008:	a3 01       	movw	r20, r6
    200a:	92 01       	movw	r18, r4
    200c:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    2010:	9b 01       	movw	r18, r22
    2012:	ac 01       	movw	r20, r24
    2014:	c5 01       	movw	r24, r10
    2016:	b4 01       	movw	r22, r8
    2018:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    201c:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    2020:	4b 01       	movw	r8, r22
    2022:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    2024:	69 30       	cpi	r22, 0x09	; 9
    2026:	71 05       	cpc	r23, r1
    2028:	c4 f1       	brlt	.+112    	; 0x209a <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e4       	ldi	r21, 0x40	; 64
    2032:	c3 01       	movw	r24, r6
    2034:	b2 01       	movw	r22, r4
    2036:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__subsf3>
    203a:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    203e:	76 2e       	mov	r7, r22
    2040:	67 2e       	mov	r6, r23
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				//u8g2_SetDefaultForegroundColor(&u8g2);
				u8g2_SetDrawColor(&u8g2, 1);
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	8e e7       	ldi	r24, 0x7E	; 126
    2046:	95 e0       	ldi	r25, 0x05	; 5
    2048:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    204c:	0f 2e       	mov	r0, r31
    204e:	f3 e0       	ldi	r31, 0x03	; 3
    2050:	ef 2e       	mov	r14, r31
    2052:	f0 2d       	mov	r31, r0
    2054:	07 2d       	mov	r16, r7
    2056:	20 e4       	ldi	r18, 0x40	; 64
    2058:	48 2d       	mov	r20, r8
    205a:	60 e2       	ldi	r22, 0x20	; 32
    205c:	8e e7       	ldi	r24, 0x7E	; 126
    205e:	95 e0       	ldi	r25, 0x05	; 5
    2060:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+(height/2)+3, menuStrings[i]);
    2064:	87 2d       	mov	r24, r7
    2066:	96 2d       	mov	r25, r6
    2068:	99 23       	and	r25, r25
    206a:	0c f4       	brge	.+2      	; 0x206e <MenuStyle0+0x24a>
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	95 95       	asr	r25
    2070:	87 95       	ror	r24
    2072:	8d 5f       	subi	r24, 0xFD	; 253
    2074:	78 2e       	mov	r7, r24
    2076:	78 0c       	add	r7, r8
    2078:	f6 01       	movw	r30, r12
    207a:	40 80       	ld	r4, Z
    207c:	51 80       	ldd	r5, Z+1	; 0x01
    207e:	b2 01       	movw	r22, r4
    2080:	8e e7       	ldi	r24, 0x7E	; 126
    2082:	95 e0       	ldi	r25, 0x05	; 5
    2084:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    2088:	86 95       	lsr	r24
    208a:	60 e4       	ldi	r22, 0x40	; 64
    208c:	68 1b       	sub	r22, r24
    208e:	92 01       	movw	r18, r4
    2090:	47 2d       	mov	r20, r7
    2092:	8e e7       	ldi	r24, 0x7E	; 126
    2094:	95 e0       	ldi	r25, 0x05	; 5
    2096:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    209a:	2b 81       	ldd	r18, Y+3	; 0x03
    209c:	3c 81       	ldd	r19, Y+4	; 0x04
    209e:	2f 5f       	subi	r18, 0xFF	; 255
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	3c 83       	std	Y+4, r19	; 0x04
    20a4:	2b 83       	std	Y+3, r18	; 0x03
    20a6:	32 e0       	ldi	r19, 0x02	; 2
    20a8:	c3 0e       	add	r12, r19
    20aa:	d1 1c       	adc	r13, r1
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	05 97       	sbiw	r24, 0x05	; 5
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <MenuStyle0+0x292>
    20b4:	d6 ce       	rjmp	.-596    	; 0x1e62 <MenuStyle0+0x3e>
			}
		}
	}
	
	//stop drawing when the animation is done
	if (currentFrame++ >= framesNum)
    20b6:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <currentFrame>
    20ba:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <currentFrame+0x1>
    20be:	82 30       	cpi	r24, 0x02	; 2
    20c0:	91 05       	cpc	r25, r1
    20c2:	30 f4       	brcc	.+12     	; 0x20d0 <MenuStyle0+0x2ac>
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <currentFrame+0x1>
    20ca:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <currentFrame>
    20ce:	06 c0       	rjmp	.+12     	; 0x20dc <MenuStyle0+0x2b8>
	{
		currentFrame = 0;
    20d0:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <currentFrame+0x1>
    20d4:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <currentFrame>
		reDrawRequired = 0;
    20d8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
	}
	

}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	0f 91       	pop	r16
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	bf 90       	pop	r11
    20f2:	af 90       	pop	r10
    20f4:	9f 90       	pop	r9
    20f6:	8f 90       	pop	r8
    20f8:	7f 90       	pop	r7
    20fa:	6f 90       	pop	r6
    20fc:	5f 90       	pop	r5
    20fe:	4f 90       	pop	r4
    2100:	3f 90       	pop	r3
    2102:	2f 90       	pop	r2
    2104:	08 95       	ret

00002106 <MenuStyle1>:

void MenuStyle1(void){
    2106:	2f 92       	push	r2
    2108:	3f 92       	push	r3
    210a:	4f 92       	push	r4
    210c:	5f 92       	push	r5
    210e:	6f 92       	push	r6
    2110:	7f 92       	push	r7
    2112:	8f 92       	push	r8
    2114:	9f 92       	push	r9
    2116:	af 92       	push	r10
    2118:	bf 92       	push	r11
    211a:	cf 92       	push	r12
    211c:	df 92       	push	r13
    211e:	ef 92       	push	r14
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	00 d0       	rcall	.+0      	; 0x212a <MenuStyle1+0x24>
    212a:	00 d0       	rcall	.+0      	; 0x212c <MenuStyle1+0x26>
    212c:	00 d0       	rcall	.+0      	; 0x212e <MenuStyle1+0x28>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <selectEnable>
	int width = screenWidth;
	int height = screenDiv;
    2138:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <screenDiv>
    213c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <screenDiv+0x1>
    2140:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <screenDiv+0x2>
    2144:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <screenDiv+0x3>
    2148:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
	
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
    214c:	4b 01       	movw	r8, r22
    214e:	77 23       	and	r23, r23
    2150:	1c f4       	brge	.+6      	; 0x2158 <MenuStyle1+0x52>
    2152:	2f ef       	ldi	r18, 0xFF	; 255
    2154:	82 1a       	sub	r8, r18
    2156:	92 0a       	sbc	r9, r18
    2158:	95 94       	asr	r9
    215a:	87 94       	ror	r8
    215c:	33 e0       	ldi	r19, 0x03	; 3
    215e:	83 0e       	add	r8, r19
    2160:	91 1c       	adc	r9, r1
	height = height - Margin;
    2162:	1b 01       	movw	r2, r22
    2164:	e2 e0       	ldi	r30, 0x02	; 2
    2166:	2e 1a       	sub	r2, r30
    2168:	31 08       	sbc	r3, r1
    216a:	0f 2e       	mov	r0, r31
    216c:	f1 e2       	ldi	r31, 0x21	; 33
    216e:	cf 2e       	mov	r12, r31
    2170:	f1 e0       	ldi	r31, 0x01	; 1
    2172:	df 2e       	mov	r13, r31
    2174:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    2176:	1e 82       	std	Y+6, r1	; 0x06
    2178:	1d 82       	std	Y+5, r1	; 0x05
				u8g2_SetDrawColor(&u8g2, 0);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    217a:	0f 2e       	mov	r0, r31
    217c:	f2 e7       	ldi	r31, 0x72	; 114
    217e:	af 2e       	mov	r10, r31
    2180:	f5 e0       	ldi	r31, 0x05	; 5
    2182:	bf 2e       	mov	r11, r31
    2184:	f0 2d       	mov	r31, r0
			}*/
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    2186:	10 e4       	ldi	r17, 0x40	; 64
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
		if(currentChoice[currentPage] == i){
    2188:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <currentPage>
    218c:	0e 2e       	mov	r0, r30
    218e:	00 0c       	add	r0, r0
    2190:	ff 0b       	sbc	r31, r31
    2192:	e3 5a       	subi	r30, 0xA3	; 163
    2194:	fa 4f       	sbci	r31, 0xFA	; 250
    2196:	80 81       	ld	r24, Z
    2198:	08 2e       	mov	r0, r24
    219a:	00 0c       	add	r0, r0
    219c:	99 0b       	sbc	r25, r25
    219e:	2d 81       	ldd	r18, Y+5	; 0x05
    21a0:	3e 81       	ldd	r19, Y+6	; 0x06
    21a2:	82 17       	cp	r24, r18
    21a4:	93 07       	cpc	r25, r19
    21a6:	09 f0       	breq	.+2      	; 0x21aa <MenuStyle1+0xa4>
    21a8:	62 c0       	rjmp	.+196    	; 0x226e <MenuStyle1+0x168>
			//x and the y of the boxes
			//width = screenWidth;
			//height = screenDiv - Margin;
			
			// 				x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    21aa:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    21ae:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    21b2:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    21b6:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
    21ba:	b9 01       	movw	r22, r18
    21bc:	33 0f       	add	r19, r19
    21be:	88 0b       	sbc	r24, r24
    21c0:	99 0b       	sbc	r25, r25
    21c2:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    21c6:	a3 01       	movw	r20, r6
    21c8:	92 01       	movw	r18, r4
    21ca:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e1       	ldi	r20, 0x10	; 16
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    21da:	69 83       	std	Y+1, r22	; 0x01
    21dc:	7a 83       	std	Y+2, r23	; 0x02
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	f5 01       	movw	r30, r10
    21e4:	61 81       	ldd	r22, Z+1	; 0x01
    21e6:	06 2e       	mov	r0, r22
    21e8:	00 0c       	add	r0, r0
    21ea:	77 0b       	sbc	r23, r23
    21ec:	88 0b       	sbc	r24, r24
    21ee:	99 0b       	sbc	r25, r25
    21f0:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    21f4:	a3 01       	movw	r20, r6
    21f6:	92 01       	movw	r18, r4
    21f8:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    21fc:	9b 01       	movw	r18, r22
    21fe:	ac 01       	movw	r20, r24
    2200:	69 81       	ldd	r22, Y+1	; 0x01
    2202:	7a 81       	ldd	r23, Y+2	; 0x02
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    220c:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    2210:	2b 01       	movw	r4, r22
    2212:	3c 01       	movw	r6, r24
			/*	if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			
			if (y >= TopMargin)
    2214:	69 30       	cpi	r22, 0x09	; 9
    2216:	71 05       	cpc	r23, r1
    2218:	0c f4       	brge	.+2      	; 0x221c <MenuStyle1+0x116>
    221a:	86 c0       	rjmp	.+268    	; 0x2328 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	8e e7       	ldi	r24, 0x7E	; 126
    2220:	95 e0       	ldi	r25, 0x05	; 5
    2222:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    2226:	0f 2e       	mov	r0, r31
    2228:	f3 e0       	ldi	r31, 0x03	; 3
    222a:	ef 2e       	mov	r14, r31
    222c:	f0 2d       	mov	r31, r0
    222e:	02 2d       	mov	r16, r2
    2230:	20 e8       	ldi	r18, 0x80	; 128
    2232:	44 2d       	mov	r20, r4
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	8e e7       	ldi	r24, 0x7E	; 126
    2238:	95 e0       	ldi	r25, 0x05	; 5
    223a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	8e e7       	ldi	r24, 0x7E	; 126
    2242:	95 e0       	ldi	r25, 0x05	; 5
    2244:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    2248:	48 0c       	add	r4, r8
    224a:	f6 01       	movw	r30, r12
    224c:	60 80       	ld	r6, Z
    224e:	71 80       	ldd	r7, Z+1	; 0x01
    2250:	b3 01       	movw	r22, r6
    2252:	8e e7       	ldi	r24, 0x7E	; 126
    2254:	95 e0       	ldi	r25, 0x05	; 5
    2256:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    225a:	86 95       	lsr	r24
    225c:	61 2f       	mov	r22, r17
    225e:	68 1b       	sub	r22, r24
    2260:	93 01       	movw	r18, r6
    2262:	44 2d       	mov	r20, r4
    2264:	8e e7       	ldi	r24, 0x7E	; 126
    2266:	95 e0       	ldi	r25, 0x05	; 5
    2268:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
    226c:	5d c0       	rjmp	.+186    	; 0x2328 <MenuStyle1+0x222>
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    226e:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    2272:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    2276:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    227a:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
    227e:	2d 81       	ldd	r18, Y+5	; 0x05
    2280:	3e 81       	ldd	r19, Y+6	; 0x06
    2282:	b9 01       	movw	r22, r18
    2284:	33 0f       	add	r19, r19
    2286:	88 0b       	sbc	r24, r24
    2288:	99 0b       	sbc	r25, r25
    228a:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    228e:	a3 01       	movw	r20, r6
    2290:	92 01       	movw	r18, r4
    2292:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e1       	ldi	r20, 0x10	; 16
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    22a2:	69 83       	std	Y+1, r22	; 0x01
    22a4:	7a 83       	std	Y+2, r23	; 0x02
    22a6:	8b 83       	std	Y+3, r24	; 0x03
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	f5 01       	movw	r30, r10
    22ac:	61 81       	ldd	r22, Z+1	; 0x01
    22ae:	06 2e       	mov	r0, r22
    22b0:	00 0c       	add	r0, r0
    22b2:	77 0b       	sbc	r23, r23
    22b4:	88 0b       	sbc	r24, r24
    22b6:	99 0b       	sbc	r25, r25
    22b8:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__floatsisf>
    22bc:	a3 01       	movw	r20, r6
    22be:	92 01       	movw	r18, r4
    22c0:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__mulsf3>
    22c4:	9b 01       	movw	r18, r22
    22c6:	ac 01       	movw	r20, r24
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	7a 81       	ldd	r23, Y+2	; 0x02
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__addsf3>
    22d4:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    22d8:	2b 01       	movw	r4, r22
    22da:	3c 01       	movw	r6, r24
			/*
			if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			if (y >= TopMargin)
    22dc:	69 30       	cpi	r22, 0x09	; 9
    22de:	71 05       	cpc	r23, r1
    22e0:	1c f1       	brlt	.+70     	; 0x2328 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	8e e7       	ldi	r24, 0x7E	; 126
    22e6:	95 e0       	ldi	r25, 0x05	; 5
    22e8:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    22ec:	0f 2e       	mov	r0, r31
    22ee:	f3 e0       	ldi	r31, 0x03	; 3
    22f0:	ef 2e       	mov	r14, r31
    22f2:	f0 2d       	mov	r31, r0
    22f4:	02 2d       	mov	r16, r2
    22f6:	20 e8       	ldi	r18, 0x80	; 128
    22f8:	44 2d       	mov	r20, r4
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	8e e7       	ldi	r24, 0x7E	; 126
    22fe:	95 e0       	ldi	r25, 0x05	; 5
    2300:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    2304:	48 0c       	add	r4, r8
    2306:	f6 01       	movw	r30, r12
    2308:	60 80       	ld	r6, Z
    230a:	71 80       	ldd	r7, Z+1	; 0x01
    230c:	b3 01       	movw	r22, r6
    230e:	8e e7       	ldi	r24, 0x7E	; 126
    2310:	95 e0       	ldi	r25, 0x05	; 5
    2312:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    2316:	86 95       	lsr	r24
    2318:	61 2f       	mov	r22, r17
    231a:	68 1b       	sub	r22, r24
    231c:	93 01       	movw	r18, r6
    231e:	44 2d       	mov	r20, r4
    2320:	8e e7       	ldi	r24, 0x7E	; 126
    2322:	95 e0       	ldi	r25, 0x05	; 5
    2324:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    2328:	2d 81       	ldd	r18, Y+5	; 0x05
    232a:	3e 81       	ldd	r19, Y+6	; 0x06
    232c:	2f 5f       	subi	r18, 0xFF	; 255
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	3e 83       	std	Y+6, r19	; 0x06
    2332:	2d 83       	std	Y+5, r18	; 0x05
    2334:	32 e0       	ldi	r19, 0x02	; 2
    2336:	c3 0e       	add	r12, r19
    2338:	d1 1c       	adc	r13, r1
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	05 97       	sbiw	r24, 0x05	; 5
    2340:	09 f0       	breq	.+2      	; 0x2344 <MenuStyle1+0x23e>
    2342:	22 cf       	rjmp	.-444    	; 0x2188 <MenuStyle1+0x82>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
		}
	}
	reDrawRequired = 0;
    2344:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
}
    2348:	26 96       	adiw	r28, 0x06	; 6
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	cf 90       	pop	r12
    2362:	bf 90       	pop	r11
    2364:	af 90       	pop	r10
    2366:	9f 90       	pop	r9
    2368:	8f 90       	pop	r8
    236a:	7f 90       	pop	r7
    236c:	6f 90       	pop	r6
    236e:	5f 90       	pop	r5
    2370:	4f 90       	pop	r4
    2372:	3f 90       	pop	r3
    2374:	2f 90       	pop	r2
    2376:	08 95       	ret

00002378 <StartPage>:

void StartPage(void){
    2378:	ef 92       	push	r14
    237a:	ff 92       	push	r15
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	28 97       	sbiw	r28, 0x08	; 8
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <selectEnable>
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
    2398:	88 e0       	ldi	r24, 0x08	; 8
    239a:	ea e2       	ldi	r30, 0x2A	; 42
    239c:	f1 e0       	ldi	r31, 0x01	; 1
    239e:	de 01       	movw	r26, r28
    23a0:	11 96       	adiw	r26, 0x01	; 1
    23a2:	01 90       	ld	r0, Z+
    23a4:	0d 92       	st	X+, r0
    23a6:	8a 95       	dec	r24
    23a8:	e1 f7       	brne	.-8      	; 0x23a2 <StartPage+0x2a>
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	7c 01       	movw	r14, r24
    23b0:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i = 0; i < lineNum; i++)
	{
		u8g2_DrawStr(&u8g2, 0, textHeight * (i + 1), text[i]);
    23b2:	f7 01       	movw	r30, r14
    23b4:	21 91       	ld	r18, Z+
    23b6:	31 91       	ld	r19, Z+
    23b8:	7f 01       	movw	r14, r30
    23ba:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    23be:	14 9f       	mul	r17, r20
    23c0:	40 2d       	mov	r20, r0
    23c2:	11 24       	eor	r1, r1
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	8e e7       	ldi	r24, 0x7E	; 126
    23c8:	95 e0       	ldi	r25, 0x05	; 5
    23ca:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
    23ce:	1f 5f       	subi	r17, 0xFF	; 255
void StartPage(void){
	selectEnable = 1;
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
	
	for (int i = 0; i < lineNum; i++)
    23d0:	15 30       	cpi	r17, 0x05	; 5
    23d2:	79 f7       	brne	.-34     	; 0x23b2 <StartPage+0x3a>
	char *text2[2] = {
		"Press \"Select\"",
		" to continue!"
	};
	
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[0]) / 2, realScreenHeight-textHeight, text2[0]);
    23d4:	10 e4       	ldi	r17, 0x40	; 64
    23d6:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <textHeight>
    23da:	f1 2e       	mov	r15, r17
    23dc:	f8 1a       	sub	r15, r24
    23de:	6c e3       	ldi	r22, 0x3C	; 60
    23e0:	71 e0       	ldi	r23, 0x01	; 1
    23e2:	8e e7       	ldi	r24, 0x7E	; 126
    23e4:	95 e0       	ldi	r25, 0x05	; 5
    23e6:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    23ea:	86 95       	lsr	r24
    23ec:	61 2f       	mov	r22, r17
    23ee:	68 1b       	sub	r22, r24
    23f0:	2c e3       	ldi	r18, 0x3C	; 60
    23f2:	31 e0       	ldi	r19, 0x01	; 1
    23f4:	4f 2d       	mov	r20, r15
    23f6:	8e e7       	ldi	r24, 0x7E	; 126
    23f8:	95 e0       	ldi	r25, 0x05	; 5
    23fa:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[1]) / 2, realScreenHeight, text2[1]);
    23fe:	6b e4       	ldi	r22, 0x4B	; 75
    2400:	71 e0       	ldi	r23, 0x01	; 1
    2402:	8e e7       	ldi	r24, 0x7E	; 126
    2404:	95 e0       	ldi	r25, 0x05	; 5
    2406:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    240a:	86 95       	lsr	r24
    240c:	61 2f       	mov	r22, r17
    240e:	68 1b       	sub	r22, r24
    2410:	2b e4       	ldi	r18, 0x4B	; 75
    2412:	31 e0       	ldi	r19, 0x01	; 1
    2414:	40 e4       	ldi	r20, 0x40	; 64
    2416:	8e e7       	ldi	r24, 0x7E	; 126
    2418:	95 e0       	ldi	r25, 0x05	; 5
    241a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	reDrawRequired = 0;
    241e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
}
    2422:	28 96       	adiw	r28, 0x08	; 8
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	ff 90       	pop	r15
    2436:	ef 90       	pop	r14
    2438:	08 95       	ret

0000243a <nopage>:

void nopage(void){
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, "No content yet!");
    243a:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    243e:	47 5f       	subi	r20, 0xF7	; 247
    2440:	2d e9       	ldi	r18, 0x9D	; 157
    2442:	31 e0       	ldi	r19, 0x01	; 1
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	8e e7       	ldi	r24, 0x7E	; 126
    2448:	95 e0       	ldi	r25, 0x05	; 5
    244a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	selectEnable = 0;
    244e:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <selectEnable>
	reDrawRequired = 0;
    2452:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
    2456:	08 95       	ret

00002458 <ScreenOverlay>:
}


void ScreenOverlay(void){
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	28 97       	sbiw	r28, 0x08	; 8
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
	int y2 = height2/2;
	
	int width3 = width1/3 - 2;
	int height3 = height1 - 4;
	
	u8g2_DrawFrame(&u8g2, x1, y1, width1, height1);
    2474:	08 e0       	ldi	r16, 0x08	; 8
    2476:	2f e0       	ldi	r18, 0x0F	; 15
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	69 e3       	ldi	r22, 0x39	; 57
    247c:	8e e7       	ldi	r24, 0x7E	; 126
    247e:	95 e0       	ldi	r25, 0x05	; 5
    2480:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <u8g2_DrawFrame>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
    2484:	04 e0       	ldi	r16, 0x04	; 4
    2486:	23 e0       	ldi	r18, 0x03	; 3
    2488:	42 e0       	ldi	r20, 0x02	; 2
    248a:	67 e4       	ldi	r22, 0x47	; 71
    248c:	8e e7       	ldi	r24, 0x7E	; 126
    248e:	95 e0       	ldi	r25, 0x05	; 5
    2490:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <u8g2_DrawFrame>
	
	unsigned int ADCval = updateBatterySens();
    2494:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <updateBatterySens>
	if (ADCval<=256){
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	21 e0       	ldi	r18, 0x01	; 1
    249c:	92 07       	cpc	r25, r18
    249e:	68 f4       	brcc	.+26     	; 0x24ba <ScreenOverlay+0x62>
		batteryBars = 0;
    24a0:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <batteryBars+0x1>
    24a4:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <batteryBars>
    24a8:	3d c0       	rjmp	.+122    	; 0x2524 <ScreenOverlay+0xcc>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    24aa:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <batteryBars>
    24ae:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <batteryBars+0x1>
    24b2:	18 16       	cp	r1, r24
    24b4:	19 06       	cpc	r1, r25
    24b6:	04 f1       	brlt	.+64     	; 0x24f8 <ScreenOverlay+0xa0>
    24b8:	35 c0       	rjmp	.+106    	; 0x2524 <ScreenOverlay+0xcc>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
	
	unsigned int ADCval = updateBatterySens();
	if (ADCval<=256){
		batteryBars = 0;
		}else if (ADCval <= 512){
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	22 e0       	ldi	r18, 0x02	; 2
    24be:	92 07       	cpc	r25, r18
    24c0:	38 f4       	brcc	.+14     	; 0x24d0 <ScreenOverlay+0x78>
		batteryBars = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <batteryBars+0x1>
    24ca:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <batteryBars>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <ScreenOverlay+0xa0>
		}else if (ADCval <= 786){
    24d0:	83 31       	cpi	r24, 0x13	; 19
    24d2:	23 e0       	ldi	r18, 0x03	; 3
    24d4:	92 07       	cpc	r25, r18
    24d6:	38 f4       	brcc	.+14     	; 0x24e6 <ScreenOverlay+0x8e>
		batteryBars = 2;
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <batteryBars+0x1>
    24e0:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <batteryBars>
    24e4:	09 c0       	rjmp	.+18     	; 0x24f8 <ScreenOverlay+0xa0>
		}else if (ADCval <= 1024){
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	94 40       	sbci	r25, 0x04	; 4
    24ea:	f8 f6       	brcc	.-66     	; 0x24aa <ScreenOverlay+0x52>
		batteryBars = 3;
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <batteryBars+0x1>
    24f4:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <batteryBars>
	selectEnable = 0;
	reDrawRequired = 0;
}


void ScreenOverlay(void){
    24f8:	1b e3       	ldi	r17, 0x3B	; 59
    24fa:	e1 2c       	mov	r14, r1
    24fc:	f1 2c       	mov	r15, r1
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
	{
		u8g2_DrawBox(&u8g2, x1 + 2 + (width3+1) * i, y1 + 2, width3, height3);
    24fe:	04 e0       	ldi	r16, 0x04	; 4
    2500:	23 e0       	ldi	r18, 0x03	; 3
    2502:	42 e0       	ldi	r20, 0x02	; 2
    2504:	61 2f       	mov	r22, r17
    2506:	8e e7       	ldi	r24, 0x7E	; 126
    2508:	95 e0       	ldi	r25, 0x05	; 5
    250a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <u8g2_DrawBox>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    250e:	8f ef       	ldi	r24, 0xFF	; 255
    2510:	e8 1a       	sub	r14, r24
    2512:	f8 0a       	sbc	r15, r24
    2514:	1c 5f       	subi	r17, 0xFC	; 252
    2516:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <batteryBars>
    251a:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <batteryBars+0x1>
    251e:	e8 16       	cp	r14, r24
    2520:	f9 06       	cpc	r15, r25
    2522:	6c f3       	brlt	.-38     	; 0x24fe <ScreenOverlay+0xa6>
	}
	
	
	
	//Mode:
	char modeTxt[7] = "Mode: ";
    2524:	87 e0       	ldi	r24, 0x07	; 7
    2526:	ed ea       	ldi	r30, 0xAD	; 173
    2528:	f1 e0       	ldi	r31, 0x01	; 1
    252a:	de 01       	movw	r26, r28
    252c:	11 96       	adiw	r26, 0x01	; 1
    252e:	01 90       	ld	r0, Z+
    2530:	0d 92       	st	X+, r0
    2532:	8a 95       	dec	r24
    2534:	e1 f7       	brne	.-8      	; 0x252e <ScreenOverlay+0xd6>
	char modeTxthold[1];
	itoa(*(settingVal+0), modeTxthold, 10);
    2536:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <settingVal>
    253a:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <settingVal+0x1>
    253e:	4a e0       	ldi	r20, 0x0A	; 10
    2540:	be 01       	movw	r22, r28
    2542:	68 5f       	subi	r22, 0xF8	; 248
    2544:	7f 4f       	sbci	r23, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
	strcat(modeTxt, modeTxthold);
    254e:	be 01       	movw	r22, r28
    2550:	68 5f       	subi	r22, 0xF8	; 248
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	ce 01       	movw	r24, r28
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	0e 94 97 28 	call	0x512e	; 0x512e <strcat>
	
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    255c:	67 e7       	ldi	r22, 0x77	; 119
    255e:	78 e0       	ldi	r23, 0x08	; 8
    2560:	8e e7       	ldi	r24, 0x7E	; 126
    2562:	95 e0       	ldi	r25, 0x05	; 5
    2564:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, screenWidth - u8g2_GetStrWidth(&u8g2, modeTxt), textHeight-3, modeTxt);
    2568:	10 91 e3 05 	lds	r17, 0x05E3	; 0x8005e3 <textHeight>
    256c:	13 50       	subi	r17, 0x03	; 3
    256e:	be 01       	movw	r22, r28
    2570:	6f 5f       	subi	r22, 0xFF	; 255
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	8e e7       	ldi	r24, 0x7E	; 126
    2576:	95 e0       	ldi	r25, 0x05	; 5
    2578:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    257c:	60 e8       	ldi	r22, 0x80	; 128
    257e:	68 1b       	sub	r22, r24
    2580:	9e 01       	movw	r18, r28
    2582:	2f 5f       	subi	r18, 0xFF	; 255
    2584:	3f 4f       	sbci	r19, 0xFF	; 255
    2586:	41 2f       	mov	r20, r17
    2588:	8e e7       	ldi	r24, 0x7E	; 126
    258a:	95 e0       	ldi	r25, 0x05	; 5
    258c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	
	
	//Time
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    2590:	67 e7       	ldi	r22, 0x77	; 119
    2592:	78 e0       	ldi	r23, 0x08	; 8
    2594:	8e e7       	ldi	r24, 0x7E	; 126
    2596:	95 e0       	ldi	r25, 0x05	; 5
    2598:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <u8g2_SetFont>
	static char timeTxt[7] = {0,0,0,0,0,0,0};
	getTimeToChar(timeTxt, 0);
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	86 e2       	ldi	r24, 0x26	; 38
    25a2:	94 e0       	ldi	r25, 0x04	; 4
    25a4:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <getTimeToChar>
	
	u8g2_DrawStr(&u8g2, 0, textHeight-3, timeTxt);
    25a8:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    25ac:	43 50       	subi	r20, 0x03	; 3
    25ae:	26 e2       	ldi	r18, 0x26	; 38
    25b0:	34 e0       	ldi	r19, 0x04	; 4
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	8e e7       	ldi	r24, 0x7E	; 126
    25b6:	95 e0       	ldi	r25, 0x05	; 5
    25b8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	
	
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);//reset font to the main font.
    25bc:	66 e9       	ldi	r22, 0x96	; 150
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	8e e7       	ldi	r24, 0x7E	; 126
    25c2:	95 e0       	ldi	r25, 0x05	; 5
    25c4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <u8g2_SetFont>
}
    25c8:	28 96       	adiw	r28, 0x08	; 8
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	08 95       	ret

000025e2 <Page_2>:

void Page_2(void){
    25e2:	7f 92       	push	r7
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	af 92       	push	r10
    25ea:	bf 92       	push	r11
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	a8 97       	sbiw	r28, 0x28	; 40
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
	#define Lines 4
	#define digAmount 8
	
	#define startLine_Data 3
	selectEnable = 0;
    260c:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <selectEnable>
		"Direction:> ",
		"Distance:> ",
		"runTime:> "
	};
	
	int maxPrefixWidth = u8g2_GetStrWidth(&u8g2, text2[1]);
    2610:	64 eb       	ldi	r22, 0xB4	; 180
    2612:	71 e0       	ldi	r23, 0x01	; 1
    2614:	8e e7       	ldi	r24, 0x7E	; 126
    2616:	95 e0       	ldi	r25, 0x05	; 5
    2618:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    261c:	78 2e       	mov	r7, r24
	//placeholders for the data
	char d1[digAmount];
	char d2[digAmount];
	char d3[digAmount];
	char d4[digAmount];
	char *Data[Lines] = { d1, d2, d3, d4};
    261e:	be 01       	movw	r22, r28
    2620:	6f 5f       	subi	r22, 0xFF	; 255
    2622:	7f 4f       	sbci	r23, 0xFF	; 255
    2624:	7a a3       	std	Y+34, r23	; 0x22
    2626:	69 a3       	std	Y+33, r22	; 0x21
    2628:	6e 01       	movw	r12, r28
    262a:	89 e0       	ldi	r24, 0x09	; 9
    262c:	c8 0e       	add	r12, r24
    262e:	d1 1c       	adc	r13, r1
    2630:	dc a2       	std	Y+36, r13	; 0x24
    2632:	cb a2       	std	Y+35, r12	; 0x23
    2634:	7e 01       	movw	r14, r28
    2636:	e1 e1       	ldi	r30, 0x11	; 17
    2638:	ee 0e       	add	r14, r30
    263a:	f1 1c       	adc	r15, r1
    263c:	fe a2       	std	Y+38, r15	; 0x26
    263e:	ed a2       	std	Y+37, r14	; 0x25
    2640:	8e 01       	movw	r16, r28
    2642:	07 5e       	subi	r16, 0xE7	; 231
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	18 a7       	std	Y+40, r17	; 0x28
    2648:	0f a3       	std	Y+39, r16	; 0x27
		
	itoa(*speedHold, Data[0], 10);
    264a:	e0 91 6e 05 	lds	r30, 0x056E	; 0x80056e <speedHold>
    264e:	f0 91 6f 05 	lds	r31, 0x056F	; 0x80056f <speedHold+0x1>
    2652:	4a e0       	ldi	r20, 0x0A	; 10
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
	itoa(*directionHold, Data[1], 10);
    265c:	e0 91 f2 05 	lds	r30, 0x05F2	; 0x8005f2 <directionHold>
    2660:	f0 91 f3 05 	lds	r31, 0x05F3	; 0x8005f3 <directionHold+0x1>
    2664:	4a e0       	ldi	r20, 0x0A	; 10
    2666:	b6 01       	movw	r22, r12
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
	itoa(*distanceHold, Data[2], 10);
    2670:	e0 91 ee 05 	lds	r30, 0x05EE	; 0x8005ee <distanceHold>
    2674:	f0 91 ef 05 	lds	r31, 0x05EF	; 0x8005ef <distanceHold+0x1>
    2678:	4a e0       	ldi	r20, 0x0A	; 10
    267a:	b7 01       	movw	r22, r14
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
	
	//little bit of code to make a typical digital watch look for the time String
	getTimeToChar(Data[3], 1);
    2684:	61 e0       	ldi	r22, 0x01	; 1
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	c8 01       	movw	r24, r16
    268a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <getTimeToChar>
	
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    268e:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <currentChoice+0x1>
    2692:	ee 0f       	add	r30, r30
    2694:	ff 0b       	sbc	r31, r31
    2696:	ef 5d       	subi	r30, 0xDF	; 223
    2698:	fe 4f       	sbci	r31, 0xFE	; 254
    269a:	20 81       	ld	r18, Z
    269c:	31 81       	ldd	r19, Z+1	; 0x01
    269e:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    26a2:	47 5f       	subi	r20, 0xF7	; 247
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	8e e7       	ldi	r24, 0x7E	; 126
    26a8:	95 e0       	ldi	r25, 0x05	; 5
    26aa:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
    26ae:	5e 01       	movw	r10, r28
    26b0:	f1 e2       	ldi	r31, 0x21	; 33
    26b2:	af 0e       	add	r10, r31
    26b4:	b1 1c       	adc	r11, r1
    26b6:	0f 2e       	mov	r0, r31
    26b8:	f8 e5       	ldi	r31, 0x58	; 88
    26ba:	cf 2e       	mov	r12, r31
    26bc:	f2 e0       	ldi	r31, 0x02	; 2
    26be:	df 2e       	mov	r13, r31
    26c0:	f0 2d       	mov	r31, r0
    26c2:	0f 2e       	mov	r0, r31
    26c4:	f0 e5       	ldi	r31, 0x50	; 80
    26c6:	ef 2e       	mov	r14, r31
    26c8:	f2 e0       	ldi	r31, 0x02	; 2
    26ca:	ff 2e       	mov	r15, r31
    26cc:	f0 2d       	mov	r31, r0
    26ce:	13 e0       	ldi	r17, 0x03	; 3

	for (int i = 0; i < Lines; i++)
	{
		int dataWidth = u8g2_GetStrWidth(&u8g2, Data[i]);
    26d0:	f5 01       	movw	r30, r10
    26d2:	81 90       	ld	r8, Z+
    26d4:	91 90       	ld	r9, Z+
    26d6:	5f 01       	movw	r10, r30
    26d8:	b4 01       	movw	r22, r8
    26da:	8e e7       	ldi	r24, 0x7E	; 126
    26dc:	95 e0       	ldi	r25, 0x05	; 5
    26de:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    26e2:	08 2f       	mov	r16, r24
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
    26e4:	f6 01       	movw	r30, r12
    26e6:	21 91       	ld	r18, Z+
    26e8:	31 91       	ld	r19, Z+
    26ea:	6f 01       	movw	r12, r30
    26ec:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    26f0:	14 9f       	mul	r17, r20
    26f2:	40 2d       	mov	r20, r0
    26f4:	11 24       	eor	r1, r1
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	8e e7       	ldi	r24, 0x7E	; 126
    26fa:	95 e0       	ldi	r25, 0x05	; 5
    26fc:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
    2700:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    2704:	14 9f       	mul	r17, r20
    2706:	40 2d       	mov	r20, r0
    2708:	11 24       	eor	r1, r1
    270a:	94 01       	movw	r18, r8
    270c:	67 2d       	mov	r22, r7
    270e:	8e e7       	ldi	r24, 0x7E	; 126
    2710:	95 e0       	ldi	r25, 0x05	; 5
    2712:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
    2716:	f7 01       	movw	r30, r14
    2718:	21 91       	ld	r18, Z+
    271a:	31 91       	ld	r19, Z+
    271c:	7f 01       	movw	r14, r30
    271e:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    2722:	14 9f       	mul	r17, r20
    2724:	40 2d       	mov	r20, r0
    2726:	11 24       	eor	r1, r1
    2728:	60 91 5c 05 	lds	r22, 0x055C	; 0x80055c <maxCharWidth>
    272c:	66 95       	lsr	r22
    272e:	67 0d       	add	r22, r7
    2730:	60 0f       	add	r22, r16
    2732:	8e e7       	ldi	r24, 0x7E	; 126
    2734:	95 e0       	ldi	r25, 0x05	; 5
    2736:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
    273a:	1f 5f       	subi	r17, 0xFF	; 255
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);

	for (int i = 0; i < Lines; i++)
    273c:	17 30       	cpi	r17, 0x07	; 7
    273e:	41 f6       	brne	.-112    	; 0x26d0 <Page_2+0xee>
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
	}
	
	reDrawRequired = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
}
    2746:	a8 96       	adiw	r28, 0x28	; 40
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	bf 90       	pop	r11
    2764:	af 90       	pop	r10
    2766:	9f 90       	pop	r9
    2768:	8f 90       	pop	r8
    276a:	7f 90       	pop	r7
    276c:	08 95       	ret

0000276e <Page_3>:

void Page_3(void){
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	28 97       	sbiw	r28, 0x08	; 8
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 0;
    2782:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <selectEnable>
	
	char angleHolder[8];
	
	itoa(*angleHold, angleHolder, 10);
    2786:	e0 91 05 06 	lds	r30, 0x0605	; 0x800605 <angleHold>
    278a:	f0 91 06 06 	lds	r31, 0x0606	; 0x800606 <angleHold+0x1>
    278e:	4a e0       	ldi	r20, 0x0A	; 10
    2790:	be 01       	movw	r22, r28
    2792:	6f 5f       	subi	r22, 0xFF	; 255
    2794:	7f 4f       	sbci	r23, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);//the titles needs to be the same as the titles of the choices in the menu
    279e:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <currentChoice+0x1>
    27a2:	ee 0f       	add	r30, r30
    27a4:	ff 0b       	sbc	r31, r31
    27a6:	ef 5d       	subi	r30, 0xDF	; 223
    27a8:	fe 4f       	sbci	r31, 0xFE	; 254
    27aa:	20 81       	ld	r18, Z
    27ac:	31 81       	ldd	r19, Z+1	; 0x01
    27ae:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    27b2:	47 5f       	subi	r20, 0xF7	; 247
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	8e e7       	ldi	r24, 0x7E	; 126
    27b8:	95 e0       	ldi	r25, 0x05	; 5
    27ba:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, textHeight*2 + TopMargin, angleHolder);
    27be:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    27c2:	44 0f       	add	r20, r20
    27c4:	47 5f       	subi	r20, 0xF7	; 247
    27c6:	9e 01       	movw	r18, r28
    27c8:	2f 5f       	subi	r18, 0xFF	; 255
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	8e e7       	ldi	r24, 0x7E	; 126
    27d0:	95 e0       	ldi	r25, 0x05	; 5
    27d2:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
	reDrawRequired = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
}
    27dc:	28 96       	adiw	r28, 0x08	; 8
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	08 95       	ret

000027ee <Page_4>:

void Page_4(void){
	selectEnable = 0;
    27ee:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    27f2:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <currentChoice+0x1>
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 0b       	sbc	r31, r31
    27fa:	ef 5d       	subi	r30, 0xDF	; 223
    27fc:	fe 4f       	sbci	r31, 0xFE	; 254
    27fe:	20 81       	ld	r18, Z
    2800:	31 81       	ldd	r19, Z+1	; 0x01
    2802:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <textHeight>
    2806:	47 5f       	subi	r20, 0xF7	; 247
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	8e e7       	ldi	r24, 0x7E	; 126
    280c:	95 e0       	ldi	r25, 0x05	; 5
    280e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>

	reDrawRequired = 0;
    2812:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
    2816:	08 95       	ret

00002818 <Page_5>:
}

void Page_5(void){//settings
    2818:	2f 92       	push	r2
    281a:	3f 92       	push	r3
    281c:	4f 92       	push	r4
    281e:	5f 92       	push	r5
    2820:	6f 92       	push	r6
    2822:	7f 92       	push	r7
    2824:	8f 92       	push	r8
    2826:	9f 92       	push	r9
    2828:	af 92       	push	r10
    282a:	bf 92       	push	r11
    282c:	cf 92       	push	r12
    282e:	df 92       	push	r13
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	00 d0       	rcall	.+0      	; 0x283e <Page_5+0x26>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <Page_5+0x28>
    2840:	1f 92       	push	r1
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <selectEnable>
	#define selector "-> "
	

	int height = screenDiv;
	
	int x = selectorWidth;
    284c:	10 91 5c 05 	lds	r17, 0x055C	; 0x80055c <maxCharWidth>
    2850:	81 2f       	mov	r24, r17
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9c 01       	movw	r18, r24
    2856:	22 0f       	add	r18, r18
    2858:	33 1f       	adc	r19, r19
    285a:	12 2f       	mov	r17, r18
    285c:	18 0f       	add	r17, r24
	int y;
	int yStat = (height/2)+3;
    285e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <screenDiv>
    2862:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <screenDiv+0x1>
    2866:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <screenDiv+0x2>
    286a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <screenDiv+0x3>
    286e:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__fixsfsi>
    2872:	3b 01       	movw	r6, r22
    2874:	77 23       	and	r23, r23
    2876:	1c f4       	brge	.+6      	; 0x287e <Page_5+0x66>
    2878:	2f ef       	ldi	r18, 0xFF	; 255
    287a:	62 1a       	sub	r6, r18
    287c:	72 0a       	sbc	r7, r18
    287e:	75 94       	asr	r7
    2880:	67 94       	ror	r6
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	68 0e       	add	r6, r24
    2886:	71 1c       	adc	r7, r1
	height = height - Margin;
	_Bool highlightChoice = 0;
	
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
    2888:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <currentPage>
    288c:	8a ef       	ldi	r24, 0xFA	; 250
    288e:	8e 0f       	add	r24, r30
    2890:	85 30       	cpi	r24, 0x05	; 5
    2892:	30 f5       	brcc	.+76     	; 0x28e0 <Page_5+0xc8>
		selectEnable = 0;
    2894:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <selectEnable>
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
    2898:	a0 91 62 05 	lds	r26, 0x0562	; 0x800562 <currentChoice+0x5>
    289c:	aa 0f       	add	r26, r26
    289e:	bb 0b       	sbc	r27, r27
    28a0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <settingVal>
    28a4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <settingVal+0x1>
    28a8:	a8 0f       	add	r26, r24
    28aa:	b9 1f       	adc	r27, r25
    28ac:	0e 2e       	mov	r0, r30
    28ae:	00 0c       	add	r0, r0
    28b0:	ff 0b       	sbc	r31, r31
    28b2:	e3 5a       	subi	r30, 0xA3	; 163
    28b4:	fa 4f       	sbci	r31, 0xFA	; 250
    28b6:	20 81       	ld	r18, Z
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	11 97       	sbiw	r26, 0x01	; 1
    28be:	82 1b       	sub	r24, r18
    28c0:	91 09       	sbc	r25, r1
    28c2:	27 fd       	sbrc	r18, 7
    28c4:	93 95       	inc	r25
    28c6:	8d 93       	st	X+, r24
    28c8:	9c 93       	st	X, r25
		currentChoice[currentPage] = 0;
    28ca:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <currentPage>
    28ce:	0e 2e       	mov	r0, r30
    28d0:	00 0c       	add	r0, r0
    28d2:	ff 0b       	sbc	r31, r31
    28d4:	e3 5a       	subi	r30, 0xA3	; 163
    28d6:	fa 4f       	sbci	r31, 0xFA	; 250
    28d8:	10 82       	st	Z, r1
		highlightChoice = 1;
    28da:	e1 e0       	ldi	r30, 0x01	; 1
    28dc:	ed 83       	std	Y+5, r30	; 0x05
    28de:	01 c0       	rjmp	.+2      	; 0x28e2 <Page_5+0xca>
	
	int x = selectorWidth;
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	_Bool highlightChoice = 0;
    28e0:	1d 82       	std	Y+5, r1	; 0x05
    28e2:	0f 2e       	mov	r0, r31
    28e4:	f7 e1       	ldi	r31, 0x17	; 23
    28e6:	af 2e       	mov	r10, r31
    28e8:	f1 e0       	ldi	r31, 0x01	; 1
    28ea:	bf 2e       	mov	r11, r31
    28ec:	f0 2d       	mov	r31, r0
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
		selectEnable = 0;
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
    28ee:	81 2c       	mov	r8, r1
    28f0:	91 2c       	mov	r9, r1
	}
	
	for (int i = 0; i < settings; i++){
    28f2:	c1 2c       	mov	r12, r1
    28f4:	d1 2c       	mov	r13, r1
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;

		if(currentChoice[5] == i){
    28f6:	0f 2e       	mov	r0, r31
    28f8:	fd e5       	ldi	r31, 0x5D	; 93
    28fa:	4f 2e       	mov	r4, r31
    28fc:	f5 e0       	ldi	r31, 0x05	; 5
    28fe:	5f 2e       	mov	r5, r31
    2900:	f0 2d       	mov	r31, r0
			u8g2_SetDrawColor(&u8g2, 1);
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
			if(highlightChoice){
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    2902:	0f 2e       	mov	r0, r31
    2904:	fe ef       	ldi	r31, 0xFE	; 254
    2906:	3f 2e       	mov	r3, r31
    2908:	f0 2d       	mov	r31, r0
    290a:	31 0e       	add	r3, r17
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;
    290c:	20 91 e3 05 	lds	r18, 0x05E3	; 0x8005e3 <textHeight>
    2910:	2c 9d       	mul	r18, r12
    2912:	c0 01       	movw	r24, r0
    2914:	2d 9d       	mul	r18, r13
    2916:	90 0d       	add	r25, r0
    2918:	11 24       	eor	r1, r1
    291a:	7c 01       	movw	r14, r24
    291c:	f9 e0       	ldi	r31, 0x09	; 9
    291e:	ef 0e       	add	r14, r31
    2920:	f1 1c       	adc	r15, r1

		if(currentChoice[5] == i){
    2922:	f2 01       	movw	r30, r4
    2924:	85 81       	ldd	r24, Z+5	; 0x05
    2926:	08 2e       	mov	r0, r24
    2928:	00 0c       	add	r0, r0
    292a:	99 0b       	sbc	r25, r25
    292c:	8c 15       	cp	r24, r12
    292e:	9d 05       	cpc	r25, r13
    2930:	09 f0       	breq	.+2      	; 0x2934 <Page_5+0x11c>
    2932:	6c c0       	rjmp	.+216    	; 0x2a0c <Page_5+0x1f4>
			
			u8g2_SetDrawColor(&u8g2, 1);
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	8e e7       	ldi	r24, 0x7E	; 126
    2938:	95 e0       	ldi	r25, 0x05	; 5
    293a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
    293e:	2e 2c       	mov	r2, r14
    2940:	26 0c       	add	r2, r6
    2942:	21 ec       	ldi	r18, 0xC1	; 193
    2944:	31 e0       	ldi	r19, 0x01	; 1
    2946:	42 2d       	mov	r20, r2
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	8e e7       	ldi	r24, 0x7E	; 126
    294c:	95 e0       	ldi	r25, 0x05	; 5
    294e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
			if(highlightChoice){
    2952:	fd 81       	ldd	r31, Y+5	; 0x05
    2954:	ff 23       	and	r31, r31
    2956:	89 f1       	breq	.+98     	; 0x29ba <Page_5+0x1a2>
				u8g2_SetDrawColor(&u8g2, 1);
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	8e e7       	ldi	r24, 0x7E	; 126
    295c:	95 e0       	ldi	r25, 0x05	; 5
    295e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    2962:	00 91 e3 05 	lds	r16, 0x05E3	; 0x8005e3 <textHeight>
    2966:	0f 5f       	subi	r16, 0xFF	; 255
    2968:	f5 01       	movw	r30, r10
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	8e e7       	ldi	r24, 0x7E	; 126
    2970:	95 e0       	ldi	r25, 0x05	; 5
    2972:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    2976:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <textHeight>
    297a:	42 2d       	mov	r20, r2
    297c:	49 1b       	sub	r20, r25
    297e:	4f 5f       	subi	r20, 0xFF	; 255
    2980:	68 94       	set
    2982:	ee 24       	eor	r14, r14
    2984:	e1 f8       	bld	r14, 1
    2986:	28 2f       	mov	r18, r24
    2988:	63 2d       	mov	r22, r3
    298a:	8e e7       	ldi	r24, 0x7E	; 126
    298c:	95 e0       	ldi	r25, 0x05	; 5
    298e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <u8g2_DrawRBox>
				u8g2_SetDrawColor(&u8g2, 0);
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	8e e7       	ldi	r24, 0x7E	; 126
    2996:	95 e0       	ldi	r25, 0x05	; 5
    2998:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    299c:	f5 01       	movw	r30, r10
    299e:	20 81       	ld	r18, Z
    29a0:	31 81       	ldd	r19, Z+1	; 0x01
    29a2:	42 2d       	mov	r20, r2
    29a4:	61 2f       	mov	r22, r17
    29a6:	8e e7       	ldi	r24, 0x7E	; 126
    29a8:	95 e0       	ldi	r25, 0x05	; 5
    29aa:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
				u8g2_SetDrawColor(&u8g2, 1);
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	8e e7       	ldi	r24, 0x7E	; 126
    29b2:	95 e0       	ldi	r25, 0x05	; 5
    29b4:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <u8g2_SetDrawColor>
    29b8:	09 c0       	rjmp	.+18     	; 0x29cc <Page_5+0x1b4>
				}else{
				
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    29ba:	f5 01       	movw	r30, r10
    29bc:	20 81       	ld	r18, Z
    29be:	31 81       	ldd	r19, Z+1	; 0x01
    29c0:	42 2d       	mov	r20, r2
    29c2:	61 2f       	mov	r22, r17
    29c4:	8e e7       	ldi	r24, 0x7E	; 126
    29c6:	95 e0       	ldi	r25, 0x05	; 5
    29c8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
			}
			
			
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    29cc:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <settingVal>
    29d0:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <settingVal+0x1>
    29d4:	e8 0d       	add	r30, r8
    29d6:	f9 1d       	adc	r31, r9
    29d8:	4a e0       	ldi	r20, 0x0A	; 10
    29da:	be 01       	movw	r22, r28
    29dc:	6f 5f       	subi	r22, 0xFF	; 255
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    29e8:	f5 01       	movw	r30, r10
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	8e e7       	ldi	r24, 0x7E	; 126
    29f0:	95 e0       	ldi	r25, 0x05	; 5
    29f2:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    29f6:	68 2f       	mov	r22, r24
    29f8:	61 0f       	add	r22, r17
    29fa:	9e 01       	movw	r18, r28
    29fc:	2f 5f       	subi	r18, 0xFF	; 255
    29fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2a00:	42 2d       	mov	r20, r2
    2a02:	8e e7       	ldi	r24, 0x7E	; 126
    2a04:	95 e0       	ldi	r25, 0x05	; 5
    2a06:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
    2a0a:	2a c0       	rjmp	.+84     	; 0x2a60 <Page_5+0x248>
			}else{
			u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2a0c:	0e 2d       	mov	r16, r14
    2a0e:	06 0d       	add	r16, r6
    2a10:	f5 01       	movw	r30, r10
    2a12:	20 81       	ld	r18, Z
    2a14:	31 81       	ldd	r19, Z+1	; 0x01
    2a16:	40 2f       	mov	r20, r16
    2a18:	61 2f       	mov	r22, r17
    2a1a:	8e e7       	ldi	r24, 0x7E	; 126
    2a1c:	95 e0       	ldi	r25, 0x05	; 5
    2a1e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    2a22:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <settingVal>
    2a26:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <settingVal+0x1>
    2a2a:	e8 0d       	add	r30, r8
    2a2c:	f9 1d       	adc	r31, r9
    2a2e:	4a e0       	ldi	r20, 0x0A	; 10
    2a30:	be 01       	movw	r22, r28
    2a32:	6f 5f       	subi	r22, 0xFF	; 255
    2a34:	7f 4f       	sbci	r23, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    2a3e:	f5 01       	movw	r30, r10
    2a40:	60 81       	ld	r22, Z
    2a42:	71 81       	ldd	r23, Z+1	; 0x01
    2a44:	8e e7       	ldi	r24, 0x7E	; 126
    2a46:	95 e0       	ldi	r25, 0x05	; 5
    2a48:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <u8g2_GetStrWidth>
    2a4c:	61 2f       	mov	r22, r17
    2a4e:	68 0f       	add	r22, r24
    2a50:	9e 01       	movw	r18, r28
    2a52:	2f 5f       	subi	r18, 0xFF	; 255
    2a54:	3f 4f       	sbci	r19, 0xFF	; 255
    2a56:	40 2f       	mov	r20, r16
    2a58:	8e e7       	ldi	r24, 0x7E	; 126
    2a5a:	95 e0       	ldi	r25, 0x05	; 5
    2a5c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <u8g2_DrawStr>
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
    2a60:	ff ef       	ldi	r31, 0xFF	; 255
    2a62:	cf 1a       	sub	r12, r31
    2a64:	df 0a       	sbc	r13, r31
    2a66:	22 e0       	ldi	r18, 0x02	; 2
    2a68:	82 0e       	add	r8, r18
    2a6a:	91 1c       	adc	r9, r1
    2a6c:	82 e0       	ldi	r24, 0x02	; 2
    2a6e:	a8 0e       	add	r10, r24
    2a70:	b1 1c       	adc	r11, r1
    2a72:	e5 e0       	ldi	r30, 0x05	; 5
    2a74:	ce 16       	cp	r12, r30
    2a76:	d1 04       	cpc	r13, r1
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <Page_5+0x264>
    2a7a:	48 cf       	rjmp	.-368    	; 0x290c <Page_5+0xf4>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
		}
	}


	reDrawRequired = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	bf 90       	pop	r11
    2a9e:	af 90       	pop	r10
    2aa0:	9f 90       	pop	r9
    2aa2:	8f 90       	pop	r8
    2aa4:	7f 90       	pop	r7
    2aa6:	6f 90       	pop	r6
    2aa8:	5f 90       	pop	r5
    2aaa:	4f 90       	pop	r4
    2aac:	3f 90       	pop	r3
    2aae:	2f 90       	pop	r2
    2ab0:	08 95       	ret

00002ab2 <draw>:
		}
	}
}

void draw(void){
	switch(currentPage){
    2ab2:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <currentPage>
    2ab6:	82 30       	cpi	r24, 0x02	; 2
    2ab8:	e9 f0       	breq	.+58     	; 0x2af4 <draw+0x42>
    2aba:	2c f4       	brge	.+10     	; 0x2ac6 <draw+0x14>
    2abc:	88 23       	and	r24, r24
    2abe:	41 f0       	breq	.+16     	; 0x2ad0 <draw+0x1e>
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	49 f0       	breq	.+18     	; 0x2ad6 <draw+0x24>
    2ac4:	26 c0       	rjmp	.+76     	; 0x2b12 <draw+0x60>
    2ac6:	83 30       	cpi	r24, 0x03	; 3
    2ac8:	d1 f0       	breq	.+52     	; 0x2afe <draw+0x4c>
    2aca:	84 30       	cpi	r24, 0x04	; 4
    2acc:	e9 f0       	breq	.+58     	; 0x2b08 <draw+0x56>
    2ace:	21 c0       	rjmp	.+66     	; 0x2b12 <draw+0x60>
		case 0:// page 0 start
		StartPage();
    2ad0:	0e 94 bc 11 	call	0x2378	; 0x2378 <StartPage>
		break;//end page0
    2ad4:	08 95       	ret
		
		case 1://page 1 menu
		ScreenOverlay();//remove this if you don't want the overlay
    2ad6:	0e 94 2c 12 	call	0x2458	; 0x2458 <ScreenOverlay>
		
		switch (MenuAnim)//for switching between menu animations
    2ada:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <MenuAnim>
    2ade:	88 23       	and	r24, r24
    2ae0:	19 f0       	breq	.+6      	; 0x2ae8 <draw+0x36>
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	21 f0       	breq	.+8      	; 0x2aee <draw+0x3c>
    2ae6:	08 95       	ret
		{
			case 0://animation 0
			MenuStyle0();
    2ae8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <MenuStyle0>
			break;//end animation 0
    2aec:	08 95       	ret
			
			case 1://animation 1
			MenuStyle1();
    2aee:	0e 94 83 10 	call	0x2106	; 0x2106 <MenuStyle1>
			break;//end animation 1
    2af2:	08 95       	ret
		}
		break;//end page 1
		
		case 2:
		ScreenOverlay();
    2af4:	0e 94 2c 12 	call	0x2458	; 0x2458 <ScreenOverlay>
		Page_2();
    2af8:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <Page_2>
		break;
    2afc:	08 95       	ret

		case 3:
		ScreenOverlay();
    2afe:	0e 94 2c 12 	call	0x2458	; 0x2458 <ScreenOverlay>
		Page_3();
    2b02:	0e 94 b7 13 	call	0x276e	; 0x276e <Page_3>
		break;
    2b06:	08 95       	ret
		
		case 4:
		ScreenOverlay();
    2b08:	0e 94 2c 12 	call	0x2458	; 0x2458 <ScreenOverlay>
		Page_4();
    2b0c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <Page_4>
		break;
    2b10:	08 95       	ret
		
		default:
		if (currentPage >= SETTINGPAGE && currentPage <= SETTINGPAGE + settings){
    2b12:	85 50       	subi	r24, 0x05	; 5
    2b14:	86 30       	cpi	r24, 0x06	; 6
    2b16:	28 f4       	brcc	.+10     	; 0x2b22 <draw+0x70>
			ScreenOverlay();
    2b18:	0e 94 2c 12 	call	0x2458	; 0x2458 <ScreenOverlay>
			Page_5();
    2b1c:	0e 94 0c 14 	call	0x2818	; 0x2818 <Page_5>
    2b20:	08 95       	ret
			}else{
			nopage();
    2b22:	0e 94 1d 12 	call	0x243a	; 0x243a <nopage>
    2b26:	08 95       	ret

00002b28 <screenRoutine>:

	return ADCval;
}
//--------------------------------------
void screenRoutine(void){
	updateButtons();
    2b28:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <updateButtons>
	updateBatterySens();
    2b2c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <updateBatterySens>
	if (reDrawRequired || reDrawRequiredTime)
    2b30:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <reDrawRequired>
    2b34:	81 11       	cpse	r24, r1
    2b36:	04 c0       	rjmp	.+8      	; 0x2b40 <screenRoutine+0x18>
    2b38:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <reDrawRequiredTime>
    2b3c:	88 23       	and	r24, r24
    2b3e:	89 f0       	breq	.+34     	; 0x2b62 <screenRoutine+0x3a>
	{
		reDrawRequired = 1;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		u8g2_ClearBuffer(&u8g2);
		draw();
		u8g2_SendBuffer(&u8g2);
		
*/
		u8g2_FirstPage(&u8g2);
    2b46:	8e e7       	ldi	r24, 0x7E	; 126
    2b48:	95 e0       	ldi	r25, 0x05	; 5
    2b4a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <u8g2_FirstPage>
		do{
		draw();
    2b4e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <draw>
		}while(u8g2_NextPage(&u8g2));
    2b52:	8e e7       	ldi	r24, 0x7E	; 126
    2b54:	95 e0       	ldi	r25, 0x05	; 5
    2b56:	0e 94 0b 18 	call	0x3016	; 0x3016 <u8g2_NextPage>
    2b5a:	81 11       	cpse	r24, r1
    2b5c:	f8 cf       	rjmp	.-16     	; 0x2b4e <screenRoutine+0x26>
		
		
		reDrawRequiredTime = 0;
    2b5e:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <reDrawRequiredTime>
    2b62:	08 95       	ret

00002b64 <i2c_init>:
    2b64:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2b68:	88 e4       	ldi	r24, 0x48	; 72
    2b6a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2b6e:	08 95       	ret

00002b70 <i2c_start_wait>:
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	ec eb       	ldi	r30, 0xBC	; 188
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	44 ea       	ldi	r20, 0xA4	; 164
    2b7a:	a9 eb       	ldi	r26, 0xB9	; 185
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	cb eb       	ldi	r28, 0xBB	; 187
    2b80:	d0 e0       	ldi	r29, 0x00	; 0
    2b82:	54 e8       	ldi	r21, 0x84	; 132
    2b84:	64 e9       	ldi	r22, 0x94	; 148
    2b86:	40 83       	st	Z, r20
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	90 81       	ld	r25, Z
    2b8e:	99 23       	and	r25, r25
    2b90:	34 f0       	brlt	.+12     	; 0x2b9e <i2c_start_wait+0x2e>
    2b92:	2f 5f       	subi	r18, 0xFF	; 255
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
    2b96:	21 15       	cp	r18, r1
    2b98:	91 e0       	ldi	r25, 0x01	; 1
    2b9a:	39 07       	cpc	r19, r25
    2b9c:	b9 f7       	brne	.-18     	; 0x2b8c <i2c_start_wait+0x1c>
    2b9e:	9c 91       	ld	r25, X
    2ba0:	98 7f       	andi	r25, 0xF8	; 248
    2ba2:	98 30       	cpi	r25, 0x08	; 8
    2ba4:	11 f0       	breq	.+4      	; 0x2baa <i2c_start_wait+0x3a>
    2ba6:	90 31       	cpi	r25, 0x10	; 16
    2ba8:	71 f7       	brne	.-36     	; 0x2b86 <i2c_start_wait+0x16>
    2baa:	88 83       	st	Y, r24
    2bac:	50 83       	st	Z, r21
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	90 81       	ld	r25, Z
    2bb4:	99 23       	and	r25, r25
    2bb6:	34 f0       	brlt	.+12     	; 0x2bc4 <i2c_start_wait+0x54>
    2bb8:	2f 5f       	subi	r18, 0xFF	; 255
    2bba:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbc:	21 15       	cp	r18, r1
    2bbe:	91 e0       	ldi	r25, 0x01	; 1
    2bc0:	39 07       	cpc	r19, r25
    2bc2:	b9 f7       	brne	.-18     	; 0x2bb2 <i2c_start_wait+0x42>
    2bc4:	9c 91       	ld	r25, X
    2bc6:	98 7f       	andi	r25, 0xF8	; 248
    2bc8:	90 32       	cpi	r25, 0x20	; 32
    2bca:	11 f0       	breq	.+4      	; 0x2bd0 <i2c_start_wait+0x60>
    2bcc:	98 35       	cpi	r25, 0x58	; 88
    2bce:	69 f4       	brne	.+26     	; 0x2bea <i2c_start_wait+0x7a>
    2bd0:	60 83       	st	Z, r22
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	90 81       	ld	r25, Z
    2bd8:	94 ff       	sbrs	r25, 4
    2bda:	d5 cf       	rjmp	.-86     	; 0x2b86 <i2c_start_wait+0x16>
    2bdc:	2f 5f       	subi	r18, 0xFF	; 255
    2bde:	3f 4f       	sbci	r19, 0xFF	; 255
    2be0:	21 15       	cp	r18, r1
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	39 07       	cpc	r19, r25
    2be6:	b9 f7       	brne	.-18     	; 0x2bd6 <i2c_start_wait+0x66>
    2be8:	ce cf       	rjmp	.-100    	; 0x2b86 <i2c_start_wait+0x16>
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <i2c_stop>:
    2bf0:	84 e9       	ldi	r24, 0x94	; 148
    2bf2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	ec eb       	ldi	r30, 0xBC	; 188
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	20 81       	ld	r18, Z
    2c00:	24 ff       	sbrs	r18, 4
    2c02:	05 c0       	rjmp	.+10     	; 0x2c0e <i2c_stop+0x1e>
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	81 15       	cp	r24, r1
    2c08:	21 e0       	ldi	r18, 0x01	; 1
    2c0a:	92 07       	cpc	r25, r18
    2c0c:	c1 f7       	brne	.-16     	; 0x2bfe <i2c_stop+0xe>
    2c0e:	08 95       	ret

00002c10 <i2c_write>:
    2c10:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c14:	84 e8       	ldi	r24, 0x84	; 132
    2c16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2c1a:	8f ef       	ldi	r24, 0xFF	; 255
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e0       	ldi	r26, 0x00	; 0
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	ec eb       	ldi	r30, 0xBC	; 188
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	20 81       	ld	r18, Z
    2c28:	22 23       	and	r18, r18
    2c2a:	2c f0       	brlt	.+10     	; 0x2c36 <i2c_write+0x26>
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	a1 09       	sbc	r26, r1
    2c30:	b1 09       	sbc	r27, r1
    2c32:	c8 f7       	brcc	.-14     	; 0x2c26 <i2c_write+0x16>
    2c34:	04 c0       	rjmp	.+8      	; 0x2c3e <i2c_write+0x2e>
    2c36:	89 2b       	or	r24, r25
    2c38:	8a 2b       	or	r24, r26
    2c3a:	8b 2b       	or	r24, r27
    2c3c:	41 f0       	breq	.+16     	; 0x2c4e <i2c_write+0x3e>
    2c3e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2c42:	98 7f       	andi	r25, 0xF8	; 248
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	98 32       	cpi	r25, 0x28	; 40
    2c48:	19 f4       	brne	.+6      	; 0x2c50 <i2c_write+0x40>
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	08 95       	ret
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	08 95       	ret

00002c52 <u8g2_DrawBox>:
    2c52:	df 92       	push	r13
    2c54:	ef 92       	push	r14
    2c56:	ff 92       	push	r15
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	7c 01       	movw	r14, r24
    2c62:	16 2f       	mov	r17, r22
    2c64:	c4 2f       	mov	r28, r20
    2c66:	d2 2e       	mov	r13, r18
    2c68:	d0 2f       	mov	r29, r16
    2c6a:	04 2f       	mov	r16, r20
    2c6c:	0d 0f       	add	r16, r29
    2c6e:	26 2f       	mov	r18, r22
    2c70:	2d 0d       	add	r18, r13
    2c72:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    2c76:	88 23       	and	r24, r24
    2c78:	61 f0       	breq	.+24     	; 0x2c92 <u8g2_DrawBox+0x40>
    2c7a:	dd 23       	and	r29, r29
    2c7c:	51 f0       	breq	.+20     	; 0x2c92 <u8g2_DrawBox+0x40>
    2c7e:	00 e0       	ldi	r16, 0x00	; 0
    2c80:	2d 2d       	mov	r18, r13
    2c82:	4c 2f       	mov	r20, r28
    2c84:	61 2f       	mov	r22, r17
    2c86:	c7 01       	movw	r24, r14
    2c88:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    2c8c:	cf 5f       	subi	r28, 0xFF	; 255
    2c8e:	d1 50       	subi	r29, 0x01	; 1
    2c90:	b1 f7       	brne	.-20     	; 0x2c7e <u8g2_DrawBox+0x2c>
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	08 95       	ret

00002ca2 <u8g2_DrawFrame>:
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	7c 01       	movw	r14, r24
    2cb4:	d6 2f       	mov	r29, r22
    2cb6:	c4 2f       	mov	r28, r20
    2cb8:	d2 2e       	mov	r13, r18
    2cba:	10 2f       	mov	r17, r16
    2cbc:	c6 2e       	mov	r12, r22
    2cbe:	c2 0e       	add	r12, r18
    2cc0:	04 2f       	mov	r16, r20
    2cc2:	01 0f       	add	r16, r17
    2cc4:	2c 2d       	mov	r18, r12
    2cc6:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    2cca:	88 23       	and	r24, r24
    2ccc:	19 f1       	breq	.+70     	; 0x2d14 <u8g2_DrawFrame+0x72>
    2cce:	00 e0       	ldi	r16, 0x00	; 0
    2cd0:	2d 2d       	mov	r18, r13
    2cd2:	4c 2f       	mov	r20, r28
    2cd4:	6d 2f       	mov	r22, r29
    2cd6:	c7 01       	movw	r24, r14
    2cd8:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    2cdc:	12 30       	cpi	r17, 0x02	; 2
    2cde:	d0 f0       	brcs	.+52     	; 0x2d14 <u8g2_DrawFrame+0x72>
    2ce0:	12 50       	subi	r17, 0x02	; 2
    2ce2:	cf 5f       	subi	r28, 0xFF	; 255
    2ce4:	11 23       	and	r17, r17
    2ce6:	79 f0       	breq	.+30     	; 0x2d06 <u8g2_DrawFrame+0x64>
    2ce8:	01 e0       	ldi	r16, 0x01	; 1
    2cea:	21 2f       	mov	r18, r17
    2cec:	4c 2f       	mov	r20, r28
    2cee:	6d 2f       	mov	r22, r29
    2cf0:	c7 01       	movw	r24, r14
    2cf2:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    2cf6:	6f ef       	ldi	r22, 0xFF	; 255
    2cf8:	6c 0d       	add	r22, r12
    2cfa:	21 2f       	mov	r18, r17
    2cfc:	4c 2f       	mov	r20, r28
    2cfe:	c7 01       	movw	r24, r14
    2d00:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    2d04:	c1 0f       	add	r28, r17
    2d06:	00 e0       	ldi	r16, 0x00	; 0
    2d08:	2d 2d       	mov	r18, r13
    2d0a:	4c 2f       	mov	r20, r28
    2d0c:	6d 2f       	mov	r22, r29
    2d0e:	c7 01       	movw	r24, r14
    2d10:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	df 90       	pop	r13
    2d22:	cf 90       	pop	r12
    2d24:	08 95       	ret

00002d26 <u8g2_DrawRBox>:
    2d26:	7f 92       	push	r7
    2d28:	8f 92       	push	r8
    2d2a:	9f 92       	push	r9
    2d2c:	af 92       	push	r10
    2d2e:	bf 92       	push	r11
    2d30:	cf 92       	push	r12
    2d32:	df 92       	push	r13
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	6c 01       	movw	r12, r24
    2d42:	16 2f       	mov	r17, r22
    2d44:	f4 2e       	mov	r15, r20
    2d46:	b2 2e       	mov	r11, r18
    2d48:	c0 2f       	mov	r28, r16
    2d4a:	a4 2e       	mov	r10, r20
    2d4c:	a0 0e       	add	r10, r16
    2d4e:	d6 2f       	mov	r29, r22
    2d50:	d2 0f       	add	r29, r18
    2d52:	0a 2d       	mov	r16, r10
    2d54:	2d 2f       	mov	r18, r29
    2d56:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    2d5a:	88 23       	and	r24, r24
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <u8g2_DrawRBox+0x3a>
    2d5e:	49 c0       	rjmp	.+146    	; 0x2df2 <u8g2_DrawRBox+0xcc>
    2d60:	81 2e       	mov	r8, r17
    2d62:	8e 0c       	add	r8, r14
    2d64:	9f 2c       	mov	r9, r15
    2d66:	9e 0c       	add	r9, r14
    2d68:	8e 2d       	mov	r24, r14
    2d6a:	80 95       	com	r24
    2d6c:	d8 0f       	add	r29, r24
    2d6e:	a8 0e       	add	r10, r24
    2d70:	02 e0       	ldi	r16, 0x02	; 2
    2d72:	2e 2d       	mov	r18, r14
    2d74:	49 2d       	mov	r20, r9
    2d76:	68 2d       	mov	r22, r8
    2d78:	c6 01       	movw	r24, r12
    2d7a:	0e 94 32 19 	call	0x3264	; 0x3264 <u8g2_DrawDisc>
    2d7e:	01 e0       	ldi	r16, 0x01	; 1
    2d80:	2e 2d       	mov	r18, r14
    2d82:	49 2d       	mov	r20, r9
    2d84:	6d 2f       	mov	r22, r29
    2d86:	c6 01       	movw	r24, r12
    2d88:	0e 94 32 19 	call	0x3264	; 0x3264 <u8g2_DrawDisc>
    2d8c:	04 e0       	ldi	r16, 0x04	; 4
    2d8e:	2e 2d       	mov	r18, r14
    2d90:	4a 2d       	mov	r20, r10
    2d92:	68 2d       	mov	r22, r8
    2d94:	c6 01       	movw	r24, r12
    2d96:	0e 94 32 19 	call	0x3264	; 0x3264 <u8g2_DrawDisc>
    2d9a:	08 e0       	ldi	r16, 0x08	; 8
    2d9c:	2e 2d       	mov	r18, r14
    2d9e:	4a 2d       	mov	r20, r10
    2da0:	6d 2f       	mov	r22, r29
    2da2:	c6 01       	movw	r24, r12
    2da4:	0e 94 32 19 	call	0x3264	; 0x3264 <u8g2_DrawDisc>
    2da8:	2b 2d       	mov	r18, r11
    2daa:	2e 19       	sub	r18, r14
    2dac:	2e 19       	sub	r18, r14
    2dae:	23 30       	cpi	r18, 0x03	; 3
    2db0:	98 f0       	brcs	.+38     	; 0x2dd8 <u8g2_DrawRBox+0xb2>
    2db2:	83 94       	inc	r8
    2db4:	de ef       	ldi	r29, 0xFE	; 254
    2db6:	d2 0f       	add	r29, r18
    2db8:	77 24       	eor	r7, r7
    2dba:	73 94       	inc	r7
    2dbc:	7e 0c       	add	r7, r14
    2dbe:	07 2d       	mov	r16, r7
    2dc0:	2d 2f       	mov	r18, r29
    2dc2:	4f 2d       	mov	r20, r15
    2dc4:	68 2d       	mov	r22, r8
    2dc6:	c6 01       	movw	r24, r12
    2dc8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <u8g2_DrawBox>
    2dcc:	2d 2f       	mov	r18, r29
    2dce:	4a 2d       	mov	r20, r10
    2dd0:	68 2d       	mov	r22, r8
    2dd2:	c6 01       	movw	r24, r12
    2dd4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <u8g2_DrawBox>
    2dd8:	ce 19       	sub	r28, r14
    2dda:	ce 19       	sub	r28, r14
    2ddc:	c3 30       	cpi	r28, 0x03	; 3
    2dde:	48 f0       	brcs	.+18     	; 0x2df2 <u8g2_DrawRBox+0xcc>
    2de0:	0e ef       	ldi	r16, 0xFE	; 254
    2de2:	0c 0f       	add	r16, r28
    2de4:	41 e0       	ldi	r20, 0x01	; 1
    2de6:	49 0d       	add	r20, r9
    2de8:	2b 2d       	mov	r18, r11
    2dea:	61 2f       	mov	r22, r17
    2dec:	c6 01       	movw	r24, r12
    2dee:	0e 94 29 16 	call	0x2c52	; 0x2c52 <u8g2_DrawBox>
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	bf 90       	pop	r11
    2e04:	af 90       	pop	r10
    2e06:	9f 90       	pop	r9
    2e08:	8f 90       	pop	r8
    2e0a:	7f 90       	pop	r7
    2e0c:	08 95       	ret

00002e0e <u8g2_DrawRFrame>:
    2e0e:	8f 92       	push	r8
    2e10:	9f 92       	push	r9
    2e12:	af 92       	push	r10
    2e14:	bf 92       	push	r11
    2e16:	cf 92       	push	r12
    2e18:	df 92       	push	r13
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	ec 01       	movw	r28, r24
    2e28:	16 2f       	mov	r17, r22
    2e2a:	f4 2e       	mov	r15, r20
    2e2c:	c2 2e       	mov	r12, r18
    2e2e:	b0 2e       	mov	r11, r16
    2e30:	a4 2e       	mov	r10, r20
    2e32:	a0 0e       	add	r10, r16
    2e34:	d6 2e       	mov	r13, r22
    2e36:	d2 0e       	add	r13, r18
    2e38:	0a 2d       	mov	r16, r10
    2e3a:	2d 2d       	mov	r18, r13
    2e3c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    2e40:	88 23       	and	r24, r24
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <u8g2_DrawRFrame+0x38>
    2e44:	52 c0       	rjmp	.+164    	; 0x2eea <u8g2_DrawRFrame+0xdc>
    2e46:	81 2e       	mov	r8, r17
    2e48:	8e 0c       	add	r8, r14
    2e4a:	9f 2c       	mov	r9, r15
    2e4c:	9e 0c       	add	r9, r14
    2e4e:	8e 2d       	mov	r24, r14
    2e50:	80 95       	com	r24
    2e52:	d8 0e       	add	r13, r24
    2e54:	a8 0e       	add	r10, r24
    2e56:	02 e0       	ldi	r16, 0x02	; 2
    2e58:	2e 2d       	mov	r18, r14
    2e5a:	49 2d       	mov	r20, r9
    2e5c:	68 2d       	mov	r22, r8
    2e5e:	ce 01       	movw	r24, r28
    2e60:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <u8g2_DrawCircle>
    2e64:	01 e0       	ldi	r16, 0x01	; 1
    2e66:	2e 2d       	mov	r18, r14
    2e68:	49 2d       	mov	r20, r9
    2e6a:	6d 2d       	mov	r22, r13
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <u8g2_DrawCircle>
    2e72:	04 e0       	ldi	r16, 0x04	; 4
    2e74:	2e 2d       	mov	r18, r14
    2e76:	4a 2d       	mov	r20, r10
    2e78:	68 2d       	mov	r22, r8
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <u8g2_DrawCircle>
    2e80:	08 e0       	ldi	r16, 0x08	; 8
    2e82:	2e 2d       	mov	r18, r14
    2e84:	4a 2d       	mov	r20, r10
    2e86:	6d 2d       	mov	r22, r13
    2e88:	ce 01       	movw	r24, r28
    2e8a:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <u8g2_DrawCircle>
    2e8e:	2c 2d       	mov	r18, r12
    2e90:	2e 19       	sub	r18, r14
    2e92:	2e 19       	sub	r18, r14
    2e94:	0b 2d       	mov	r16, r11
    2e96:	0e 19       	sub	r16, r14
    2e98:	0e 19       	sub	r16, r14
    2e9a:	23 30       	cpi	r18, 0x03	; 3
    2e9c:	a0 f0       	brcs	.+40     	; 0x2ec6 <u8g2_DrawRFrame+0xb8>
    2e9e:	83 94       	inc	r8
    2ea0:	0f 2e       	mov	r0, r31
    2ea2:	fe ef       	ldi	r31, 0xFE	; 254
    2ea4:	ef 2e       	mov	r14, r31
    2ea6:	f0 2d       	mov	r31, r0
    2ea8:	e2 0e       	add	r14, r18
    2eaa:	2e 2d       	mov	r18, r14
    2eac:	4f 2d       	mov	r20, r15
    2eae:	68 2d       	mov	r22, r8
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <u8g2_DrawHLine>
    2eb6:	4f ef       	ldi	r20, 0xFF	; 255
    2eb8:	4b 0d       	add	r20, r11
    2eba:	4f 0d       	add	r20, r15
    2ebc:	2e 2d       	mov	r18, r14
    2ebe:	68 2d       	mov	r22, r8
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <u8g2_DrawHLine>
    2ec6:	03 30       	cpi	r16, 0x03	; 3
    2ec8:	80 f0       	brcs	.+32     	; 0x2eea <u8g2_DrawRFrame+0xdc>
    2eca:	93 94       	inc	r9
    2ecc:	02 50       	subi	r16, 0x02	; 2
    2ece:	20 2f       	mov	r18, r16
    2ed0:	49 2d       	mov	r20, r9
    2ed2:	61 2f       	mov	r22, r17
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    2eda:	6f ef       	ldi	r22, 0xFF	; 255
    2edc:	6c 0d       	add	r22, r12
    2ede:	61 0f       	add	r22, r17
    2ee0:	20 2f       	mov	r18, r16
    2ee2:	49 2d       	mov	r20, r9
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	bf 90       	pop	r11
    2efc:	af 90       	pop	r10
    2efe:	9f 90       	pop	r9
    2f00:	8f 90       	pop	r8
    2f02:	08 95       	ret

00002f04 <u8g2_send_buffer>:
    2f04:	af 92       	push	r10
    2f06:	bf 92       	push	r11
    2f08:	cf 92       	push	r12
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	7c 01       	movw	r14, r24
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	94 96       	adiw	r26, 0x24	; 36
    2f1e:	bc 90       	ld	r11, X
    2f20:	94 97       	sbiw	r26, 0x24	; 36
    2f22:	95 96       	adiw	r26, 0x25	; 37
    2f24:	dc 91       	ld	r29, X
    2f26:	95 97       	sbiw	r26, 0x25	; 37
    2f28:	ed 91       	ld	r30, X+
    2f2a:	fc 91       	ld	r31, X
    2f2c:	a1 88       	ldd	r10, Z+17	; 0x11
    2f2e:	cd 2f       	mov	r28, r29
    2f30:	c1 2c       	mov	r12, r1
    2f32:	d1 2c       	mov	r13, r1
    2f34:	d7 01       	movw	r26, r14
    2f36:	ed 91       	ld	r30, X+
    2f38:	fc 91       	ld	r31, X
    2f3a:	11 97       	sbiw	r26, 0x01	; 1
    2f3c:	20 89       	ldd	r18, Z+16	; 0x10
    2f3e:	92 96       	adiw	r26, 0x22	; 34
    2f40:	0d 91       	ld	r16, X+
    2f42:	1c 91       	ld	r17, X
    2f44:	93 97       	sbiw	r26, 0x23	; 35
    2f46:	42 2f       	mov	r20, r18
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	44 0f       	add	r20, r20
    2f4c:	55 1f       	adc	r21, r21
    2f4e:	44 0f       	add	r20, r20
    2f50:	55 1f       	adc	r21, r21
    2f52:	44 0f       	add	r20, r20
    2f54:	55 1f       	adc	r21, r21
    2f56:	4c 9d       	mul	r20, r12
    2f58:	c0 01       	movw	r24, r0
    2f5a:	4d 9d       	mul	r20, r13
    2f5c:	90 0d       	add	r25, r0
    2f5e:	5c 9d       	mul	r21, r12
    2f60:	90 0d       	add	r25, r0
    2f62:	11 24       	eor	r1, r1
    2f64:	08 0f       	add	r16, r24
    2f66:	19 1f       	adc	r17, r25
    2f68:	4c 2f       	mov	r20, r28
    2f6a:	60 e0       	ldi	r22, 0x00	; 0
    2f6c:	c7 01       	movw	r24, r14
    2f6e:	0e 94 05 22 	call	0x440a	; 0x440a <u8x8_DrawTile>
    2f72:	cf 5f       	subi	r28, 0xFF	; 255
    2f74:	8c 2f       	mov	r24, r28
    2f76:	8d 1b       	sub	r24, r29
    2f78:	8b 15       	cp	r24, r11
    2f7a:	28 f4       	brcc	.+10     	; 0x2f86 <u8g2_send_buffer+0x82>
    2f7c:	bf ef       	ldi	r27, 0xFF	; 255
    2f7e:	cb 1a       	sub	r12, r27
    2f80:	db 0a       	sbc	r13, r27
    2f82:	ca 15       	cp	r28, r10
    2f84:	b8 f2       	brcs	.-82     	; 0x2f34 <u8g2_send_buffer+0x30>
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	ff 90       	pop	r15
    2f90:	ef 90       	pop	r14
    2f92:	df 90       	pop	r13
    2f94:	cf 90       	pop	r12
    2f96:	bf 90       	pop	r11
    2f98:	af 90       	pop	r10
    2f9a:	08 95       	ret

00002f9c <u8g2_ClearBuffer>:
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	a0 81       	ld	r26, Z
    2fa0:	b1 81       	ldd	r27, Z+1	; 0x01
    2fa2:	50 96       	adiw	r26, 0x10	; 16
    2fa4:	9c 91       	ld	r25, X
    2fa6:	44 a1       	ldd	r20, Z+36	; 0x24
    2fa8:	94 9f       	mul	r25, r20
    2faa:	a0 01       	movw	r20, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	44 0f       	add	r20, r20
    2fb0:	55 1f       	adc	r21, r21
    2fb2:	44 0f       	add	r20, r20
    2fb4:	55 1f       	adc	r21, r21
    2fb6:	44 0f       	add	r20, r20
    2fb8:	55 1f       	adc	r21, r21
    2fba:	60 e0       	ldi	r22, 0x00	; 0
    2fbc:	70 e0       	ldi	r23, 0x00	; 0
    2fbe:	82 a1       	ldd	r24, Z+34	; 0x22
    2fc0:	93 a1       	ldd	r25, Z+35	; 0x23
    2fc2:	0e 94 90 28 	call	0x5120	; 0x5120 <memset>
    2fc6:	08 95       	ret

00002fc8 <u8g2_SetBufferCurrTileRow>:
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
    2fcc:	ec 01       	movw	r28, r24
    2fce:	6d a3       	std	Y+37, r22	; 0x25
    2fd0:	e8 a1       	ldd	r30, Y+32	; 0x20
    2fd2:	f9 a1       	ldd	r31, Y+33	; 0x21
    2fd4:	01 90       	ld	r0, Z+
    2fd6:	f0 81       	ld	r31, Z
    2fd8:	e0 2d       	mov	r30, r0
    2fda:	09 95       	icall
    2fdc:	e8 a1       	ldd	r30, Y+32	; 0x20
    2fde:	f9 a1       	ldd	r31, Y+33	; 0x21
    2fe0:	02 80       	ldd	r0, Z+2	; 0x02
    2fe2:	f3 81       	ldd	r31, Z+3	; 0x03
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	09 95       	icall
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret

00002ff0 <u8g2_FirstPage>:
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	ec 01       	movw	r28, r24
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	ec 59       	subi	r30, 0x9C	; 156
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	88 23       	and	r24, r24
    3000:	19 f0       	breq	.+6      	; 0x3008 <u8g2_FirstPage+0x18>
    3002:	ce 01       	movw	r24, r28
    3004:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <u8g2_ClearBuffer>
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	ce 01       	movw	r24, r28
    300c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <u8g2_SetBufferCurrTileRow>
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

00003016 <u8g2_NextPage>:
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	ec 01       	movw	r28, r24
    301e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <u8g2_send_buffer>
    3022:	1d a1       	ldd	r17, Y+37	; 0x25
    3024:	8c a1       	ldd	r24, Y+36	; 0x24
    3026:	18 0f       	add	r17, r24
    3028:	e8 81       	ld	r30, Y
    302a:	f9 81       	ldd	r31, Y+1	; 0x01
    302c:	81 89       	ldd	r24, Z+17	; 0x11
    302e:	18 17       	cp	r17, r24
    3030:	28 f0       	brcs	.+10     	; 0x303c <u8g2_NextPage+0x26>
    3032:	ce 01       	movw	r24, r28
    3034:	0e 94 49 22 	call	0x4492	; 0x4492 <u8x8_RefreshDisplay>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	0e c0       	rjmp	.+28     	; 0x3058 <u8g2_NextPage+0x42>
    303c:	fe 01       	movw	r30, r28
    303e:	ec 59       	subi	r30, 0x9C	; 156
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	88 23       	and	r24, r24
    3046:	19 f0       	breq	.+6      	; 0x304e <u8g2_NextPage+0x38>
    3048:	ce 01       	movw	r24, r28
    304a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <u8g2_ClearBuffer>
    304e:	61 2f       	mov	r22, r17
    3050:	ce 01       	movw	r24, r28
    3052:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <u8g2_SetBufferCurrTileRow>
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	1f 91       	pop	r17
    305e:	08 95       	ret

00003060 <u8g2_draw_circle_section>:
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	6c 01       	movw	r12, r24
    3070:	d6 2f       	mov	r29, r22
    3072:	14 2f       	mov	r17, r20
    3074:	c2 2f       	mov	r28, r18
    3076:	e0 fe       	sbrs	r14, 0
    3078:	0d c0       	rjmp	.+26     	; 0x3094 <u8g2_draw_circle_section+0x34>
    307a:	40 2f       	mov	r20, r16
    307c:	41 1b       	sub	r20, r17
    307e:	62 2f       	mov	r22, r18
    3080:	6d 0f       	add	r22, r29
    3082:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    3086:	40 2f       	mov	r20, r16
    3088:	4d 1b       	sub	r20, r29
    308a:	61 2f       	mov	r22, r17
    308c:	6c 0f       	add	r22, r28
    308e:	c6 01       	movw	r24, r12
    3090:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    3094:	e1 fe       	sbrs	r14, 1
    3096:	0e c0       	rjmp	.+28     	; 0x30b4 <u8g2_draw_circle_section+0x54>
    3098:	40 2f       	mov	r20, r16
    309a:	41 1b       	sub	r20, r17
    309c:	6c 2f       	mov	r22, r28
    309e:	6d 1b       	sub	r22, r29
    30a0:	c6 01       	movw	r24, r12
    30a2:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    30a6:	40 2f       	mov	r20, r16
    30a8:	4d 1b       	sub	r20, r29
    30aa:	6c 2f       	mov	r22, r28
    30ac:	61 1b       	sub	r22, r17
    30ae:	c6 01       	movw	r24, r12
    30b0:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    30b4:	e3 fe       	sbrs	r14, 3
    30b6:	0e c0       	rjmp	.+28     	; 0x30d4 <u8g2_draw_circle_section+0x74>
    30b8:	40 2f       	mov	r20, r16
    30ba:	41 0f       	add	r20, r17
    30bc:	6c 2f       	mov	r22, r28
    30be:	6d 0f       	add	r22, r29
    30c0:	c6 01       	movw	r24, r12
    30c2:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    30c6:	40 2f       	mov	r20, r16
    30c8:	4d 0f       	add	r20, r29
    30ca:	61 2f       	mov	r22, r17
    30cc:	6c 0f       	add	r22, r28
    30ce:	c6 01       	movw	r24, r12
    30d0:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    30d4:	e2 fe       	sbrs	r14, 2
    30d6:	0e c0       	rjmp	.+28     	; 0x30f4 <u8g2_draw_circle_section+0x94>
    30d8:	40 2f       	mov	r20, r16
    30da:	41 0f       	add	r20, r17
    30dc:	6c 2f       	mov	r22, r28
    30de:	6d 1b       	sub	r22, r29
    30e0:	c6 01       	movw	r24, r12
    30e2:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    30e6:	40 2f       	mov	r20, r16
    30e8:	4d 0f       	add	r20, r29
    30ea:	6c 2f       	mov	r22, r28
    30ec:	61 1b       	sub	r22, r17
    30ee:	c6 01       	movw	r24, r12
    30f0:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8g2_DrawPixel>
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ef 90       	pop	r14
    30fe:	df 90       	pop	r13
    3100:	cf 90       	pop	r12
    3102:	08 95       	ret

00003104 <u8g2_draw_disc_section>:
    3104:	cf 92       	push	r12
    3106:	df 92       	push	r13
    3108:	ef 92       	push	r14
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	6c 01       	movw	r12, r24
    3114:	c6 2f       	mov	r28, r22
    3116:	14 2f       	mov	r17, r20
    3118:	d2 2f       	mov	r29, r18
    311a:	e0 fe       	sbrs	r14, 0
    311c:	11 c0       	rjmp	.+34     	; 0x3140 <u8g2_draw_disc_section+0x3c>
    311e:	21 e0       	ldi	r18, 0x01	; 1
    3120:	24 0f       	add	r18, r20
    3122:	40 2f       	mov	r20, r16
    3124:	41 1b       	sub	r20, r17
    3126:	6d 2f       	mov	r22, r29
    3128:	6c 0f       	add	r22, r28
    312a:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    312e:	21 e0       	ldi	r18, 0x01	; 1
    3130:	2c 0f       	add	r18, r28
    3132:	40 2f       	mov	r20, r16
    3134:	4c 1b       	sub	r20, r28
    3136:	61 2f       	mov	r22, r17
    3138:	6d 0f       	add	r22, r29
    313a:	c6 01       	movw	r24, r12
    313c:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    3140:	e1 fe       	sbrs	r14, 1
    3142:	12 c0       	rjmp	.+36     	; 0x3168 <u8g2_draw_disc_section+0x64>
    3144:	21 e0       	ldi	r18, 0x01	; 1
    3146:	21 0f       	add	r18, r17
    3148:	40 2f       	mov	r20, r16
    314a:	41 1b       	sub	r20, r17
    314c:	6d 2f       	mov	r22, r29
    314e:	6c 1b       	sub	r22, r28
    3150:	c6 01       	movw	r24, r12
    3152:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    3156:	21 e0       	ldi	r18, 0x01	; 1
    3158:	2c 0f       	add	r18, r28
    315a:	40 2f       	mov	r20, r16
    315c:	4c 1b       	sub	r20, r28
    315e:	6d 2f       	mov	r22, r29
    3160:	61 1b       	sub	r22, r17
    3162:	c6 01       	movw	r24, r12
    3164:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    3168:	e3 fe       	sbrs	r14, 3
    316a:	10 c0       	rjmp	.+32     	; 0x318c <u8g2_draw_disc_section+0x88>
    316c:	21 e0       	ldi	r18, 0x01	; 1
    316e:	21 0f       	add	r18, r17
    3170:	40 2f       	mov	r20, r16
    3172:	6d 2f       	mov	r22, r29
    3174:	6c 0f       	add	r22, r28
    3176:	c6 01       	movw	r24, r12
    3178:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    317c:	21 e0       	ldi	r18, 0x01	; 1
    317e:	2c 0f       	add	r18, r28
    3180:	40 2f       	mov	r20, r16
    3182:	61 2f       	mov	r22, r17
    3184:	6d 0f       	add	r22, r29
    3186:	c6 01       	movw	r24, r12
    3188:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    318c:	e2 fe       	sbrs	r14, 2
    318e:	10 c0       	rjmp	.+32     	; 0x31b0 <u8g2_draw_disc_section+0xac>
    3190:	21 e0       	ldi	r18, 0x01	; 1
    3192:	21 0f       	add	r18, r17
    3194:	6d 2f       	mov	r22, r29
    3196:	6c 1b       	sub	r22, r28
    3198:	40 2f       	mov	r20, r16
    319a:	c6 01       	movw	r24, r12
    319c:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    31a0:	21 e0       	ldi	r18, 0x01	; 1
    31a2:	2c 0f       	add	r18, r28
    31a4:	6d 2f       	mov	r22, r29
    31a6:	61 1b       	sub	r22, r17
    31a8:	40 2f       	mov	r20, r16
    31aa:	c6 01       	movw	r24, r12
    31ac:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <u8g2_DrawVLine>
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	08 95       	ret

000031c0 <u8g2_DrawCircle>:
    31c0:	8f 92       	push	r8
    31c2:	9f 92       	push	r9
    31c4:	af 92       	push	r10
    31c6:	bf 92       	push	r11
    31c8:	cf 92       	push	r12
    31ca:	df 92       	push	r13
    31cc:	ef 92       	push	r14
    31ce:	ff 92       	push	r15
    31d0:	0f 93       	push	r16
    31d2:	1f 93       	push	r17
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	5c 01       	movw	r10, r24
    31da:	c6 2e       	mov	r12, r22
    31dc:	94 2e       	mov	r9, r20
    31de:	c2 2f       	mov	r28, r18
    31e0:	80 2e       	mov	r8, r16
    31e2:	01 e0       	ldi	r16, 0x01	; 1
    31e4:	02 0f       	add	r16, r18
    31e6:	04 0f       	add	r16, r20
    31e8:	21 e0       	ldi	r18, 0x01	; 1
    31ea:	26 0f       	add	r18, r22
    31ec:	2c 0f       	add	r18, r28
    31ee:	4c 1b       	sub	r20, r28
    31f0:	6c 1b       	sub	r22, r28
    31f2:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    31f6:	88 23       	and	r24, r24
    31f8:	41 f1       	breq	.+80     	; 0x324a <u8g2_DrawCircle+0x8a>
    31fa:	d1 e0       	ldi	r29, 0x01	; 1
    31fc:	dc 1b       	sub	r29, r28
    31fe:	dc 2e       	mov	r13, r28
    3200:	d1 94       	neg	r13
    3202:	dd 0c       	add	r13, r13
    3204:	e8 2c       	mov	r14, r8
    3206:	09 2d       	mov	r16, r9
    3208:	2c 2d       	mov	r18, r12
    320a:	4c 2f       	mov	r20, r28
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	c5 01       	movw	r24, r10
    3210:	0e 94 30 18 	call	0x3060	; 0x3060 <u8g2_draw_circle_section>
    3214:	cc 23       	and	r28, r28
    3216:	c9 f0       	breq	.+50     	; 0x324a <u8g2_DrawCircle+0x8a>
    3218:	0f 2e       	mov	r0, r31
    321a:	f3 e0       	ldi	r31, 0x03	; 3
    321c:	ff 2e       	mov	r15, r31
    321e:	f0 2d       	mov	r31, r0
    3220:	10 e0       	ldi	r17, 0x00	; 0
    3222:	dd 23       	and	r29, r29
    3224:	24 f0       	brlt	.+8      	; 0x322e <u8g2_DrawCircle+0x6e>
    3226:	c1 50       	subi	r28, 0x01	; 1
    3228:	d3 94       	inc	r13
    322a:	d3 94       	inc	r13
    322c:	dd 0d       	add	r29, r13
    322e:	1f 5f       	subi	r17, 0xFF	; 255
    3230:	df 0d       	add	r29, r15
    3232:	e8 2c       	mov	r14, r8
    3234:	09 2d       	mov	r16, r9
    3236:	2c 2d       	mov	r18, r12
    3238:	4c 2f       	mov	r20, r28
    323a:	61 2f       	mov	r22, r17
    323c:	c5 01       	movw	r24, r10
    323e:	0e 94 30 18 	call	0x3060	; 0x3060 <u8g2_draw_circle_section>
    3242:	f3 94       	inc	r15
    3244:	f3 94       	inc	r15
    3246:	1c 17       	cp	r17, r28
    3248:	60 f3       	brcs	.-40     	; 0x3222 <u8g2_DrawCircle+0x62>
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	ff 90       	pop	r15
    3254:	ef 90       	pop	r14
    3256:	df 90       	pop	r13
    3258:	cf 90       	pop	r12
    325a:	bf 90       	pop	r11
    325c:	af 90       	pop	r10
    325e:	9f 90       	pop	r9
    3260:	8f 90       	pop	r8
    3262:	08 95       	ret

00003264 <u8g2_DrawDisc>:
    3264:	8f 92       	push	r8
    3266:	9f 92       	push	r9
    3268:	af 92       	push	r10
    326a:	bf 92       	push	r11
    326c:	cf 92       	push	r12
    326e:	df 92       	push	r13
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
    327c:	5c 01       	movw	r10, r24
    327e:	c6 2e       	mov	r12, r22
    3280:	94 2e       	mov	r9, r20
    3282:	c2 2f       	mov	r28, r18
    3284:	80 2e       	mov	r8, r16
    3286:	01 e0       	ldi	r16, 0x01	; 1
    3288:	02 0f       	add	r16, r18
    328a:	04 0f       	add	r16, r20
    328c:	21 e0       	ldi	r18, 0x01	; 1
    328e:	26 0f       	add	r18, r22
    3290:	2c 0f       	add	r18, r28
    3292:	4c 1b       	sub	r20, r28
    3294:	6c 1b       	sub	r22, r28
    3296:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    329a:	88 23       	and	r24, r24
    329c:	41 f1       	breq	.+80     	; 0x32ee <u8g2_DrawDisc+0x8a>
    329e:	d1 e0       	ldi	r29, 0x01	; 1
    32a0:	dc 1b       	sub	r29, r28
    32a2:	dc 2e       	mov	r13, r28
    32a4:	d1 94       	neg	r13
    32a6:	dd 0c       	add	r13, r13
    32a8:	e8 2c       	mov	r14, r8
    32aa:	09 2d       	mov	r16, r9
    32ac:	2c 2d       	mov	r18, r12
    32ae:	4c 2f       	mov	r20, r28
    32b0:	60 e0       	ldi	r22, 0x00	; 0
    32b2:	c5 01       	movw	r24, r10
    32b4:	0e 94 82 18 	call	0x3104	; 0x3104 <u8g2_draw_disc_section>
    32b8:	cc 23       	and	r28, r28
    32ba:	c9 f0       	breq	.+50     	; 0x32ee <u8g2_DrawDisc+0x8a>
    32bc:	0f 2e       	mov	r0, r31
    32be:	f3 e0       	ldi	r31, 0x03	; 3
    32c0:	ff 2e       	mov	r15, r31
    32c2:	f0 2d       	mov	r31, r0
    32c4:	10 e0       	ldi	r17, 0x00	; 0
    32c6:	dd 23       	and	r29, r29
    32c8:	24 f0       	brlt	.+8      	; 0x32d2 <u8g2_DrawDisc+0x6e>
    32ca:	c1 50       	subi	r28, 0x01	; 1
    32cc:	d3 94       	inc	r13
    32ce:	d3 94       	inc	r13
    32d0:	dd 0d       	add	r29, r13
    32d2:	1f 5f       	subi	r17, 0xFF	; 255
    32d4:	df 0d       	add	r29, r15
    32d6:	e8 2c       	mov	r14, r8
    32d8:	09 2d       	mov	r16, r9
    32da:	2c 2d       	mov	r18, r12
    32dc:	4c 2f       	mov	r20, r28
    32de:	61 2f       	mov	r22, r17
    32e0:	c5 01       	movw	r24, r10
    32e2:	0e 94 82 18 	call	0x3104	; 0x3104 <u8g2_draw_disc_section>
    32e6:	f3 94       	inc	r15
    32e8:	f3 94       	inc	r15
    32ea:	1c 17       	cp	r17, r28
    32ec:	60 f3       	brcs	.-40     	; 0x32c6 <u8g2_DrawDisc+0x62>
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	df 90       	pop	r13
    32fc:	cf 90       	pop	r12
    32fe:	bf 90       	pop	r11
    3300:	af 90       	pop	r10
    3302:	9f 90       	pop	r9
    3304:	8f 90       	pop	r8
    3306:	08 95       	ret

00003308 <u8g2_m_16_8_2>:
    3308:	22 e0       	ldi	r18, 0x02	; 2
    330a:	fc 01       	movw	r30, r24
    330c:	20 83       	st	Z, r18
    330e:	8d e3       	ldi	r24, 0x3D	; 61
    3310:	94 e0       	ldi	r25, 0x04	; 4
    3312:	08 95       	ret

00003314 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>:
    3314:	cf 92       	push	r12
    3316:	df 92       	push	r13
    3318:	ef 92       	push	r14
    331a:	ff 92       	push	r15
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	1f 92       	push	r1
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	7c 01       	movw	r14, r24
    332c:	6b 01       	movw	r12, r22
    332e:	89 01       	movw	r16, r18
    3330:	9a 01       	movw	r18, r20
    3332:	4a e4       	ldi	r20, 0x4A	; 74
    3334:	51 e2       	ldi	r21, 0x21	; 33
    3336:	6d ed       	ldi	r22, 0xDD	; 221
    3338:	72 e2       	ldi	r23, 0x22	; 34
    333a:	0e 94 22 23 	call	0x4644	; 0x4644 <u8x8_Setup>
    333e:	ce 01       	movw	r24, r28
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	0e 94 84 19 	call	0x3308	; 0x3308 <u8g2_m_16_8_2>
    3346:	86 01       	movw	r16, r12
    3348:	27 ec       	ldi	r18, 0xC7	; 199
    334a:	3e e1       	ldi	r19, 0x1E	; 30
    334c:	49 81       	ldd	r20, Y+1	; 0x01
    334e:	bc 01       	movw	r22, r24
    3350:	c7 01       	movw	r24, r14
    3352:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <u8g2_SetupBuffer>
    3356:	0f 90       	pop	r0
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	ff 90       	pop	r15
    3362:	ef 90       	pop	r14
    3364:	df 90       	pop	r13
    3366:	cf 90       	pop	r12
    3368:	08 95       	ret

0000336a <u8g2_font_get_word>:
    336a:	fc 01       	movw	r30, r24
    336c:	e6 0f       	add	r30, r22
    336e:	f1 1d       	adc	r31, r1
    3370:	84 91       	lpm	r24, Z
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	98 2f       	mov	r25, r24
    3376:	88 27       	eor	r24, r24
    3378:	31 96       	adiw	r30, 0x01	; 1
    337a:	e4 91       	lpm	r30, Z
    337c:	8e 0f       	add	r24, r30
    337e:	91 1d       	adc	r25, r1
    3380:	08 95       	ret

00003382 <u8g2_font_calc_vref_font>:
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	08 95       	ret

00003386 <u8g2_read_font_info>:
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	ec 01       	movw	r28, r24
    3390:	8b 01       	movw	r16, r22
    3392:	fb 01       	movw	r30, r22
    3394:	84 91       	lpm	r24, Z
    3396:	88 83       	st	Y, r24
    3398:	31 96       	adiw	r30, 0x01	; 1
    339a:	e4 91       	lpm	r30, Z
    339c:	e9 83       	std	Y+1, r30	; 0x01
    339e:	fb 01       	movw	r30, r22
    33a0:	32 96       	adiw	r30, 0x02	; 2
    33a2:	e4 91       	lpm	r30, Z
    33a4:	ea 83       	std	Y+2, r30	; 0x02
    33a6:	fb 01       	movw	r30, r22
    33a8:	33 96       	adiw	r30, 0x03	; 3
    33aa:	e4 91       	lpm	r30, Z
    33ac:	eb 83       	std	Y+3, r30	; 0x03
    33ae:	fb 01       	movw	r30, r22
    33b0:	34 96       	adiw	r30, 0x04	; 4
    33b2:	e4 91       	lpm	r30, Z
    33b4:	ec 83       	std	Y+4, r30	; 0x04
    33b6:	fb 01       	movw	r30, r22
    33b8:	35 96       	adiw	r30, 0x05	; 5
    33ba:	e4 91       	lpm	r30, Z
    33bc:	ed 83       	std	Y+5, r30	; 0x05
    33be:	fb 01       	movw	r30, r22
    33c0:	36 96       	adiw	r30, 0x06	; 6
    33c2:	e4 91       	lpm	r30, Z
    33c4:	ee 83       	std	Y+6, r30	; 0x06
    33c6:	fb 01       	movw	r30, r22
    33c8:	37 96       	adiw	r30, 0x07	; 7
    33ca:	e4 91       	lpm	r30, Z
    33cc:	ef 83       	std	Y+7, r30	; 0x07
    33ce:	fb 01       	movw	r30, r22
    33d0:	38 96       	adiw	r30, 0x08	; 8
    33d2:	e4 91       	lpm	r30, Z
    33d4:	e8 87       	std	Y+8, r30	; 0x08
    33d6:	fb 01       	movw	r30, r22
    33d8:	39 96       	adiw	r30, 0x09	; 9
    33da:	e4 91       	lpm	r30, Z
    33dc:	e9 87       	std	Y+9, r30	; 0x09
    33de:	fb 01       	movw	r30, r22
    33e0:	3a 96       	adiw	r30, 0x0a	; 10
    33e2:	e4 91       	lpm	r30, Z
    33e4:	ea 87       	std	Y+10, r30	; 0x0a
    33e6:	fb 01       	movw	r30, r22
    33e8:	3b 96       	adiw	r30, 0x0b	; 11
    33ea:	e4 91       	lpm	r30, Z
    33ec:	eb 87       	std	Y+11, r30	; 0x0b
    33ee:	fb 01       	movw	r30, r22
    33f0:	3c 96       	adiw	r30, 0x0c	; 12
    33f2:	e4 91       	lpm	r30, Z
    33f4:	ec 87       	std	Y+12, r30	; 0x0c
    33f6:	fb 01       	movw	r30, r22
    33f8:	3d 96       	adiw	r30, 0x0d	; 13
    33fa:	e4 91       	lpm	r30, Z
    33fc:	ed 87       	std	Y+13, r30	; 0x0d
    33fe:	fb 01       	movw	r30, r22
    3400:	3e 96       	adiw	r30, 0x0e	; 14
    3402:	e4 91       	lpm	r30, Z
    3404:	ee 87       	std	Y+14, r30	; 0x0e
    3406:	fb 01       	movw	r30, r22
    3408:	3f 96       	adiw	r30, 0x0f	; 15
    340a:	e4 91       	lpm	r30, Z
    340c:	ef 87       	std	Y+15, r30	; 0x0f
    340e:	fb 01       	movw	r30, r22
    3410:	70 96       	adiw	r30, 0x10	; 16
    3412:	e4 91       	lpm	r30, Z
    3414:	e8 8b       	std	Y+16, r30	; 0x10
    3416:	61 e1       	ldi	r22, 0x11	; 17
    3418:	c8 01       	movw	r24, r16
    341a:	0e 94 b5 19 	call	0x336a	; 0x336a <u8g2_font_get_word>
    341e:	9a 8b       	std	Y+18, r25	; 0x12
    3420:	89 8b       	std	Y+17, r24	; 0x11
    3422:	63 e1       	ldi	r22, 0x13	; 19
    3424:	c8 01       	movw	r24, r16
    3426:	0e 94 b5 19 	call	0x336a	; 0x336a <u8g2_font_get_word>
    342a:	9c 8b       	std	Y+20, r25	; 0x14
    342c:	8b 8b       	std	Y+19, r24	; 0x13
    342e:	65 e1       	ldi	r22, 0x15	; 21
    3430:	c8 01       	movw	r24, r16
    3432:	0e 94 b5 19 	call	0x336a	; 0x336a <u8g2_font_get_word>
    3436:	9e 8b       	std	Y+22, r25	; 0x16
    3438:	8d 8b       	std	Y+21, r24	; 0x15
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	08 95       	ret

00003444 <u8g2_font_decode_get_unsigned_bits>:
    3444:	dc 01       	movw	r26, r24
    3446:	18 96       	adiw	r26, 0x08	; 8
    3448:	9c 91       	ld	r25, X
    344a:	18 97       	sbiw	r26, 0x08	; 8
    344c:	ed 91       	ld	r30, X+
    344e:	fc 91       	ld	r31, X
    3450:	11 97       	sbiw	r26, 0x01	; 1
    3452:	24 91       	lpm	r18, Z
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	09 2e       	mov	r0, r25
    3458:	02 c0       	rjmp	.+4      	; 0x345e <u8g2_font_decode_get_unsigned_bits+0x1a>
    345a:	35 95       	asr	r19
    345c:	27 95       	ror	r18
    345e:	0a 94       	dec	r0
    3460:	e2 f7       	brpl	.-8      	; 0x345a <u8g2_font_decode_get_unsigned_bits+0x16>
    3462:	89 2f       	mov	r24, r25
    3464:	86 0f       	add	r24, r22
    3466:	88 30       	cpi	r24, 0x08	; 8
    3468:	10 f4       	brcc	.+4      	; 0x346e <u8g2_font_decode_get_unsigned_bits+0x2a>
    346a:	e2 2f       	mov	r30, r18
    346c:	0f c0       	rjmp	.+30     	; 0x348c <u8g2_font_decode_get_unsigned_bits+0x48>
    346e:	31 96       	adiw	r30, 0x01	; 1
    3470:	11 96       	adiw	r26, 0x01	; 1
    3472:	fc 93       	st	X, r31
    3474:	ee 93       	st	-X, r30
    3476:	e4 91       	lpm	r30, Z
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	38 e0       	ldi	r19, 0x08	; 8
    347c:	39 1b       	sub	r19, r25
    347e:	02 c0       	rjmp	.+4      	; 0x3484 <u8g2_font_decode_get_unsigned_bits+0x40>
    3480:	ee 0f       	add	r30, r30
    3482:	ff 1f       	adc	r31, r31
    3484:	3a 95       	dec	r19
    3486:	e2 f7       	brpl	.-8      	; 0x3480 <u8g2_font_decode_get_unsigned_bits+0x3c>
    3488:	e2 2b       	or	r30, r18
    348a:	88 50       	subi	r24, 0x08	; 8
    348c:	18 96       	adiw	r26, 0x08	; 8
    348e:	8c 93       	st	X, r24
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	02 c0       	rjmp	.+4      	; 0x349a <u8g2_font_decode_get_unsigned_bits+0x56>
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	6a 95       	dec	r22
    349c:	e2 f7       	brpl	.-8      	; 0x3496 <u8g2_font_decode_get_unsigned_bits+0x52>
    349e:	81 50       	subi	r24, 0x01	; 1
    34a0:	8e 23       	and	r24, r30
    34a2:	08 95       	ret

000034a4 <u8g2_font_setup_decode>:
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	ec 01       	movw	r28, r24
    34ae:	8c 01       	movw	r16, r24
    34b0:	07 5c       	subi	r16, 0xC7	; 199
    34b2:	1f 4f       	sbci	r17, 0xFF	; 255
    34b4:	7a af       	std	Y+58, r23	; 0x3a
    34b6:	69 af       	std	Y+57, r22	; 0x39
    34b8:	fc 01       	movw	r30, r24
    34ba:	ef 5b       	subi	r30, 0xBF	; 191
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	10 82       	st	Z, r1
    34c0:	39 96       	adiw	r30, 0x09	; 9
    34c2:	60 81       	ld	r22, Z
    34c4:	c8 01       	movw	r24, r16
    34c6:	0e 94 22 1a 	call	0x3444	; 0x3444 <u8g2_font_decode_get_unsigned_bits>
    34ca:	8f af       	std	Y+63, r24	; 0x3f
    34cc:	fe 01       	movw	r30, r28
    34ce:	e5 5b       	subi	r30, 0xB5	; 181
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	60 81       	ld	r22, Z
    34d4:	c8 01       	movw	r24, r16
    34d6:	0e 94 22 1a 	call	0x3444	; 0x3444 <u8g2_font_decode_get_unsigned_bits>
    34da:	fe 01       	movw	r30, r28
    34dc:	e0 5c       	subi	r30, 0xC0	; 192
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 83       	st	Z, r24
    34e2:	b3 96       	adiw	r30, 0x23	; 35
    34e4:	80 81       	ld	r24, Z
    34e6:	b0 97       	sbiw	r30, 0x20	; 32
    34e8:	80 83       	st	Z, r24
    34ea:	cc 5b       	subi	r28, 0xBC	; 188
    34ec:	df 4f       	sbci	r29, 0xFF	; 255
    34ee:	91 e0       	ldi	r25, 0x01	; 1
    34f0:	81 11       	cpse	r24, r1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	98 83       	st	Y, r25
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	1f 91       	pop	r17
    34fc:	0f 91       	pop	r16
    34fe:	08 95       	ret

00003500 <u8g2_font_decode_get_signed_bits>:
    3500:	cf 93       	push	r28
    3502:	c6 2f       	mov	r28, r22
    3504:	0e 94 22 1a 	call	0x3444	; 0x3444 <u8g2_font_decode_get_unsigned_bits>
    3508:	c1 50       	subi	r28, 0x01	; 1
    350a:	21 e0       	ldi	r18, 0x01	; 1
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <u8g2_font_decode_get_signed_bits+0x14>
    3510:	22 0f       	add	r18, r18
    3512:	33 1f       	adc	r19, r19
    3514:	ca 95       	dec	r28
    3516:	e2 f7       	brpl	.-8      	; 0x3510 <u8g2_font_decode_get_signed_bits+0x10>
    3518:	82 1b       	sub	r24, r18
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <u8g2_add_vector_y>:
    351e:	21 30       	cpi	r18, 0x01	; 1
    3520:	31 f0       	breq	.+12     	; 0x352e <u8g2_add_vector_y+0x10>
    3522:	18 f0       	brcs	.+6      	; 0x352a <u8g2_add_vector_y+0xc>
    3524:	22 30       	cpi	r18, 0x02	; 2
    3526:	29 f0       	breq	.+10     	; 0x3532 <u8g2_add_vector_y+0x14>
    3528:	06 c0       	rjmp	.+12     	; 0x3536 <u8g2_add_vector_y+0x18>
    352a:	84 0f       	add	r24, r20
    352c:	08 95       	ret
    352e:	86 0f       	add	r24, r22
    3530:	08 95       	ret
    3532:	84 1b       	sub	r24, r20
    3534:	08 95       	ret
    3536:	86 1b       	sub	r24, r22
    3538:	08 95       	ret

0000353a <u8g2_add_vector_x>:
    353a:	21 30       	cpi	r18, 0x01	; 1
    353c:	31 f0       	breq	.+12     	; 0x354a <u8g2_add_vector_x+0x10>
    353e:	18 f0       	brcs	.+6      	; 0x3546 <u8g2_add_vector_x+0xc>
    3540:	22 30       	cpi	r18, 0x02	; 2
    3542:	29 f0       	breq	.+10     	; 0x354e <u8g2_add_vector_x+0x14>
    3544:	06 c0       	rjmp	.+12     	; 0x3552 <u8g2_add_vector_x+0x18>
    3546:	86 0f       	add	r24, r22
    3548:	08 95       	ret
    354a:	84 1b       	sub	r24, r20
    354c:	08 95       	ret
    354e:	86 1b       	sub	r24, r22
    3550:	08 95       	ret
    3552:	84 0f       	add	r24, r20
    3554:	08 95       	ret

00003556 <u8g2_font_decode_len>:
    3556:	2f 92       	push	r2
    3558:	3f 92       	push	r3
    355a:	4f 92       	push	r4
    355c:	5f 92       	push	r5
    355e:	6f 92       	push	r6
    3560:	7f 92       	push	r7
    3562:	8f 92       	push	r8
    3564:	9f 92       	push	r9
    3566:	af 92       	push	r10
    3568:	bf 92       	push	r11
    356a:	cf 92       	push	r12
    356c:	df 92       	push	r13
    356e:	ef 92       	push	r14
    3570:	ff 92       	push	r15
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	00 d0       	rcall	.+0      	; 0x357c <u8g2_font_decode_len+0x26>
    357c:	00 d0       	rcall	.+0      	; 0x357e <u8g2_font_decode_len+0x28>
    357e:	00 d0       	rcall	.+0      	; 0x3580 <u8g2_font_decode_len+0x2a>
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	7c 01       	movw	r14, r24
    3586:	6e 83       	std	Y+6, r22	; 0x06
    3588:	34 2e       	mov	r3, r20
    358a:	fc 01       	movw	r30, r24
    358c:	75 ac       	ldd	r7, Z+61	; 0x3d
    358e:	16 ad       	ldd	r17, Z+62	; 0x3e
    3590:	6c 01       	movw	r12, r24
    3592:	f5 e4       	ldi	r31, 0x45	; 69
    3594:	cf 0e       	add	r12, r31
    3596:	d1 1c       	adc	r13, r1
    3598:	5c 01       	movw	r10, r24
    359a:	82 e4       	ldi	r24, 0x42	; 66
    359c:	a8 0e       	add	r10, r24
    359e:	b1 1c       	adc	r11, r1
    35a0:	47 01       	movw	r8, r14
    35a2:	93 e6       	ldi	r25, 0x63	; 99
    35a4:	89 0e       	add	r8, r25
    35a6:	91 1c       	adc	r9, r1
    35a8:	f7 01       	movw	r30, r14
    35aa:	ec 5b       	subi	r30, 0xBC	; 188
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	fc 83       	std	Y+4, r31	; 0x04
    35b0:	eb 83       	std	Y+3, r30	; 0x03
    35b2:	c7 01       	movw	r24, r14
    35b4:	8d 5b       	subi	r24, 0xBD	; 189
    35b6:	9f 4f       	sbci	r25, 0xFF	; 255
    35b8:	9a 83       	std	Y+2, r25	; 0x02
    35ba:	89 83       	std	Y+1, r24	; 0x01
    35bc:	f7 01       	movw	r30, r14
    35be:	f7 ad       	ldd	r31, Z+63	; 0x3f
    35c0:	f7 19       	sub	r31, r7
    35c2:	fd 83       	std	Y+5, r31	; 0x05
    35c4:	5e 80       	ldd	r5, Y+6	; 0x06
    35c6:	f5 15       	cp	r31, r5
    35c8:	08 f4       	brcc	.+2      	; 0x35cc <u8g2_font_decode_len+0x76>
    35ca:	5f 2e       	mov	r5, r31
    35cc:	f7 01       	movw	r30, r14
    35ce:	64 ac       	ldd	r6, Z+60	; 0x3c
    35d0:	f6 01       	movw	r30, r12
    35d2:	00 81       	ld	r16, Z
    35d4:	21 2e       	mov	r2, r17
    35d6:	20 2f       	mov	r18, r16
    35d8:	41 2f       	mov	r20, r17
    35da:	67 2d       	mov	r22, r7
    35dc:	f7 01       	movw	r30, r14
    35de:	83 ad       	ldd	r24, Z+59	; 0x3b
    35e0:	0e 94 9d 1a 	call	0x353a	; 0x353a <u8g2_add_vector_x>
    35e4:	48 2e       	mov	r4, r24
    35e6:	20 2f       	mov	r18, r16
    35e8:	41 2f       	mov	r20, r17
    35ea:	67 2d       	mov	r22, r7
    35ec:	86 2d       	mov	r24, r6
    35ee:	0e 94 8f 1a 	call	0x351e	; 0x351e <u8g2_add_vector_y>
    35f2:	33 20       	and	r3, r3
    35f4:	61 f0       	breq	.+24     	; 0x360e <u8g2_font_decode_len+0xb8>
    35f6:	e9 81       	ldd	r30, Y+1	; 0x01
    35f8:	fa 81       	ldd	r31, Y+2	; 0x02
    35fa:	90 81       	ld	r25, Z
    35fc:	f4 01       	movw	r30, r8
    35fe:	90 83       	st	Z, r25
    3600:	25 2d       	mov	r18, r5
    3602:	48 2f       	mov	r20, r24
    3604:	64 2d       	mov	r22, r4
    3606:	c7 01       	movw	r24, r14
    3608:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    360c:	0f c0       	rjmp	.+30     	; 0x362c <u8g2_font_decode_len+0xd6>
    360e:	f5 01       	movw	r30, r10
    3610:	90 81       	ld	r25, Z
    3612:	91 11       	cpse	r25, r1
    3614:	0b c0       	rjmp	.+22     	; 0x362c <u8g2_font_decode_len+0xd6>
    3616:	eb 81       	ldd	r30, Y+3	; 0x03
    3618:	fc 81       	ldd	r31, Y+4	; 0x04
    361a:	90 81       	ld	r25, Z
    361c:	f4 01       	movw	r30, r8
    361e:	90 83       	st	Z, r25
    3620:	25 2d       	mov	r18, r5
    3622:	48 2f       	mov	r20, r24
    3624:	64 2d       	mov	r22, r4
    3626:	c7 01       	movw	r24, r14
    3628:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    362c:	fe 81       	ldd	r31, Y+6	; 0x06
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	f8 17       	cp	r31, r24
    3632:	28 f0       	brcs	.+10     	; 0x363e <u8g2_font_decode_len+0xe8>
    3634:	f8 1b       	sub	r31, r24
    3636:	fe 83       	std	Y+6, r31	; 0x06
    3638:	1f 5f       	subi	r17, 0xFF	; 255
    363a:	71 2c       	mov	r7, r1
    363c:	bf cf       	rjmp	.-130    	; 0x35bc <u8g2_font_decode_len+0x66>
    363e:	8e 81       	ldd	r24, Y+6	; 0x06
    3640:	87 0d       	add	r24, r7
    3642:	f7 01       	movw	r30, r14
    3644:	85 af       	std	Z+61, r24	; 0x3d
    3646:	26 ae       	std	Z+62, r2	; 0x3e
    3648:	26 96       	adiw	r28, 0x06	; 6
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	ff 90       	pop	r15
    365e:	ef 90       	pop	r14
    3660:	df 90       	pop	r13
    3662:	cf 90       	pop	r12
    3664:	bf 90       	pop	r11
    3666:	af 90       	pop	r10
    3668:	9f 90       	pop	r9
    366a:	8f 90       	pop	r8
    366c:	7f 90       	pop	r7
    366e:	6f 90       	pop	r6
    3670:	5f 90       	pop	r5
    3672:	4f 90       	pop	r4
    3674:	3f 90       	pop	r3
    3676:	2f 90       	pop	r2
    3678:	08 95       	ret

0000367a <u8g2_font_decode_glyph>:
    367a:	8f 92       	push	r8
    367c:	9f 92       	push	r9
    367e:	af 92       	push	r10
    3680:	bf 92       	push	r11
    3682:	cf 92       	push	r12
    3684:	df 92       	push	r13
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	ec 01       	movw	r28, r24
    3694:	7c 01       	movw	r14, r24
    3696:	89 e3       	ldi	r24, 0x39	; 57
    3698:	e8 0e       	add	r14, r24
    369a:	f1 1c       	adc	r15, r1
    369c:	ce 01       	movw	r24, r28
    369e:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <u8g2_font_setup_decode>
    36a2:	fe 01       	movw	r30, r28
    36a4:	e0 5c       	subi	r30, 0xC0	; 192
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	90 80       	ld	r9, Z
    36aa:	3c 96       	adiw	r30, 0x0c	; 12
    36ac:	60 81       	ld	r22, Z
    36ae:	c7 01       	movw	r24, r14
    36b0:	0e 94 80 1a 	call	0x3500	; 0x3500 <u8g2_font_decode_get_signed_bits>
    36b4:	b8 2e       	mov	r11, r24
    36b6:	fe 01       	movw	r30, r28
    36b8:	e3 5b       	subi	r30, 0xB3	; 179
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	60 81       	ld	r22, Z
    36be:	c7 01       	movw	r24, r14
    36c0:	0e 94 80 1a 	call	0x3500	; 0x3500 <u8g2_font_decode_get_signed_bits>
    36c4:	18 2f       	mov	r17, r24
    36c6:	fe 01       	movw	r30, r28
    36c8:	e2 5b       	subi	r30, 0xB2	; 178
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	60 81       	ld	r22, Z
    36ce:	c7 01       	movw	r24, r14
    36d0:	0e 94 80 1a 	call	0x3500	; 0x3500 <u8g2_font_decode_get_signed_bits>
    36d4:	88 2e       	mov	r8, r24
    36d6:	df ac       	ldd	r13, Y+63	; 0x3f
    36d8:	1d 14       	cp	r1, r13
    36da:	0c f0       	brlt	.+2      	; 0x36de <u8g2_font_decode_glyph+0x64>
    36dc:	79 c0       	rjmp	.+242    	; 0x37d0 <u8g2_font_decode_glyph+0x156>
    36de:	fe 01       	movw	r30, r28
    36e0:	eb 5b       	subi	r30, 0xBB	; 187
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	00 81       	ld	r16, Z
    36e6:	19 0d       	add	r17, r9
    36e8:	11 95       	neg	r17
    36ea:	20 2f       	mov	r18, r16
    36ec:	41 2f       	mov	r20, r17
    36ee:	6b 2d       	mov	r22, r11
    36f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    36f2:	0e 94 9d 1a 	call	0x353a	; 0x353a <u8g2_add_vector_x>
    36f6:	c8 2e       	mov	r12, r24
    36f8:	8b af       	std	Y+59, r24	; 0x3b
    36fa:	20 2f       	mov	r18, r16
    36fc:	41 2f       	mov	r20, r17
    36fe:	6b 2d       	mov	r22, r11
    3700:	8c ad       	ldd	r24, Y+60	; 0x3c
    3702:	0e 94 8f 1a 	call	0x351e	; 0x351e <u8g2_add_vector_y>
    3706:	8c af       	std	Y+60, r24	; 0x3c
    3708:	01 30       	cpi	r16, 0x01	; 1
    370a:	59 f0       	breq	.+22     	; 0x3722 <u8g2_font_decode_glyph+0xa8>
    370c:	28 f0       	brcs	.+10     	; 0x3718 <u8g2_font_decode_glyph+0x9e>
    370e:	02 30       	cpi	r16, 0x02	; 2
    3710:	91 f0       	breq	.+36     	; 0x3736 <u8g2_font_decode_glyph+0xbc>
    3712:	03 30       	cpi	r16, 0x03	; 3
    3714:	d9 f0       	breq	.+54     	; 0x374c <u8g2_font_decode_glyph+0xd2>
    3716:	23 c0       	rjmp	.+70     	; 0x375e <u8g2_font_decode_glyph+0xe4>
    3718:	2d 2d       	mov	r18, r13
    371a:	2c 0d       	add	r18, r12
    371c:	09 2d       	mov	r16, r9
    371e:	08 0f       	add	r16, r24
    3720:	20 c0       	rjmp	.+64     	; 0x3762 <u8g2_font_decode_glyph+0xe8>
    3722:	9c 2d       	mov	r25, r12
    3724:	99 19       	sub	r25, r9
    3726:	21 e0       	ldi	r18, 0x01	; 1
    3728:	2c 0d       	add	r18, r12
    372a:	0d 2d       	mov	r16, r13
    372c:	08 0f       	add	r16, r24
    372e:	cc 24       	eor	r12, r12
    3730:	c3 94       	inc	r12
    3732:	c9 0e       	add	r12, r25
    3734:	16 c0       	rjmp	.+44     	; 0x3762 <u8g2_font_decode_glyph+0xe8>
    3736:	91 e0       	ldi	r25, 0x01	; 1
    3738:	39 2f       	mov	r19, r25
    373a:	3d 19       	sub	r19, r13
    373c:	21 e0       	ldi	r18, 0x01	; 1
    373e:	2c 0d       	add	r18, r12
    3740:	99 19       	sub	r25, r9
    3742:	01 e0       	ldi	r16, 0x01	; 1
    3744:	08 0f       	add	r16, r24
    3746:	89 0f       	add	r24, r25
    3748:	c3 0e       	add	r12, r19
    374a:	0b c0       	rjmp	.+22     	; 0x3762 <u8g2_font_decode_glyph+0xe8>
    374c:	29 2d       	mov	r18, r9
    374e:	2c 0d       	add	r18, r12
    3750:	98 2f       	mov	r25, r24
    3752:	9d 19       	sub	r25, r13
    3754:	01 e0       	ldi	r16, 0x01	; 1
    3756:	08 0f       	add	r16, r24
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	89 0f       	add	r24, r25
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <u8g2_font_decode_glyph+0xe8>
    375e:	08 2f       	mov	r16, r24
    3760:	2c 2d       	mov	r18, r12
    3762:	48 2f       	mov	r20, r24
    3764:	6c 2d       	mov	r22, r12
    3766:	ce 01       	movw	r24, r28
    3768:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    376c:	88 23       	and	r24, r24
    376e:	81 f1       	breq	.+96     	; 0x37d0 <u8g2_font_decode_glyph+0x156>
    3770:	1d ae       	std	Y+61, r1	; 0x3d
    3772:	1e ae       	std	Y+62, r1	; 0x3e
    3774:	5e 01       	movw	r10, r28
    3776:	e8 e4       	ldi	r30, 0x48	; 72
    3778:	ae 0e       	add	r10, r30
    377a:	b1 1c       	adc	r11, r1
    377c:	6e 01       	movw	r12, r28
    377e:	f9 e4       	ldi	r31, 0x49	; 73
    3780:	cf 0e       	add	r12, r31
    3782:	d1 1c       	adc	r13, r1
    3784:	f5 01       	movw	r30, r10
    3786:	60 81       	ld	r22, Z
    3788:	c7 01       	movw	r24, r14
    378a:	0e 94 22 1a 	call	0x3444	; 0x3444 <u8g2_font_decode_get_unsigned_bits>
    378e:	08 2f       	mov	r16, r24
    3790:	f6 01       	movw	r30, r12
    3792:	60 81       	ld	r22, Z
    3794:	c7 01       	movw	r24, r14
    3796:	0e 94 22 1a 	call	0x3444	; 0x3444 <u8g2_font_decode_get_unsigned_bits>
    379a:	18 2f       	mov	r17, r24
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	60 2f       	mov	r22, r16
    37a0:	ce 01       	movw	r24, r28
    37a2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <u8g2_font_decode_len>
    37a6:	41 e0       	ldi	r20, 0x01	; 1
    37a8:	61 2f       	mov	r22, r17
    37aa:	ce 01       	movw	r24, r28
    37ac:	0e 94 ab 1a 	call	0x3556	; 0x3556 <u8g2_font_decode_len>
    37b0:	61 e0       	ldi	r22, 0x01	; 1
    37b2:	c7 01       	movw	r24, r14
    37b4:	0e 94 22 1a 	call	0x3444	; 0x3444 <u8g2_font_decode_get_unsigned_bits>
    37b8:	81 11       	cpse	r24, r1
    37ba:	f0 cf       	rjmp	.-32     	; 0x379c <u8g2_font_decode_glyph+0x122>
    37bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    37be:	89 15       	cp	r24, r9
    37c0:	0c f3       	brlt	.-62     	; 0x3784 <u8g2_font_decode_glyph+0x10a>
    37c2:	fe 01       	movw	r30, r28
    37c4:	ed 59       	subi	r30, 0x9D	; 157
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	cd 5b       	subi	r28, 0xBD	; 189
    37ca:	df 4f       	sbci	r29, 0xFF	; 255
    37cc:	88 81       	ld	r24, Y
    37ce:	80 83       	st	Z, r24
    37d0:	88 2d       	mov	r24, r8
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	ff 90       	pop	r15
    37dc:	ef 90       	pop	r14
    37de:	df 90       	pop	r13
    37e0:	cf 90       	pop	r12
    37e2:	bf 90       	pop	r11
    37e4:	af 90       	pop	r10
    37e6:	9f 90       	pop	r9
    37e8:	8f 90       	pop	r8
    37ea:	08 95       	ret

000037ec <u8g2_font_get_glyph_data>:
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	0f 93       	push	r16
    37f2:	1f 93       	push	r17
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	fc 01       	movw	r30, r24
    37fa:	c5 a9       	ldd	r28, Z+53	; 0x35
    37fc:	d6 a9       	ldd	r29, Z+54	; 0x36
    37fe:	67 96       	adiw	r28, 0x17	; 23
    3800:	6f 3f       	cpi	r22, 0xFF	; 255
    3802:	71 05       	cpc	r23, r1
    3804:	11 f0       	breq	.+4      	; 0x380a <u8g2_font_get_glyph_data+0x1e>
    3806:	08 f0       	brcs	.+2      	; 0x380a <u8g2_font_get_glyph_data+0x1e>
    3808:	36 c0       	rjmp	.+108    	; 0x3876 <u8g2_font_get_glyph_data+0x8a>
    380a:	61 36       	cpi	r22, 0x61	; 97
    380c:	71 05       	cpc	r23, r1
    380e:	38 f0       	brcs	.+14     	; 0x381e <u8g2_font_get_glyph_data+0x32>
    3810:	e7 5a       	subi	r30, 0xA7	; 167
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	80 81       	ld	r24, Z
    3816:	91 81       	ldd	r25, Z+1	; 0x01
    3818:	c8 0f       	add	r28, r24
    381a:	d9 1f       	adc	r29, r25
    381c:	0a c0       	rjmp	.+20     	; 0x3832 <u8g2_font_get_glyph_data+0x46>
    381e:	61 34       	cpi	r22, 0x41	; 65
    3820:	71 05       	cpc	r23, r1
    3822:	38 f0       	brcs	.+14     	; 0x3832 <u8g2_font_get_glyph_data+0x46>
    3824:	fc 01       	movw	r30, r24
    3826:	e9 5a       	subi	r30, 0xA9	; 169
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	80 81       	ld	r24, Z
    382c:	91 81       	ldd	r25, Z+1	; 0x01
    382e:	c8 0f       	add	r28, r24
    3830:	d9 1f       	adc	r29, r25
    3832:	ce 01       	movw	r24, r28
    3834:	01 96       	adiw	r24, 0x01	; 1
    3836:	fc 01       	movw	r30, r24
    3838:	24 91       	lpm	r18, Z
    383a:	22 23       	and	r18, r18
    383c:	09 f4       	brne	.+2      	; 0x3840 <u8g2_font_get_glyph_data+0x54>
    383e:	5a c0       	rjmp	.+180    	; 0x38f4 <u8g2_font_get_glyph_data+0x108>
    3840:	fe 01       	movw	r30, r28
    3842:	24 91       	lpm	r18, Z
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	62 17       	cp	r22, r18
    3848:	73 07       	cpc	r23, r19
    384a:	51 f4       	brne	.+20     	; 0x3860 <u8g2_font_get_glyph_data+0x74>
    384c:	06 c0       	rjmp	.+12     	; 0x385a <u8g2_font_get_glyph_data+0x6e>
    384e:	fe 01       	movw	r30, r28
    3850:	24 91       	lpm	r18, Z
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	62 17       	cp	r22, r18
    3856:	73 07       	cpc	r23, r19
    3858:	19 f4       	brne	.+6      	; 0x3860 <u8g2_font_get_glyph_data+0x74>
    385a:	ce 01       	movw	r24, r28
    385c:	02 96       	adiw	r24, 0x02	; 2
    385e:	52 c0       	rjmp	.+164    	; 0x3904 <u8g2_font_get_glyph_data+0x118>
    3860:	fc 01       	movw	r30, r24
    3862:	84 91       	lpm	r24, Z
    3864:	c8 0f       	add	r28, r24
    3866:	d1 1d       	adc	r29, r1
    3868:	ce 01       	movw	r24, r28
    386a:	01 96       	adiw	r24, 0x01	; 1
    386c:	fc 01       	movw	r30, r24
    386e:	24 91       	lpm	r18, Z
    3870:	21 11       	cpse	r18, r1
    3872:	ed cf       	rjmp	.-38     	; 0x384e <u8g2_font_get_glyph_data+0x62>
    3874:	42 c0       	rjmp	.+132    	; 0x38fa <u8g2_font_get_glyph_data+0x10e>
    3876:	8b 01       	movw	r16, r22
    3878:	fc 01       	movw	r30, r24
    387a:	e5 5a       	subi	r30, 0xA5	; 165
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	80 81       	ld	r24, Z
    3880:	91 81       	ldd	r25, Z+1	; 0x01
    3882:	c8 0f       	add	r28, r24
    3884:	d9 1f       	adc	r29, r25
    3886:	7e 01       	movw	r14, r28
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	c7 01       	movw	r24, r14
    388c:	0e 94 b5 19 	call	0x336a	; 0x336a <u8g2_font_get_word>
    3890:	c8 0f       	add	r28, r24
    3892:	d9 1f       	adc	r29, r25
    3894:	62 e0       	ldi	r22, 0x02	; 2
    3896:	c7 01       	movw	r24, r14
    3898:	0e 94 b5 19 	call	0x336a	; 0x336a <u8g2_font_get_word>
    389c:	f4 e0       	ldi	r31, 0x04	; 4
    389e:	ef 0e       	add	r14, r31
    38a0:	f1 1c       	adc	r15, r1
    38a2:	80 17       	cp	r24, r16
    38a4:	91 07       	cpc	r25, r17
    38a6:	80 f3       	brcs	.-32     	; 0x3888 <u8g2_font_get_glyph_data+0x9c>
    38a8:	fe 01       	movw	r30, r28
    38aa:	84 91       	lpm	r24, Z
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	98 2f       	mov	r25, r24
    38b0:	88 27       	eor	r24, r24
    38b2:	31 96       	adiw	r30, 0x01	; 1
    38b4:	e4 91       	lpm	r30, Z
    38b6:	8e 2b       	or	r24, r30
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	11 f1       	breq	.+68     	; 0x3900 <u8g2_font_get_glyph_data+0x114>
    38bc:	08 17       	cp	r16, r24
    38be:	19 07       	cpc	r17, r25
    38c0:	39 f4       	brne	.+14     	; 0x38d0 <u8g2_font_get_glyph_data+0xe4>
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <u8g2_font_get_glyph_data+0xde>
    38c4:	08 17       	cp	r16, r24
    38c6:	19 07       	cpc	r17, r25
    38c8:	19 f4       	brne	.+6      	; 0x38d0 <u8g2_font_get_glyph_data+0xe4>
    38ca:	ce 01       	movw	r24, r28
    38cc:	03 96       	adiw	r24, 0x03	; 3
    38ce:	1a c0       	rjmp	.+52     	; 0x3904 <u8g2_font_get_glyph_data+0x118>
    38d0:	fe 01       	movw	r30, r28
    38d2:	32 96       	adiw	r30, 0x02	; 2
    38d4:	e4 91       	lpm	r30, Z
    38d6:	ce 0f       	add	r28, r30
    38d8:	d1 1d       	adc	r29, r1
    38da:	fe 01       	movw	r30, r28
    38dc:	84 91       	lpm	r24, Z
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	98 2f       	mov	r25, r24
    38e2:	88 27       	eor	r24, r24
    38e4:	31 96       	adiw	r30, 0x01	; 1
    38e6:	e4 91       	lpm	r30, Z
    38e8:	8e 2b       	or	r24, r30
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	59 f7       	brne	.-42     	; 0x38c4 <u8g2_font_get_glyph_data+0xd8>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	08 c0       	rjmp	.+16     	; 0x3904 <u8g2_font_get_glyph_data+0x118>
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	05 c0       	rjmp	.+10     	; 0x3904 <u8g2_font_get_glyph_data+0x118>
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	02 c0       	rjmp	.+4      	; 0x3904 <u8g2_font_get_glyph_data+0x118>
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	1f 91       	pop	r17
    390a:	0f 91       	pop	r16
    390c:	ff 90       	pop	r15
    390e:	ef 90       	pop	r14
    3910:	08 95       	ret

00003912 <u8g2_GetGlyphWidth>:
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	ec 01       	movw	r28, r24
    391c:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <u8g2_font_get_glyph_data>
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	f1 f0       	breq	.+60     	; 0x3960 <u8g2_GetGlyphWidth+0x4e>
    3924:	bc 01       	movw	r22, r24
    3926:	ce 01       	movw	r24, r28
    3928:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <u8g2_font_setup_decode>
    392c:	8e 01       	movw	r16, r28
    392e:	07 5c       	subi	r16, 0xC7	; 199
    3930:	1f 4f       	sbci	r17, 0xFF	; 255
    3932:	fe 01       	movw	r30, r28
    3934:	e4 5b       	subi	r30, 0xB4	; 180
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	60 81       	ld	r22, Z
    393a:	c8 01       	movw	r24, r16
    393c:	0e 94 80 1a 	call	0x3500	; 0x3500 <u8g2_font_decode_get_signed_bits>
    3940:	fe 01       	movw	r30, r28
    3942:	ef 59       	subi	r30, 0x9F	; 159
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	80 83       	st	Z, r24
    3948:	74 97       	sbiw	r30, 0x14	; 20
    394a:	60 81       	ld	r22, Z
    394c:	c8 01       	movw	r24, r16
    394e:	0e 94 80 1a 	call	0x3500	; 0x3500 <u8g2_font_decode_get_signed_bits>
    3952:	c2 5b       	subi	r28, 0xB2	; 178
    3954:	df 4f       	sbci	r29, 0xFF	; 255
    3956:	68 81       	ld	r22, Y
    3958:	c8 01       	movw	r24, r16
    395a:	0e 94 80 1a 	call	0x3500	; 0x3500 <u8g2_font_decode_get_signed_bits>
    395e:	01 c0       	rjmp	.+2      	; 0x3962 <u8g2_GetGlyphWidth+0x50>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <u8g2_string_width>:
    396c:	ef 92       	push	r14
    396e:	ff 92       	push	r15
    3970:	0f 93       	push	r16
    3972:	1f 93       	push	r17
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	ec 01       	movw	r28, r24
    397a:	e6 2e       	mov	r14, r22
    397c:	f7 2e       	mov	r15, r23
    397e:	1f ae       	std	Y+63, r1	; 0x3f
    3980:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <u8x8_utf8_init>
    3984:	0e 2d       	mov	r16, r14
    3986:	1f 2d       	mov	r17, r15
    3988:	e1 2c       	mov	r14, r1
    398a:	f1 2c       	mov	r15, r1
    398c:	f8 01       	movw	r30, r16
    398e:	61 91       	ld	r22, Z+
    3990:	8f 01       	movw	r16, r30
    3992:	ea 81       	ldd	r30, Y+2	; 0x02
    3994:	fb 81       	ldd	r31, Y+3	; 0x03
    3996:	ce 01       	movw	r24, r28
    3998:	09 95       	icall
    399a:	8f 3f       	cpi	r24, 0xFF	; 255
    399c:	ff ef       	ldi	r31, 0xFF	; 255
    399e:	9f 07       	cpc	r25, r31
    39a0:	59 f0       	breq	.+22     	; 0x39b8 <u8g2_string_width+0x4c>
    39a2:	8e 3f       	cpi	r24, 0xFE	; 254
    39a4:	2f ef       	ldi	r18, 0xFF	; 255
    39a6:	92 07       	cpc	r25, r18
    39a8:	89 f3       	breq	.-30     	; 0x398c <u8g2_string_width+0x20>
    39aa:	bc 01       	movw	r22, r24
    39ac:	ce 01       	movw	r24, r28
    39ae:	0e 94 89 1c 	call	0x3912	; 0x3912 <u8g2_GetGlyphWidth>
    39b2:	e8 2e       	mov	r14, r24
    39b4:	f8 0e       	add	r15, r24
    39b6:	ea cf       	rjmp	.-44     	; 0x398c <u8g2_string_width+0x20>
    39b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    39ba:	88 23       	and	r24, r24
    39bc:	31 f0       	breq	.+12     	; 0x39ca <u8g2_string_width+0x5e>
    39be:	cf 59       	subi	r28, 0x9F	; 159
    39c0:	df 4f       	sbci	r29, 0xFF	; 255
    39c2:	98 81       	ld	r25, Y
    39c4:	89 0f       	add	r24, r25
    39c6:	f8 0e       	add	r15, r24
    39c8:	fe 18       	sub	r15, r14
    39ca:	8f 2d       	mov	r24, r15
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	ff 90       	pop	r15
    39d6:	ef 90       	pop	r14
    39d8:	08 95       	ret

000039da <u8g2_DrawGlyph>:
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	ec 01       	movw	r28, r24
    39e8:	06 2f       	mov	r16, r22
    39ea:	14 2f       	mov	r17, r20
    39ec:	79 01       	movw	r14, r18
    39ee:	fc 01       	movw	r30, r24
    39f0:	eb 5b       	subi	r30, 0xBB	; 187
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	80 81       	ld	r24, Z
    39f6:	81 30       	cpi	r24, 0x01	; 1
    39f8:	61 f0       	breq	.+24     	; 0x3a12 <u8g2_DrawGlyph+0x38>
    39fa:	28 f0       	brcs	.+10     	; 0x3a06 <u8g2_DrawGlyph+0x2c>
    39fc:	82 30       	cpi	r24, 0x02	; 2
    39fe:	79 f0       	breq	.+30     	; 0x3a1e <u8g2_DrawGlyph+0x44>
    3a00:	83 30       	cpi	r24, 0x03	; 3
    3a02:	99 f0       	breq	.+38     	; 0x3a2a <u8g2_DrawGlyph+0x50>
    3a04:	17 c0       	rjmp	.+46     	; 0x3a34 <u8g2_DrawGlyph+0x5a>
    3a06:	ef a9       	ldd	r30, Y+55	; 0x37
    3a08:	f8 ad       	ldd	r31, Y+56	; 0x38
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	09 95       	icall
    3a0e:	18 0f       	add	r17, r24
    3a10:	11 c0       	rjmp	.+34     	; 0x3a34 <u8g2_DrawGlyph+0x5a>
    3a12:	ef a9       	ldd	r30, Y+55	; 0x37
    3a14:	f8 ad       	ldd	r31, Y+56	; 0x38
    3a16:	ce 01       	movw	r24, r28
    3a18:	09 95       	icall
    3a1a:	08 1b       	sub	r16, r24
    3a1c:	0b c0       	rjmp	.+22     	; 0x3a34 <u8g2_DrawGlyph+0x5a>
    3a1e:	ef a9       	ldd	r30, Y+55	; 0x37
    3a20:	f8 ad       	ldd	r31, Y+56	; 0x38
    3a22:	ce 01       	movw	r24, r28
    3a24:	09 95       	icall
    3a26:	18 1b       	sub	r17, r24
    3a28:	05 c0       	rjmp	.+10     	; 0x3a34 <u8g2_DrawGlyph+0x5a>
    3a2a:	ef a9       	ldd	r30, Y+55	; 0x37
    3a2c:	f8 ad       	ldd	r31, Y+56	; 0x38
    3a2e:	ce 01       	movw	r24, r28
    3a30:	09 95       	icall
    3a32:	08 0f       	add	r16, r24
    3a34:	0b af       	std	Y+59, r16	; 0x3b
    3a36:	1c af       	std	Y+60, r17	; 0x3c
    3a38:	b7 01       	movw	r22, r14
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <u8g2_font_get_glyph_data>
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	29 f0       	breq	.+10     	; 0x3a4e <u8g2_DrawGlyph+0x74>
    3a44:	bc 01       	movw	r22, r24
    3a46:	ce 01       	movw	r24, r28
    3a48:	0e 94 3d 1b 	call	0x367a	; 0x367a <u8g2_font_decode_glyph>
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <u8g2_DrawGlyph+0x76>
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	08 95       	ret

00003a5e <u8g2_draw_string>:
    3a5e:	bf 92       	push	r11
    3a60:	cf 92       	push	r12
    3a62:	df 92       	push	r13
    3a64:	ef 92       	push	r14
    3a66:	ff 92       	push	r15
    3a68:	0f 93       	push	r16
    3a6a:	1f 93       	push	r17
    3a6c:	cf 93       	push	r28
    3a6e:	df 93       	push	r29
    3a70:	ec 01       	movw	r28, r24
    3a72:	b6 2e       	mov	r11, r22
    3a74:	c4 2e       	mov	r12, r20
    3a76:	e2 2e       	mov	r14, r18
    3a78:	f3 2e       	mov	r15, r19
    3a7a:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <u8x8_utf8_init>
    3a7e:	0e 2d       	mov	r16, r14
    3a80:	1f 2d       	mov	r17, r15
    3a82:	d1 2c       	mov	r13, r1
    3a84:	7e 01       	movw	r14, r28
    3a86:	25 e4       	ldi	r18, 0x45	; 69
    3a88:	e2 0e       	add	r14, r18
    3a8a:	f1 1c       	adc	r15, r1
    3a8c:	f8 01       	movw	r30, r16
    3a8e:	61 91       	ld	r22, Z+
    3a90:	8f 01       	movw	r16, r30
    3a92:	ea 81       	ldd	r30, Y+2	; 0x02
    3a94:	fb 81       	ldd	r31, Y+3	; 0x03
    3a96:	ce 01       	movw	r24, r28
    3a98:	09 95       	icall
    3a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a9c:	ff ef       	ldi	r31, 0xFF	; 255
    3a9e:	9f 07       	cpc	r25, r31
    3aa0:	e9 f0       	breq	.+58     	; 0x3adc <u8g2_draw_string+0x7e>
    3aa2:	8e 3f       	cpi	r24, 0xFE	; 254
    3aa4:	2f ef       	ldi	r18, 0xFF	; 255
    3aa6:	92 07       	cpc	r25, r18
    3aa8:	89 f3       	breq	.-30     	; 0x3a8c <u8g2_draw_string+0x2e>
    3aaa:	9c 01       	movw	r18, r24
    3aac:	4c 2d       	mov	r20, r12
    3aae:	6b 2d       	mov	r22, r11
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	0e 94 ed 1c 	call	0x39da	; 0x39da <u8g2_DrawGlyph>
    3ab6:	f7 01       	movw	r30, r14
    3ab8:	90 81       	ld	r25, Z
    3aba:	91 30       	cpi	r25, 0x01	; 1
    3abc:	41 f0       	breq	.+16     	; 0x3ace <u8g2_draw_string+0x70>
    3abe:	28 f0       	brcs	.+10     	; 0x3aca <u8g2_draw_string+0x6c>
    3ac0:	92 30       	cpi	r25, 0x02	; 2
    3ac2:	39 f0       	breq	.+14     	; 0x3ad2 <u8g2_draw_string+0x74>
    3ac4:	93 30       	cpi	r25, 0x03	; 3
    3ac6:	39 f0       	breq	.+14     	; 0x3ad6 <u8g2_draw_string+0x78>
    3ac8:	07 c0       	rjmp	.+14     	; 0x3ad8 <u8g2_draw_string+0x7a>
    3aca:	b8 0e       	add	r11, r24
    3acc:	05 c0       	rjmp	.+10     	; 0x3ad8 <u8g2_draw_string+0x7a>
    3ace:	c8 0e       	add	r12, r24
    3ad0:	03 c0       	rjmp	.+6      	; 0x3ad8 <u8g2_draw_string+0x7a>
    3ad2:	b8 1a       	sub	r11, r24
    3ad4:	01 c0       	rjmp	.+2      	; 0x3ad8 <u8g2_draw_string+0x7a>
    3ad6:	c8 1a       	sub	r12, r24
    3ad8:	d8 0e       	add	r13, r24
    3ada:	d8 cf       	rjmp	.-80     	; 0x3a8c <u8g2_draw_string+0x2e>
    3adc:	8d 2d       	mov	r24, r13
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	1f 91       	pop	r17
    3ae4:	0f 91       	pop	r16
    3ae6:	ff 90       	pop	r15
    3ae8:	ef 90       	pop	r14
    3aea:	df 90       	pop	r13
    3aec:	cf 90       	pop	r12
    3aee:	bf 90       	pop	r11
    3af0:	08 95       	ret

00003af2 <u8g2_DrawStr>:
    3af2:	eb ee       	ldi	r30, 0xEB	; 235
    3af4:	ff e1       	ldi	r31, 0x1F	; 31
    3af6:	dc 01       	movw	r26, r24
    3af8:	13 96       	adiw	r26, 0x03	; 3
    3afa:	fc 93       	st	X, r31
    3afc:	ee 93       	st	-X, r30
    3afe:	12 97       	sbiw	r26, 0x02	; 2
    3b00:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <u8g2_draw_string>
    3b04:	08 95       	ret

00003b06 <u8g2_UpdateRefHeight>:
    3b06:	fc 01       	movw	r30, r24
    3b08:	25 a9       	ldd	r18, Z+53	; 0x35
    3b0a:	36 a9       	ldd	r19, Z+54	; 0x36
    3b0c:	23 2b       	or	r18, r19
    3b0e:	e9 f1       	breq	.+122    	; 0x3b8a <u8g2_UpdateRefHeight+0x84>
    3b10:	ed 5a       	subi	r30, 0xAD	; 173
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	20 81       	ld	r18, Z
    3b16:	3c 96       	adiw	r30, 0x0c	; 12
    3b18:	20 83       	st	Z, r18
    3b1a:	3b 97       	sbiw	r30, 0x0b	; 11
    3b1c:	40 81       	ld	r20, Z
    3b1e:	3c 96       	adiw	r30, 0x0c	; 12
    3b20:	40 83       	st	Z, r20
    3b22:	32 97       	sbiw	r30, 0x02	; 2
    3b24:	30 81       	ld	r19, Z
    3b26:	33 23       	and	r19, r19
    3b28:	81 f1       	breq	.+96     	; 0x3b8a <u8g2_UpdateRefHeight+0x84>
    3b2a:	31 30       	cpi	r19, 0x01	; 1
    3b2c:	79 f4       	brne	.+30     	; 0x3b4c <u8g2_UpdateRefHeight+0x46>
    3b2e:	39 97       	sbiw	r30, 0x09	; 9
    3b30:	30 81       	ld	r19, Z
    3b32:	23 17       	cp	r18, r19
    3b34:	14 f4       	brge	.+4      	; 0x3b3a <u8g2_UpdateRefHeight+0x34>
    3b36:	3a 96       	adiw	r30, 0x0a	; 10
    3b38:	30 83       	st	Z, r19
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	ea 5a       	subi	r30, 0xAA	; 170
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	20 81       	ld	r18, Z
    3b42:	24 17       	cp	r18, r20
    3b44:	14 f5       	brge	.+68     	; 0x3b8a <u8g2_UpdateRefHeight+0x84>
    3b46:	3a 96       	adiw	r30, 0x0a	; 10
    3b48:	20 83       	st	Z, r18
    3b4a:	08 95       	ret
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e0 5b       	subi	r30, 0xB0	; 176
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	e0 81       	ld	r30, Z
    3b54:	dc 01       	movw	r26, r24
    3b56:	ae 5a       	subi	r26, 0xAE	; 174
    3b58:	bf 4f       	sbci	r27, 0xFF	; 255
    3b5a:	5c 91       	ld	r21, X
    3b5c:	02 2e       	mov	r0, r18
    3b5e:	00 0c       	add	r0, r0
    3b60:	33 0b       	sbc	r19, r19
    3b62:	65 2f       	mov	r22, r21
    3b64:	05 2e       	mov	r0, r21
    3b66:	00 0c       	add	r0, r0
    3b68:	77 0b       	sbc	r23, r23
    3b6a:	6e 0f       	add	r22, r30
    3b6c:	71 1d       	adc	r23, r1
    3b6e:	e7 fd       	sbrc	r30, 7
    3b70:	7a 95       	dec	r23
    3b72:	26 17       	cp	r18, r22
    3b74:	37 07       	cpc	r19, r23
    3b76:	1c f4       	brge	.+6      	; 0x3b7e <u8g2_UpdateRefHeight+0x78>
    3b78:	1d 96       	adiw	r26, 0x0d	; 13
    3b7a:	e5 0f       	add	r30, r21
    3b7c:	ec 93       	st	X, r30
    3b7e:	54 17       	cp	r21, r20
    3b80:	24 f4       	brge	.+8      	; 0x3b8a <u8g2_UpdateRefHeight+0x84>
    3b82:	fc 01       	movw	r30, r24
    3b84:	e0 5a       	subi	r30, 0xA0	; 160
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	50 83       	st	Z, r21
    3b8a:	08 95       	ret

00003b8c <u8g2_SetFontPosBaseline>:
    3b8c:	21 ec       	ldi	r18, 0xC1	; 193
    3b8e:	39 e1       	ldi	r19, 0x19	; 25
    3b90:	fc 01       	movw	r30, r24
    3b92:	30 af       	std	Z+56, r19	; 0x38
    3b94:	27 ab       	std	Z+55, r18	; 0x37
    3b96:	08 95       	ret

00003b98 <u8g2_SetFont>:
    3b98:	cf 93       	push	r28
    3b9a:	df 93       	push	r29
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	25 a9       	ldd	r18, Z+53	; 0x35
    3ba0:	36 a9       	ldd	r19, Z+54	; 0x36
    3ba2:	26 17       	cp	r18, r22
    3ba4:	37 07       	cpc	r19, r23
    3ba6:	51 f0       	breq	.+20     	; 0x3bbc <u8g2_SetFont+0x24>
    3ba8:	ec 01       	movw	r28, r24
    3baa:	76 ab       	std	Z+54, r23	; 0x36
    3bac:	65 ab       	std	Z+53, r22	; 0x35
    3bae:	8a 5b       	subi	r24, 0xBA	; 186
    3bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb2:	0e 94 c3 19 	call	0x3386	; 0x3386 <u8g2_read_font_info>
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <u8g2_UpdateRefHeight>
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	08 95       	ret

00003bc2 <u8g2_GetStrWidth>:
    3bc2:	2b ee       	ldi	r18, 0xEB	; 235
    3bc4:	3f e1       	ldi	r19, 0x1F	; 31
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	33 83       	std	Z+3, r19	; 0x03
    3bca:	22 83       	std	Z+2, r18	; 0x02
    3bcc:	0e 94 b6 1c 	call	0x396c	; 0x396c <u8g2_string_width>
    3bd0:	08 95       	ret

00003bd2 <u8g2_SetFontDirection>:
    3bd2:	8b 5b       	subi	r24, 0xBB	; 187
    3bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	60 83       	st	Z, r22
    3bda:	08 95       	ret

00003bdc <u8g2_draw_hv_line_2dir>:
    3bdc:	0f 93       	push	r16
    3bde:	dc 01       	movw	r26, r24
    3be0:	98 96       	adiw	r26, 0x28	; 40
    3be2:	3c 91       	ld	r19, X
    3be4:	98 97       	sbiw	r26, 0x28	; 40
    3be6:	43 1b       	sub	r20, r19
    3be8:	5e 96       	adiw	r26, 0x1e	; 30
    3bea:	ed 91       	ld	r30, X+
    3bec:	fc 91       	ld	r31, X
    3bee:	5f 97       	sbiw	r26, 0x1f	; 31
    3bf0:	09 95       	icall
    3bf2:	0f 91       	pop	r16
    3bf4:	08 95       	ret

00003bf6 <u8g2_DrawHVLine>:
    3bf6:	0f 93       	push	r16
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	e3 5a       	subi	r30, 0xA3	; 163
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	30 81       	ld	r19, Z
    3c00:	33 23       	and	r19, r19
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <u8g2_DrawHVLine+0x10>
    3c04:	65 c0       	rjmp	.+202    	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c06:	22 23       	and	r18, r18
    3c08:	09 f4       	brne	.+2      	; 0x3c0c <u8g2_DrawHVLine+0x16>
    3c0a:	62 c0       	rjmp	.+196    	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c0c:	22 30       	cpi	r18, 0x02	; 2
    3c0e:	58 f0       	brcs	.+22     	; 0x3c26 <u8g2_DrawHVLine+0x30>
    3c10:	02 30       	cpi	r16, 0x02	; 2
    3c12:	19 f4       	brne	.+6      	; 0x3c1a <u8g2_DrawHVLine+0x24>
    3c14:	6f 5f       	subi	r22, 0xFF	; 255
    3c16:	62 1b       	sub	r22, r18
    3c18:	0a c0       	rjmp	.+20     	; 0x3c2e <u8g2_DrawHVLine+0x38>
    3c1a:	03 30       	cpi	r16, 0x03	; 3
    3c1c:	21 f4       	brne	.+8      	; 0x3c26 <u8g2_DrawHVLine+0x30>
    3c1e:	4f 5f       	subi	r20, 0xFF	; 255
    3c20:	42 1b       	sub	r20, r18
    3c22:	51 e0       	ldi	r21, 0x01	; 1
    3c24:	2d c0       	rjmp	.+90     	; 0x3c80 <u8g2_DrawHVLine+0x8a>
    3c26:	50 2f       	mov	r21, r16
    3c28:	51 70       	andi	r21, 0x01	; 1
    3c2a:	00 fd       	sbrc	r16, 0
    3c2c:	29 c0       	rjmp	.+82     	; 0x3c80 <u8g2_DrawHVLine+0x8a>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	9f 96       	adiw	r26, 0x2f	; 47
    3c32:	3c 91       	ld	r19, X
    3c34:	9f 97       	sbiw	r26, 0x2f	; 47
    3c36:	43 17       	cp	r20, r19
    3c38:	08 f4       	brcc	.+2      	; 0x3c3c <u8g2_DrawHVLine+0x46>
    3c3a:	4a c0       	rjmp	.+148    	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c3c:	d0 96       	adiw	r26, 0x30	; 48
    3c3e:	3c 91       	ld	r19, X
    3c40:	d0 97       	sbiw	r26, 0x30	; 48
    3c42:	43 17       	cp	r20, r19
    3c44:	08 f0       	brcs	.+2      	; 0x3c48 <u8g2_DrawHVLine+0x52>
    3c46:	44 c0       	rjmp	.+136    	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c48:	9e 96       	adiw	r26, 0x2e	; 46
    3c4a:	3c 91       	ld	r19, X
    3c4c:	9e 97       	sbiw	r26, 0x2e	; 46
    3c4e:	9d 96       	adiw	r26, 0x2d	; 45
    3c50:	5c 91       	ld	r21, X
    3c52:	26 0f       	add	r18, r22
    3c54:	26 17       	cp	r18, r22
    3c56:	30 f4       	brcc	.+12     	; 0x3c64 <u8g2_DrawHVLine+0x6e>
    3c58:	63 17       	cp	r22, r19
    3c5a:	18 f4       	brcc	.+6      	; 0x3c62 <u8g2_DrawHVLine+0x6c>
    3c5c:	2f ef       	ldi	r18, 0xFF	; 255
    3c5e:	23 0f       	add	r18, r19
    3c60:	03 c0       	rjmp	.+6      	; 0x3c68 <u8g2_DrawHVLine+0x72>
    3c62:	65 2f       	mov	r22, r21
    3c64:	63 17       	cp	r22, r19
    3c66:	a0 f5       	brcc	.+104    	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c68:	52 17       	cp	r21, r18
    3c6a:	90 f5       	brcc	.+100    	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c6c:	65 17       	cp	r22, r21
    3c6e:	08 f4       	brcc	.+2      	; 0x3c72 <u8g2_DrawHVLine+0x7c>
    3c70:	65 2f       	mov	r22, r21
    3c72:	23 17       	cp	r18, r19
    3c74:	08 f4       	brcc	.+2      	; 0x3c78 <u8g2_DrawHVLine+0x82>
    3c76:	32 2f       	mov	r19, r18
    3c78:	23 2f       	mov	r18, r19
    3c7a:	26 1b       	sub	r18, r22
    3c7c:	50 e0       	ldi	r21, 0x00	; 0
    3c7e:	1e c0       	rjmp	.+60     	; 0x3cbc <u8g2_DrawHVLine+0xc6>
    3c80:	fc 01       	movw	r30, r24
    3c82:	35 a5       	ldd	r19, Z+45	; 0x2d
    3c84:	63 17       	cp	r22, r19
    3c86:	20 f1       	brcs	.+72     	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c88:	36 a5       	ldd	r19, Z+46	; 0x2e
    3c8a:	63 17       	cp	r22, r19
    3c8c:	08 f5       	brcc	.+66     	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3c8e:	30 a9       	ldd	r19, Z+48	; 0x30
    3c90:	77 a5       	ldd	r23, Z+47	; 0x2f
    3c92:	24 0f       	add	r18, r20
    3c94:	24 17       	cp	r18, r20
    3c96:	30 f4       	brcc	.+12     	; 0x3ca4 <u8g2_DrawHVLine+0xae>
    3c98:	43 17       	cp	r20, r19
    3c9a:	18 f4       	brcc	.+6      	; 0x3ca2 <u8g2_DrawHVLine+0xac>
    3c9c:	2f ef       	ldi	r18, 0xFF	; 255
    3c9e:	23 0f       	add	r18, r19
    3ca0:	03 c0       	rjmp	.+6      	; 0x3ca8 <u8g2_DrawHVLine+0xb2>
    3ca2:	47 2f       	mov	r20, r23
    3ca4:	43 17       	cp	r20, r19
    3ca6:	a0 f4       	brcc	.+40     	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3ca8:	72 17       	cp	r23, r18
    3caa:	90 f4       	brcc	.+36     	; 0x3cd0 <u8g2_DrawHVLine+0xda>
    3cac:	47 17       	cp	r20, r23
    3cae:	08 f4       	brcc	.+2      	; 0x3cb2 <u8g2_DrawHVLine+0xbc>
    3cb0:	47 2f       	mov	r20, r23
    3cb2:	23 17       	cp	r18, r19
    3cb4:	08 f4       	brcc	.+2      	; 0x3cb8 <u8g2_DrawHVLine+0xc2>
    3cb6:	32 2f       	mov	r19, r18
    3cb8:	23 2f       	mov	r18, r19
    3cba:	24 1b       	sub	r18, r20
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	90 96       	adiw	r26, 0x20	; 32
    3cc0:	ed 91       	ld	r30, X+
    3cc2:	fc 91       	ld	r31, X
    3cc4:	91 97       	sbiw	r26, 0x21	; 33
    3cc6:	04 80       	ldd	r0, Z+4	; 0x04
    3cc8:	f5 81       	ldd	r31, Z+5	; 0x05
    3cca:	e0 2d       	mov	r30, r0
    3ccc:	05 2f       	mov	r16, r21
    3cce:	09 95       	icall
    3cd0:	0f 91       	pop	r16
    3cd2:	08 95       	ret

00003cd4 <u8g2_DrawHLine>:
    3cd4:	0f 93       	push	r16
    3cd6:	00 e0       	ldi	r16, 0x00	; 0
    3cd8:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    3cdc:	0f 91       	pop	r16
    3cde:	08 95       	ret

00003ce0 <u8g2_DrawVLine>:
    3ce0:	0f 93       	push	r16
    3ce2:	01 e0       	ldi	r16, 0x01	; 1
    3ce4:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    3ce8:	0f 91       	pop	r16
    3cea:	08 95       	ret

00003cec <u8g2_DrawPixel>:
    3cec:	0f 93       	push	r16
    3cee:	fc 01       	movw	r30, r24
    3cf0:	87 a5       	ldd	r24, Z+47	; 0x2f
    3cf2:	48 17       	cp	r20, r24
    3cf4:	70 f0       	brcs	.+28     	; 0x3d12 <u8g2_DrawPixel+0x26>
    3cf6:	80 a9       	ldd	r24, Z+48	; 0x30
    3cf8:	48 17       	cp	r20, r24
    3cfa:	58 f4       	brcc	.+22     	; 0x3d12 <u8g2_DrawPixel+0x26>
    3cfc:	85 a5       	ldd	r24, Z+45	; 0x2d
    3cfe:	68 17       	cp	r22, r24
    3d00:	40 f0       	brcs	.+16     	; 0x3d12 <u8g2_DrawPixel+0x26>
    3d02:	86 a5       	ldd	r24, Z+46	; 0x2e
    3d04:	68 17       	cp	r22, r24
    3d06:	28 f4       	brcc	.+10     	; 0x3d12 <u8g2_DrawPixel+0x26>
    3d08:	cf 01       	movw	r24, r30
    3d0a:	00 e0       	ldi	r16, 0x00	; 0
    3d0c:	21 e0       	ldi	r18, 0x01	; 1
    3d0e:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <u8g2_DrawHVLine>
    3d12:	0f 91       	pop	r16
    3d14:	08 95       	ret

00003d16 <u8g2_SetDrawColor>:
    3d16:	63 30       	cpi	r22, 0x03	; 3
    3d18:	28 f4       	brcc	.+10     	; 0x3d24 <u8g2_SetDrawColor+0xe>
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	ed 59       	subi	r30, 0x9D	; 157
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	60 83       	st	Z, r22
    3d22:	08 95       	ret
    3d24:	fc 01       	movw	r30, r24
    3d26:	ed 59       	subi	r30, 0x9D	; 157
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	21 e0       	ldi	r18, 0x01	; 1
    3d2c:	20 83       	st	Z, r18
    3d2e:	08 95       	ret

00003d30 <u8g2_is_intersection_decision_tree>:
    3d30:	46 17       	cp	r20, r22
    3d32:	38 f4       	brcc	.+14     	; 0x3d42 <u8g2_is_intersection_decision_tree+0x12>
    3d34:	82 17       	cp	r24, r18
    3d36:	60 f0       	brcs	.+24     	; 0x3d50 <u8g2_is_intersection_decision_tree+0x20>
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	24 17       	cp	r18, r20
    3d3c:	60 f0       	brcs	.+24     	; 0x3d56 <u8g2_is_intersection_decision_tree+0x26>
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	08 95       	ret
    3d42:	82 17       	cp	r24, r18
    3d44:	38 f4       	brcc	.+14     	; 0x3d54 <u8g2_is_intersection_decision_tree+0x24>
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	24 17       	cp	r18, r20
    3d4a:	28 f0       	brcs	.+10     	; 0x3d56 <u8g2_is_intersection_decision_tree+0x26>
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	08 95       	ret
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	08 95       	ret
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	08 95       	ret

00003d58 <u8g2_IsIntersection>:
    3d58:	ff 92       	push	r15
    3d5a:	0f 93       	push	r16
    3d5c:	1f 93       	push	r17
    3d5e:	cf 93       	push	r28
    3d60:	df 93       	push	r29
    3d62:	ec 01       	movw	r28, r24
    3d64:	16 2f       	mov	r17, r22
    3d66:	f2 2e       	mov	r15, r18
    3d68:	20 2f       	mov	r18, r16
    3d6a:	68 a9       	ldd	r22, Y+48	; 0x30
    3d6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d6e:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <u8g2_is_intersection_decision_tree>
    3d72:	88 23       	and	r24, r24
    3d74:	31 f0       	breq	.+12     	; 0x3d82 <u8g2_IsIntersection+0x2a>
    3d76:	2f 2d       	mov	r18, r15
    3d78:	41 2f       	mov	r20, r17
    3d7a:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d7e:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <u8g2_is_intersection_decision_tree>
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	1f 91       	pop	r17
    3d88:	0f 91       	pop	r16
    3d8a:	ff 90       	pop	r15
    3d8c:	08 95       	ret

00003d8e <u8g2_ll_hvline_vertical_top_lsb>:
    3d8e:	ef 92       	push	r14
    3d90:	ff 92       	push	r15
    3d92:	0f 93       	push	r16
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	7c 01       	movw	r14, r24
    3d9a:	34 2f       	mov	r19, r20
    3d9c:	37 70       	andi	r19, 0x07	; 7
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	03 2e       	mov	r0, r19
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    3da6:	88 0f       	add	r24, r24
    3da8:	99 1f       	adc	r25, r25
    3daa:	0a 94       	dec	r0
    3dac:	e2 f7       	brpl	.-8      	; 0x3da6 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    3dae:	c8 2f       	mov	r28, r24
    3db0:	f7 01       	movw	r30, r14
    3db2:	ed 59       	subi	r30, 0x9D	; 157
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	50 81       	ld	r21, Z
    3db8:	52 30       	cpi	r21, 0x02	; 2
    3dba:	20 f4       	brcc	.+8      	; 0x3dc4 <u8g2_ll_hvline_vertical_top_lsb+0x36>
    3dbc:	51 30       	cpi	r21, 0x01	; 1
    3dbe:	21 f0       	breq	.+8      	; 0x3dc8 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
    3dc0:	78 2f       	mov	r23, r24
    3dc2:	04 c0       	rjmp	.+8      	; 0x3dcc <u8g2_ll_hvline_vertical_top_lsb+0x3e>
    3dc4:	70 e0       	ldi	r23, 0x00	; 0
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <u8g2_ll_hvline_vertical_top_lsb+0x3e>
    3dc8:	78 2f       	mov	r23, r24
    3dca:	c0 e0       	ldi	r28, 0x00	; 0
    3dcc:	50 e0       	ldi	r21, 0x00	; 0
    3dce:	48 7f       	andi	r20, 0xF8	; 248
    3dd0:	d7 01       	movw	r26, r14
    3dd2:	92 96       	adiw	r26, 0x22	; 34
    3dd4:	8d 91       	ld	r24, X+
    3dd6:	9c 91       	ld	r25, X
    3dd8:	93 97       	sbiw	r26, 0x23	; 35
    3dda:	ed 91       	ld	r30, X+
    3ddc:	fc 91       	ld	r31, X
    3dde:	d0 89       	ldd	r29, Z+16	; 0x10
    3de0:	d4 9f       	mul	r29, r20
    3de2:	f0 01       	movw	r30, r0
    3de4:	d5 9f       	mul	r29, r21
    3de6:	f0 0d       	add	r31, r0
    3de8:	11 24       	eor	r1, r1
    3dea:	e6 0f       	add	r30, r22
    3dec:	f1 1d       	adc	r31, r1
    3dee:	e8 0f       	add	r30, r24
    3df0:	f9 1f       	adc	r31, r25
    3df2:	01 11       	cpse	r16, r1
    3df4:	07 c0       	rjmp	.+14     	; 0x3e04 <u8g2_ll_hvline_vertical_top_lsb+0x76>
    3df6:	80 81       	ld	r24, Z
    3df8:	87 2b       	or	r24, r23
    3dfa:	8c 27       	eor	r24, r28
    3dfc:	81 93       	st	Z+, r24
    3dfe:	21 50       	subi	r18, 0x01	; 1
    3e00:	d1 f7       	brne	.-12     	; 0x3df6 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    3e02:	22 c0       	rjmp	.+68     	; 0x3e48 <u8g2_ll_hvline_vertical_top_lsb+0xba>
    3e04:	a7 01       	movw	r20, r14
    3e06:	4d 59       	subi	r20, 0x9D	; 157
    3e08:	5f 4f       	sbci	r21, 0xFF	; 255
    3e0a:	90 81       	ld	r25, Z
    3e0c:	97 2b       	or	r25, r23
    3e0e:	9c 27       	eor	r25, r28
    3e10:	90 83       	st	Z, r25
    3e12:	3f 5f       	subi	r19, 0xFF	; 255
    3e14:	37 70       	andi	r19, 0x07	; 7
    3e16:	21 50       	subi	r18, 0x01	; 1
    3e18:	31 11       	cpse	r19, r1
    3e1a:	0e c0       	rjmp	.+28     	; 0x3e38 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
    3e1c:	d7 01       	movw	r26, r14
    3e1e:	96 96       	adiw	r26, 0x26	; 38
    3e20:	8c 91       	ld	r24, X
    3e22:	e8 0f       	add	r30, r24
    3e24:	f1 1d       	adc	r31, r1
    3e26:	da 01       	movw	r26, r20
    3e28:	8c 91       	ld	r24, X
    3e2a:	82 30       	cpi	r24, 0x02	; 2
    3e2c:	40 f4       	brcc	.+16     	; 0x3e3e <u8g2_ll_hvline_vertical_top_lsb+0xb0>
    3e2e:	81 30       	cpi	r24, 0x01	; 1
    3e30:	41 f0       	breq	.+16     	; 0x3e42 <u8g2_ll_hvline_vertical_top_lsb+0xb4>
    3e32:	c1 e0       	ldi	r28, 0x01	; 1
    3e34:	71 e0       	ldi	r23, 0x01	; 1
    3e36:	06 c0       	rjmp	.+12     	; 0x3e44 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    3e38:	77 0f       	add	r23, r23
    3e3a:	cc 0f       	add	r28, r28
    3e3c:	03 c0       	rjmp	.+6      	; 0x3e44 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    3e3e:	c1 e0       	ldi	r28, 0x01	; 1
    3e40:	01 c0       	rjmp	.+2      	; 0x3e44 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    3e42:	71 e0       	ldi	r23, 0x01	; 1
    3e44:	21 11       	cpse	r18, r1
    3e46:	e1 cf       	rjmp	.-62     	; 0x3e0a <u8g2_ll_hvline_vertical_top_lsb+0x7c>
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	0f 91       	pop	r16
    3e4e:	ff 90       	pop	r15
    3e50:	ef 90       	pop	r14
    3e52:	08 95       	ret

00003e54 <u8g2_update_dimension_common>:
    3e54:	fc 01       	movw	r30, r24
    3e56:	a0 81       	ld	r26, Z
    3e58:	b1 81       	ldd	r27, Z+1	; 0x01
    3e5a:	84 a1       	ldd	r24, Z+36	; 0x24
    3e5c:	98 2f       	mov	r25, r24
    3e5e:	99 0f       	add	r25, r25
    3e60:	99 0f       	add	r25, r25
    3e62:	99 0f       	add	r25, r25
    3e64:	97 a3       	std	Z+39, r25	; 0x27
    3e66:	50 96       	adiw	r26, 0x10	; 16
    3e68:	9c 91       	ld	r25, X
    3e6a:	50 97       	sbiw	r26, 0x10	; 16
    3e6c:	90 32       	cpi	r25, 0x20	; 32
    3e6e:	08 f0       	brcs	.+2      	; 0x3e72 <u8g2_update_dimension_common+0x1e>
    3e70:	9f e1       	ldi	r25, 0x1F	; 31
    3e72:	99 0f       	add	r25, r25
    3e74:	99 0f       	add	r25, r25
    3e76:	99 0f       	add	r25, r25
    3e78:	96 a3       	std	Z+38, r25	; 0x26
    3e7a:	45 a1       	ldd	r20, Z+37	; 0x25
    3e7c:	94 2f       	mov	r25, r20
    3e7e:	99 0f       	add	r25, r25
    3e80:	99 0f       	add	r25, r25
    3e82:	99 0f       	add	r25, r25
    3e84:	90 a7       	std	Z+40, r25	; 0x28
    3e86:	51 96       	adiw	r26, 0x11	; 17
    3e88:	5c 91       	ld	r21, X
    3e8a:	51 97       	sbiw	r26, 0x11	; 17
    3e8c:	24 2f       	mov	r18, r20
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	28 0f       	add	r18, r24
    3e92:	31 1d       	adc	r19, r1
    3e94:	65 2f       	mov	r22, r21
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	62 17       	cp	r22, r18
    3e9a:	73 07       	cpc	r23, r19
    3e9c:	14 f4       	brge	.+4      	; 0x3ea2 <u8g2_update_dimension_common+0x4e>
    3e9e:	85 2f       	mov	r24, r21
    3ea0:	84 1b       	sub	r24, r20
    3ea2:	91 a7       	std	Z+41, r25	; 0x29
    3ea4:	88 0f       	add	r24, r24
    3ea6:	88 0f       	add	r24, r24
    3ea8:	88 0f       	add	r24, r24
    3eaa:	89 0f       	add	r24, r25
    3eac:	82 a7       	std	Z+42, r24	; 0x2a
    3eae:	80 ef       	ldi	r24, 0xF0	; 240
    3eb0:	83 a7       	std	Z+43, r24	; 0x2b
    3eb2:	54 96       	adiw	r26, 0x14	; 20
    3eb4:	8d 91       	ld	r24, X+
    3eb6:	9c 91       	ld	r25, X
    3eb8:	55 97       	sbiw	r26, 0x15	; 21
    3eba:	81 3f       	cpi	r24, 0xF1	; 241
    3ebc:	91 05       	cpc	r25, r1
    3ebe:	08 f4       	brcc	.+2      	; 0x3ec2 <u8g2_update_dimension_common+0x6e>
    3ec0:	83 a7       	std	Z+43, r24	; 0x2b
    3ec2:	56 96       	adiw	r26, 0x16	; 22
    3ec4:	8c 91       	ld	r24, X
    3ec6:	84 a7       	std	Z+44, r24	; 0x2c
    3ec8:	08 95       	ret

00003eca <u8g2_update_dimension_r0>:
    3eca:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <u8g2_update_dimension_common>
    3ece:	08 95       	ret

00003ed0 <u8g2_apply_clip_window>:
    3ed0:	0f 93       	push	r16
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
    3ed6:	ec 01       	movw	r28, r24
    3ed8:	0c a9       	ldd	r16, Y+52	; 0x34
    3eda:	2a a9       	ldd	r18, Y+50	; 0x32
    3edc:	4b a9       	ldd	r20, Y+51	; 0x33
    3ede:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <u8g2_IsIntersection>
    3ee4:	81 11       	cpse	r24, r1
    3ee6:	04 c0       	rjmp	.+8      	; 0x3ef0 <u8g2_apply_clip_window+0x20>
    3ee8:	c3 5a       	subi	r28, 0xA3	; 163
    3eea:	df 4f       	sbci	r29, 0xFF	; 255
    3eec:	18 82       	st	Y, r1
    3eee:	19 c0       	rjmp	.+50     	; 0x3f22 <u8g2_apply_clip_window+0x52>
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	e3 5a       	subi	r30, 0xA3	; 163
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	80 83       	st	Z, r24
    3efa:	89 a9       	ldd	r24, Y+49	; 0x31
    3efc:	9d a5       	ldd	r25, Y+45	; 0x2d
    3efe:	98 17       	cp	r25, r24
    3f00:	08 f4       	brcc	.+2      	; 0x3f04 <u8g2_apply_clip_window+0x34>
    3f02:	8d a7       	std	Y+45, r24	; 0x2d
    3f04:	8a a9       	ldd	r24, Y+50	; 0x32
    3f06:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f08:	89 17       	cp	r24, r25
    3f0a:	08 f4       	brcc	.+2      	; 0x3f0e <u8g2_apply_clip_window+0x3e>
    3f0c:	8e a7       	std	Y+46, r24	; 0x2e
    3f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f10:	9f a5       	ldd	r25, Y+47	; 0x2f
    3f12:	98 17       	cp	r25, r24
    3f14:	08 f4       	brcc	.+2      	; 0x3f18 <u8g2_apply_clip_window+0x48>
    3f16:	8f a7       	std	Y+47, r24	; 0x2f
    3f18:	8c a9       	ldd	r24, Y+52	; 0x34
    3f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f1c:	89 17       	cp	r24, r25
    3f1e:	08 f4       	brcc	.+2      	; 0x3f22 <u8g2_apply_clip_window+0x52>
    3f20:	88 ab       	std	Y+48, r24	; 0x30
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	0f 91       	pop	r16
    3f28:	08 95       	ret

00003f2a <u8g2_update_page_win_r0>:
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	15 a6       	std	Z+45, r1	; 0x2d
    3f2e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3f30:	86 a7       	std	Z+46, r24	; 0x2e
    3f32:	81 a5       	ldd	r24, Z+41	; 0x29
    3f34:	87 a7       	std	Z+47, r24	; 0x2f
    3f36:	82 a5       	ldd	r24, Z+42	; 0x2a
    3f38:	80 ab       	std	Z+48, r24	; 0x30
    3f3a:	cf 01       	movw	r24, r30
    3f3c:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <u8g2_apply_clip_window>
    3f40:	08 95       	ret

00003f42 <u8g2_draw_l90_r0>:
    3f42:	0f 93       	push	r16
    3f44:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <u8g2_draw_hv_line_2dir>
    3f48:	0f 91       	pop	r16
    3f4a:	08 95       	ret

00003f4c <u8g2_SetMaxClipWindow>:
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	d1 96       	adiw	r26, 0x31	; 49
    3f50:	1c 92       	st	X, r1
    3f52:	d1 97       	sbiw	r26, 0x31	; 49
    3f54:	d3 96       	adiw	r26, 0x33	; 51
    3f56:	1c 92       	st	X, r1
    3f58:	d3 97       	sbiw	r26, 0x33	; 51
    3f5a:	8f ef       	ldi	r24, 0xFF	; 255
    3f5c:	d2 96       	adiw	r26, 0x32	; 50
    3f5e:	8c 93       	st	X, r24
    3f60:	d2 97       	sbiw	r26, 0x32	; 50
    3f62:	d4 96       	adiw	r26, 0x34	; 52
    3f64:	8c 93       	st	X, r24
    3f66:	d4 97       	sbiw	r26, 0x34	; 52
    3f68:	90 96       	adiw	r26, 0x20	; 32
    3f6a:	ed 91       	ld	r30, X+
    3f6c:	fc 91       	ld	r31, X
    3f6e:	91 97       	sbiw	r26, 0x21	; 33
    3f70:	02 80       	ldd	r0, Z+2	; 0x02
    3f72:	f3 81       	ldd	r31, Z+3	; 0x03
    3f74:	e0 2d       	mov	r30, r0
    3f76:	cd 01       	movw	r24, r26
    3f78:	09 95       	icall
    3f7a:	08 95       	ret

00003f7c <u8g2_SetupBuffer>:
    3f7c:	0f 93       	push	r16
    3f7e:	1f 93       	push	r17
    3f80:	cf 93       	push	r28
    3f82:	df 93       	push	r29
    3f84:	ec 01       	movw	r28, r24
    3f86:	1e aa       	std	Y+54, r1	; 0x36
    3f88:	1d aa       	std	Y+53, r1	; 0x35
    3f8a:	3f 8f       	std	Y+31, r19	; 0x1f
    3f8c:	2e 8f       	std	Y+30, r18	; 0x1e
    3f8e:	7b a3       	std	Y+35, r23	; 0x23
    3f90:	6a a3       	std	Y+34, r22	; 0x22
    3f92:	4c a3       	std	Y+36, r20	; 0x24
    3f94:	1d a2       	std	Y+37, r1	; 0x25
    3f96:	fc 01       	movw	r30, r24
    3f98:	ee 5b       	subi	r30, 0xBE	; 190
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	10 82       	st	Z, r1
    3f9e:	b0 96       	adiw	r30, 0x20	; 32
    3fa0:	10 82       	st	Z, r1
    3fa2:	31 96       	adiw	r30, 0x01	; 1
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	80 83       	st	Z, r24
    3fa8:	31 96       	adiw	r30, 0x01	; 1
    3faa:	80 83       	st	Z, r24
    3fac:	19 a3       	std	Y+33, r17	; 0x21
    3fae:	08 a3       	std	Y+32, r16	; 0x20
    3fb0:	d8 01       	movw	r26, r16
    3fb2:	ed 91       	ld	r30, X+
    3fb4:	fc 91       	ld	r31, X
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	09 95       	icall
    3fba:	ce 01       	movw	r24, r28
    3fbc:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <u8g2_SetMaxClipWindow>
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <u8g2_SetFontPosBaseline>
    3fc6:	cb 5b       	subi	r28, 0xBB	; 187
    3fc8:	df 4f       	sbci	r29, 0xFF	; 255
    3fca:	18 82       	st	Y, r1
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	08 95       	ret

00003fd6 <u8x8_ascii_next>:
    3fd6:	66 23       	and	r22, r22
    3fd8:	29 f0       	breq	.+10     	; 0x3fe4 <u8x8_ascii_next+0xe>
    3fda:	6a 30       	cpi	r22, 0x0A	; 10
    3fdc:	31 f0       	breq	.+12     	; 0x3fea <u8x8_ascii_next+0x14>
    3fde:	86 2f       	mov	r24, r22
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	08 95       	ret
    3fe4:	8f ef       	ldi	r24, 0xFF	; 255
    3fe6:	9f ef       	ldi	r25, 0xFF	; 255
    3fe8:	08 95       	ret
    3fea:	8f ef       	ldi	r24, 0xFF	; 255
    3fec:	9f ef       	ldi	r25, 0xFF	; 255
    3fee:	08 95       	ret

00003ff0 <u8x8_utf8_init>:
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	10 8e       	std	Z+24, r1	; 0x18
    3ff4:	08 95       	ret

00003ff6 <u8x8_byte_avr_hw_i2c>:
    3ff6:	0f 93       	push	r16
    3ff8:	1f 93       	push	r17
    3ffa:	cf 93       	push	r28
    3ffc:	df 93       	push	r29
    3ffe:	68 31       	cpi	r22, 0x18	; 24
    4000:	19 f1       	breq	.+70     	; 0x4048 <u8x8_byte_avr_hw_i2c+0x52>
    4002:	28 f4       	brcc	.+10     	; 0x400e <u8x8_byte_avr_hw_i2c+0x18>
    4004:	64 31       	cpi	r22, 0x14	; 20
    4006:	e1 f0       	breq	.+56     	; 0x4040 <u8x8_byte_avr_hw_i2c+0x4a>
    4008:	67 31       	cpi	r22, 0x17	; 23
    400a:	39 f0       	breq	.+14     	; 0x401a <u8x8_byte_avr_hw_i2c+0x24>
    400c:	27 c0       	rjmp	.+78     	; 0x405c <u8x8_byte_avr_hw_i2c+0x66>
    400e:	69 31       	cpi	r22, 0x19	; 25
    4010:	09 f1       	breq	.+66     	; 0x4054 <u8x8_byte_avr_hw_i2c+0x5e>
    4012:	60 32       	cpi	r22, 0x20	; 32
    4014:	19 f5       	brne	.+70     	; 0x405c <u8x8_byte_avr_hw_i2c+0x66>
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	24 c0       	rjmp	.+72     	; 0x4062 <u8x8_byte_avr_hw_i2c+0x6c>
    401a:	8f ef       	ldi	r24, 0xFF	; 255
    401c:	84 0f       	add	r24, r20
    401e:	44 23       	and	r20, r20
    4020:	f9 f0       	breq	.+62     	; 0x4060 <u8x8_byte_avr_hw_i2c+0x6a>
    4022:	e9 01       	movw	r28, r18
    4024:	08 2f       	mov	r16, r24
    4026:	10 e0       	ldi	r17, 0x00	; 0
    4028:	0f 5f       	subi	r16, 0xFF	; 255
    402a:	1f 4f       	sbci	r17, 0xFF	; 255
    402c:	02 0f       	add	r16, r18
    402e:	13 1f       	adc	r17, r19
    4030:	89 91       	ld	r24, Y+
    4032:	0e 94 08 16 	call	0x2c10	; 0x2c10 <i2c_write>
    4036:	0c 17       	cp	r16, r28
    4038:	1d 07       	cpc	r17, r29
    403a:	d1 f7       	brne	.-12     	; 0x4030 <u8x8_byte_avr_hw_i2c+0x3a>
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	11 c0       	rjmp	.+34     	; 0x4062 <u8x8_byte_avr_hw_i2c+0x6c>
    4040:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <i2c_init>
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	0d c0       	rjmp	.+26     	; 0x4062 <u8x8_byte_avr_hw_i2c+0x6c>
    4048:	fc 01       	movw	r30, r24
    404a:	86 89       	ldd	r24, Z+22	; 0x16
    404c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <i2c_start_wait>
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	07 c0       	rjmp	.+14     	; 0x4062 <u8x8_byte_avr_hw_i2c+0x6c>
    4054:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <i2c_stop>
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	03 c0       	rjmp	.+6      	; 0x4062 <u8x8_byte_avr_hw_i2c+0x6c>
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	01 c0       	rjmp	.+2      	; 0x4062 <u8x8_byte_avr_hw_i2c+0x6c>
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	1f 91       	pop	r17
    4068:	0f 91       	pop	r16
    406a:	08 95       	ret

0000406c <u8x8_avr_delay>:
    406c:	6a 32       	cpi	r22, 0x2A	; 42
    406e:	51 f0       	breq	.+20     	; 0x4084 <u8x8_avr_delay+0x18>
    4070:	18 f4       	brcc	.+6      	; 0x4078 <u8x8_avr_delay+0xc>
    4072:	69 32       	cpi	r22, 0x29	; 41
    4074:	59 f0       	breq	.+22     	; 0x408c <u8x8_avr_delay+0x20>
    4076:	33 c0       	rjmp	.+102    	; 0x40de <u8x8_avr_delay+0x72>
    4078:	6b 32       	cpi	r22, 0x2B	; 43
    407a:	61 f0       	breq	.+24     	; 0x4094 <u8x8_avr_delay+0x28>
    407c:	6c 32       	cpi	r22, 0x2C	; 44
    407e:	79 f5       	brne	.+94     	; 0x40de <u8x8_avr_delay+0x72>
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	08 95       	ret
    4084:	41 11       	cpse	r20, r1
    4086:	19 c0       	rjmp	.+50     	; 0x40ba <u8x8_avr_delay+0x4e>
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	08 95       	ret
    408c:	41 11       	cpse	r20, r1
    408e:	1d c0       	rjmp	.+58     	; 0x40ca <u8x8_avr_delay+0x5e>
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	08 95       	ret
    4094:	24 2f       	mov	r18, r20
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	a4 e6       	ldi	r26, 0x64	; 100
    409a:	b0 e0       	ldi	r27, 0x00	; 0
    409c:	0e 94 81 28 	call	0x5102	; 0x5102 <__umulhisi3>
    40a0:	20 ea       	ldi	r18, 0xA0	; 160
    40a2:	3f e0       	ldi	r19, 0x0F	; 15
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	0e 94 5f 28 	call	0x50be	; 0x50be <__udivmodsi4>
    40ac:	23 32       	cpi	r18, 0x23	; 35
    40ae:	c8 f4       	brcc	.+50     	; 0x40e2 <u8x8_avr_delay+0x76>
    40b0:	82 2f       	mov	r24, r18
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	f1 f7       	brne	.-4      	; 0x40b2 <u8x8_avr_delay+0x46>
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    40ba:	83 e0       	ldi	r24, 0x03	; 3
    40bc:	8a 95       	dec	r24
    40be:	f1 f7       	brne	.-4      	; 0x40bc <u8x8_avr_delay+0x50>
    40c0:	00 00       	nop
    40c2:	41 50       	subi	r20, 0x01	; 1
    40c4:	d1 f7       	brne	.-12     	; 0x40ba <u8x8_avr_delay+0x4e>
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    40ca:	89 ef       	ldi	r24, 0xF9	; 249
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	f1 f7       	brne	.-4      	; 0x40ce <u8x8_avr_delay+0x62>
    40d2:	00 c0       	rjmp	.+0      	; 0x40d4 <u8x8_avr_delay+0x68>
    40d4:	00 00       	nop
    40d6:	41 50       	subi	r20, 0x01	; 1
    40d8:	c1 f7       	brne	.-16     	; 0x40ca <u8x8_avr_delay+0x5e>
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	08 95       	ret
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	08 95       	ret
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	08 95       	ret

000040e6 <u8x8_byte_SendBytes>:
    40e6:	9a 01       	movw	r18, r20
    40e8:	dc 01       	movw	r26, r24
    40ea:	18 96       	adiw	r26, 0x08	; 8
    40ec:	ed 91       	ld	r30, X+
    40ee:	fc 91       	ld	r31, X
    40f0:	19 97       	sbiw	r26, 0x09	; 9
    40f2:	46 2f       	mov	r20, r22
    40f4:	67 e1       	ldi	r22, 0x17	; 23
    40f6:	09 95       	icall
    40f8:	08 95       	ret

000040fa <u8x8_byte_SendByte>:
    40fa:	cf 93       	push	r28
    40fc:	df 93       	push	r29
    40fe:	1f 92       	push	r1
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	69 83       	std	Y+1, r22	; 0x01
    4106:	ae 01       	movw	r20, r28
    4108:	4f 5f       	subi	r20, 0xFF	; 255
    410a:	5f 4f       	sbci	r21, 0xFF	; 255
    410c:	61 e0       	ldi	r22, 0x01	; 1
    410e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <u8x8_byte_SendBytes>
    4112:	0f 90       	pop	r0
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	08 95       	ret

0000411a <u8x8_byte_StartTransfer>:
    411a:	dc 01       	movw	r26, r24
    411c:	18 96       	adiw	r26, 0x08	; 8
    411e:	ed 91       	ld	r30, X+
    4120:	fc 91       	ld	r31, X
    4122:	19 97       	sbiw	r26, 0x09	; 9
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	40 e0       	ldi	r20, 0x00	; 0
    412a:	68 e1       	ldi	r22, 0x18	; 24
    412c:	09 95       	icall
    412e:	08 95       	ret

00004130 <u8x8_byte_EndTransfer>:
    4130:	dc 01       	movw	r26, r24
    4132:	18 96       	adiw	r26, 0x08	; 8
    4134:	ed 91       	ld	r30, X+
    4136:	fc 91       	ld	r31, X
    4138:	19 97       	sbiw	r26, 0x09	; 9
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e0       	ldi	r20, 0x00	; 0
    4140:	69 e1       	ldi	r22, 0x19	; 25
    4142:	09 95       	icall
    4144:	08 95       	ret

00004146 <u8x8_i2c_data_transfer>:
    4146:	ef 92       	push	r14
    4148:	ff 92       	push	r15
    414a:	1f 93       	push	r17
    414c:	cf 93       	push	r28
    414e:	df 93       	push	r29
    4150:	ec 01       	movw	r28, r24
    4152:	16 2f       	mov	r17, r22
    4154:	7a 01       	movw	r14, r20
    4156:	0e 94 8d 20 	call	0x411a	; 0x411a <u8x8_byte_StartTransfer>
    415a:	60 e4       	ldi	r22, 0x40	; 64
    415c:	ce 01       	movw	r24, r28
    415e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <u8x8_byte_SendByte>
    4162:	e8 85       	ldd	r30, Y+8	; 0x08
    4164:	f9 85       	ldd	r31, Y+9	; 0x09
    4166:	97 01       	movw	r18, r14
    4168:	41 2f       	mov	r20, r17
    416a:	67 e1       	ldi	r22, 0x17	; 23
    416c:	ce 01       	movw	r24, r28
    416e:	09 95       	icall
    4170:	ce 01       	movw	r24, r28
    4172:	0e 94 98 20 	call	0x4130	; 0x4130 <u8x8_byte_EndTransfer>
    4176:	df 91       	pop	r29
    4178:	cf 91       	pop	r28
    417a:	1f 91       	pop	r17
    417c:	ff 90       	pop	r15
    417e:	ef 90       	pop	r14
    4180:	08 95       	ret

00004182 <u8x8_cad_SendCmd>:
    4182:	46 2f       	mov	r20, r22
    4184:	dc 01       	movw	r26, r24
    4186:	16 96       	adiw	r26, 0x06	; 6
    4188:	ed 91       	ld	r30, X+
    418a:	fc 91       	ld	r31, X
    418c:	17 97       	sbiw	r26, 0x07	; 7
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	65 e1       	ldi	r22, 0x15	; 21
    4194:	09 95       	icall
    4196:	08 95       	ret

00004198 <u8x8_cad_SendArg>:
    4198:	46 2f       	mov	r20, r22
    419a:	dc 01       	movw	r26, r24
    419c:	16 96       	adiw	r26, 0x06	; 6
    419e:	ed 91       	ld	r30, X+
    41a0:	fc 91       	ld	r31, X
    41a2:	17 97       	sbiw	r26, 0x07	; 7
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	66 e1       	ldi	r22, 0x16	; 22
    41aa:	09 95       	icall
    41ac:	08 95       	ret

000041ae <u8x8_cad_SendData>:
    41ae:	9a 01       	movw	r18, r20
    41b0:	dc 01       	movw	r26, r24
    41b2:	16 96       	adiw	r26, 0x06	; 6
    41b4:	ed 91       	ld	r30, X+
    41b6:	fc 91       	ld	r31, X
    41b8:	17 97       	sbiw	r26, 0x07	; 7
    41ba:	46 2f       	mov	r20, r22
    41bc:	67 e1       	ldi	r22, 0x17	; 23
    41be:	09 95       	icall
    41c0:	08 95       	ret

000041c2 <u8x8_cad_StartTransfer>:
    41c2:	dc 01       	movw	r26, r24
    41c4:	16 96       	adiw	r26, 0x06	; 6
    41c6:	ed 91       	ld	r30, X+
    41c8:	fc 91       	ld	r31, X
    41ca:	17 97       	sbiw	r26, 0x07	; 7
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e0       	ldi	r20, 0x00	; 0
    41d2:	68 e1       	ldi	r22, 0x18	; 24
    41d4:	09 95       	icall
    41d6:	08 95       	ret

000041d8 <u8x8_cad_EndTransfer>:
    41d8:	dc 01       	movw	r26, r24
    41da:	16 96       	adiw	r26, 0x06	; 6
    41dc:	ed 91       	ld	r30, X+
    41de:	fc 91       	ld	r31, X
    41e0:	17 97       	sbiw	r26, 0x07	; 7
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e0       	ldi	r20, 0x00	; 0
    41e8:	69 e1       	ldi	r22, 0x19	; 25
    41ea:	09 95       	icall
    41ec:	08 95       	ret

000041ee <u8x8_cad_SendSequence>:
    41ee:	ef 92       	push	r14
    41f0:	ff 92       	push	r15
    41f2:	0f 93       	push	r16
    41f4:	1f 93       	push	r17
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	1f 92       	push	r1
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	7c 01       	movw	r14, r24
    4202:	8b 01       	movw	r16, r22
    4204:	d8 01       	movw	r26, r16
    4206:	6c 91       	ld	r22, X
    4208:	67 31       	cpi	r22, 0x17	; 23
    420a:	c1 f0       	breq	.+48     	; 0x423c <u8x8_cad_SendSequence+0x4e>
    420c:	18 f4       	brcc	.+6      	; 0x4214 <u8x8_cad_SendSequence+0x26>
    420e:	65 31       	cpi	r22, 0x15	; 21
    4210:	30 f4       	brcc	.+12     	; 0x421e <u8x8_cad_SendSequence+0x30>
    4212:	38 c0       	rjmp	.+112    	; 0x4284 <u8x8_cad_SendSequence+0x96>
    4214:	6a 31       	cpi	r22, 0x1A	; 26
    4216:	f8 f0       	brcs	.+62     	; 0x4256 <u8x8_cad_SendSequence+0x68>
    4218:	6e 3f       	cpi	r22, 0xFE	; 254
    421a:	51 f1       	breq	.+84     	; 0x4270 <u8x8_cad_SendSequence+0x82>
    421c:	33 c0       	rjmp	.+102    	; 0x4284 <u8x8_cad_SendSequence+0x96>
    421e:	f8 01       	movw	r30, r16
    4220:	41 81       	ldd	r20, Z+1	; 0x01
    4222:	49 83       	std	Y+1, r20	; 0x01
    4224:	d7 01       	movw	r26, r14
    4226:	16 96       	adiw	r26, 0x06	; 6
    4228:	ed 91       	ld	r30, X+
    422a:	fc 91       	ld	r31, X
    422c:	17 97       	sbiw	r26, 0x07	; 7
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	c7 01       	movw	r24, r14
    4234:	09 95       	icall
    4236:	0e 5f       	subi	r16, 0xFE	; 254
    4238:	1f 4f       	sbci	r17, 0xFF	; 255
    423a:	e4 cf       	rjmp	.-56     	; 0x4204 <u8x8_cad_SendSequence+0x16>
    423c:	f8 01       	movw	r30, r16
    423e:	81 81       	ldd	r24, Z+1	; 0x01
    4240:	89 83       	std	Y+1, r24	; 0x01
    4242:	ae 01       	movw	r20, r28
    4244:	4f 5f       	subi	r20, 0xFF	; 255
    4246:	5f 4f       	sbci	r21, 0xFF	; 255
    4248:	61 e0       	ldi	r22, 0x01	; 1
    424a:	c7 01       	movw	r24, r14
    424c:	0e 94 d7 20 	call	0x41ae	; 0x41ae <u8x8_cad_SendData>
    4250:	0e 5f       	subi	r16, 0xFE	; 254
    4252:	1f 4f       	sbci	r17, 0xFF	; 255
    4254:	d7 cf       	rjmp	.-82     	; 0x4204 <u8x8_cad_SendSequence+0x16>
    4256:	0f 5f       	subi	r16, 0xFF	; 255
    4258:	1f 4f       	sbci	r17, 0xFF	; 255
    425a:	d7 01       	movw	r26, r14
    425c:	16 96       	adiw	r26, 0x06	; 6
    425e:	ed 91       	ld	r30, X+
    4260:	fc 91       	ld	r31, X
    4262:	17 97       	sbiw	r26, 0x07	; 7
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e0       	ldi	r20, 0x00	; 0
    426a:	c7 01       	movw	r24, r14
    426c:	09 95       	icall
    426e:	ca cf       	rjmp	.-108    	; 0x4204 <u8x8_cad_SendSequence+0x16>
    4270:	f8 01       	movw	r30, r16
    4272:	41 81       	ldd	r20, Z+1	; 0x01
    4274:	49 83       	std	Y+1, r20	; 0x01
    4276:	69 e2       	ldi	r22, 0x29	; 41
    4278:	c7 01       	movw	r24, r14
    427a:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_gpio_call>
    427e:	0e 5f       	subi	r16, 0xFE	; 254
    4280:	1f 4f       	sbci	r17, 0xFF	; 255
    4282:	c0 cf       	rjmp	.-128    	; 0x4204 <u8x8_cad_SendSequence+0x16>
    4284:	0f 90       	pop	r0
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	1f 91       	pop	r17
    428c:	0f 91       	pop	r16
    428e:	ff 90       	pop	r15
    4290:	ef 90       	pop	r14
    4292:	08 95       	ret

00004294 <u8x8_cad_ssd13xx_fast_i2c>:
    4294:	ef 92       	push	r14
    4296:	ff 92       	push	r15
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	cf 93       	push	r28
    429e:	7c 01       	movw	r14, r24
    42a0:	c4 2f       	mov	r28, r20
    42a2:	89 01       	movw	r16, r18
    42a4:	66 31       	cpi	r22, 0x16	; 22
    42a6:	29 f1       	breq	.+74     	; 0x42f2 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    42a8:	30 f4       	brcc	.+12     	; 0x42b6 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    42aa:	64 31       	cpi	r22, 0x14	; 20
    42ac:	09 f4       	brne	.+2      	; 0x42b0 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    42ae:	42 c0       	rjmp	.+132    	; 0x4334 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    42b0:	65 31       	cpi	r22, 0x15	; 21
    42b2:	49 f0       	breq	.+18     	; 0x42c6 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    42b4:	62 c0       	rjmp	.+196    	; 0x437a <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    42b6:	68 31       	cpi	r22, 0x18	; 24
    42b8:	09 f4       	brne	.+2      	; 0x42bc <u8x8_cad_ssd13xx_fast_i2c+0x28>
    42ba:	50 c0       	rjmp	.+160    	; 0x435c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    42bc:	f8 f0       	brcs	.+62     	; 0x42fc <u8x8_cad_ssd13xx_fast_i2c+0x68>
    42be:	69 31       	cpi	r22, 0x19	; 25
    42c0:	09 f4       	brne	.+2      	; 0x42c4 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    42c2:	50 c0       	rjmp	.+160    	; 0x4364 <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    42c4:	5a c0       	rjmp	.+180    	; 0x437a <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    42c6:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <in_transfer.3298>
    42ca:	88 23       	and	r24, r24
    42cc:	19 f0       	breq	.+6      	; 0x42d4 <u8x8_cad_ssd13xx_fast_i2c+0x40>
    42ce:	c7 01       	movw	r24, r14
    42d0:	0e 94 98 20 	call	0x4130	; 0x4130 <u8x8_byte_EndTransfer>
    42d4:	c7 01       	movw	r24, r14
    42d6:	0e 94 8d 20 	call	0x411a	; 0x411a <u8x8_byte_StartTransfer>
    42da:	60 e0       	ldi	r22, 0x00	; 0
    42dc:	c7 01       	movw	r24, r14
    42de:	0e 94 7d 20 	call	0x40fa	; 0x40fa <u8x8_byte_SendByte>
    42e2:	6c 2f       	mov	r22, r28
    42e4:	c7 01       	movw	r24, r14
    42e6:	0e 94 7d 20 	call	0x40fa	; 0x40fa <u8x8_byte_SendByte>
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <in_transfer.3298>
    42f0:	45 c0       	rjmp	.+138    	; 0x437c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    42f2:	64 2f       	mov	r22, r20
    42f4:	0e 94 7d 20 	call	0x40fa	; 0x40fa <u8x8_byte_SendByte>
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	40 c0       	rjmp	.+128    	; 0x437c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    42fc:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <in_transfer.3298>
    4300:	88 23       	and	r24, r24
    4302:	19 f0       	breq	.+6      	; 0x430a <u8x8_cad_ssd13xx_fast_i2c+0x76>
    4304:	c7 01       	movw	r24, r14
    4306:	0e 94 98 20 	call	0x4130	; 0x4130 <u8x8_byte_EndTransfer>
    430a:	c9 31       	cpi	r28, 0x19	; 25
    430c:	50 f0       	brcs	.+20     	; 0x4322 <u8x8_cad_ssd13xx_fast_i2c+0x8e>
    430e:	a8 01       	movw	r20, r16
    4310:	68 e1       	ldi	r22, 0x18	; 24
    4312:	c7 01       	movw	r24, r14
    4314:	0e 94 a3 20 	call	0x4146	; 0x4146 <u8x8_i2c_data_transfer>
    4318:	c8 51       	subi	r28, 0x18	; 24
    431a:	08 5e       	subi	r16, 0xE8	; 232
    431c:	1f 4f       	sbci	r17, 0xFF	; 255
    431e:	c9 31       	cpi	r28, 0x19	; 25
    4320:	b0 f7       	brcc	.-20     	; 0x430e <u8x8_cad_ssd13xx_fast_i2c+0x7a>
    4322:	a8 01       	movw	r20, r16
    4324:	6c 2f       	mov	r22, r28
    4326:	c7 01       	movw	r24, r14
    4328:	0e 94 a3 20 	call	0x4146	; 0x4146 <u8x8_i2c_data_transfer>
    432c:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <in_transfer.3298>
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	24 c0       	rjmp	.+72     	; 0x437c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    4334:	dc 01       	movw	r26, r24
    4336:	56 96       	adiw	r26, 0x16	; 22
    4338:	8c 91       	ld	r24, X
    433a:	56 97       	sbiw	r26, 0x16	; 22
    433c:	8f 3f       	cpi	r24, 0xFF	; 255
    433e:	19 f4       	brne	.+6      	; 0x4346 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
    4340:	88 e7       	ldi	r24, 0x78	; 120
    4342:	56 96       	adiw	r26, 0x16	; 22
    4344:	8c 93       	st	X, r24
    4346:	d7 01       	movw	r26, r14
    4348:	18 96       	adiw	r26, 0x08	; 8
    434a:	ed 91       	ld	r30, X+
    434c:	fc 91       	ld	r31, X
    434e:	19 97       	sbiw	r26, 0x09	; 9
    4350:	98 01       	movw	r18, r16
    4352:	4c 2f       	mov	r20, r28
    4354:	64 e1       	ldi	r22, 0x14	; 20
    4356:	c7 01       	movw	r24, r14
    4358:	09 95       	icall
    435a:	10 c0       	rjmp	.+32     	; 0x437c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    435c:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <in_transfer.3298>
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	0c c0       	rjmp	.+24     	; 0x437c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    4364:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <in_transfer.3298>
    4368:	88 23       	and	r24, r24
    436a:	19 f0       	breq	.+6      	; 0x4372 <u8x8_cad_ssd13xx_fast_i2c+0xde>
    436c:	c7 01       	movw	r24, r14
    436e:	0e 94 98 20 	call	0x4130	; 0x4130 <u8x8_byte_EndTransfer>
    4372:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <in_transfer.3298>
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	01 c0       	rjmp	.+2      	; 0x437c <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	cf 91       	pop	r28
    437e:	1f 91       	pop	r17
    4380:	0f 91       	pop	r16
    4382:	ff 90       	pop	r15
    4384:	ef 90       	pop	r14
    4386:	08 95       	ret

00004388 <u8x8_d_helper_display_setup_memory>:
    4388:	fc 01       	movw	r30, r24
    438a:	71 83       	std	Z+1, r23	; 0x01
    438c:	60 83       	st	Z, r22
    438e:	fb 01       	movw	r30, r22
    4390:	22 89       	ldd	r18, Z+18	; 0x12
    4392:	fc 01       	movw	r30, r24
    4394:	24 8b       	std	Z+20, r18	; 0x14
    4396:	08 95       	ret

00004398 <u8x8_d_helper_display_init>:
    4398:	cf 93       	push	r28
    439a:	df 93       	push	r29
    439c:	ec 01       	movw	r28, r24
    439e:	ea 85       	ldd	r30, Y+10	; 0x0a
    43a0:	fb 85       	ldd	r31, Y+11	; 0x0b
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	40 e0       	ldi	r20, 0x00	; 0
    43a8:	68 e2       	ldi	r22, 0x28	; 40
    43aa:	09 95       	icall
    43ac:	ee 81       	ldd	r30, Y+6	; 0x06
    43ae:	ff 81       	ldd	r31, Y+7	; 0x07
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	40 e0       	ldi	r20, 0x00	; 0
    43b6:	64 e1       	ldi	r22, 0x14	; 20
    43b8:	ce 01       	movw	r24, r28
    43ba:	09 95       	icall
    43bc:	41 e0       	ldi	r20, 0x01	; 1
    43be:	6b e4       	ldi	r22, 0x4B	; 75
    43c0:	ce 01       	movw	r24, r28
    43c2:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_gpio_call>
    43c6:	e8 81       	ld	r30, Y
    43c8:	f9 81       	ldd	r31, Y+1	; 0x01
    43ca:	44 81       	ldd	r20, Z+4	; 0x04
    43cc:	69 e2       	ldi	r22, 0x29	; 41
    43ce:	ce 01       	movw	r24, r28
    43d0:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_gpio_call>
    43d4:	40 e0       	ldi	r20, 0x00	; 0
    43d6:	6b e4       	ldi	r22, 0x4B	; 75
    43d8:	ce 01       	movw	r24, r28
    43da:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_gpio_call>
    43de:	e8 81       	ld	r30, Y
    43e0:	f9 81       	ldd	r31, Y+1	; 0x01
    43e2:	44 81       	ldd	r20, Z+4	; 0x04
    43e4:	69 e2       	ldi	r22, 0x29	; 41
    43e6:	ce 01       	movw	r24, r28
    43e8:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_gpio_call>
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	6b e4       	ldi	r22, 0x4B	; 75
    43f0:	ce 01       	movw	r24, r28
    43f2:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_gpio_call>
    43f6:	e8 81       	ld	r30, Y
    43f8:	f9 81       	ldd	r31, Y+1	; 0x01
    43fa:	45 81       	ldd	r20, Z+5	; 0x05
    43fc:	69 e2       	ldi	r22, 0x29	; 41
    43fe:	ce 01       	movw	r24, r28
    4400:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_gpio_call>
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	08 95       	ret

0000440a <u8x8_DrawTile>:
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	00 d0       	rcall	.+0      	; 0x4414 <u8x8_DrawTile+0xa>
    4414:	00 d0       	rcall	.+0      	; 0x4416 <u8x8_DrawTile+0xc>
    4416:	1f 92       	push	r1
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	6c 83       	std	Y+4, r22	; 0x04
    441e:	4d 83       	std	Y+5, r20	; 0x05
    4420:	2b 83       	std	Y+3, r18	; 0x03
    4422:	1a 83       	std	Y+2, r17	; 0x02
    4424:	09 83       	std	Y+1, r16	; 0x01
    4426:	dc 01       	movw	r26, r24
    4428:	14 96       	adiw	r26, 0x04	; 4
    442a:	ed 91       	ld	r30, X+
    442c:	fc 91       	ld	r31, X
    442e:	15 97       	sbiw	r26, 0x05	; 5
    4430:	9e 01       	movw	r18, r28
    4432:	2f 5f       	subi	r18, 0xFF	; 255
    4434:	3f 4f       	sbci	r19, 0xFF	; 255
    4436:	41 e0       	ldi	r20, 0x01	; 1
    4438:	6f e0       	ldi	r22, 0x0F	; 15
    443a:	09 95       	icall
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	0f 90       	pop	r0
    4444:	0f 90       	pop	r0
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	08 95       	ret

00004450 <u8x8_SetupMemory>:
    4450:	dc 01       	movw	r26, r24
    4452:	14 96       	adiw	r26, 0x04	; 4
    4454:	ed 91       	ld	r30, X+
    4456:	fc 91       	ld	r31, X
    4458:	15 97       	sbiw	r26, 0x05	; 5
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	40 e0       	ldi	r20, 0x00	; 0
    4460:	69 e0       	ldi	r22, 0x09	; 9
    4462:	09 95       	icall
    4464:	08 95       	ret

00004466 <u8x8_InitDisplay>:
    4466:	dc 01       	movw	r26, r24
    4468:	14 96       	adiw	r26, 0x04	; 4
    446a:	ed 91       	ld	r30, X+
    446c:	fc 91       	ld	r31, X
    446e:	15 97       	sbiw	r26, 0x05	; 5
    4470:	20 e0       	ldi	r18, 0x00	; 0
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	6a e0       	ldi	r22, 0x0A	; 10
    4478:	09 95       	icall
    447a:	08 95       	ret

0000447c <u8x8_SetPowerSave>:
    447c:	46 2f       	mov	r20, r22
    447e:	dc 01       	movw	r26, r24
    4480:	14 96       	adiw	r26, 0x04	; 4
    4482:	ed 91       	ld	r30, X+
    4484:	fc 91       	ld	r31, X
    4486:	15 97       	sbiw	r26, 0x05	; 5
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	6b e0       	ldi	r22, 0x0B	; 11
    448e:	09 95       	icall
    4490:	08 95       	ret

00004492 <u8x8_RefreshDisplay>:
    4492:	dc 01       	movw	r26, r24
    4494:	14 96       	adiw	r26, 0x04	; 4
    4496:	ed 91       	ld	r30, X+
    4498:	fc 91       	ld	r31, X
    449a:	15 97       	sbiw	r26, 0x05	; 5
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	60 e1       	ldi	r22, 0x10	; 16
    44a4:	09 95       	icall
    44a6:	08 95       	ret

000044a8 <u8x8_d_ssd1306_sh1106_generic>:
    44a8:	ef 92       	push	r14
    44aa:	ff 92       	push	r15
    44ac:	0f 93       	push	r16
    44ae:	1f 93       	push	r17
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	8c 01       	movw	r16, r24
    44b6:	c4 2f       	mov	r28, r20
    44b8:	79 01       	movw	r14, r18
    44ba:	6d 30       	cpi	r22, 0x0D	; 13
    44bc:	b9 f0       	breq	.+46     	; 0x44ec <u8x8_d_ssd1306_sh1106_generic+0x44>
    44be:	18 f4       	brcc	.+6      	; 0x44c6 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    44c0:	6b 30       	cpi	r22, 0x0B	; 11
    44c2:	31 f0       	breq	.+12     	; 0x44d0 <u8x8_d_ssd1306_sh1106_generic+0x28>
    44c4:	72 c0       	rjmp	.+228    	; 0x45aa <u8x8_d_ssd1306_sh1106_generic+0x102>
    44c6:	6e 30       	cpi	r22, 0x0E	; 14
    44c8:	69 f1       	breq	.+90     	; 0x4524 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    44ca:	6f 30       	cpi	r22, 0x0F	; 15
    44cc:	d1 f1       	breq	.+116    	; 0x4542 <u8x8_d_ssd1306_sh1106_generic+0x9a>
    44ce:	6d c0       	rjmp	.+218    	; 0x45aa <u8x8_d_ssd1306_sh1106_generic+0x102>
    44d0:	41 11       	cpse	r20, r1
    44d2:	06 c0       	rjmp	.+12     	; 0x44e0 <u8x8_d_ssd1306_sh1106_generic+0x38>
    44d4:	61 e9       	ldi	r22, 0x91	; 145
    44d6:	72 e0       	ldi	r23, 0x02	; 2
    44d8:	0e 94 f7 20 	call	0x41ee	; 0x41ee <u8x8_cad_SendSequence>
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	66 c0       	rjmp	.+204    	; 0x45ac <u8x8_d_ssd1306_sh1106_generic+0x104>
    44e0:	6c e8       	ldi	r22, 0x8C	; 140
    44e2:	72 e0       	ldi	r23, 0x02	; 2
    44e4:	0e 94 f7 20 	call	0x41ee	; 0x41ee <u8x8_cad_SendSequence>
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	60 c0       	rjmp	.+192    	; 0x45ac <u8x8_d_ssd1306_sh1106_generic+0x104>
    44ec:	41 11       	cpse	r20, r1
    44ee:	0d c0       	rjmp	.+26     	; 0x450a <u8x8_d_ssd1306_sh1106_generic+0x62>
    44f0:	65 e8       	ldi	r22, 0x85	; 133
    44f2:	72 e0       	ldi	r23, 0x02	; 2
    44f4:	0e 94 f7 20 	call	0x41ee	; 0x41ee <u8x8_cad_SendSequence>
    44f8:	d8 01       	movw	r26, r16
    44fa:	ed 91       	ld	r30, X+
    44fc:	fc 91       	ld	r31, X
    44fe:	11 97       	sbiw	r26, 0x01	; 1
    4500:	82 89       	ldd	r24, Z+18	; 0x12
    4502:	54 96       	adiw	r26, 0x14	; 20
    4504:	8c 93       	st	X, r24
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	51 c0       	rjmp	.+162    	; 0x45ac <u8x8_d_ssd1306_sh1106_generic+0x104>
    450a:	6e e7       	ldi	r22, 0x7E	; 126
    450c:	72 e0       	ldi	r23, 0x02	; 2
    450e:	0e 94 f7 20 	call	0x41ee	; 0x41ee <u8x8_cad_SendSequence>
    4512:	d8 01       	movw	r26, r16
    4514:	ed 91       	ld	r30, X+
    4516:	fc 91       	ld	r31, X
    4518:	11 97       	sbiw	r26, 0x01	; 1
    451a:	83 89       	ldd	r24, Z+19	; 0x13
    451c:	54 96       	adiw	r26, 0x14	; 20
    451e:	8c 93       	st	X, r24
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	44 c0       	rjmp	.+136    	; 0x45ac <u8x8_d_ssd1306_sh1106_generic+0x104>
    4524:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <u8x8_cad_StartTransfer>
    4528:	61 e8       	ldi	r22, 0x81	; 129
    452a:	c8 01       	movw	r24, r16
    452c:	0e 94 c1 20 	call	0x4182	; 0x4182 <u8x8_cad_SendCmd>
    4530:	6c 2f       	mov	r22, r28
    4532:	c8 01       	movw	r24, r16
    4534:	0e 94 cc 20 	call	0x4198	; 0x4198 <u8x8_cad_SendArg>
    4538:	c8 01       	movw	r24, r16
    453a:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <u8x8_cad_EndTransfer>
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	35 c0       	rjmp	.+106    	; 0x45ac <u8x8_d_ssd1306_sh1106_generic+0x104>
    4542:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <u8x8_cad_StartTransfer>
    4546:	f7 01       	movw	r30, r14
    4548:	d3 81       	ldd	r29, Z+3	; 0x03
    454a:	dd 0f       	add	r29, r29
    454c:	dd 0f       	add	r29, r29
    454e:	dd 0f       	add	r29, r29
    4550:	d8 01       	movw	r26, r16
    4552:	54 96       	adiw	r26, 0x14	; 20
    4554:	8c 91       	ld	r24, X
    4556:	d8 0f       	add	r29, r24
    4558:	60 e4       	ldi	r22, 0x40	; 64
    455a:	c8 01       	movw	r24, r16
    455c:	0e 94 c1 20 	call	0x4182	; 0x4182 <u8x8_cad_SendCmd>
    4560:	6d 2f       	mov	r22, r29
    4562:	62 95       	swap	r22
    4564:	6f 70       	andi	r22, 0x0F	; 15
    4566:	60 61       	ori	r22, 0x10	; 16
    4568:	c8 01       	movw	r24, r16
    456a:	0e 94 c1 20 	call	0x4182	; 0x4182 <u8x8_cad_SendCmd>
    456e:	6d 2f       	mov	r22, r29
    4570:	6f 70       	andi	r22, 0x0F	; 15
    4572:	c8 01       	movw	r24, r16
    4574:	0e 94 cc 20 	call	0x4198	; 0x4198 <u8x8_cad_SendArg>
    4578:	f7 01       	movw	r30, r14
    457a:	64 81       	ldd	r22, Z+4	; 0x04
    457c:	60 6b       	ori	r22, 0xB0	; 176
    457e:	c8 01       	movw	r24, r16
    4580:	0e 94 cc 20 	call	0x4198	; 0x4198 <u8x8_cad_SendArg>
    4584:	d7 01       	movw	r26, r14
    4586:	4d 91       	ld	r20, X+
    4588:	5c 91       	ld	r21, X
    458a:	11 97       	sbiw	r26, 0x01	; 1
    458c:	12 96       	adiw	r26, 0x02	; 2
    458e:	6c 91       	ld	r22, X
    4590:	66 0f       	add	r22, r22
    4592:	66 0f       	add	r22, r22
    4594:	66 0f       	add	r22, r22
    4596:	c8 01       	movw	r24, r16
    4598:	0e 94 d7 20 	call	0x41ae	; 0x41ae <u8x8_cad_SendData>
    459c:	c1 50       	subi	r28, 0x01	; 1
    459e:	91 f7       	brne	.-28     	; 0x4584 <u8x8_d_ssd1306_sh1106_generic+0xdc>
    45a0:	c8 01       	movw	r24, r16
    45a2:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <u8x8_cad_EndTransfer>
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	01 c0       	rjmp	.+2      	; 0x45ac <u8x8_d_ssd1306_sh1106_generic+0x104>
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	08 95       	ret

000045ba <u8x8_d_ssd1306_128x64_noname>:
    45ba:	0f 93       	push	r16
    45bc:	1f 93       	push	r17
    45be:	cf 93       	push	r28
    45c0:	8c 01       	movw	r16, r24
    45c2:	c6 2f       	mov	r28, r22
    45c4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <u8x8_d_ssd1306_sh1106_generic>
    45c8:	81 11       	cpse	r24, r1
    45ca:	15 c0       	rjmp	.+42     	; 0x45f6 <u8x8_d_ssd1306_128x64_noname+0x3c>
    45cc:	c9 30       	cpi	r28, 0x09	; 9
    45ce:	61 f0       	breq	.+24     	; 0x45e8 <u8x8_d_ssd1306_128x64_noname+0x2e>
    45d0:	ca 30       	cpi	r28, 0x0A	; 10
    45d2:	91 f4       	brne	.+36     	; 0x45f8 <u8x8_d_ssd1306_128x64_noname+0x3e>
    45d4:	c8 01       	movw	r24, r16
    45d6:	0e 94 cc 21 	call	0x4398	; 0x4398 <u8x8_d_helper_display_init>
    45da:	66 e9       	ldi	r22, 0x96	; 150
    45dc:	72 e0       	ldi	r23, 0x02	; 2
    45de:	c8 01       	movw	r24, r16
    45e0:	0e 94 f7 20 	call	0x41ee	; 0x41ee <u8x8_cad_SendSequence>
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	08 c0       	rjmp	.+16     	; 0x45f8 <u8x8_d_ssd1306_128x64_noname+0x3e>
    45e8:	66 e6       	ldi	r22, 0x66	; 102
    45ea:	72 e0       	ldi	r23, 0x02	; 2
    45ec:	c8 01       	movw	r24, r16
    45ee:	0e 94 c4 21 	call	0x4388	; 0x4388 <u8x8_d_helper_display_setup_memory>
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	01 c0       	rjmp	.+2      	; 0x45f8 <u8x8_d_ssd1306_128x64_noname+0x3e>
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	cf 91       	pop	r28
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	08 95       	ret

00004600 <u8x8_gpio_call>:
    4600:	dc 01       	movw	r26, r24
    4602:	1a 96       	adiw	r26, 0x0a	; 10
    4604:	ed 91       	ld	r30, X+
    4606:	fc 91       	ld	r31, X
    4608:	1b 97       	sbiw	r26, 0x0b	; 11
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	09 95       	icall
    4610:	08 95       	ret

00004612 <u8x8_dummy_cb>:
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	08 95       	ret

00004616 <u8x8_SetupDefaults>:
    4616:	fc 01       	movw	r30, r24
    4618:	11 82       	std	Z+1, r1	; 0x01
    461a:	10 82       	st	Z, r1
    461c:	89 e0       	ldi	r24, 0x09	; 9
    461e:	93 e2       	ldi	r25, 0x23	; 35
    4620:	95 83       	std	Z+5, r25	; 0x05
    4622:	84 83       	std	Z+4, r24	; 0x04
    4624:	97 83       	std	Z+7, r25	; 0x07
    4626:	86 83       	std	Z+6, r24	; 0x06
    4628:	91 87       	std	Z+9, r25	; 0x09
    462a:	80 87       	std	Z+8, r24	; 0x08
    462c:	93 87       	std	Z+11, r25	; 0x0b
    462e:	82 87       	std	Z+10, r24	; 0x0a
    4630:	15 8a       	std	Z+21, r1	; 0x15
    4632:	10 8e       	std	Z+24, r1	; 0x18
    4634:	14 86       	std	Z+12, r1	; 0x0c
    4636:	15 86       	std	Z+13, r1	; 0x0d
    4638:	16 86       	std	Z+14, r1	; 0x0e
    463a:	17 86       	std	Z+15, r1	; 0x0f
    463c:	8f ef       	ldi	r24, 0xFF	; 255
    463e:	86 8b       	std	Z+22, r24	; 0x16
    4640:	82 8f       	std	Z+26, r24	; 0x1a
    4642:	08 95       	ret

00004644 <u8x8_Setup>:
    4644:	af 92       	push	r10
    4646:	bf 92       	push	r11
    4648:	cf 92       	push	r12
    464a:	df 92       	push	r13
    464c:	ef 92       	push	r14
    464e:	ff 92       	push	r15
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	ec 01       	movw	r28, r24
    465a:	5b 01       	movw	r10, r22
    465c:	6a 01       	movw	r12, r20
    465e:	79 01       	movw	r14, r18
    4660:	0e 94 0b 23 	call	0x4616	; 0x4616 <u8x8_SetupDefaults>
    4664:	bd 82       	std	Y+5, r11	; 0x05
    4666:	ac 82       	std	Y+4, r10	; 0x04
    4668:	df 82       	std	Y+7, r13	; 0x07
    466a:	ce 82       	std	Y+6, r12	; 0x06
    466c:	f9 86       	std	Y+9, r15	; 0x09
    466e:	e8 86       	std	Y+8, r14	; 0x08
    4670:	1b 87       	std	Y+11, r17	; 0x0b
    4672:	0a 87       	std	Y+10, r16	; 0x0a
    4674:	ce 01       	movw	r24, r28
    4676:	0e 94 28 22 	call	0x4450	; 0x4450 <u8x8_SetupMemory>
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	ff 90       	pop	r15
    4684:	ef 90       	pop	r14
    4686:	df 90       	pop	r13
    4688:	cf 90       	pop	r12
    468a:	bf 90       	pop	r11
    468c:	af 90       	pop	r10
    468e:	08 95       	ret

00004690 <USART_Init>:
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
}

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);				/* Enable USART transmitter and receiver */
    4690:	e1 ec       	ldi	r30, 0xC1	; 193
    4692:	f0 e0       	ldi	r31, 0x00	; 0
    4694:	20 81       	ld	r18, Z
    4696:	28 61       	ori	r18, 0x18	; 24
    4698:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCPOL0)| (1 << UCSZ00) | (1 << UCSZ01);	/* Write USCRC for 8 bit data and 1 stop bit */
    469a:	e2 ec       	ldi	r30, 0xC2	; 194
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	20 81       	ld	r18, Z
    46a0:	27 60       	ori	r18, 0x07	; 7
    46a2:	20 83       	st	Z, r18
	UBRR0L = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	88 0f       	add	r24, r24
    46aa:	99 1f       	adc	r25, r25
    46ac:	aa 1f       	adc	r26, r26
    46ae:	bb 1f       	adc	r27, r27
    46b0:	88 0f       	add	r24, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	aa 1f       	adc	r26, r26
    46b6:	bb 1f       	adc	r27, r27
    46b8:	9c 01       	movw	r18, r24
    46ba:	ad 01       	movw	r20, r26
    46bc:	22 0f       	add	r18, r18
    46be:	33 1f       	adc	r19, r19
    46c0:	44 1f       	adc	r20, r20
    46c2:	55 1f       	adc	r21, r21
    46c4:	22 0f       	add	r18, r18
    46c6:	33 1f       	adc	r19, r19
    46c8:	44 1f       	adc	r20, r20
    46ca:	55 1f       	adc	r21, r21
    46cc:	60 e0       	ldi	r22, 0x00	; 0
    46ce:	74 e2       	ldi	r23, 0x24	; 36
    46d0:	84 ef       	ldi	r24, 0xF4	; 244
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	0e 94 5f 28 	call	0x50be	; 0x50be <__udivmodsi4>
    46d8:	8f ef       	ldi	r24, 0xFF	; 255
    46da:	82 0f       	add	r24, r18
    46dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
    46e0:	da 01       	movw	r26, r20
    46e2:	c9 01       	movw	r24, r18
    46e4:	01 97       	sbiw	r24, 0x01	; 1
    46e6:	a1 09       	sbc	r26, r1
    46e8:	b1 09       	sbc	r27, r1
    46ea:	89 2f       	mov	r24, r25
    46ec:	9a 2f       	mov	r25, r26
    46ee:	ab 2f       	mov	r26, r27
    46f0:	bb 27       	eor	r27, r27
    46f2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    46f6:	08 95       	ret

000046f8 <initBluetooth>:
int *BL_STEER;
int *BL_SPEED;

int result;
void initBluetooth(int *SettingsHold, int *pBL_speed, int *pBL_steer){
	pSettings_BL = SettingsHold;
    46f8:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <pSettings_BL+0x1>
    46fc:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <pSettings_BL>
	BL_STEER = pBL_steer;
    4700:	50 93 0f 06 	sts	0x060F, r21	; 0x80060f <BL_STEER+0x1>
    4704:	40 93 0e 06 	sts	0x060E, r20	; 0x80060e <BL_STEER>
	BL_SPEED = pBL_speed;
    4708:	70 93 0d 06 	sts	0x060D, r23	; 0x80060d <BL_SPEED+0x1>
    470c:	60 93 0c 06 	sts	0x060C, r22	; 0x80060c <BL_SPEED>

	PCICR |= (1<<PCIE2);
    4710:	e8 e6       	ldi	r30, 0x68	; 104
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	84 60       	ori	r24, 0x04	; 4
    4718:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT16);
    471a:	ed e6       	ldi	r30, 0x6D	; 109
    471c:	f0 e0       	ldi	r31, 0x00	; 0
    471e:	80 81       	ld	r24, Z
    4720:	81 60       	ori	r24, 0x01	; 1
    4722:	80 83       	st	Z, r24
	
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
    4724:	60 e8       	ldi	r22, 0x80	; 128
    4726:	75 e2       	ldi	r23, 0x25	; 37
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	0e 94 48 23 	call	0x4690	; 0x4690 <USART_Init>
    4730:	08 95       	ret

00004732 <USART_RxChar>:
	UBRR0H = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
    4732:	e0 ec       	ldi	r30, 0xC0	; 192
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	80 81       	ld	r24, Z
    4738:	88 23       	and	r24, r24
    473a:	ec f7       	brge	.-6      	; 0x4736 <USART_RxChar+0x4>
	return(UDR0);									/* Get and return received data */
    473c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
    4740:	08 95       	ret

00004742 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
    4742:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
    4746:	e0 ec       	ldi	r30, 0xC0	; 192
    4748:	f0 e0       	ldi	r31, 0x00	; 0
    474a:	80 81       	ld	r24, Z
    474c:	85 ff       	sbrs	r24, 5
    474e:	fd cf       	rjmp	.-6      	; 0x474a <USART_TxChar+0x8>
}
    4750:	08 95       	ret

00004752 <USART_ReceiveString>:
* the function returns.
* - The array is terminated with ?\0?.
*/

void USART_ReceiveString(char *str)
{
    4752:	ef 92       	push	r14
    4754:	ff 92       	push	r15
    4756:	0f 93       	push	r16
    4758:	1f 93       	push	r17
    475a:	cf 93       	push	r28
    475c:	7c 01       	movw	r14, r24
	uint8_t t = 0;
    475e:	c0 e0       	ldi	r28, 0x00	; 0

	while ((str[t] = USART_RxChar()) != '\n')
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <USART_ReceiveString+0x12>
	{
		t++;
    4762:	cf 5f       	subi	r28, 0xFF	; 255

void USART_ReceiveString(char *str)
{
	uint8_t t = 0;

	while ((str[t] = USART_RxChar()) != '\n')
    4764:	87 01       	movw	r16, r14
    4766:	0c 0f       	add	r16, r28
    4768:	11 1d       	adc	r17, r1
    476a:	0e 94 99 23 	call	0x4732	; 0x4732 <USART_RxChar>
    476e:	f8 01       	movw	r30, r16
    4770:	80 83       	st	Z, r24
    4772:	8a 30       	cpi	r24, 0x0A	; 10
    4774:	b1 f7       	brne	.-20     	; 0x4762 <USART_ReceiveString+0x10>
	{
		t++;
	}
	str[t] = '\0';
    4776:	10 82       	st	Z, r1
}
    4778:	cf 91       	pop	r28
    477a:	1f 91       	pop	r17
    477c:	0f 91       	pop	r16
    477e:	ff 90       	pop	r15
    4780:	ef 90       	pop	r14
    4782:	08 95       	ret

00004784 <USART_SendString>:

void USART_SendString(char *str)									/* Send string of USART data function */
{
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
    478a:	88 81       	ld	r24, Y
    478c:	88 23       	and	r24, r24
    478e:	31 f0       	breq	.+12     	; 0x479c <USART_SendString+0x18>
    4790:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);										/* Send each char of string till the NULL */
    4792:	0e 94 a1 23 	call	0x4742	; 0x4742 <USART_TxChar>
}

void USART_SendString(char *str)									/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
    4796:	89 91       	ld	r24, Y+
    4798:	81 11       	cpse	r24, r1
    479a:	fb cf       	rjmp	.-10     	; 0x4792 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);										/* Send each char of string till the NULL */
		i++;
	}
}
    479c:	df 91       	pop	r29
    479e:	cf 91       	pop	r28
    47a0:	08 95       	ret

000047a2 <USART_BluetoothChanger>:

void USART_BluetoothChanger(char Data_in[BL_BUFFERSIZE]){			/* When certain values are received the car does something*/
    47a2:	ef 92       	push	r14
    47a4:	ff 92       	push	r15
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62
    47b2:	2a 97       	sbiw	r28, 0x0a	; 10
    47b4:	0f b6       	in	r0, 0x3f	; 63
    47b6:	f8 94       	cli
    47b8:	de bf       	out	0x3e, r29	; 62
    47ba:	0f be       	out	0x3f, r0	; 63
    47bc:	cd bf       	out	0x3d, r28	; 61
    47be:	8c 01       	movw	r16, r24
	
	if(strcmp(Data_in, BL_LED_ON) == 0)
    47c0:	60 ed       	ldi	r22, 0xD0	; 208
    47c2:	72 e0       	ldi	r23, 0x02	; 2
    47c4:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    47c8:	89 2b       	or	r24, r25
    47ca:	29 f4       	brne	.+10     	; 0x47d6 <USART_BluetoothChanger+0x34>
	{
		/* Turn ON LED */
		USART_SendString("LED4_ON");								/* send status of LED i.e. LED ON */
    47cc:	8b ec       	ldi	r24, 0xCB	; 203
    47ce:	92 e0       	ldi	r25, 0x02	; 2
    47d0:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    47d4:	c7 c1       	rjmp	.+910    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
		
	}
	else if(strcmp(Data_in, BL_LED_OFF) == 0)
    47d6:	68 ed       	ldi	r22, 0xD8	; 216
    47d8:	72 e0       	ldi	r23, 0x02	; 2
    47da:	c8 01       	movw	r24, r16
    47dc:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    47e0:	89 2b       	or	r24, r25
    47e2:	29 f4       	brne	.+10     	; 0x47ee <USART_BluetoothChanger+0x4c>
	{
		/* Turn OFF LED */
		USART_SendString("LED4_OFF");
    47e4:	83 ed       	ldi	r24, 0xD3	; 211
    47e6:	92 e0       	ldi	r25, 0x02	; 2
    47e8:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    47ec:	bb c1       	rjmp	.+886    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_FORWARD) == 0)
    47ee:	6c ed       	ldi	r22, 0xDC	; 220
    47f0:	72 e0       	ldi	r23, 0x02	; 2
    47f2:	c8 01       	movw	r24, r16
    47f4:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    47f8:	89 2b       	or	r24, r25
    47fa:	b9 f4       	brne	.+46     	; 0x482a <USART_BluetoothChanger+0x88>
	{

		USART_SendString("Driving forwards");
    47fc:	84 ee       	ldi	r24, 0xE4	; 228
    47fe:	92 e0       	ldi	r25, 0x02	; 2
    4800:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		//SetDriveForward();
		*BL_SPEED += *(pSettings_BL+1);
    4804:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <BL_SPEED>
    4808:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <BL_SPEED+0x1>
    480c:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <pSettings_BL>
    4810:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4814:	20 81       	ld	r18, Z
    4816:	31 81       	ldd	r19, Z+1	; 0x01
    4818:	12 96       	adiw	r26, 0x02	; 2
    481a:	8d 91       	ld	r24, X+
    481c:	9c 91       	ld	r25, X
    481e:	13 97       	sbiw	r26, 0x03	; 3
    4820:	82 0f       	add	r24, r18
    4822:	93 1f       	adc	r25, r19
    4824:	91 83       	std	Z+1, r25	; 0x01
    4826:	80 83       	st	Z, r24
    4828:	9d c1       	rjmp	.+826    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_STOP) == 0)
    482a:	65 ef       	ldi	r22, 0xF5	; 245
    482c:	72 e0       	ldi	r23, 0x02	; 2
    482e:	c8 01       	movw	r24, r16
    4830:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4834:	89 2b       	or	r24, r25
    4836:	89 f4       	brne	.+34     	; 0x485a <USART_BluetoothChanger+0xb8>
	{
		USART_SendString("STOP driving");
    4838:	8a ef       	ldi	r24, 0xFA	; 250
    483a:	92 e0       	ldi	r25, 0x02	; 2
    483c:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		//SetDriveForward();
		*BL_SPEED = 0;
    4840:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <BL_SPEED>
    4844:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <BL_SPEED+0x1>
    4848:	11 82       	std	Z+1, r1	; 0x01
    484a:	10 82       	st	Z, r1
		*BL_STEER = 0;
    484c:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <BL_STEER>
    4850:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <BL_STEER+0x1>
    4854:	11 82       	std	Z+1, r1	; 0x01
    4856:	10 82       	st	Z, r1
    4858:	85 c1       	rjmp	.+778    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_BACKWARD) == 0)
    485a:	67 e0       	ldi	r22, 0x07	; 7
    485c:	73 e0       	ldi	r23, 0x03	; 3
    485e:	c8 01       	movw	r24, r16
    4860:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4864:	89 2b       	or	r24, r25
    4866:	b9 f4       	brne	.+46     	; 0x4896 <USART_BluetoothChanger+0xf4>
	{
		USART_SendString("Driving backwards");
    4868:	80 e1       	ldi	r24, 0x10	; 16
    486a:	93 e0       	ldi	r25, 0x03	; 3
    486c:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		//SetDriveBackward();
		*BL_SPEED -= *(pSettings_BL+1);
    4870:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <BL_SPEED>
    4874:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <BL_SPEED+0x1>
    4878:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <pSettings_BL>
    487c:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4880:	80 81       	ld	r24, Z
    4882:	91 81       	ldd	r25, Z+1	; 0x01
    4884:	12 96       	adiw	r26, 0x02	; 2
    4886:	2d 91       	ld	r18, X+
    4888:	3c 91       	ld	r19, X
    488a:	13 97       	sbiw	r26, 0x03	; 3
    488c:	82 1b       	sub	r24, r18
    488e:	93 0b       	sbc	r25, r19
    4890:	91 83       	std	Z+1, r25	; 0x01
    4892:	80 83       	st	Z, r24
    4894:	67 c1       	rjmp	.+718    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_LEFT) == 0)
    4896:	62 e2       	ldi	r22, 0x22	; 34
    4898:	73 e0       	ldi	r23, 0x03	; 3
    489a:	c8 01       	movw	r24, r16
    489c:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    48a0:	89 2b       	or	r24, r25
    48a2:	79 f4       	brne	.+30     	; 0x48c2 <USART_BluetoothChanger+0x120>
	{
		USART_SendString("Steering Left");
    48a4:	87 e2       	ldi	r24, 0x27	; 39
    48a6:	93 e0       	ldi	r25, 0x03	; 3
    48a8:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		*BL_STEER -= 100;
    48ac:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <BL_STEER>
    48b0:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <BL_STEER+0x1>
    48b4:	80 81       	ld	r24, Z
    48b6:	91 81       	ldd	r25, Z+1	; 0x01
    48b8:	84 56       	subi	r24, 0x64	; 100
    48ba:	91 09       	sbc	r25, r1
    48bc:	91 83       	std	Z+1, r25	; 0x01
    48be:	80 83       	st	Z, r24
    48c0:	51 c1       	rjmp	.+674    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_RIGHT) == 0)
    48c2:	65 e3       	ldi	r22, 0x35	; 53
    48c4:	73 e0       	ldi	r23, 0x03	; 3
    48c6:	c8 01       	movw	r24, r16
    48c8:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    48cc:	89 2b       	or	r24, r25
    48ce:	79 f4       	brne	.+30     	; 0x48ee <USART_BluetoothChanger+0x14c>
	{
		USART_SendString("Steering Right");
    48d0:	8b e3       	ldi	r24, 0x3B	; 59
    48d2:	93 e0       	ldi	r25, 0x03	; 3
    48d4:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		*BL_STEER += 100;
    48d8:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <BL_STEER>
    48dc:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <BL_STEER+0x1>
    48e0:	80 81       	ld	r24, Z
    48e2:	91 81       	ldd	r25, Z+1	; 0x01
    48e4:	8c 59       	subi	r24, 0x9C	; 156
    48e6:	9f 4f       	sbci	r25, 0xFF	; 255
    48e8:	91 83       	std	Z+1, r25	; 0x01
    48ea:	80 83       	st	Z, r24
    48ec:	3b c1       	rjmp	.+630    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_ModeUp) == 0)
    48ee:	6a e4       	ldi	r22, 0x4A	; 74
    48f0:	73 e0       	ldi	r23, 0x03	; 3
    48f2:	c8 01       	movw	r24, r16
    48f4:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    48f8:	89 2b       	or	r24, r25
    48fa:	f1 f4       	brne	.+60     	; 0x4938 <USART_BluetoothChanger+0x196>
	{
		*(pSettings_BL+0) += 1;
    48fc:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4900:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4904:	80 81       	ld	r24, Z
    4906:	91 81       	ldd	r25, Z+1	; 0x01
    4908:	01 96       	adiw	r24, 0x01	; 1
    490a:	91 83       	std	Z+1, r25	; 0x01
    490c:	80 83       	st	Z, r24
		char text[8];
		USART_SendString("Mode Up:> ");
    490e:	81 e5       	ldi	r24, 0x51	; 81
    4910:	93 e0       	ldi	r25, 0x03	; 3
    4912:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		itoa(*(pSettings_BL+0), text, 10);
    4916:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    491a:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    491e:	4a e0       	ldi	r20, 0x0A	; 10
    4920:	be 01       	movw	r22, r28
    4922:	6f 5f       	subi	r22, 0xFF	; 255
    4924:	7f 4f       	sbci	r23, 0xFF	; 255
    4926:	80 81       	ld	r24, Z
    4928:	91 81       	ldd	r25, Z+1	; 0x01
    492a:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
		USART_SendString(text);
    492e:	ce 01       	movw	r24, r28
    4930:	01 96       	adiw	r24, 0x01	; 1
    4932:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    4936:	16 c1       	rjmp	.+556    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
		
	}
	else if(strcmp(Data_in, BL_ModeDown) == 0)
    4938:	6c e5       	ldi	r22, 0x5C	; 92
    493a:	73 e0       	ldi	r23, 0x03	; 3
    493c:	c8 01       	movw	r24, r16
    493e:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4942:	89 2b       	or	r24, r25
    4944:	f1 f4       	brne	.+60     	; 0x4982 <USART_BluetoothChanger+0x1e0>
	{
		*(pSettings_BL+0) -= 1;
    4946:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    494a:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    494e:	80 81       	ld	r24, Z
    4950:	91 81       	ldd	r25, Z+1	; 0x01
    4952:	01 97       	sbiw	r24, 0x01	; 1
    4954:	91 83       	std	Z+1, r25	; 0x01
    4956:	80 83       	st	Z, r24
		char text[8];
		USART_SendString("Mode down:> ");
    4958:	85 e6       	ldi	r24, 0x65	; 101
    495a:	93 e0       	ldi	r25, 0x03	; 3
    495c:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		itoa(*(pSettings_BL+0), text, 10);
    4960:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4964:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4968:	4a e0       	ldi	r20, 0x0A	; 10
    496a:	be 01       	movw	r22, r28
    496c:	6f 5f       	subi	r22, 0xFF	; 255
    496e:	7f 4f       	sbci	r23, 0xFF	; 255
    4970:	80 81       	ld	r24, Z
    4972:	91 81       	ldd	r25, Z+1	; 0x01
    4974:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
		USART_SendString(text);
    4978:	ce 01       	movw	r24, r28
    497a:	01 96       	adiw	r24, 0x01	; 1
    497c:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    4980:	f1 c0       	rjmp	.+482    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
		
	}
	//speed up down
	else if(strcmp(Data_in, BL_speedup) == 0)
    4982:	62 e7       	ldi	r22, 0x72	; 114
    4984:	73 e0       	ldi	r23, 0x03	; 3
    4986:	c8 01       	movw	r24, r16
    4988:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    498c:	89 2b       	or	r24, r25
    498e:	f1 f4       	brne	.+60     	; 0x49cc <USART_BluetoothChanger+0x22a>
	{
		*(pSettings_BL+1) += 25;
    4990:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4994:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4998:	82 81       	ldd	r24, Z+2	; 0x02
    499a:	93 81       	ldd	r25, Z+3	; 0x03
    499c:	49 96       	adiw	r24, 0x19	; 25
    499e:	93 83       	std	Z+3, r25	; 0x03
    49a0:	82 83       	std	Z+2, r24	; 0x02
		char text[8];
		USART_SendString("Speed Up:> ");
    49a2:	81 e9       	ldi	r24, 0x91	; 145
    49a4:	93 e0       	ldi	r25, 0x03	; 3
    49a6:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		itoa(*(pSettings_BL+1), text, 10);
    49aa:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    49ae:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    49b2:	4a e0       	ldi	r20, 0x0A	; 10
    49b4:	be 01       	movw	r22, r28
    49b6:	6f 5f       	subi	r22, 0xFF	; 255
    49b8:	7f 4f       	sbci	r23, 0xFF	; 255
    49ba:	82 81       	ldd	r24, Z+2	; 0x02
    49bc:	93 81       	ldd	r25, Z+3	; 0x03
    49be:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
		USART_SendString(text);
    49c2:	ce 01       	movw	r24, r28
    49c4:	01 96       	adiw	r24, 0x01	; 1
    49c6:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    49ca:	cc c0       	rjmp	.+408    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
		
	}
	else if(strcmp(Data_in, BL_speeddown) == 0)
    49cc:	6a e7       	ldi	r22, 0x7A	; 122
    49ce:	73 e0       	ldi	r23, 0x03	; 3
    49d0:	c8 01       	movw	r24, r16
    49d2:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    49d6:	89 2b       	or	r24, r25
    49d8:	f1 f4       	brne	.+60     	; 0x4a16 <USART_BluetoothChanger+0x274>
	{
		*(pSettings_BL+1) -= 25;
    49da:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    49de:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    49e2:	82 81       	ldd	r24, Z+2	; 0x02
    49e4:	93 81       	ldd	r25, Z+3	; 0x03
    49e6:	49 97       	sbiw	r24, 0x19	; 25
    49e8:	93 83       	std	Z+3, r25	; 0x03
    49ea:	82 83       	std	Z+2, r24	; 0x02
		char text[8];
		USART_SendString("Speed down:> ");
    49ec:	8c ea       	ldi	r24, 0xAC	; 172
    49ee:	93 e0       	ldi	r25, 0x03	; 3
    49f0:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		itoa(*(pSettings_BL+1), text, 10);
    49f4:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    49f8:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    49fc:	4a e0       	ldi	r20, 0x0A	; 10
    49fe:	be 01       	movw	r22, r28
    4a00:	6f 5f       	subi	r22, 0xFF	; 255
    4a02:	7f 4f       	sbci	r23, 0xFF	; 255
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
		USART_SendString(text);
    4a0c:	ce 01       	movw	r24, r28
    4a0e:	01 96       	adiw	r24, 0x01	; 1
    4a10:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    4a14:	a7 c0       	rjmp	.+334    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
		
	
		}else if(strcmp(Data_in, BL_minspeedup) == 0)
    4a16:	64 e8       	ldi	r22, 0x84	; 132
    4a18:	73 e0       	ldi	r23, 0x03	; 3
    4a1a:	c8 01       	movw	r24, r16
    4a1c:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4a20:	89 2b       	or	r24, r25
    4a22:	f1 f4       	brne	.+60     	; 0x4a60 <USART_BluetoothChanger+0x2be>
	{
		*(pSettings_BL+3) += 25;
    4a24:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4a28:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4a2c:	86 81       	ldd	r24, Z+6	; 0x06
    4a2e:	97 81       	ldd	r25, Z+7	; 0x07
    4a30:	49 96       	adiw	r24, 0x19	; 25
    4a32:	97 83       	std	Z+7, r25	; 0x07
    4a34:	86 83       	std	Z+6, r24	; 0x06
		char text[8];
		USART_SendString("Min Speed Up:> ");
    4a36:	8d e8       	ldi	r24, 0x8D	; 141
    4a38:	93 e0       	ldi	r25, 0x03	; 3
    4a3a:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		itoa(*(pSettings_BL+3), text, 10);
    4a3e:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4a42:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4a46:	4a e0       	ldi	r20, 0x0A	; 10
    4a48:	be 01       	movw	r22, r28
    4a4a:	6f 5f       	subi	r22, 0xFF	; 255
    4a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4e:	86 81       	ldd	r24, Z+6	; 0x06
    4a50:	97 81       	ldd	r25, Z+7	; 0x07
    4a52:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
		USART_SendString(text);
    4a56:	ce 01       	movw	r24, r28
    4a58:	01 96       	adiw	r24, 0x01	; 1
    4a5a:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    4a5e:	82 c0       	rjmp	.+260    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
		
	}
	else if(strcmp(Data_in, BL_minspeeddown) == 0)
    4a60:	6d e9       	ldi	r22, 0x9D	; 157
    4a62:	73 e0       	ldi	r23, 0x03	; 3
    4a64:	c8 01       	movw	r24, r16
    4a66:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4a6a:	89 2b       	or	r24, r25
    4a6c:	f1 f4       	brne	.+60     	; 0x4aaa <USART_BluetoothChanger+0x308>
	{
		*(pSettings_BL+3) -= 25;
    4a6e:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4a72:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4a76:	86 81       	ldd	r24, Z+6	; 0x06
    4a78:	97 81       	ldd	r25, Z+7	; 0x07
    4a7a:	49 97       	sbiw	r24, 0x19	; 25
    4a7c:	97 83       	std	Z+7, r25	; 0x07
    4a7e:	86 83       	std	Z+6, r24	; 0x06
		char text[8];
		USART_SendString("Min Speed down:> ");
    4a80:	88 ea       	ldi	r24, 0xA8	; 168
    4a82:	93 e0       	ldi	r25, 0x03	; 3
    4a84:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		itoa(*(pSettings_BL+3), text, 10);
    4a88:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4a8c:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4a90:	4a e0       	ldi	r20, 0x0A	; 10
    4a92:	be 01       	movw	r22, r28
    4a94:	6f 5f       	subi	r22, 0xFF	; 255
    4a96:	7f 4f       	sbci	r23, 0xFF	; 255
    4a98:	86 81       	ldd	r24, Z+6	; 0x06
    4a9a:	97 81       	ldd	r25, Z+7	; 0x07
    4a9c:	0e 94 ab 28 	call	0x5156	; 0x5156 <__itoa_ncheck>
		USART_SendString(text);
    4aa0:	ce 01       	movw	r24, r28
    4aa2:	01 96       	adiw	r24, 0x01	; 1
    4aa4:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
    4aa8:	5d c0       	rjmp	.+186    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
		
	}
	
	else if(strcmp(Data_in, BL_Mode0) == 0)
    4aaa:	6a eb       	ldi	r22, 0xBA	; 186
    4aac:	73 e0       	ldi	r23, 0x03	; 3
    4aae:	c8 01       	movw	r24, r16
    4ab0:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4ab4:	89 2b       	or	r24, r25
    4ab6:	59 f4       	brne	.+22     	; 0x4ace <USART_BluetoothChanger+0x32c>
	{
		USART_SendString("Mode 0:> Autonomous");
    4ab8:	80 ec       	ldi	r24, 0xC0	; 192
    4aba:	93 e0       	ldi	r25, 0x03	; 3
    4abc:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		*(pSettings_BL+0) = 0;
    4ac0:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4ac4:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4ac8:	11 82       	std	Z+1, r1	; 0x01
    4aca:	10 82       	st	Z, r1
    4acc:	4b c0       	rjmp	.+150    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_Mode1) == 0)
    4ace:	64 ed       	ldi	r22, 0xD4	; 212
    4ad0:	73 e0       	ldi	r23, 0x03	; 3
    4ad2:	c8 01       	movw	r24, r16
    4ad4:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4ad8:	89 2b       	or	r24, r25
    4ada:	69 f4       	brne	.+26     	; 0x4af6 <USART_BluetoothChanger+0x354>
	{
		USART_SendString("Mode 1:> Slave");
    4adc:	8b ed       	ldi	r24, 0xDB	; 219
    4ade:	93 e0       	ldi	r25, 0x03	; 3
    4ae0:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		*(pSettings_BL+0) = 1;
    4ae4:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4ae8:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	80 83       	st	Z, r24
    4af4:	37 c0       	rjmp	.+110    	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else if(strcmp(Data_in, BL_Mode2) == 0)
    4af6:	6a ee       	ldi	r22, 0xEA	; 234
    4af8:	73 e0       	ldi	r23, 0x03	; 3
    4afa:	c8 01       	movw	r24, r16
    4afc:	0e 94 a2 28 	call	0x5144	; 0x5144 <strcmp>
    4b00:	89 2b       	or	r24, r25
    4b02:	69 f4       	brne	.+26     	; 0x4b1e <USART_BluetoothChanger+0x37c>
	{
		USART_SendString("Mode 2:> Remote");
    4b04:	81 ef       	ldi	r24, 0xF1	; 241
    4b06:	93 e0       	ldi	r25, 0x03	; 3
    4b08:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		*(pSettings_BL+0) = 1;
    4b0c:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <pSettings_BL>
    4b10:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <pSettings_BL+0x1>
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
    4b1c:	23 c0       	rjmp	.+70     	; 0x4b64 <USART_BluetoothChanger+0x3c2>
	}
	else{
		char buffer_tmp[BL_BUFFERSIZE] = "RX:> ";
    4b1e:	86 e0       	ldi	r24, 0x06	; 6
    4b20:	e2 e3       	ldi	r30, 0x32	; 50
    4b22:	f1 e0       	ldi	r31, 0x01	; 1
    4b24:	9e 01       	movw	r18, r28
    4b26:	2f 5f       	subi	r18, 0xFF	; 255
    4b28:	3f 4f       	sbci	r19, 0xFF	; 255
    4b2a:	79 01       	movw	r14, r18
    4b2c:	d9 01       	movw	r26, r18
    4b2e:	01 90       	ld	r0, Z+
    4b30:	0d 92       	st	X+, r0
    4b32:	8a 95       	dec	r24
    4b34:	e1 f7       	brne	.-8      	; 0x4b2e <USART_BluetoothChanger+0x38c>
    4b36:	fe 01       	movw	r30, r28
    4b38:	37 96       	adiw	r30, 0x07	; 7
    4b3a:	84 e0       	ldi	r24, 0x04	; 4
    4b3c:	df 01       	movw	r26, r30
    4b3e:	1d 92       	st	X+, r1
    4b40:	8a 95       	dec	r24
    4b42:	e9 f7       	brne	.-6      	; 0x4b3e <USART_BluetoothChanger+0x39c>
		strcat(buffer_tmp, Data_in);
    4b44:	b8 01       	movw	r22, r16
    4b46:	c9 01       	movw	r24, r18
    4b48:	0e 94 97 28 	call	0x512e	; 0x512e <strcat>
		strcat(buffer_tmp, "\n");
    4b4c:	f7 01       	movw	r30, r14
    4b4e:	01 90       	ld	r0, Z+
    4b50:	00 20       	and	r0, r0
    4b52:	e9 f7       	brne	.-6      	; 0x4b4e <USART_BluetoothChanger+0x3ac>
    4b54:	31 97       	sbiw	r30, 0x01	; 1
    4b56:	8a e0       	ldi	r24, 0x0A	; 10
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	91 83       	std	Z+1, r25	; 0x01
    4b5c:	80 83       	st	Z, r24
		USART_SendString(buffer_tmp);
    4b5e:	c7 01       	movw	r24, r14
    4b60:	0e 94 c2 23 	call	0x4784	; 0x4784 <USART_SendString>
		strcpy(buffer_tmp, "");
	}
	
    4b64:	2a 96       	adiw	r28, 0x0a	; 10
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	df 91       	pop	r29
    4b72:	cf 91       	pop	r28
    4b74:	1f 91       	pop	r17
    4b76:	0f 91       	pop	r16
    4b78:	ff 90       	pop	r15
    4b7a:	ef 90       	pop	r14
    4b7c:	08 95       	ret

00004b7e <__subsf3>:
    4b7e:	50 58       	subi	r21, 0x80	; 128

00004b80 <__addsf3>:
    4b80:	bb 27       	eor	r27, r27
    4b82:	aa 27       	eor	r26, r26
    4b84:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__addsf3x>
    4b88:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__fp_round>
    4b8c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__fp_pscA>
    4b90:	38 f0       	brcs	.+14     	; 0x4ba0 <__addsf3+0x20>
    4b92:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <__fp_pscB>
    4b96:	20 f0       	brcs	.+8      	; 0x4ba0 <__addsf3+0x20>
    4b98:	39 f4       	brne	.+14     	; 0x4ba8 <__addsf3+0x28>
    4b9a:	9f 3f       	cpi	r25, 0xFF	; 255
    4b9c:	19 f4       	brne	.+6      	; 0x4ba4 <__addsf3+0x24>
    4b9e:	26 f4       	brtc	.+8      	; 0x4ba8 <__addsf3+0x28>
    4ba0:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__fp_nan>
    4ba4:	0e f4       	brtc	.+2      	; 0x4ba8 <__addsf3+0x28>
    4ba6:	e0 95       	com	r30
    4ba8:	e7 fb       	bst	r30, 7
    4baa:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__fp_inf>

00004bae <__addsf3x>:
    4bae:	e9 2f       	mov	r30, r25
    4bb0:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__fp_split3>
    4bb4:	58 f3       	brcs	.-42     	; 0x4b8c <__addsf3+0xc>
    4bb6:	ba 17       	cp	r27, r26
    4bb8:	62 07       	cpc	r22, r18
    4bba:	73 07       	cpc	r23, r19
    4bbc:	84 07       	cpc	r24, r20
    4bbe:	95 07       	cpc	r25, r21
    4bc0:	20 f0       	brcs	.+8      	; 0x4bca <__addsf3x+0x1c>
    4bc2:	79 f4       	brne	.+30     	; 0x4be2 <__addsf3x+0x34>
    4bc4:	a6 f5       	brtc	.+104    	; 0x4c2e <__addsf3x+0x80>
    4bc6:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__fp_zero>
    4bca:	0e f4       	brtc	.+2      	; 0x4bce <__addsf3x+0x20>
    4bcc:	e0 95       	com	r30
    4bce:	0b 2e       	mov	r0, r27
    4bd0:	ba 2f       	mov	r27, r26
    4bd2:	a0 2d       	mov	r26, r0
    4bd4:	0b 01       	movw	r0, r22
    4bd6:	b9 01       	movw	r22, r18
    4bd8:	90 01       	movw	r18, r0
    4bda:	0c 01       	movw	r0, r24
    4bdc:	ca 01       	movw	r24, r20
    4bde:	a0 01       	movw	r20, r0
    4be0:	11 24       	eor	r1, r1
    4be2:	ff 27       	eor	r31, r31
    4be4:	59 1b       	sub	r21, r25
    4be6:	99 f0       	breq	.+38     	; 0x4c0e <__addsf3x+0x60>
    4be8:	59 3f       	cpi	r21, 0xF9	; 249
    4bea:	50 f4       	brcc	.+20     	; 0x4c00 <__addsf3x+0x52>
    4bec:	50 3e       	cpi	r21, 0xE0	; 224
    4bee:	68 f1       	brcs	.+90     	; 0x4c4a <__addsf3x+0x9c>
    4bf0:	1a 16       	cp	r1, r26
    4bf2:	f0 40       	sbci	r31, 0x00	; 0
    4bf4:	a2 2f       	mov	r26, r18
    4bf6:	23 2f       	mov	r18, r19
    4bf8:	34 2f       	mov	r19, r20
    4bfa:	44 27       	eor	r20, r20
    4bfc:	58 5f       	subi	r21, 0xF8	; 248
    4bfe:	f3 cf       	rjmp	.-26     	; 0x4be6 <__addsf3x+0x38>
    4c00:	46 95       	lsr	r20
    4c02:	37 95       	ror	r19
    4c04:	27 95       	ror	r18
    4c06:	a7 95       	ror	r26
    4c08:	f0 40       	sbci	r31, 0x00	; 0
    4c0a:	53 95       	inc	r21
    4c0c:	c9 f7       	brne	.-14     	; 0x4c00 <__addsf3x+0x52>
    4c0e:	7e f4       	brtc	.+30     	; 0x4c2e <__addsf3x+0x80>
    4c10:	1f 16       	cp	r1, r31
    4c12:	ba 0b       	sbc	r27, r26
    4c14:	62 0b       	sbc	r22, r18
    4c16:	73 0b       	sbc	r23, r19
    4c18:	84 0b       	sbc	r24, r20
    4c1a:	ba f0       	brmi	.+46     	; 0x4c4a <__addsf3x+0x9c>
    4c1c:	91 50       	subi	r25, 0x01	; 1
    4c1e:	a1 f0       	breq	.+40     	; 0x4c48 <__addsf3x+0x9a>
    4c20:	ff 0f       	add	r31, r31
    4c22:	bb 1f       	adc	r27, r27
    4c24:	66 1f       	adc	r22, r22
    4c26:	77 1f       	adc	r23, r23
    4c28:	88 1f       	adc	r24, r24
    4c2a:	c2 f7       	brpl	.-16     	; 0x4c1c <__addsf3x+0x6e>
    4c2c:	0e c0       	rjmp	.+28     	; 0x4c4a <__addsf3x+0x9c>
    4c2e:	ba 0f       	add	r27, r26
    4c30:	62 1f       	adc	r22, r18
    4c32:	73 1f       	adc	r23, r19
    4c34:	84 1f       	adc	r24, r20
    4c36:	48 f4       	brcc	.+18     	; 0x4c4a <__addsf3x+0x9c>
    4c38:	87 95       	ror	r24
    4c3a:	77 95       	ror	r23
    4c3c:	67 95       	ror	r22
    4c3e:	b7 95       	ror	r27
    4c40:	f7 95       	ror	r31
    4c42:	9e 3f       	cpi	r25, 0xFE	; 254
    4c44:	08 f0       	brcs	.+2      	; 0x4c48 <__addsf3x+0x9a>
    4c46:	b0 cf       	rjmp	.-160    	; 0x4ba8 <__addsf3+0x28>
    4c48:	93 95       	inc	r25
    4c4a:	88 0f       	add	r24, r24
    4c4c:	08 f0       	brcs	.+2      	; 0x4c50 <__addsf3x+0xa2>
    4c4e:	99 27       	eor	r25, r25
    4c50:	ee 0f       	add	r30, r30
    4c52:	97 95       	ror	r25
    4c54:	87 95       	ror	r24
    4c56:	08 95       	ret

00004c58 <atan>:
    4c58:	df 93       	push	r29
    4c5a:	dd 27       	eor	r29, r29
    4c5c:	b9 2f       	mov	r27, r25
    4c5e:	bf 77       	andi	r27, 0x7F	; 127
    4c60:	40 e8       	ldi	r20, 0x80	; 128
    4c62:	5f e3       	ldi	r21, 0x3F	; 63
    4c64:	16 16       	cp	r1, r22
    4c66:	17 06       	cpc	r1, r23
    4c68:	48 07       	cpc	r20, r24
    4c6a:	5b 07       	cpc	r21, r27
    4c6c:	18 f4       	brcc	.+6      	; 0x4c74 <atan+0x1c>
    4c6e:	d9 2f       	mov	r29, r25
    4c70:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <inverse>
    4c74:	9f 93       	push	r25
    4c76:	8f 93       	push	r24
    4c78:	7f 93       	push	r23
    4c7a:	6f 93       	push	r22
    4c7c:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <square>
    4c80:	e8 e6       	ldi	r30, 0x68	; 104
    4c82:	f0 e0       	ldi	r31, 0x00	; 0
    4c84:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__fp_powser>
    4c88:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__fp_round>
    4c8c:	2f 91       	pop	r18
    4c8e:	3f 91       	pop	r19
    4c90:	4f 91       	pop	r20
    4c92:	5f 91       	pop	r21
    4c94:	0e 94 01 28 	call	0x5002	; 0x5002 <__mulsf3x>
    4c98:	dd 23       	and	r29, r29
    4c9a:	51 f0       	breq	.+20     	; 0x4cb0 <atan+0x58>
    4c9c:	90 58       	subi	r25, 0x80	; 128
    4c9e:	a2 ea       	ldi	r26, 0xA2	; 162
    4ca0:	2a ed       	ldi	r18, 0xDA	; 218
    4ca2:	3f e0       	ldi	r19, 0x0F	; 15
    4ca4:	49 ec       	ldi	r20, 0xC9	; 201
    4ca6:	5f e3       	ldi	r21, 0x3F	; 63
    4ca8:	d0 78       	andi	r29, 0x80	; 128
    4caa:	5d 27       	eor	r21, r29
    4cac:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__addsf3x>
    4cb0:	df 91       	pop	r29
    4cb2:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__fp_round>

00004cb6 <__cmpsf2>:
    4cb6:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__fp_cmp>
    4cba:	08 f4       	brcc	.+2      	; 0x4cbe <__cmpsf2+0x8>
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	08 95       	ret

00004cc0 <__divsf3>:
    4cc0:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__divsf3x>
    4cc4:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__fp_round>
    4cc8:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <__fp_pscB>
    4ccc:	58 f0       	brcs	.+22     	; 0x4ce4 <__divsf3+0x24>
    4cce:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__fp_pscA>
    4cd2:	40 f0       	brcs	.+16     	; 0x4ce4 <__divsf3+0x24>
    4cd4:	29 f4       	brne	.+10     	; 0x4ce0 <__divsf3+0x20>
    4cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    4cd8:	29 f0       	breq	.+10     	; 0x4ce4 <__divsf3+0x24>
    4cda:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__fp_inf>
    4cde:	51 11       	cpse	r21, r1
    4ce0:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__fp_szero>
    4ce4:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__fp_nan>

00004ce8 <__divsf3x>:
    4ce8:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__fp_split3>
    4cec:	68 f3       	brcs	.-38     	; 0x4cc8 <__divsf3+0x8>

00004cee <__divsf3_pse>:
    4cee:	99 23       	and	r25, r25
    4cf0:	b1 f3       	breq	.-20     	; 0x4cde <__divsf3+0x1e>
    4cf2:	55 23       	and	r21, r21
    4cf4:	91 f3       	breq	.-28     	; 0x4cda <__divsf3+0x1a>
    4cf6:	95 1b       	sub	r25, r21
    4cf8:	55 0b       	sbc	r21, r21
    4cfa:	bb 27       	eor	r27, r27
    4cfc:	aa 27       	eor	r26, r26
    4cfe:	62 17       	cp	r22, r18
    4d00:	73 07       	cpc	r23, r19
    4d02:	84 07       	cpc	r24, r20
    4d04:	38 f0       	brcs	.+14     	; 0x4d14 <__divsf3_pse+0x26>
    4d06:	9f 5f       	subi	r25, 0xFF	; 255
    4d08:	5f 4f       	sbci	r21, 0xFF	; 255
    4d0a:	22 0f       	add	r18, r18
    4d0c:	33 1f       	adc	r19, r19
    4d0e:	44 1f       	adc	r20, r20
    4d10:	aa 1f       	adc	r26, r26
    4d12:	a9 f3       	breq	.-22     	; 0x4cfe <__divsf3_pse+0x10>
    4d14:	35 d0       	rcall	.+106    	; 0x4d80 <__divsf3_pse+0x92>
    4d16:	0e 2e       	mov	r0, r30
    4d18:	3a f0       	brmi	.+14     	; 0x4d28 <__divsf3_pse+0x3a>
    4d1a:	e0 e8       	ldi	r30, 0x80	; 128
    4d1c:	32 d0       	rcall	.+100    	; 0x4d82 <__divsf3_pse+0x94>
    4d1e:	91 50       	subi	r25, 0x01	; 1
    4d20:	50 40       	sbci	r21, 0x00	; 0
    4d22:	e6 95       	lsr	r30
    4d24:	00 1c       	adc	r0, r0
    4d26:	ca f7       	brpl	.-14     	; 0x4d1a <__divsf3_pse+0x2c>
    4d28:	2b d0       	rcall	.+86     	; 0x4d80 <__divsf3_pse+0x92>
    4d2a:	fe 2f       	mov	r31, r30
    4d2c:	29 d0       	rcall	.+82     	; 0x4d80 <__divsf3_pse+0x92>
    4d2e:	66 0f       	add	r22, r22
    4d30:	77 1f       	adc	r23, r23
    4d32:	88 1f       	adc	r24, r24
    4d34:	bb 1f       	adc	r27, r27
    4d36:	26 17       	cp	r18, r22
    4d38:	37 07       	cpc	r19, r23
    4d3a:	48 07       	cpc	r20, r24
    4d3c:	ab 07       	cpc	r26, r27
    4d3e:	b0 e8       	ldi	r27, 0x80	; 128
    4d40:	09 f0       	breq	.+2      	; 0x4d44 <__divsf3_pse+0x56>
    4d42:	bb 0b       	sbc	r27, r27
    4d44:	80 2d       	mov	r24, r0
    4d46:	bf 01       	movw	r22, r30
    4d48:	ff 27       	eor	r31, r31
    4d4a:	93 58       	subi	r25, 0x83	; 131
    4d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d4e:	3a f0       	brmi	.+14     	; 0x4d5e <__divsf3_pse+0x70>
    4d50:	9e 3f       	cpi	r25, 0xFE	; 254
    4d52:	51 05       	cpc	r21, r1
    4d54:	78 f0       	brcs	.+30     	; 0x4d74 <__divsf3_pse+0x86>
    4d56:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__fp_inf>
    4d5a:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__fp_szero>
    4d5e:	5f 3f       	cpi	r21, 0xFF	; 255
    4d60:	e4 f3       	brlt	.-8      	; 0x4d5a <__divsf3_pse+0x6c>
    4d62:	98 3e       	cpi	r25, 0xE8	; 232
    4d64:	d4 f3       	brlt	.-12     	; 0x4d5a <__divsf3_pse+0x6c>
    4d66:	86 95       	lsr	r24
    4d68:	77 95       	ror	r23
    4d6a:	67 95       	ror	r22
    4d6c:	b7 95       	ror	r27
    4d6e:	f7 95       	ror	r31
    4d70:	9f 5f       	subi	r25, 0xFF	; 255
    4d72:	c9 f7       	brne	.-14     	; 0x4d66 <__divsf3_pse+0x78>
    4d74:	88 0f       	add	r24, r24
    4d76:	91 1d       	adc	r25, r1
    4d78:	96 95       	lsr	r25
    4d7a:	87 95       	ror	r24
    4d7c:	97 f9       	bld	r25, 7
    4d7e:	08 95       	ret
    4d80:	e1 e0       	ldi	r30, 0x01	; 1
    4d82:	66 0f       	add	r22, r22
    4d84:	77 1f       	adc	r23, r23
    4d86:	88 1f       	adc	r24, r24
    4d88:	bb 1f       	adc	r27, r27
    4d8a:	62 17       	cp	r22, r18
    4d8c:	73 07       	cpc	r23, r19
    4d8e:	84 07       	cpc	r24, r20
    4d90:	ba 07       	cpc	r27, r26
    4d92:	20 f0       	brcs	.+8      	; 0x4d9c <__divsf3_pse+0xae>
    4d94:	62 1b       	sub	r22, r18
    4d96:	73 0b       	sbc	r23, r19
    4d98:	84 0b       	sbc	r24, r20
    4d9a:	ba 0b       	sbc	r27, r26
    4d9c:	ee 1f       	adc	r30, r30
    4d9e:	88 f7       	brcc	.-30     	; 0x4d82 <__divsf3_pse+0x94>
    4da0:	e0 95       	com	r30
    4da2:	08 95       	ret

00004da4 <__fixsfsi>:
    4da4:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__fixunssfsi>
    4da8:	68 94       	set
    4daa:	b1 11       	cpse	r27, r1
    4dac:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__fp_szero>
    4db0:	08 95       	ret

00004db2 <__fixunssfsi>:
    4db2:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__fp_splitA>
    4db6:	88 f0       	brcs	.+34     	; 0x4dda <__fixunssfsi+0x28>
    4db8:	9f 57       	subi	r25, 0x7F	; 127
    4dba:	98 f0       	brcs	.+38     	; 0x4de2 <__fixunssfsi+0x30>
    4dbc:	b9 2f       	mov	r27, r25
    4dbe:	99 27       	eor	r25, r25
    4dc0:	b7 51       	subi	r27, 0x17	; 23
    4dc2:	b0 f0       	brcs	.+44     	; 0x4df0 <__fixunssfsi+0x3e>
    4dc4:	e1 f0       	breq	.+56     	; 0x4dfe <__fixunssfsi+0x4c>
    4dc6:	66 0f       	add	r22, r22
    4dc8:	77 1f       	adc	r23, r23
    4dca:	88 1f       	adc	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	1a f0       	brmi	.+6      	; 0x4dd6 <__fixunssfsi+0x24>
    4dd0:	ba 95       	dec	r27
    4dd2:	c9 f7       	brne	.-14     	; 0x4dc6 <__fixunssfsi+0x14>
    4dd4:	14 c0       	rjmp	.+40     	; 0x4dfe <__fixunssfsi+0x4c>
    4dd6:	b1 30       	cpi	r27, 0x01	; 1
    4dd8:	91 f0       	breq	.+36     	; 0x4dfe <__fixunssfsi+0x4c>
    4dda:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <__fp_zero>
    4dde:	b1 e0       	ldi	r27, 0x01	; 1
    4de0:	08 95       	ret
    4de2:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__fp_zero>
    4de6:	67 2f       	mov	r22, r23
    4de8:	78 2f       	mov	r23, r24
    4dea:	88 27       	eor	r24, r24
    4dec:	b8 5f       	subi	r27, 0xF8	; 248
    4dee:	39 f0       	breq	.+14     	; 0x4dfe <__fixunssfsi+0x4c>
    4df0:	b9 3f       	cpi	r27, 0xF9	; 249
    4df2:	cc f3       	brlt	.-14     	; 0x4de6 <__fixunssfsi+0x34>
    4df4:	86 95       	lsr	r24
    4df6:	77 95       	ror	r23
    4df8:	67 95       	ror	r22
    4dfa:	b3 95       	inc	r27
    4dfc:	d9 f7       	brne	.-10     	; 0x4df4 <__fixunssfsi+0x42>
    4dfe:	3e f4       	brtc	.+14     	; 0x4e0e <__fixunssfsi+0x5c>
    4e00:	90 95       	com	r25
    4e02:	80 95       	com	r24
    4e04:	70 95       	com	r23
    4e06:	61 95       	neg	r22
    4e08:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0e:	08 95       	ret

00004e10 <__floatunsisf>:
    4e10:	e8 94       	clt
    4e12:	09 c0       	rjmp	.+18     	; 0x4e26 <__floatsisf+0x12>

00004e14 <__floatsisf>:
    4e14:	97 fb       	bst	r25, 7
    4e16:	3e f4       	brtc	.+14     	; 0x4e26 <__floatsisf+0x12>
    4e18:	90 95       	com	r25
    4e1a:	80 95       	com	r24
    4e1c:	70 95       	com	r23
    4e1e:	61 95       	neg	r22
    4e20:	7f 4f       	sbci	r23, 0xFF	; 255
    4e22:	8f 4f       	sbci	r24, 0xFF	; 255
    4e24:	9f 4f       	sbci	r25, 0xFF	; 255
    4e26:	99 23       	and	r25, r25
    4e28:	a9 f0       	breq	.+42     	; 0x4e54 <__floatsisf+0x40>
    4e2a:	f9 2f       	mov	r31, r25
    4e2c:	96 e9       	ldi	r25, 0x96	; 150
    4e2e:	bb 27       	eor	r27, r27
    4e30:	93 95       	inc	r25
    4e32:	f6 95       	lsr	r31
    4e34:	87 95       	ror	r24
    4e36:	77 95       	ror	r23
    4e38:	67 95       	ror	r22
    4e3a:	b7 95       	ror	r27
    4e3c:	f1 11       	cpse	r31, r1
    4e3e:	f8 cf       	rjmp	.-16     	; 0x4e30 <__floatsisf+0x1c>
    4e40:	fa f4       	brpl	.+62     	; 0x4e80 <__floatsisf+0x6c>
    4e42:	bb 0f       	add	r27, r27
    4e44:	11 f4       	brne	.+4      	; 0x4e4a <__floatsisf+0x36>
    4e46:	60 ff       	sbrs	r22, 0
    4e48:	1b c0       	rjmp	.+54     	; 0x4e80 <__floatsisf+0x6c>
    4e4a:	6f 5f       	subi	r22, 0xFF	; 255
    4e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e4e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e50:	9f 4f       	sbci	r25, 0xFF	; 255
    4e52:	16 c0       	rjmp	.+44     	; 0x4e80 <__floatsisf+0x6c>
    4e54:	88 23       	and	r24, r24
    4e56:	11 f0       	breq	.+4      	; 0x4e5c <__floatsisf+0x48>
    4e58:	96 e9       	ldi	r25, 0x96	; 150
    4e5a:	11 c0       	rjmp	.+34     	; 0x4e7e <__floatsisf+0x6a>
    4e5c:	77 23       	and	r23, r23
    4e5e:	21 f0       	breq	.+8      	; 0x4e68 <__floatsisf+0x54>
    4e60:	9e e8       	ldi	r25, 0x8E	; 142
    4e62:	87 2f       	mov	r24, r23
    4e64:	76 2f       	mov	r23, r22
    4e66:	05 c0       	rjmp	.+10     	; 0x4e72 <__floatsisf+0x5e>
    4e68:	66 23       	and	r22, r22
    4e6a:	71 f0       	breq	.+28     	; 0x4e88 <__floatsisf+0x74>
    4e6c:	96 e8       	ldi	r25, 0x86	; 134
    4e6e:	86 2f       	mov	r24, r22
    4e70:	70 e0       	ldi	r23, 0x00	; 0
    4e72:	60 e0       	ldi	r22, 0x00	; 0
    4e74:	2a f0       	brmi	.+10     	; 0x4e80 <__floatsisf+0x6c>
    4e76:	9a 95       	dec	r25
    4e78:	66 0f       	add	r22, r22
    4e7a:	77 1f       	adc	r23, r23
    4e7c:	88 1f       	adc	r24, r24
    4e7e:	da f7       	brpl	.-10     	; 0x4e76 <__floatsisf+0x62>
    4e80:	88 0f       	add	r24, r24
    4e82:	96 95       	lsr	r25
    4e84:	87 95       	ror	r24
    4e86:	97 f9       	bld	r25, 7
    4e88:	08 95       	ret

00004e8a <__fp_cmp>:
    4e8a:	99 0f       	add	r25, r25
    4e8c:	00 08       	sbc	r0, r0
    4e8e:	55 0f       	add	r21, r21
    4e90:	aa 0b       	sbc	r26, r26
    4e92:	e0 e8       	ldi	r30, 0x80	; 128
    4e94:	fe ef       	ldi	r31, 0xFE	; 254
    4e96:	16 16       	cp	r1, r22
    4e98:	17 06       	cpc	r1, r23
    4e9a:	e8 07       	cpc	r30, r24
    4e9c:	f9 07       	cpc	r31, r25
    4e9e:	c0 f0       	brcs	.+48     	; 0x4ed0 <__fp_cmp+0x46>
    4ea0:	12 16       	cp	r1, r18
    4ea2:	13 06       	cpc	r1, r19
    4ea4:	e4 07       	cpc	r30, r20
    4ea6:	f5 07       	cpc	r31, r21
    4ea8:	98 f0       	brcs	.+38     	; 0x4ed0 <__fp_cmp+0x46>
    4eaa:	62 1b       	sub	r22, r18
    4eac:	73 0b       	sbc	r23, r19
    4eae:	84 0b       	sbc	r24, r20
    4eb0:	95 0b       	sbc	r25, r21
    4eb2:	39 f4       	brne	.+14     	; 0x4ec2 <__fp_cmp+0x38>
    4eb4:	0a 26       	eor	r0, r26
    4eb6:	61 f0       	breq	.+24     	; 0x4ed0 <__fp_cmp+0x46>
    4eb8:	23 2b       	or	r18, r19
    4eba:	24 2b       	or	r18, r20
    4ebc:	25 2b       	or	r18, r21
    4ebe:	21 f4       	brne	.+8      	; 0x4ec8 <__fp_cmp+0x3e>
    4ec0:	08 95       	ret
    4ec2:	0a 26       	eor	r0, r26
    4ec4:	09 f4       	brne	.+2      	; 0x4ec8 <__fp_cmp+0x3e>
    4ec6:	a1 40       	sbci	r26, 0x01	; 1
    4ec8:	a6 95       	lsr	r26
    4eca:	8f ef       	ldi	r24, 0xFF	; 255
    4ecc:	81 1d       	adc	r24, r1
    4ece:	81 1d       	adc	r24, r1
    4ed0:	08 95       	ret

00004ed2 <__fp_inf>:
    4ed2:	97 f9       	bld	r25, 7
    4ed4:	9f 67       	ori	r25, 0x7F	; 127
    4ed6:	80 e8       	ldi	r24, 0x80	; 128
    4ed8:	70 e0       	ldi	r23, 0x00	; 0
    4eda:	60 e0       	ldi	r22, 0x00	; 0
    4edc:	08 95       	ret

00004ede <__fp_nan>:
    4ede:	9f ef       	ldi	r25, 0xFF	; 255
    4ee0:	80 ec       	ldi	r24, 0xC0	; 192
    4ee2:	08 95       	ret

00004ee4 <__fp_powser>:
    4ee4:	df 93       	push	r29
    4ee6:	cf 93       	push	r28
    4ee8:	1f 93       	push	r17
    4eea:	0f 93       	push	r16
    4eec:	ff 92       	push	r15
    4eee:	ef 92       	push	r14
    4ef0:	df 92       	push	r13
    4ef2:	7b 01       	movw	r14, r22
    4ef4:	8c 01       	movw	r16, r24
    4ef6:	68 94       	set
    4ef8:	06 c0       	rjmp	.+12     	; 0x4f06 <__fp_powser+0x22>
    4efa:	da 2e       	mov	r13, r26
    4efc:	ef 01       	movw	r28, r30
    4efe:	0e 94 01 28 	call	0x5002	; 0x5002 <__mulsf3x>
    4f02:	fe 01       	movw	r30, r28
    4f04:	e8 94       	clt
    4f06:	a5 91       	lpm	r26, Z+
    4f08:	25 91       	lpm	r18, Z+
    4f0a:	35 91       	lpm	r19, Z+
    4f0c:	45 91       	lpm	r20, Z+
    4f0e:	55 91       	lpm	r21, Z+
    4f10:	a6 f3       	brts	.-24     	; 0x4efa <__fp_powser+0x16>
    4f12:	ef 01       	movw	r28, r30
    4f14:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__addsf3x>
    4f18:	fe 01       	movw	r30, r28
    4f1a:	97 01       	movw	r18, r14
    4f1c:	a8 01       	movw	r20, r16
    4f1e:	da 94       	dec	r13
    4f20:	69 f7       	brne	.-38     	; 0x4efc <__fp_powser+0x18>
    4f22:	df 90       	pop	r13
    4f24:	ef 90       	pop	r14
    4f26:	ff 90       	pop	r15
    4f28:	0f 91       	pop	r16
    4f2a:	1f 91       	pop	r17
    4f2c:	cf 91       	pop	r28
    4f2e:	df 91       	pop	r29
    4f30:	08 95       	ret

00004f32 <__fp_pscA>:
    4f32:	00 24       	eor	r0, r0
    4f34:	0a 94       	dec	r0
    4f36:	16 16       	cp	r1, r22
    4f38:	17 06       	cpc	r1, r23
    4f3a:	18 06       	cpc	r1, r24
    4f3c:	09 06       	cpc	r0, r25
    4f3e:	08 95       	ret

00004f40 <__fp_pscB>:
    4f40:	00 24       	eor	r0, r0
    4f42:	0a 94       	dec	r0
    4f44:	12 16       	cp	r1, r18
    4f46:	13 06       	cpc	r1, r19
    4f48:	14 06       	cpc	r1, r20
    4f4a:	05 06       	cpc	r0, r21
    4f4c:	08 95       	ret

00004f4e <__fp_round>:
    4f4e:	09 2e       	mov	r0, r25
    4f50:	03 94       	inc	r0
    4f52:	00 0c       	add	r0, r0
    4f54:	11 f4       	brne	.+4      	; 0x4f5a <__fp_round+0xc>
    4f56:	88 23       	and	r24, r24
    4f58:	52 f0       	brmi	.+20     	; 0x4f6e <__fp_round+0x20>
    4f5a:	bb 0f       	add	r27, r27
    4f5c:	40 f4       	brcc	.+16     	; 0x4f6e <__fp_round+0x20>
    4f5e:	bf 2b       	or	r27, r31
    4f60:	11 f4       	brne	.+4      	; 0x4f66 <__fp_round+0x18>
    4f62:	60 ff       	sbrs	r22, 0
    4f64:	04 c0       	rjmp	.+8      	; 0x4f6e <__fp_round+0x20>
    4f66:	6f 5f       	subi	r22, 0xFF	; 255
    4f68:	7f 4f       	sbci	r23, 0xFF	; 255
    4f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f6e:	08 95       	ret

00004f70 <__fp_split3>:
    4f70:	57 fd       	sbrc	r21, 7
    4f72:	90 58       	subi	r25, 0x80	; 128
    4f74:	44 0f       	add	r20, r20
    4f76:	55 1f       	adc	r21, r21
    4f78:	59 f0       	breq	.+22     	; 0x4f90 <__fp_splitA+0x10>
    4f7a:	5f 3f       	cpi	r21, 0xFF	; 255
    4f7c:	71 f0       	breq	.+28     	; 0x4f9a <__fp_splitA+0x1a>
    4f7e:	47 95       	ror	r20

00004f80 <__fp_splitA>:
    4f80:	88 0f       	add	r24, r24
    4f82:	97 fb       	bst	r25, 7
    4f84:	99 1f       	adc	r25, r25
    4f86:	61 f0       	breq	.+24     	; 0x4fa0 <__fp_splitA+0x20>
    4f88:	9f 3f       	cpi	r25, 0xFF	; 255
    4f8a:	79 f0       	breq	.+30     	; 0x4faa <__fp_splitA+0x2a>
    4f8c:	87 95       	ror	r24
    4f8e:	08 95       	ret
    4f90:	12 16       	cp	r1, r18
    4f92:	13 06       	cpc	r1, r19
    4f94:	14 06       	cpc	r1, r20
    4f96:	55 1f       	adc	r21, r21
    4f98:	f2 cf       	rjmp	.-28     	; 0x4f7e <__fp_split3+0xe>
    4f9a:	46 95       	lsr	r20
    4f9c:	f1 df       	rcall	.-30     	; 0x4f80 <__fp_splitA>
    4f9e:	08 c0       	rjmp	.+16     	; 0x4fb0 <__fp_splitA+0x30>
    4fa0:	16 16       	cp	r1, r22
    4fa2:	17 06       	cpc	r1, r23
    4fa4:	18 06       	cpc	r1, r24
    4fa6:	99 1f       	adc	r25, r25
    4fa8:	f1 cf       	rjmp	.-30     	; 0x4f8c <__fp_splitA+0xc>
    4faa:	86 95       	lsr	r24
    4fac:	71 05       	cpc	r23, r1
    4fae:	61 05       	cpc	r22, r1
    4fb0:	08 94       	sec
    4fb2:	08 95       	ret

00004fb4 <__fp_zero>:
    4fb4:	e8 94       	clt

00004fb6 <__fp_szero>:
    4fb6:	bb 27       	eor	r27, r27
    4fb8:	66 27       	eor	r22, r22
    4fba:	77 27       	eor	r23, r23
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	97 f9       	bld	r25, 7
    4fc0:	08 95       	ret

00004fc2 <__gesf2>:
    4fc2:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__fp_cmp>
    4fc6:	08 f4       	brcc	.+2      	; 0x4fca <__gesf2+0x8>
    4fc8:	8f ef       	ldi	r24, 0xFF	; 255
    4fca:	08 95       	ret

00004fcc <inverse>:
    4fcc:	9b 01       	movw	r18, r22
    4fce:	ac 01       	movw	r20, r24
    4fd0:	60 e0       	ldi	r22, 0x00	; 0
    4fd2:	70 e0       	ldi	r23, 0x00	; 0
    4fd4:	80 e8       	ldi	r24, 0x80	; 128
    4fd6:	9f e3       	ldi	r25, 0x3F	; 63
    4fd8:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__divsf3>

00004fdc <__mulsf3>:
    4fdc:	0e 94 01 28 	call	0x5002	; 0x5002 <__mulsf3x>
    4fe0:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__fp_round>
    4fe4:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__fp_pscA>
    4fe8:	38 f0       	brcs	.+14     	; 0x4ff8 <__mulsf3+0x1c>
    4fea:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <__fp_pscB>
    4fee:	20 f0       	brcs	.+8      	; 0x4ff8 <__mulsf3+0x1c>
    4ff0:	95 23       	and	r25, r21
    4ff2:	11 f0       	breq	.+4      	; 0x4ff8 <__mulsf3+0x1c>
    4ff4:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__fp_inf>
    4ff8:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__fp_nan>
    4ffc:	11 24       	eor	r1, r1
    4ffe:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__fp_szero>

00005002 <__mulsf3x>:
    5002:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__fp_split3>
    5006:	70 f3       	brcs	.-36     	; 0x4fe4 <__mulsf3+0x8>

00005008 <__mulsf3_pse>:
    5008:	95 9f       	mul	r25, r21
    500a:	c1 f3       	breq	.-16     	; 0x4ffc <__mulsf3+0x20>
    500c:	95 0f       	add	r25, r21
    500e:	50 e0       	ldi	r21, 0x00	; 0
    5010:	55 1f       	adc	r21, r21
    5012:	62 9f       	mul	r22, r18
    5014:	f0 01       	movw	r30, r0
    5016:	72 9f       	mul	r23, r18
    5018:	bb 27       	eor	r27, r27
    501a:	f0 0d       	add	r31, r0
    501c:	b1 1d       	adc	r27, r1
    501e:	63 9f       	mul	r22, r19
    5020:	aa 27       	eor	r26, r26
    5022:	f0 0d       	add	r31, r0
    5024:	b1 1d       	adc	r27, r1
    5026:	aa 1f       	adc	r26, r26
    5028:	64 9f       	mul	r22, r20
    502a:	66 27       	eor	r22, r22
    502c:	b0 0d       	add	r27, r0
    502e:	a1 1d       	adc	r26, r1
    5030:	66 1f       	adc	r22, r22
    5032:	82 9f       	mul	r24, r18
    5034:	22 27       	eor	r18, r18
    5036:	b0 0d       	add	r27, r0
    5038:	a1 1d       	adc	r26, r1
    503a:	62 1f       	adc	r22, r18
    503c:	73 9f       	mul	r23, r19
    503e:	b0 0d       	add	r27, r0
    5040:	a1 1d       	adc	r26, r1
    5042:	62 1f       	adc	r22, r18
    5044:	83 9f       	mul	r24, r19
    5046:	a0 0d       	add	r26, r0
    5048:	61 1d       	adc	r22, r1
    504a:	22 1f       	adc	r18, r18
    504c:	74 9f       	mul	r23, r20
    504e:	33 27       	eor	r19, r19
    5050:	a0 0d       	add	r26, r0
    5052:	61 1d       	adc	r22, r1
    5054:	23 1f       	adc	r18, r19
    5056:	84 9f       	mul	r24, r20
    5058:	60 0d       	add	r22, r0
    505a:	21 1d       	adc	r18, r1
    505c:	82 2f       	mov	r24, r18
    505e:	76 2f       	mov	r23, r22
    5060:	6a 2f       	mov	r22, r26
    5062:	11 24       	eor	r1, r1
    5064:	9f 57       	subi	r25, 0x7F	; 127
    5066:	50 40       	sbci	r21, 0x00	; 0
    5068:	9a f0       	brmi	.+38     	; 0x5090 <__mulsf3_pse+0x88>
    506a:	f1 f0       	breq	.+60     	; 0x50a8 <__mulsf3_pse+0xa0>
    506c:	88 23       	and	r24, r24
    506e:	4a f0       	brmi	.+18     	; 0x5082 <__mulsf3_pse+0x7a>
    5070:	ee 0f       	add	r30, r30
    5072:	ff 1f       	adc	r31, r31
    5074:	bb 1f       	adc	r27, r27
    5076:	66 1f       	adc	r22, r22
    5078:	77 1f       	adc	r23, r23
    507a:	88 1f       	adc	r24, r24
    507c:	91 50       	subi	r25, 0x01	; 1
    507e:	50 40       	sbci	r21, 0x00	; 0
    5080:	a9 f7       	brne	.-22     	; 0x506c <__mulsf3_pse+0x64>
    5082:	9e 3f       	cpi	r25, 0xFE	; 254
    5084:	51 05       	cpc	r21, r1
    5086:	80 f0       	brcs	.+32     	; 0x50a8 <__mulsf3_pse+0xa0>
    5088:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__fp_inf>
    508c:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__fp_szero>
    5090:	5f 3f       	cpi	r21, 0xFF	; 255
    5092:	e4 f3       	brlt	.-8      	; 0x508c <__mulsf3_pse+0x84>
    5094:	98 3e       	cpi	r25, 0xE8	; 232
    5096:	d4 f3       	brlt	.-12     	; 0x508c <__mulsf3_pse+0x84>
    5098:	86 95       	lsr	r24
    509a:	77 95       	ror	r23
    509c:	67 95       	ror	r22
    509e:	b7 95       	ror	r27
    50a0:	f7 95       	ror	r31
    50a2:	e7 95       	ror	r30
    50a4:	9f 5f       	subi	r25, 0xFF	; 255
    50a6:	c1 f7       	brne	.-16     	; 0x5098 <__mulsf3_pse+0x90>
    50a8:	fe 2b       	or	r31, r30
    50aa:	88 0f       	add	r24, r24
    50ac:	91 1d       	adc	r25, r1
    50ae:	96 95       	lsr	r25
    50b0:	87 95       	ror	r24
    50b2:	97 f9       	bld	r25, 7
    50b4:	08 95       	ret

000050b6 <square>:
    50b6:	9b 01       	movw	r18, r22
    50b8:	ac 01       	movw	r20, r24
    50ba:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <__mulsf3>

000050be <__udivmodsi4>:
    50be:	a1 e2       	ldi	r26, 0x21	; 33
    50c0:	1a 2e       	mov	r1, r26
    50c2:	aa 1b       	sub	r26, r26
    50c4:	bb 1b       	sub	r27, r27
    50c6:	fd 01       	movw	r30, r26
    50c8:	0d c0       	rjmp	.+26     	; 0x50e4 <__udivmodsi4_ep>

000050ca <__udivmodsi4_loop>:
    50ca:	aa 1f       	adc	r26, r26
    50cc:	bb 1f       	adc	r27, r27
    50ce:	ee 1f       	adc	r30, r30
    50d0:	ff 1f       	adc	r31, r31
    50d2:	a2 17       	cp	r26, r18
    50d4:	b3 07       	cpc	r27, r19
    50d6:	e4 07       	cpc	r30, r20
    50d8:	f5 07       	cpc	r31, r21
    50da:	20 f0       	brcs	.+8      	; 0x50e4 <__udivmodsi4_ep>
    50dc:	a2 1b       	sub	r26, r18
    50de:	b3 0b       	sbc	r27, r19
    50e0:	e4 0b       	sbc	r30, r20
    50e2:	f5 0b       	sbc	r31, r21

000050e4 <__udivmodsi4_ep>:
    50e4:	66 1f       	adc	r22, r22
    50e6:	77 1f       	adc	r23, r23
    50e8:	88 1f       	adc	r24, r24
    50ea:	99 1f       	adc	r25, r25
    50ec:	1a 94       	dec	r1
    50ee:	69 f7       	brne	.-38     	; 0x50ca <__udivmodsi4_loop>
    50f0:	60 95       	com	r22
    50f2:	70 95       	com	r23
    50f4:	80 95       	com	r24
    50f6:	90 95       	com	r25
    50f8:	9b 01       	movw	r18, r22
    50fa:	ac 01       	movw	r20, r24
    50fc:	bd 01       	movw	r22, r26
    50fe:	cf 01       	movw	r24, r30
    5100:	08 95       	ret

00005102 <__umulhisi3>:
    5102:	a2 9f       	mul	r26, r18
    5104:	b0 01       	movw	r22, r0
    5106:	b3 9f       	mul	r27, r19
    5108:	c0 01       	movw	r24, r0
    510a:	a3 9f       	mul	r26, r19
    510c:	70 0d       	add	r23, r0
    510e:	81 1d       	adc	r24, r1
    5110:	11 24       	eor	r1, r1
    5112:	91 1d       	adc	r25, r1
    5114:	b2 9f       	mul	r27, r18
    5116:	70 0d       	add	r23, r0
    5118:	81 1d       	adc	r24, r1
    511a:	11 24       	eor	r1, r1
    511c:	91 1d       	adc	r25, r1
    511e:	08 95       	ret

00005120 <memset>:
    5120:	dc 01       	movw	r26, r24
    5122:	01 c0       	rjmp	.+2      	; 0x5126 <memset+0x6>
    5124:	6d 93       	st	X+, r22
    5126:	41 50       	subi	r20, 0x01	; 1
    5128:	50 40       	sbci	r21, 0x00	; 0
    512a:	e0 f7       	brcc	.-8      	; 0x5124 <memset+0x4>
    512c:	08 95       	ret

0000512e <strcat>:
    512e:	fb 01       	movw	r30, r22
    5130:	dc 01       	movw	r26, r24
    5132:	0d 90       	ld	r0, X+
    5134:	00 20       	and	r0, r0
    5136:	e9 f7       	brne	.-6      	; 0x5132 <strcat+0x4>
    5138:	11 97       	sbiw	r26, 0x01	; 1
    513a:	01 90       	ld	r0, Z+
    513c:	0d 92       	st	X+, r0
    513e:	00 20       	and	r0, r0
    5140:	e1 f7       	brne	.-8      	; 0x513a <strcat+0xc>
    5142:	08 95       	ret

00005144 <strcmp>:
    5144:	fb 01       	movw	r30, r22
    5146:	dc 01       	movw	r26, r24
    5148:	8d 91       	ld	r24, X+
    514a:	01 90       	ld	r0, Z+
    514c:	80 19       	sub	r24, r0
    514e:	01 10       	cpse	r0, r1
    5150:	d9 f3       	breq	.-10     	; 0x5148 <strcmp+0x4>
    5152:	99 0b       	sbc	r25, r25
    5154:	08 95       	ret

00005156 <__itoa_ncheck>:
    5156:	bb 27       	eor	r27, r27
    5158:	4a 30       	cpi	r20, 0x0A	; 10
    515a:	31 f4       	brne	.+12     	; 0x5168 <__itoa_ncheck+0x12>
    515c:	99 23       	and	r25, r25
    515e:	22 f4       	brpl	.+8      	; 0x5168 <__itoa_ncheck+0x12>
    5160:	bd e2       	ldi	r27, 0x2D	; 45
    5162:	90 95       	com	r25
    5164:	81 95       	neg	r24
    5166:	9f 4f       	sbci	r25, 0xFF	; 255
    5168:	0c 94 b7 28 	jmp	0x516e	; 0x516e <__utoa_common>

0000516c <__utoa_ncheck>:
    516c:	bb 27       	eor	r27, r27

0000516e <__utoa_common>:
    516e:	fb 01       	movw	r30, r22
    5170:	55 27       	eor	r21, r21
    5172:	aa 27       	eor	r26, r26
    5174:	88 0f       	add	r24, r24
    5176:	99 1f       	adc	r25, r25
    5178:	aa 1f       	adc	r26, r26
    517a:	a4 17       	cp	r26, r20
    517c:	10 f0       	brcs	.+4      	; 0x5182 <__utoa_common+0x14>
    517e:	a4 1b       	sub	r26, r20
    5180:	83 95       	inc	r24
    5182:	50 51       	subi	r21, 0x10	; 16
    5184:	b9 f7       	brne	.-18     	; 0x5174 <__utoa_common+0x6>
    5186:	a0 5d       	subi	r26, 0xD0	; 208
    5188:	aa 33       	cpi	r26, 0x3A	; 58
    518a:	08 f0       	brcs	.+2      	; 0x518e <__utoa_common+0x20>
    518c:	a9 5d       	subi	r26, 0xD9	; 217
    518e:	a1 93       	st	Z+, r26
    5190:	00 97       	sbiw	r24, 0x00	; 0
    5192:	79 f7       	brne	.-34     	; 0x5172 <__utoa_common+0x4>
    5194:	b1 11       	cpse	r27, r1
    5196:	b1 93       	st	Z+, r27
    5198:	11 92       	st	Z+, r1
    519a:	cb 01       	movw	r24, r22
    519c:	0c 94 d0 28 	jmp	0x51a0	; 0x51a0 <strrev>

000051a0 <strrev>:
    51a0:	dc 01       	movw	r26, r24
    51a2:	fc 01       	movw	r30, r24
    51a4:	67 2f       	mov	r22, r23
    51a6:	71 91       	ld	r23, Z+
    51a8:	77 23       	and	r23, r23
    51aa:	e1 f7       	brne	.-8      	; 0x51a4 <strrev+0x4>
    51ac:	32 97       	sbiw	r30, 0x02	; 2
    51ae:	04 c0       	rjmp	.+8      	; 0x51b8 <strrev+0x18>
    51b0:	7c 91       	ld	r23, X
    51b2:	6d 93       	st	X+, r22
    51b4:	70 83       	st	Z, r23
    51b6:	62 91       	ld	r22, -Z
    51b8:	ae 17       	cp	r26, r30
    51ba:	bf 07       	cpc	r27, r31
    51bc:	c8 f3       	brcs	.-14     	; 0x51b0 <strrev+0x10>
    51be:	08 95       	ret

000051c0 <_exit>:
    51c0:	f8 94       	cli

000051c2 <__stop_program>:
    51c2:	ff cf       	rjmp	.-2      	; 0x51c2 <__stop_program>


RobotCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  00004440  000044d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f8  008002c4  008002c4  00004698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000046c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002148  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00048c05  00000000  00000000  00006850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003029  00000000  00000000  0004f455  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cfbb  00000000  00000000  0005247e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000c684  00000000  00000000  0005f43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010f5f  00000000  00000000  0006bac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004e8cf  00000000  00000000  0007ca1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000020f0  00000000  00000000  000cb2ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__ctors_end>
       4:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
       8:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
       c:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_3>
      10:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      14:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <__vector_5>
      18:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      1c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      20:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      24:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      28:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      2c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      30:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      34:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      38:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      3c:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_15>
      40:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      44:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      48:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      4c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      50:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      54:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      58:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      5c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      60:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      64:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 00       	.word	0x00bf	; ????
      6a:	03 02       	muls	r16, r19
      6c:	03 04       	cpc	r0, r3
      6e:	03 05       	cpc	r16, r3
      70:	04 06       	cpc	r0, r20
      72:	0a 00       	.word	0x000a	; ????
      74:	fe 07       	cpc	r31, r30
      76:	fe 07       	cpc	r31, r30
      78:	00 01       	movw	r0, r0
      7a:	42 02       	muls	r20, r18
      7c:	88 07       	cpc	r24, r24
      7e:	c4 20       	and	r12, r4
      80:	05 00       	.word	0x0005	; ????
      82:	62 07       	cpc	r22, r18
      84:	21 07       	cpc	r18, r17
      86:	39 43       	sbci	r19, 0x39	; 57
      88:	c7 a0       	ldd	r12, Z+39	; 0x27
      8a:	04 22       	and	r0, r20
      8c:	07 9b       	sbis	0x00, 7	; 0
      8e:	52 47       	sbci	r21, 0x72	; 114
      90:	62 09       	sbc	r22, r2
      92:	23 0e       	add	r2, r19
      94:	3d 42       	sbci	r19, 0x2D	; 45
      96:	4f 29       	or	r20, r15
      98:	49 06       	cpc	r4, r25
      9a:	a5 32       	cpi	r26, 0x25	; 37
      9c:	28 a5       	ldd	r18, Y+40	; 0x28
      9e:	24 01       	movw	r4, r8
      a0:	24 0c       	add	r2, r4
      a2:	3d 42       	sbci	r19, 0x2D	; 45
      a4:	57 b6       	in	r5, 0x37	; 55
      a6:	d4 b6       	in	r13, 0x34	; 52
      a8:	24 d9       	rcall	.-3512   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      aa:	22 00       	.word	0x0022	; ????
      ac:	25 0c       	add	r2, r5
      ae:	3d 42       	sbci	r19, 0x2D	; 45
      b0:	4f a4       	ldd	r4, Y+47	; 0x2f
      b2:	74 ab       	std	Z+52, r23	; 0x34
      b4:	b4 48       	sbci	r27, 0x84	; 132
      b6:	09 00       	.word	0x0009	; ????
      b8:	26 0d       	add	r18, r6
      ba:	3d 42       	sbci	r19, 0x2D	; 45
      bc:	4f 96       	adiw	r24, 0x1f	; 31
      be:	44 49       	sbci	r20, 0x94	; 148
      c0:	56 49       	sbci	r21, 0x96	; 150
      c2:	a4 48       	sbci	r26, 0x84	; 132
      c4:	09 27       	eor	r16, r25
      c6:	06 19       	sub	r16, r6
      c8:	53 c7       	rjmp	.+3750   	; 0xf70 <__vector_5+0x5c>
      ca:	00 28       	or	r0, r0
      cc:	08 bb       	out	0x18, r16	; 24
      ce:	42 57       	subi	r20, 0x72	; 114
      d0:	52 aa       	std	Z+50, r5	; 0x32
      d2:	15 29       	or	r17, r5
      d4:	09 bb       	out	0x19, r16	; 25
      d6:	42 47       	sbci	r20, 0x72	; 114
      d8:	56 aa       	std	Z+54, r5	; 0x36
      da:	94 00       	.word	0x0094	; ????
      dc:	2a 0a       	sbc	r2, r26
      de:	2d 46       	sbci	r18, 0x6D	; 109
      e0:	47 96       	adiw	r24, 0x17	; 23
      e2:	54 06       	cpc	r5, r20
      e4:	a5 2d       	mov	r26, r5
      e6:	2b 0a       	sbc	r2, r27
      e8:	2d 46       	sbci	r18, 0x6D	; 109
      ea:	57 18       	sub	r5, r7
      ec:	0d 52       	subi	r16, 0x2D	; 45
      ee:	18 01       	movw	r2, r16
      f0:	2c 07       	cpc	r18, r28
      f2:	9b 3e       	cpi	r25, 0xEB	; 235
      f4:	8f 52       	subi	r24, 0x2F	; 47
      f6:	02 2d       	mov	r16, r2
      f8:	06 0d       	add	r16, r6
      fa:	4e c7       	rjmp	.+3740   	; 0xf98 <__vector_5+0x84>
      fc:	20 2e       	mov	r2, r16
      fe:	08 9b       	sbis	0x01, 0	; 1
     100:	3e 4f       	sbci	r19, 0xFE	; 254
     102:	b2 24       	eor	r11, r2
     104:	00 2f       	mov	r16, r16
     106:	08 3d       	cpi	r16, 0xD8	; 216
     108:	42 67       	ori	r20, 0x72	; 114
     10a:	ad 63       	ori	r26, 0x3D	; 61
     10c:	08 30       	cpi	r16, 0x08	; 8
     10e:	0b 3d       	cpi	r16, 0xDB	; 219
     110:	42 57       	subi	r20, 0x72	; 114
     112:	96 d4       	rcall	.+2348   	; 0xa40 <__stack+0x141>
     114:	6c 49       	sbci	r22, 0x9C	; 156
     116:	2d 02       	muls	r18, r29
     118:	31 0a       	sbc	r3, r17
     11a:	3d 42       	sbci	r19, 0x2D	; 45
     11c:	57 26       	eor	r5, r23
     11e:	25 61       	ori	r18, 0x15	; 21
     120:	d3 20       	and	r13, r3
     122:	32 0c       	add	r3, r2
     124:	3d 42       	sbci	r19, 0x2D	; 45
     126:	cf 92       	push	r12
     128:	85 91       	lpm	r24, Z+
     12a:	94 85       	ldd	r25, Z+12	; 0x0c
     12c:	83 00       	.word	0x0083	; ????
     12e:	33 0c       	add	r3, r3
     130:	3d 42       	sbci	r19, 0x2D	; 45
     132:	c7 20       	and	r12, r7
     134:	66 99       	sbic	0x0c, 6	; 12
     136:	aa 25       	eor	r26, r10
     138:	0b 00       	.word	0x000b	; ????
     13a:	34 0c       	add	r3, r4
     13c:	3d 42       	sbci	r19, 0x2D	; 45
     13e:	5f 26       	eor	r5, r31
     140:	25 a5       	ldd	r18, Z+45	; 0x2d
     142:	64 d0       	rcall	.+200    	; 0x20c <__trampolines_end+0x1a4>
     144:	c2 04       	cpc	r12, r2
     146:	35 0b       	sbc	r19, r21
     148:	3d 42       	sbci	r19, 0x2D	; 45
     14a:	c7 31       	cpi	r28, 0x17	; 23
     14c:	31 85       	ldd	r19, Z+9	; 0x09
     14e:	5a b2       	in	r5, 0x1a	; 26
     150:	00 36       	cpi	r16, 0x60	; 96
     152:	0c 3d       	cpi	r16, 0xDC	; 220
     154:	42 97       	sbiw	r24, 0x12	; 18
     156:	94 85       	ldd	r25, Z+12	; 0x0c
     158:	89 49       	sbci	r24, 0x99	; 153
     15a:	4b 16       	cp	r4, r27
     15c:	00 37       	cpi	r16, 0x70	; 112
     15e:	0b 3d       	cpi	r16, 0xDB	; 219
     160:	42 c7       	rjmp	.+3716   	; 0xfe6 <__vector_5+0xd2>
     162:	20 66       	ori	r18, 0x60	; 96
     164:	61 56       	subi	r22, 0x61	; 97
     166:	cc 00       	.word	0x00cc	; ????
     168:	38 0c       	add	r3, r8
     16a:	3d 42       	sbci	r19, 0x2D	; 45
     16c:	cf 92       	push	r12
     16e:	69 c9       	rjmp	.-3374   	; 0xfffff442 <__eeprom_end+0xff7ef442>
     170:	92 69       	ori	r25, 0x92	; 146
     172:	c9 02       	muls	r28, r25
     174:	39 0c       	add	r3, r9
     176:	3d 42       	sbci	r19, 0x2D	; 45
     178:	cf 92       	push	r12
     17a:	49 8a       	std	Y+17, r4	; 0x11
     17c:	12 66       	ori	r17, 0x62	; 98
     17e:	91 04       	cpc	r9, r1
     180:	3a 0a       	sbc	r3, r26
     182:	bb 3e       	cpi	r27, 0xEB	; 235
     184:	4f b2       	in	r4, 0x1f	; 31
     186:	a4 c9       	rjmp	.-3256   	; 0xfffff4d0 <__eeprom_end+0xff7ef4d0>
     188:	92 00       	.word	0x0092	; ????
     18a:	3b 09       	sbc	r19, r11
     18c:	bb 3e       	cpi	r27, 0xEB	; 235
     18e:	4f b2       	in	r4, 0x1f	; 31
     190:	a4 4a       	sbci	r26, 0xA4	; 164
     192:	09 3c       	cpi	r16, 0xC9	; 201
     194:	08 bc       	out	0x28, r0	; 40
     196:	42 5f       	subi	r20, 0xF2	; 242
     198:	d4 d8       	rcall	.-3672   	; 0xfffff342 <__eeprom_end+0xff7ef342>
     19a:	00 3d       	cpi	r16, 0xD0	; 208
     19c:	08 1d       	adc	r16, r8
     19e:	4a c7       	rjmp	.+3732   	; 0x1034 <__vector_5+0x120>
     1a0:	a0 0e       	add	r10, r16
     1a2:	02 3e       	cpi	r16, 0xE2	; 226
     1a4:	08 bc       	out	0x28, r0	; 40
     1a6:	42 47       	sbci	r20, 0x72	; 114
     1a8:	d8 d4       	rcall	.+2480   	; 0xb5a <__stack+0x25b>
     1aa:	06 3f       	cpi	r16, 0xF6	; 246
     1ac:	0a 3d       	cpi	r16, 0xDA	; 218
     1ae:	42 cf       	rjmp	.-380    	; 0x34 <__FUSE_REGION_LENGTH__+0x31>
     1b0:	92 35       	cpi	r25, 0x52	; 82
     1b2:	e6 50       	subi	r30, 0x06	; 6
     1b4:	04 40       	sbci	r16, 0x04	; 4
     1b6:	0c 3d       	cpi	r16, 0xDC	; 220
     1b8:	42 cf       	rjmp	.-380    	; 0x3e <__SP_H__>
     1ba:	92 49       	sbci	r25, 0x92	; 146
     1bc:	4b 62       	ori	r20, 0x2B	; 43
     1be:	49 17       	cp	r20, r25
     1c0:	00 41       	sbci	r16, 0x10	; 16
     1c2:	0c 3d       	cpi	r16, 0xDC	; 220
     1c4:	42 57       	subi	r20, 0x72	; 114
     1c6:	96 d4       	rcall	.+2348   	; 0xaf4 <__stack+0x1f5>
     1c8:	b4 61       	ori	r27, 0x14	; 20
     1ca:	c8 b4       	in	r12, 0x28	; 40
     1cc:	00 42       	sbci	r16, 0x20	; 32
     1ce:	0d 3d       	cpi	r16, 0xDD	; 221
     1d0:	42 c7       	rjmp	.+3716   	; 0x1056 <__vector_5+0x142>
     1d2:	10 55       	subi	r17, 0x50	; 80
     1d4:	a2 64       	ori	r26, 0x42	; 66
     1d6:	aa 44       	sbci	r26, 0x4A	; 74
     1d8:	83 02       	muls	r24, r19
     1da:	43 0a       	sbc	r4, r19
     1dc:	3d 42       	sbci	r19, 0x2D	; 45
     1de:	cf 92       	push	r12
     1e0:	89 6d       	ori	r24, 0xD9	; 217
     1e2:	c9 02       	muls	r28, r25
     1e4:	44 0f       	add	r20, r20
     1e6:	3d 42       	sbci	r19, 0x2D	; 45
     1e8:	c7 10       	cpse	r12, r7
     1ea:	55 a2       	std	Z+37, r5	; 0x25
     1ec:	24 4a       	sbci	r18, 0xA4	; 164
     1ee:	a2 24       	eor	r10, r2
     1f0:	1a 14       	cp	r1, r10
     1f2:	00 45       	sbci	r16, 0x50	; 80
     1f4:	0b 3d       	cpi	r16, 0xDB	; 219
     1f6:	42 c7       	rjmp	.+3716   	; 0x107c <__vector_5+0x168>
     1f8:	31 1c       	adc	r3, r1
     1fa:	92 30       	cpi	r25, 0x02	; 2
     1fc:	1c 04       	cpc	r1, r12
     1fe:	46 0a       	sbc	r4, r22
     200:	3d 42       	sbci	r19, 0x2D	; 45
     202:	c7 31       	cpi	r28, 0x17	; 23
     204:	1c 92       	st	X, r1
     206:	b0 08       	sbc	r11, r0
     208:	47 0b       	sbc	r20, r23
     20a:	3d 42       	sbci	r19, 0x2D	; 45
     20c:	cf 92       	push	r12
     20e:	89 a5       	ldd	r24, Y+41	; 0x29
     210:	2d 59       	subi	r18, 0x9D	; 157
     212:	00 48       	sbci	r16, 0x80	; 128
     214:	0a 3d       	cpi	r16, 0xDA	; 218
     216:	42 47       	sbci	r20, 0x72	; 114
     218:	66 1b       	sub	r22, r22
     21a:	86 cc       	rjmp	.-1780   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     21c:	16 49       	sbci	r17, 0x96	; 150
     21e:	08 bb       	out	0x18, r16	; 24
     220:	42 c7       	rjmp	.+3716   	; 0x10a6 <__vector_5+0x192>
     222:	12 75       	andi	r17, 0x52	; 82
     224:	19 4a       	sbci	r17, 0xA9	; 169
     226:	0a 3d       	cpi	r16, 0xDA	; 218
     228:	42 d7       	rcall	.+3716   	; 0x10ae <__vector_5+0x19a>
     22a:	16 b6       	in	r1, 0x36	; 54
     22c:	44 91       	lpm	r20, Z
     22e:	04 4b       	sbci	r16, 0xB4	; 180
     230:	0d 3d       	cpi	r16, 0xDD	; 221
     232:	42 47       	sbci	r20, 0x72	; 114
     234:	26 25       	eor	r18, r6
     236:	25 2d       	mov	r18, r5
     238:	89 2a       	or	r8, r25
     23a:	59 00       	.word	0x0059	; ????
     23c:	4c 08       	sbc	r4, r12
     23e:	3d 42       	sbci	r19, 0x2D	; 45
     240:	47 d8       	rcall	.-3954   	; 0xfffff2d0 <__eeprom_end+0xff7ef2d0>
     242:	e3 20       	and	r14, r3
     244:	4d 0b       	sbc	r20, r29
     246:	3d 42       	sbci	r19, 0x2D	; 45
     248:	47 a6       	std	Z+47, r4	; 0x2f
     24a:	2d 4b       	sbci	r18, 0xBD	; 189
     24c:	a2 d9       	rcall	.-3260   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     24e:	02 4e       	sbci	r16, 0xE2	; 226
     250:	0c 3d       	cpi	r16, 0xDC	; 220
     252:	42 47       	sbci	r20, 0x72	; 114
     254:	a6 4d       	sbci	r26, 0xD6	; 214
     256:	4a 22       	and	r4, r26
     258:	6d 5a       	subi	r22, 0xAD	; 173
     25a:	00 4f       	sbci	r16, 0xF0	; 240
     25c:	0a 3d       	cpi	r16, 0xDA	; 218
     25e:	42 cf       	rjmp	.-380    	; 0xe4 <__trampolines_end+0x7c>
     260:	92 79       	andi	r25, 0x92	; 146
     262:	4b 16       	cp	r4, r27
     264:	00 50       	subi	r16, 0x00	; 0
     266:	0c 3d       	cpi	r16, 0xDC	; 220
     268:	42 c7       	rjmp	.+3716   	; 0x10ee <__vector_5+0x1da>
     26a:	90 64       	ori	r25, 0x40	; 64
     26c:	da a0       	ldd	r13, Y+34	; 0x22
     26e:	84 45       	sbci	r24, 0x54	; 84
     270:	00 51       	subi	r16, 0x10	; 16
     272:	0a 45       	sbci	r16, 0x5A	; 90
     274:	3e cf       	rjmp	.-388    	; 0xf2 <__trampolines_end+0x8a>
     276:	92 79       	andi	r25, 0x92	; 146
     278:	a9 ac       	ldd	r10, Y+57	; 0x39
     27a:	01 52       	subi	r16, 0x21	; 33
     27c:	0d 3d       	cpi	r16, 0xDD	; 221
     27e:	42 c7       	rjmp	.+3716   	; 0x1104 <__vector_5+0x1f0>
     280:	90 64       	ori	r25, 0x40	; 64
     282:	da a0       	ldd	r13, Y+34	; 0x22
     284:	94 2a       	or	r9, r20
     286:	59 00       	.word	0x0059	; ????
     288:	53 0b       	sbc	r21, r19
     28a:	3d 42       	sbci	r19, 0x2D	; 45
     28c:	cf 92       	push	r12
     28e:	a9 ab       	std	Y+49, r26	; 0x31
     290:	96 2c       	mov	r9, r6
     292:	00 54       	subi	r16, 0x40	; 64
     294:	09 3d       	cpi	r16, 0xD9	; 217
     296:	42 c7       	rjmp	.+3716   	; 0x111c <__vector_5+0x208>
     298:	20 85       	ldd	r18, Z+8	; 0x08
     29a:	3d 01       	movw	r6, r26
     29c:	55 09       	sbc	r21, r5
     29e:	3d 42       	sbci	r19, 0x2D	; 45
     2a0:	47 e6       	ldi	r20, 0x67	; 103
     2a2:	5b b2       	in	r5, 0x1b	; 27
     2a4:	00 56       	subi	r16, 0x60	; 96
     2a6:	0d 3d       	cpi	r16, 0xDD	; 221
     2a8:	42 47       	sbci	r20, 0x72	; 114
     2aa:	66 4b       	sbci	r22, 0xB6	; 182
     2ac:	4a 49       	sbci	r20, 0x9A	; 154
     2ae:	94 64       	ori	r25, 0x44	; 68
     2b0:	11 00       	.word	0x0011	; ????
     2b2:	57 0a       	sbc	r5, r23
     2b4:	3d 42       	sbci	r19, 0x2D	; 45
     2b6:	47 e6       	ldi	r20, 0x67	; 103
     2b8:	92 28       	or	r9, r2
     2ba:	c9 2d       	mov	r28, r9
     2bc:	58 0b       	sbc	r21, r24
     2be:	3d 42       	sbci	r19, 0x2D	; 45
     2c0:	47 a6       	std	Z+47, r4	; 0x2f
     2c2:	25 b5       	in	r18, 0x25	; 37
     2c4:	4a 4d       	sbci	r20, 0xDA	; 218
     2c6:	0b 59       	subi	r16, 0x9B	; 155
     2c8:	0a 3d       	cpi	r16, 0xDA	; 218
     2ca:	42 47       	sbci	r20, 0x72	; 114
     2cc:	a6 25       	eor	r26, r6
     2ce:	b5 b0       	in	r11, 0x05	; 5
     2d0:	09 5a       	subi	r16, 0xA9	; 169
     2d2:	0a 3d       	cpi	r16, 0xDA	; 218
     2d4:	42 c7       	rjmp	.+3716   	; 0x115a <__vector_5+0x246>
     2d6:	20 66       	ori	r18, 0x60	; 96
     2d8:	1d 07       	cpc	r17, r29
     2da:	01 5b       	subi	r16, 0xB1	; 177
     2dc:	08 bb       	out	0x18, r16	; 24
     2de:	42 c7       	rjmp	.+3716   	; 0x1164 <__vector_5+0x250>
     2e0:	10 75       	andi	r17, 0x50	; 80
     2e2:	1a 5c       	subi	r17, 0xCA	; 202
     2e4:	08 3d       	cpi	r16, 0xD8	; 216
     2e6:	42 47       	sbci	r20, 0x72	; 114
     2e8:	98 76       	andi	r25, 0x68	; 104
     2ea:	0c 5d       	subi	r16, 0xDC	; 220
     2ec:	08 bb       	out	0x18, r16	; 24
     2ee:	42 c7       	rjmp	.+3716   	; 0x1174 <__vector_5+0x260>
     2f0:	d4 69       	ori	r29, 0x94	; 148
     2f2:	08 5e       	subi	r16, 0xE8	; 232
     2f4:	08 1d       	adc	r16, r8
     2f6:	52 57       	subi	r21, 0x72	; 114
     2f8:	96 d4       	rcall	.+2348   	; 0xc26 <__stack+0x327>
     2fa:	02 5f       	subi	r16, 0xF2	; 242
     2fc:	06 0d       	add	r16, r6
     2fe:	3e c7       	rjmp	.+3708   	; 0x117c <__vector_5+0x268>
     300:	20 60       	ori	r18, 0x00	; 0
     302:	06 12       	cpse	r0, r22
     304:	5b 47       	sbci	r21, 0x7B	; 123
     306:	14 61       	ori	r17, 0x14	; 20
     308:	0a 2d       	mov	r16, r10
     30a:	42 cf       	rjmp	.-380    	; 0x190 <__trampolines_end+0x128>
     30c:	9a 0c       	add	r9, r10
     30e:	5a 32       	cpi	r21, 0x2A	; 42
     310:	04 62       	ori	r16, 0x24	; 36
     312:	0b 3d       	cpi	r16, 0xDB	; 219
     314:	42 47       	sbci	r20, 0x72	; 114
     316:	58 31       	cpi	r21, 0x18	; 24
     318:	69 93       	st	Y+, r22
     31a:	a2 00       	.word	0x00a2	; ????
     31c:	63 0a       	sbc	r6, r19
     31e:	2d 42       	sbci	r18, 0x2D	; 45
     320:	cf 92       	push	r12
     322:	89 59       	subi	r24, 0x99	; 153
     324:	b2 00       	.word	0x00b2	; ????
     326:	64 0a       	sbc	r6, r20
     328:	3d 42       	sbci	r19, 0x2D	; 45
     32a:	67 c5       	rjmp	.+2766   	; 0xdfa <__stack+0x4fb>
     32c:	b4 49       	sbci	r27, 0x94	; 148
     32e:	8a 12       	cpse	r8, r26
     330:	65 0a       	sbc	r6, r21
     332:	2d 42       	sbci	r18, 0x2D	; 45
     334:	cf 92       	push	r12
     336:	0d 43       	sbci	r16, 0x3D	; 61
     338:	ba 00       	.word	0x00ba	; ????
     33a:	66 0b       	sbc	r22, r22
     33c:	3d 42       	sbci	r19, 0x2D	; 45
     33e:	97 54       	subi	r25, 0x47	; 71
     340:	c9 86       	std	Y+9, r12	; 0x09
     342:	28 ac       	ldd	r2, Y+56	; 0x38
     344:	01 67       	ori	r16, 0x71	; 113
     346:	0c 3d       	cpi	r16, 0xDC	; 220
     348:	3a cf       	rjmp	.-396    	; 0x1be <__trampolines_end+0x156>
     34a:	a0 69       	ori	r26, 0x90	; 144
     34c:	c9 10       	cpse	r12, r9
     34e:	6a c9       	rjmp	.-3372   	; 0xfffff624 <__eeprom_end+0xff7ef624>
     350:	02 68       	ori	r16, 0x82	; 130
     352:	0a 3d       	cpi	r16, 0xDA	; 218
     354:	42 47       	sbci	r20, 0x72	; 114
     356:	58 31       	cpi	r21, 0x18	; 24
     358:	69 b6       	in	r6, 0x39	; 57
     35a:	00 69       	ori	r16, 0x90	; 144
     35c:	08 bb       	out	0x18, r16	; 24
     35e:	42 4f       	sbci	r20, 0xF2	; 242
     360:	28 b5       	in	r18, 0x28	; 40
     362:	0c 6a       	ori	r16, 0xAC	; 172
     364:	0b cc       	rjmp	.-2026   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     366:	3a 5f       	subi	r19, 0xFA	; 250
     368:	ac d5       	rcall	.+2904   	; 0xec2 <__stack+0x5c3>
     36a:	24 29       	or	r18, r4
     36c:	51 00       	.word	0x0051	; ????
     36e:	6b 0b       	sbc	r22, r27
     370:	3d 42       	sbci	r19, 0x2D	; 45
     372:	47 58       	subi	r20, 0x87	; 135
     374:	93 92       	.word	0x9293	; ????
     376:	a9 92       	st	Y+, r10
     378:	05 6c       	ori	r16, 0xC5	; 197
     37a:	08 bb       	out	0x18, r16	; 24
     37c:	42 87       	std	Z+10, r20	; 0x0a
     37e:	d4 cb       	rjmp	.-2136   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     380:	00 6d       	ori	r16, 0xD0	; 208
     382:	0b 2d       	mov	r16, r11
     384:	42 87       	std	Z+10, r20	; 0x0a
     386:	d2 a2       	std	Z+34, r13	; 0x22
     388:	24 4a       	sbci	r18, 0xA4	; 164
     38a:	a2 05       	cpc	r26, r2
     38c:	6e 09       	sbc	r22, r14
     38e:	2d 42       	sbci	r18, 0x2D	; 45
     390:	47 62       	ori	r20, 0x27	; 39
     392:	d2 6c       	ori	r29, 0xC2	; 194
     394:	01 6f       	ori	r16, 0xF1	; 241
     396:	09 2d       	mov	r16, r9
     398:	42 cf       	rjmp	.-380    	; 0x21e <__trampolines_end+0x1b6>
     39a:	92 d9       	rcall	.-3292   	; 0xfffff6c0 <__eeprom_end+0xff7ef6c0>
     39c:	92 05       	cpc	r25, r2
     39e:	70 0c       	add	r7, r0
     3a0:	3d 3a       	cpi	r19, 0xAD	; 173
     3a2:	47 62       	ori	r20, 0x27	; 39
     3a4:	d2 26       	eor	r13, r18
     3a6:	45 09       	sbc	r20, r5
     3a8:	43 00       	.word	0x0043	; ????
     3aa:	71 0a       	sbc	r7, r17
     3ac:	3d 3a       	cpi	r19, 0xAD	; 173
     3ae:	8f 69       	ori	r24, 0x9F	; 159
     3b0:	93 14       	cp	r9, r3
     3b2:	25 2c       	mov	r2, r5
     3b4:	72 09       	sbc	r23, r2
     3b6:	2d 42       	sbci	r18, 0x2D	; 45
     3b8:	47 62       	ori	r20, 0x27	; 39
     3ba:	12 8b       	std	Z+18, r17	; 0x12
     3bc:	00 73       	andi	r16, 0x30	; 48
     3be:	09 2d       	mov	r16, r9
     3c0:	42 cf       	rjmp	.-380    	; 0x246 <__trampolines_end+0x1de>
     3c2:	92 1e       	adc	r9, r18
     3c4:	14 00       	.word	0x0014	; ????
     3c6:	74 0c       	add	r7, r4
     3c8:	3d 42       	sbci	r19, 0x2D	; 45
     3ca:	4f 98       	cbi	0x09, 7	; 9
     3cc:	0d 51       	subi	r16, 0x1D	; 29
     3ce:	58 8a       	std	Y+16, r5	; 0x10
     3d0:	14 00       	.word	0x0014	; ????
     3d2:	75 09       	sbc	r23, r5
     3d4:	2d 42       	sbci	r18, 0x2D	; 45
     3d6:	47 e6       	ldi	r20, 0x67	; 103
     3d8:	a4 28       	or	r10, r4
     3da:	01 76       	andi	r16, 0x61	; 97
     3dc:	0b 2d       	mov	r16, r11
     3de:	42 47       	sbci	r20, 0x72	; 114
     3e0:	a6 25       	eor	r26, r6
     3e2:	a5 24       	eor	r10, r5
     3e4:	8b 00       	.word	0x008b	; ????
     3e6:	77 0a       	sbc	r7, r23
     3e8:	2d 42       	sbci	r18, 0x2D	; 45
     3ea:	47 66       	ori	r20, 0x67	; 103
     3ec:	49 94       	.word	0x9449	; ????
     3ee:	2e 00       	.word	0x002e	; ????
     3f0:	78 0a       	sbc	r7, r24
     3f2:	2d 42       	sbci	r18, 0x2D	; 45
     3f4:	47 96       	adiw	r24, 0x17	; 23
     3f6:	d4 2a       	or	r13, r20
     3f8:	b5 00       	.word	0x00b5	; ????
     3fa:	79 0c       	add	r7, r9
     3fc:	3d 3a       	cpi	r19, 0xAD	; 173
     3fe:	47 66       	ori	r20, 0x67	; 103
     400:	52 94       	swap	r5
     402:	50 4b       	sbci	r21, 0xB0	; 176
     404:	16 00       	.word	0x0016	; ????
     406:	7a 09       	sbc	r23, r10
     408:	2d 42       	sbci	r18, 0x2D	; 45
     40a:	c7 a0       	ldd	r12, Z+39	; 0x27
     40c:	b5 0d       	add	r27, r5
     40e:	02 7b       	andi	r16, 0xB2	; 178
     410:	0a bc       	out	0x2a, r0	; 42
     412:	42 97       	sbiw	r24, 0x12	; 18
     414:	12 26       	eor	r1, r18
     416:	62 14       	cp	r6, r2
     418:	0a 7c       	andi	r16, 0xCA	; 202
     41a:	06 39       	cpi	r16, 0x96	; 150
     41c:	43 c7       	rjmp	.+3718   	; 0x12a4 <timeInit+0xe>
     41e:	21 7d       	andi	r18, 0xD1	; 209
     420:	0b bc       	out	0x2b, r0	; 43
     422:	42 87       	std	Z+10, r20	; 0x0a
     424:	18 85       	ldd	r17, Y+8	; 0x08
     426:	4a 98       	cbi	0x09, 2	; 9
     428:	48 00       	.word	0x0048	; ????
     42a:	7e 09       	sbc	r23, r14
     42c:	1d 52       	subi	r17, 0x2D	; 45
     42e:	4f a4       	ldd	r4, Y+47	; 0x2f
     430:	24 52       	subi	r18, 0x24	; 36
     432:	02 a0       	ldd	r0, Z+34	; 0x22
     434:	05 00       	.word	0x0005	; ????
     436:	62 07       	cpc	r22, r18
     438:	a1 07       	cpc	r26, r17
     43a:	39 43       	sbci	r19, 0x39	; 57
     43c:	47 32       	cpi	r20, 0x27	; 39
     43e:	08 a2       	std	Y+32, r0	; 0x20
     440:	0e 3d       	cpi	r16, 0xDE	; 222
     442:	3e 57       	subi	r19, 0x7E	; 126
     444:	36 28       	or	r3, r6
     446:	51 12       	cpse	r5, r17
     448:	25 d9       	rcall	.-3510   	; 0xfffff694 <__eeprom_end+0xff7ef694>
     44a:	10 45       	sbci	r17, 0x50	; 80
     44c:	00 a3       	std	Z+32, r16	; 0x20
     44e:	0c 3d       	cpi	r16, 0xDC	; 220
     450:	42 97       	sbiw	r24, 0x12	; 18
     452:	54 c9       	rjmp	.-3416   	; 0xfffff6fc <__eeprom_end+0xff7ef6fc>
     454:	b6 30       	cpi	r27, 0x06	; 6
     456:	52 14       	cp	r5, r2
     458:	00 a4       	ldd	r0, Z+40	; 0x28
     45a:	0b 2d       	mov	r16, r11
     45c:	42 47       	sbci	r20, 0x72	; 114
     45e:	96 4c       	sbci	r25, 0xC6	; 198
     460:	49 b4       	in	r4, 0x29	; 41
     462:	64 01       	movw	r12, r8
     464:	a5 0d       	add	r26, r5
     466:	45 3e       	cpi	r20, 0xE5	; 229
     468:	47 a6       	std	Z+47, r4	; 0x2f
     46a:	25 b5       	in	r18, 0x25	; 37
     46c:	68 90       	.word	0x9068	; ????
     46e:	c2 12       	cpse	r12, r18
     470:	00 a6       	std	Z+40, r0	; 0x28
     472:	06 39       	cpi	r16, 0x96	; 150
     474:	43 c7       	rjmp	.+3718   	; 0x12fc <__vector_15+0x40>
     476:	32 a7       	std	Z+42, r19	; 0x2a
     478:	0b 45       	sbci	r16, 0x5B	; 91
     47a:	3e cf       	rjmp	.-388    	; 0x2f8 <__trampolines_end+0x290>
     47c:	12 4e       	sbci	r17, 0xE2	; 226
     47e:	9d c6       	rjmp	.+3386   	; 0x11ba <setup_display+0x34>
     480:	64 01       	movw	r12, r8
     482:	a8 06       	cpc	r10, r24
     484:	8b 5e       	subi	r24, 0xEB	; 235
     486:	47 12       	cpse	r4, r23
     488:	a9 0d       	add	r26, r9
     48a:	3d 42       	sbci	r19, 0x2D	; 45
     48c:	cf 92       	push	r12
     48e:	29 c9       	rjmp	.-3502   	; 0xfffff6e2 <__eeprom_end+0xff7ef6e2>
     490:	a4 24       	eor	r10, r4
     492:	5a b2       	in	r5, 0x1a	; 26
     494:	00 aa       	std	Z+48, r0	; 0x30
     496:	0a b4       	in	r0, 0x2a	; 42
     498:	46 cf       	rjmp	.-372    	; 0x326 <__trampolines_end+0x2be>
     49a:	10 29       	or	r17, r0
     49c:	4a 71       	andi	r20, 0x1A	; 26
     49e:	08 ab       	std	Y+48, r16	; 0x30
     4a0:	0c 2e       	mov	r0, r28
     4a2:	42 57       	subi	r20, 0x72	; 114
     4a4:	25 4a       	sbci	r18, 0xA5	; 165
     4a6:	a2 2c       	mov	r10, r2
     4a8:	ca a2       	std	Y+34, r12	; 0x22
     4aa:	00 ac       	ldd	r0, Z+56	; 0x38
     4ac:	07 94       	ror	r0
     4ae:	4a c7       	rjmp	.+3732   	; 0x1344 <__vector_15+0x88>
     4b0:	90 05       	cpc	r25, r0
     4b2:	ad 06       	cpc	r10, r29
     4b4:	8c 4e       	sbci	r24, 0xEC	; 236
     4b6:	c7 10       	cpse	r12, r7
     4b8:	ae 0c       	add	r10, r14
     4ba:	3d 42       	sbci	r19, 0x2D	; 45
     4bc:	cf 92       	push	r12
     4be:	0d c9       	rjmp	.-3558   	; 0xfffff6da <__eeprom_end+0xff7ef6da>
     4c0:	34 69       	ori	r19, 0x94	; 148
     4c2:	c9 02       	muls	r28, r25
     4c4:	af 06       	cpc	r10, r31
     4c6:	0d 5e       	subi	r16, 0xED	; 237
     4c8:	c7 20       	and	r12, r7
     4ca:	b0 07       	cpc	r27, r16
     4cc:	9b 52       	subi	r25, 0x2B	; 43
     4ce:	4f 17       	cp	r20, r31
     4d0:	00 b1       	in	r16, 0x00	; 0
     4d2:	0b 35       	cpi	r16, 0x5B	; 91
     4d4:	42 57       	subi	r20, 0x72	; 114
     4d6:	18 0d       	add	r17, r8
     4d8:	52 18       	sub	r5, r2
     4da:	0d 02       	muls	r16, r29
     4dc:	b2 09       	sbc	r27, r2
     4de:	ac 4e       	sbci	r26, 0xEC	; 236
     4e0:	8f 12       	cpse	r8, r31
     4e2:	35 0d       	add	r19, r5
     4e4:	01 b3       	in	r16, 0x11	; 17
     4e6:	09 ac       	ldd	r0, Y+57	; 0x39
     4e8:	4e c7       	rjmp	.+3740   	; 0x1386 <__vector_15+0xca>
     4ea:	98 88       	ldd	r9, Y+16	; 0x10
     4ec:	43 02       	muls	r20, r19
     4ee:	b4 06       	cpc	r11, r20
     4f0:	12 5b       	subi	r17, 0xB2	; 178
     4f2:	8f 02       	muls	r24, r31
     4f4:	b5 0a       	sbc	r11, r21
     4f6:	35 3e       	cpi	r19, 0xE5	; 229
     4f8:	47 66       	ori	r20, 0x67	; 103
     4fa:	9b 14       	cp	r9, r11
     4fc:	25 04       	cpc	r2, r5
     4fe:	b6 0f       	add	r27, r22
     500:	3d 42       	sbci	r19, 0x2D	; 45
     502:	cf 30       	cpi	r28, 0x0F	; 15
     504:	24 43       	sbci	r18, 0x34	; 52
     506:	92 28       	or	r9, r2
     508:	51 12       	cpse	r5, r17
     50a:	25 51       	subi	r18, 0x15	; 21
     50c:	12 b7       	in	r17, 0x32	; 50
     50e:	06 09       	sbc	r16, r6
     510:	4f 47       	sbci	r20, 0x7F	; 127
     512:	00 b8       	out	0x00, r0	; 0
     514:	06 12       	cpse	r0, r22
     516:	3b 8f       	std	Y+27, r19	; 0x1b
     518:	02 b9       	out	0x02, r16	; 2
     51a:	08 ab       	std	Y+48, r16	; 0x30
     51c:	4e 4f       	sbci	r20, 0xFE	; 254
     51e:	22 55       	subi	r18, 0x52	; 82
     520:	06 ba       	out	0x16, r0	; 22
     522:	0a b4       	in	r0, 0x2a	; 42
     524:	46 8f       	std	Z+30, r20	; 0x1e
     526:	12 49       	sbci	r17, 0x92	; 146
     528:	89 3a       	cpi	r24, 0xA9	; 169
     52a:	04 bb       	out	0x14, r16	; 20
     52c:	0d 2e       	mov	r0, r29
     52e:	42 47       	sbci	r20, 0x72	; 114
     530:	94 45       	sbci	r25, 0x54	; 84
     532:	59 94       	.word	0x9459	; ????
     534:	44 49       	sbci	r20, 0x94	; 148
     536:	14 01       	movw	r2, r8
     538:	bc 0d       	add	r27, r12
     53a:	4e 3e       	cpi	r20, 0xEE	; 238
     53c:	4f a8       	ldd	r4, Y+55	; 0x37
     53e:	16 a7       	std	Z+46, r17	; 0x2e
     540:	50 4b       	sbci	r21, 0xB0	; 176
     542:	a2 21       	and	r26, r2
     544:	0d bd       	out	0x2d, r16	; 45
     546:	0c 4e       	sbci	r16, 0xEC	; 236
     548:	3e 4f       	sbci	r19, 0xFE	; 254
     54a:	a8 16       	cp	r10, r24
     54c:	97 30       	cpi	r25, 0x07	; 7
     54e:	49 c3       	rjmp	.+1682   	; 0xbe2 <__stack+0x2e3>
     550:	70 be       	out	0x30, r7	; 48
     552:	0e 4d       	sbci	r16, 0xDE	; 222
     554:	3e 87       	std	Y+14, r19	; 0x0e
     556:	9a a5       	ldd	r25, Y+42	; 0x2a
     558:	91 94       	neg	r9
     55a:	49 49       	sbci	r20, 0x99	; 153
     55c:	32 84       	ldd	r3, Z+10	; 0x0a
     55e:	01 bf       	out	0x31, r16	; 49
     560:	0a 3d       	cpi	r16, 0xDA	; 218
     562:	42 57       	subi	r20, 0x72	; 114
     564:	0e 85       	ldd	r16, Y+14	; 0x0e
     566:	59 cb       	rjmp	.-2382   	; 0xfffffc1a <__eeprom_end+0xff7efc1a>
     568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56a:	0c 45       	sbci	r16, 0x5C	; 92
     56c:	42 4f       	sbci	r20, 0xF2	; 242
     56e:	9a 2d       	mov	r25, r10
     570:	99 36       	cpi	r25, 0x69	; 105
     572:	0c 99       	sbic	0x01, 4	; 1
     574:	16 c1       	rjmp	.+556    	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     576:	0c 45       	sbci	r16, 0x5C	; 92
     578:	42 5f       	subi	r20, 0xF2	; 242
     57a:	6d c9       	rjmp	.-3366   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     57c:	b4 61       	ori	r27, 0x14	; 20
     57e:	c8 b4       	in	r12, 0x28	; 40
     580:	00 c2       	rjmp	.+1024   	; 0x982 <__stack+0x83>
     582:	0d 45       	sbci	r16, 0x5D	; 93
     584:	42 57       	subi	r20, 0x72	; 114
     586:	96 44       	sbci	r25, 0x46	; 70
     588:	4b a6       	std	Y+43, r4	; 0x2b
     58a:	0d 43       	sbci	r16, 0x3D	; 61
     58c:	a6 05       	cpc	r26, r6
     58e:	c3 0d       	add	r28, r3
     590:	45 42       	sbci	r20, 0x25	; 37
     592:	4f a4       	ldd	r4, Y+47	; 0x2f
     594:	48 4b       	sbci	r20, 0xB8	; 184
     596:	a6 0d       	add	r26, r6
     598:	43 a6       	std	Z+43, r4	; 0x2b
     59a:	05 c4       	rjmp	.+2058   	; 0xda6 <__stack+0x4a7>
     59c:	0c 45       	sbci	r16, 0x5C	; 92
     59e:	42 4f       	sbci	r20, 0xF2	; 242
     5a0:	1d 58       	subi	r17, 0x8D	; 141
     5a2:	32 6d       	ori	r19, 0xD2	; 210
     5a4:	18 32       	cpi	r17, 0x28	; 40
     5a6:	2d c5       	rjmp	.+2650   	; 0x1002 <__vector_5+0xee>
     5a8:	0d 45       	sbci	r16, 0x5D	; 93
     5aa:	42 57       	subi	r20, 0x72	; 114
     5ac:	96 44       	sbci	r25, 0x46	; 70
     5ae:	4b a6       	std	Y+43, r4	; 0x2b
     5b0:	0d 43       	sbci	r16, 0x3D	; 61
     5b2:	a6 05       	cpc	r26, r6
     5b4:	c6 0c       	add	r12, r6
     5b6:	3e 42       	sbci	r19, 0x2E	; 46
     5b8:	d7 90       	elpm	r13, Z+
     5ba:	94 9a       	sbi	0x12, 4	; 18
     5bc:	86 21       	and	r24, r6
     5be:	6a 1a       	sub	r6, r26
     5c0:	c7 0b       	sbc	r28, r23
     5c2:	4d 3a       	cpi	r20, 0xAD	; 173
     5c4:	cf 92       	push	r12
     5c6:	89 6d       	ori	r24, 0xD9	; 217
     5c8:	c9 56       	subi	r28, 0x69	; 105
     5ca:	03 c8       	rjmp	.-4090   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
     5cc:	0c 45       	sbci	r16, 0x5C	; 92
     5ce:	42 4f       	sbci	r20, 0xF2	; 242
     5d0:	36 8c       	ldd	r3, Z+30	; 0x1e
     5d2:	e1 90       	ld	r14, Z+
     5d4:	84 e1       	ldi	r24, 0x14	; 20
     5d6:	20 c9       	rjmp	.-3520   	; 0xfffff818 <__eeprom_end+0xff7ef818>
     5d8:	0c 45       	sbci	r16, 0x5C	; 92
     5da:	42 5f       	subi	r20, 0xF2	; 242
     5dc:	32 8c       	ldd	r3, Z+26	; 0x1a
     5de:	e1 90       	ld	r14, Z+
     5e0:	84 e1       	ldi	r24, 0x14	; 20
     5e2:	20 ca       	rjmp	.-3008   	; 0xfffffa24 <__eeprom_end+0xff7efa24>
     5e4:	0c 45       	sbci	r16, 0x5C	; 92
     5e6:	42 57       	subi	r20, 0x72	; 114
     5e8:	34 8c       	ldd	r3, Z+28	; 0x1c
     5ea:	e1 90       	ld	r14, Z+
     5ec:	84 e1       	ldi	r24, 0x14	; 20
     5ee:	20 cb       	rjmp	.-2496   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
     5f0:	0c 45       	sbci	r16, 0x5C	; 92
     5f2:	42 4f       	sbci	r20, 0xF2	; 242
     5f4:	65 18       	sub	r6, r5
     5f6:	c3 21       	and	r28, r3
     5f8:	09 c3       	rjmp	.+1554   	; 0xc0c <__stack+0x30d>
     5fa:	41 cc       	rjmp	.-1918   	; 0xfffffe7e <__eeprom_end+0xff7efe7e>
     5fc:	0a c3       	rjmp	.+1556   	; 0xc12 <__stack+0x313>
     5fe:	42 47       	sbci	r20, 0x72	; 114
     600:	96 2c       	mov	r9, r6
     602:	51 cb       	rjmp	.-2398   	; 0xfffffca6 <__eeprom_end+0xff7efca6>
     604:	00 cd       	rjmp	.-1536   	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
     606:	0a c3       	rjmp	.+1556   	; 0xc1c <__stack+0x31d>
     608:	42 57       	subi	r20, 0x72	; 114
     60a:	92 2c       	mov	r9, r2
     60c:	51 cb       	rjmp	.-2398   	; 0xfffffcb0 <__eeprom_end+0xff7efcb0>
     60e:	00 ce       	rjmp	.-1024   	; 0x210 <__trampolines_end+0x1a8>
     610:	0a c3       	rjmp	.+1556   	; 0xc26 <__stack+0x327>
     612:	42 4f       	sbci	r20, 0xF2	; 242
     614:	65 48       	sbci	r22, 0x85	; 133
     616:	a2 96       	adiw	r28, 0x22	; 34
     618:	01 cf       	rjmp	.-510    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     61a:	0a c3       	rjmp	.+1556   	; 0xc30 <__stack+0x331>
     61c:	42 47       	sbci	r20, 0x72	; 114
     61e:	92 2d       	mov	r25, r2
     620:	51 cb       	rjmp	.-2398   	; 0xfffffcc4 <__eeprom_end+0xff7efcc4>
     622:	00 d0       	rcall	.+0      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     624:	0e 3d       	cpi	r16, 0xDE	; 222
     626:	42 c7       	rjmp	.+3716   	; 0x14ac <choiceAdder+0x10>
     628:	10 55       	subi	r17, 0x50	; 80
     62a:	a2 21       	and	r26, r2
     62c:	29 25       	eor	r18, r9
     62e:	d1 a0       	ldd	r13, Z+33	; 0x21
     630:	00 d1       	rcall	.+512    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     632:	0c 45       	sbci	r16, 0x5C	; 92
     634:	42 57       	subi	r20, 0x72	; 114
     636:	d2 6d       	ori	r29, 0xD2	; 210
     638:	52 12       	cpse	r5, r18
     63a:	69 d3       	rcall	.+1746   	; 0xd0e <__stack+0x40f>
     63c:	02 d2       	rcall	.+1028   	; 0xa42 <__stack+0x143>
     63e:	0b 45       	sbci	r16, 0x5B	; 91
     640:	42 4f       	sbci	r20, 0xF2	; 242
     642:	9a 2d       	mov	r25, r10
     644:	99 5b       	subi	r25, 0xB9	; 185
     646:	b2 00       	.word	0x00b2	; ????
     648:	d3 0a       	sbc	r13, r19
     64a:	45 42       	sbci	r20, 0x25	; 37
     64c:	5f 6d       	ori	r21, 0xDF	; 223
     64e:	c9 dc       	rcall	.-1646   	; 0xffffffe2 <__eeprom_end+0xff7effe2>
     650:	92 05       	cpc	r25, r2
     652:	d4 0c       	add	r13, r4
     654:	45 42       	sbci	r20, 0x25	; 37
     656:	57 96       	adiw	r26, 0x17	; 23
     658:	44 4b       	sbci	r20, 0xB4	; 180
     65a:	e6 96       	adiw	r28, 0x36	; 54
     65c:	2c 00       	.word	0x002c	; ????
     65e:	d5 0b       	sbc	r29, r21
     660:	45 42       	sbci	r20, 0x25	; 37
     662:	57 d2       	rcall	.+1198   	; 0xb12 <__stack+0x213>
     664:	b4 64       	ori	r27, 0x44	; 68
     666:	6e c9       	rjmp	.-3364   	; 0xfffff944 <__eeprom_end+0xff7ef944>
     668:	02 d6       	rcall	.+3076   	; 0x126e <u8g2_setup+0xa6>
     66a:	0b 45       	sbci	r16, 0x5B	; 91
     66c:	42 4f       	sbci	r20, 0xF2	; 242
     66e:	1d 58       	subi	r17, 0x8D	; 141
     670:	32 b7       	in	r19, 0x32	; 50
     672:	64 01       	movw	r12, r8
     674:	d7 0a       	sbc	r13, r23
     676:	2d 42       	sbci	r18, 0x2D	; 45
     678:	47 96       	adiw	r24, 0x17	; 23
     67a:	d4 2a       	or	r13, r20
     67c:	b5 00       	.word	0x00b5	; ????
     67e:	d8 0c       	add	r13, r8
     680:	3d 42       	sbci	r19, 0x2D	; 45
     682:	cf 12       	cpse	r12, r31
     684:	5d 92       	st	X+, r5
     686:	69 4a       	sbci	r22, 0xA9	; 169
     688:	16 00       	.word	0x0016	; ????
     68a:	d9 0a       	sbc	r13, r25
     68c:	45 42       	sbci	r20, 0x25	; 37
     68e:	4f 1a       	sub	r4, r31
     690:	65 de       	rcall	.-822    	; 0x35c <__trampolines_end+0x2f4>
     692:	92 05       	cpc	r25, r2
     694:	da 0a       	sbc	r13, r26
     696:	45 42       	sbci	r20, 0x25	; 37
     698:	5f 29       	or	r21, r15
     69a:	f3 96       	adiw	r30, 0x33	; 51
     69c:	2c 00       	.word	0x002c	; ????
     69e:	db 0b       	sbc	r29, r27
     6a0:	45 42       	sbci	r20, 0x25	; 37
     6a2:	57 96       	adiw	r26, 0x17	; 23
     6a4:	c4 99       	sbic	0x18, 4	; 24
     6a6:	5b b2       	in	r5, 0x1b	; 27
     6a8:	00 dc       	rcall	.-2048   	; 0xfffffeaa <__eeprom_end+0xff7efeaa>
     6aa:	0a 45       	sbci	r16, 0x5A	; 90
     6ac:	42 4f       	sbci	r20, 0xF2	; 242
     6ae:	39 f3       	breq	.-50     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     6b0:	96 2c       	mov	r9, r6
     6b2:	00 dd       	rcall	.-1536   	; 0xb4 <__trampolines_end+0x4c>
     6b4:	0b 45       	sbci	r16, 0x5B	; 91
     6b6:	42 5f       	subi	r20, 0xF2	; 242
     6b8:	29 d3       	rcall	.+1618   	; 0xd0c <__stack+0x40d>
     6ba:	92 5a       	subi	r25, 0xA2	; 162
     6bc:	58 02       	muls	r21, r24
     6be:	de 0c       	add	r13, r14
     6c0:	3d 42       	sbci	r19, 0x2D	; 45
     6c2:	47 38       	cpi	r20, 0x87	; 135
     6c4:	24 d9       	rcall	.-3512   	; 0xfffff90e <__eeprom_end+0xff7ef90e>
     6c6:	a0 84       	ldd	r10, Z+8	; 0x08
     6c8:	45 00       	.word	0x0045	; ????
     6ca:	df 0d       	add	r29, r15
     6cc:	3d 42       	sbci	r19, 0x2D	; 45
     6ce:	cf 92       	push	r12
     6d0:	49 49       	sbci	r20, 0x99	; 153
     6d2:	a9 92       	st	Y+, r10
     6d4:	29 0a       	sbc	r2, r25
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	0c 45       	sbci	r16, 0x5C	; 92
     6da:	42 4f       	sbci	r20, 0xF2	; 242
     6dc:	9a 23       	and	r25, r26
     6de:	6b 32       	cpi	r22, 0x2B	; 43
     6e0:	68 c9       	rjmp	.-3376   	; 0xfffff9b2 <__eeprom_end+0xff7ef9b2>
     6e2:	10 e1       	ldi	r17, 0x10	; 16
     6e4:	0c 45       	sbci	r16, 0x5C	; 92
     6e6:	42 5f       	subi	r20, 0xF2	; 242
     6e8:	1d 59       	subi	r17, 0x9D	; 157
     6ea:	93 41       	sbci	r25, 0x13	; 19
     6ec:	4b 86       	std	Y+11, r4	; 0x0b
     6ee:	00 e2       	ldi	r16, 0x20	; 32
     6f0:	0d 45       	sbci	r16, 0x5D	; 93
     6f2:	42 57       	subi	r20, 0x72	; 114
     6f4:	96 e4       	ldi	r25, 0x46	; 70
     6f6:	c0 9a       	sbi	0x18, 0	; 24
     6f8:	0c 5a       	subi	r16, 0xAC	; 172
     6fa:	32 04       	cpc	r3, r2
     6fc:	e3 0d       	add	r30, r3
     6fe:	45 42       	sbci	r20, 0x25	; 37
     700:	57 d2       	rcall	.+1198   	; 0xbb0 <__stack+0x2b1>
     702:	0e ac       	ldd	r0, Y+62	; 0x3e
     704:	c9 a0       	ldd	r12, Y+33	; 0x21
     706:	25 43       	sbci	r18, 0x35	; 53
     708:	00 e4       	ldi	r16, 0x40	; 64
     70a:	0c 3d       	cpi	r16, 0xDC	; 220
     70c:	42 4f       	sbci	r20, 0xF2	; 242
     70e:	1d 58       	subi	r17, 0x8D	; 141
     710:	93 41       	sbci	r25, 0x13	; 19
     712:	4b 86       	std	Y+11, r4	; 0x0b
     714:	00 e5       	ldi	r16, 0x50	; 80
     716:	0d 45       	sbci	r16, 0x5D	; 93
     718:	42 57       	subi	r20, 0x72	; 114
     71a:	96 64       	ori	r25, 0x46	; 70
     71c:	d9 9a       	sbi	0x1b, 1	; 27
     71e:	0c 5a       	subi	r16, 0xAC	; 172
     720:	32 04       	cpc	r3, r2
     722:	e6 0c       	add	r14, r6
     724:	2e 42       	sbci	r18, 0x2E	; 46
     726:	cf 10       	cpse	r12, r15
     728:	26 c9       	rjmp	.-3508   	; 0xfffff976 <__eeprom_end+0xff7ef976>
     72a:	30 65       	ori	r19, 0x50	; 80
     72c:	83 00       	.word	0x0083	; ????
     72e:	e7 0b       	sbc	r30, r23
     730:	3d 3a       	cpi	r19, 0xAD	; 173
     732:	cf 92       	push	r12
     734:	89 59       	subi	r24, 0x99	; 153
     736:	b2 d5       	rcall	.+2916   	; 0x129c <timeInit+0x6>
     738:	00 e8       	ldi	r16, 0x80	; 128
     73a:	0c 45       	sbci	r16, 0x5C	; 92
     73c:	42 4f       	sbci	r20, 0xF2	; 242
     73e:	9a 23       	and	r25, r26
     740:	4b 36       	cpi	r20, 0x6B	; 107
     742:	0c e9       	ldi	r16, 0x9C	; 156
     744:	02 e9       	ldi	r16, 0x92	; 146
     746:	0c 45       	sbci	r16, 0x5C	; 92
     748:	42 5f       	subi	r20, 0xF2	; 242
     74a:	1d 59       	subi	r17, 0x9D	; 157
     74c:	b2 61       	ori	r27, 0x12	; 18
     74e:	48 17       	cp	r20, r24
     750:	00 ea       	ldi	r16, 0xA0	; 160
     752:	0d 45       	sbci	r16, 0x5D	; 93
     754:	42 57       	subi	r20, 0x72	; 114
     756:	96 e4       	ldi	r25, 0x46	; 70
     758:	c0 92 0d 43 	sts	0x430D, r12	; 0x80430d <__bss_end+0x3b51>
     75c:	ba 00       	.word	0x00ba	; ????
     75e:	eb 0c       	add	r14, r11
     760:	3d 42       	sbci	r19, 0x2D	; 45
     762:	4f 1d       	adc	r20, r15
     764:	58 b2       	in	r5, 0x18	; 24
     766:	61 48       	sbci	r22, 0x81	; 129
     768:	17 00       	.word	0x0017	; ????
     76a:	ec 09       	sbc	r30, r12
     76c:	c3 42       	sbci	r28, 0x23	; 35
     76e:	47 16       	cp	r4, r23
     770:	4a 2d       	mov	r20, r10
     772:	03 ed       	ldi	r16, 0xD3	; 211
     774:	08 c3       	rjmp	.+1552   	; 0xd86 <__stack+0x487>
     776:	42 4f       	sbci	r20, 0xF2	; 242
     778:	55 6a       	ori	r21, 0xA5	; 165
     77a:	19 ee       	ldi	r17, 0xE9	; 233
     77c:	08 c3       	rjmp	.+1552   	; 0xd8e <__stack+0x48f>
     77e:	42 4f       	sbci	r20, 0xF2	; 242
     780:	9b d4       	rcall	.+2358   	; 0x10b8 <__vector_5+0x1a4>
     782:	32 ef       	ldi	r19, 0xF2	; 242
     784:	09 bb       	out	0x19, r16	; 25
     786:	42 47       	sbci	r20, 0x72	; 114
     788:	92 49       	sbci	r25, 0x92	; 146
     78a:	2d 03       	fmul	r18, r21
     78c:	f0 0b       	sbc	r31, r16
     78e:	3d 42       	sbci	r19, 0x2D	; 45
     790:	87 2a       	or	r8, r23
     792:	2d 99       	sbic	0x05, 5	; 5
     794:	2d 59       	subi	r18, 0x9D	; 157
     796:	00 f1       	brcs	.+64     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     798:	0b 45       	sbci	r16, 0x5B	; 91
     79a:	42 57       	subi	r20, 0x72	; 114
     79c:	d2 9c       	mul	r13, r2
     79e:	98 34       	cpi	r25, 0x48	; 72
     7a0:	5b 00       	.word	0x005b	; ????
     7a2:	f2 0c       	add	r15, r2
     7a4:	45 42       	sbci	r20, 0x25	; 37
     7a6:	4f 9a       	sbi	0x09, 7	; 9
     7a8:	23 4b       	sbci	r18, 0xB3	; 179
     7aa:	66 4b       	sbci	r22, 0xB6	; 182
     7ac:	16 00       	.word	0x0016	; ????
     7ae:	f3 0b       	sbc	r31, r19
     7b0:	45 42       	sbci	r20, 0x25	; 37
     7b2:	5f 1d       	adc	r21, r15
     7b4:	59 32       	cpi	r21, 0x29	; 41
     7b6:	5b b2       	in	r5, 0x1b	; 27
     7b8:	00 f4       	brcc	.+0      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7ba:	0c 45       	sbci	r16, 0x5C	; 92
     7bc:	42 57       	subi	r20, 0x72	; 114
     7be:	96 e4       	ldi	r25, 0x46	; 70
     7c0:	c0 92 d9 92 	sts	0x92D9, r12	; 0x8092d9 <__bss_end+0x8b1d>
     7c4:	05 f5       	brhc	.+64     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7c6:	0c 45       	sbci	r16, 0x5C	; 92
     7c8:	42 57       	subi	r20, 0x72	; 114
     7ca:	d2 0e       	add	r13, r18
     7cc:	2c 99       	sbic	0x05, 4	; 5
     7ce:	2d 59       	subi	r18, 0x9D	; 157
     7d0:	00 f6       	brcc	.-128    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     7d2:	0b 3d       	cpi	r16, 0xDB	; 219
     7d4:	42 4f       	sbci	r20, 0xF2	; 242
     7d6:	1d 58       	subi	r17, 0x8D	; 141
     7d8:	32 5b       	subi	r19, 0xB2	; 178
     7da:	b2 00       	.word	0x00b2	; ????
     7dc:	f7 0a       	sbc	r15, r23
     7de:	2d 46       	sbci	r18, 0x6D	; 109
     7e0:	57 0e       	add	r5, r23
     7e2:	0c 3a       	cpi	r16, 0xAC	; 172
     7e4:	10 01       	movw	r2, r0
     7e6:	f8 0b       	sbc	r31, r24
     7e8:	2d 42       	sbci	r18, 0x2D	; 45
     7ea:	cf 20       	and	r12, r15
     7ec:	2d c9       	rjmp	.-3494   	; 0xfffffa48 <__eeprom_end+0xff7efa48>
     7ee:	34 28       	or	r3, r4
     7f0:	00 f9       	bld	r16, 0
     7f2:	0b 45       	sbci	r16, 0x5B	; 91
     7f4:	42 4f       	sbci	r20, 0xF2	; 242
     7f6:	9a 03       	fmulsu	r17, r18
     7f8:	99 93       	st	Y+, r25
     7fa:	a2 04       	cpc	r10, r2
     7fc:	fa 0a       	sbc	r15, r26
     7fe:	45 42       	sbci	r20, 0x25	; 37
     800:	5f 1d       	adc	r21, r15
     802:	c8 9c       	mul	r12, r8
     804:	14 25       	eor	r17, r4
     806:	fb 0b       	sbc	r31, r27
     808:	45 42       	sbci	r20, 0x25	; 37
     80a:	57 96       	adiw	r26, 0x17	; 23
     80c:	c4 99       	sbic	0x18, 4	; 24
     80e:	93 a2       	std	Z+35, r9	; 0x23
     810:	04 fc       	sbrc	r0, 4
     812:	0a 3d       	cpi	r16, 0xDA	; 218
     814:	42 4f       	sbci	r20, 0xF2	; 242
     816:	39 73       	andi	r19, 0x39	; 57
     818:	52 94       	swap	r5
     81a:	00 fd       	sbrc	r16, 0
     81c:	0d 4d       	sbci	r16, 0xDD	; 221
     81e:	3a 5f       	subi	r19, 0xFA	; 250
     820:	29 33       	cpi	r18, 0x39	; 57
     822:	29 4a       	sbci	r18, 0xA9	; 169
     824:	a8 25       	eor	r26, r8
     826:	0b 00       	.word	0x000b	; ????
     828:	fe 0c       	add	r15, r14
     82a:	45 3a       	cpi	r20, 0xA5	; 165
     82c:	47 38       	cpi	r20, 0x87	; 135
     82e:	24 99       	sbic	0x04, 4	; 4
     830:	6d 50       	subi	r22, 0x0D	; 13
     832:	c2 10       	cpse	r12, r2
     834:	ff 0d       	add	r31, r15
     836:	4d 3a       	cpi	r20, 0xAD	; 173
     838:	4f 39       	cpi	r20, 0x9F	; 159
     83a:	33 29       	or	r19, r3
     83c:	4a a8       	ldd	r4, Y+50	; 0x32
     83e:	25 0b       	sbc	r18, r21
     840:	00 00       	nop
     842:	00 00       	nop
     844:	04 ff       	sbrs	r16, 4
     846:	ff 00       	.word	0x00ff	; ????
	...

00000849 <u8g2_font_5x7_tf>:
     849:	bf 00 02 02 03 03 03 04 04 05 07 00 ff 06 ff 06     ................
     859:	00 01 12 02 2f 06 70 20 05 00 bd 01 21 06 b1 b1     ..../.p ....!...
     869:	19 29 22 07 5b b7 49 56 00 23 0a 2d b1 ab 86 aa     .)".[.IV.#.-....
     879:	86 aa 00 24 0a 2d b1 5b 35 d8 20 a5 05 25 09 34     ...$.-.[5. ..%.4
     889:	b1 c9 20 f6 06 01 26 09 2c b1 8b 29 56 31 05 27     .. ...&.,..)V1.'
     899:	05 99 b7 19 28 07 72 b1 53 cd 00 29 08 72 b1 89     ....(.r.S..).r..
     8a9:	a9 52 00 2a 07 6b b1 49 d5 6a 2b 0a 2d b1 cd 28     .R.*.k.I.j+.-..(
     8b9:	0e 99 51 04 2c 07 5b af 53 25 00 2d 06 0c b5 19     ..Q.,.[.S%.-....
     8c9:	01 2e 06 52 b1 19 01 2f 07 24 b3 07 b1 0d 30 08     ...R.../.$....0.
     8d9:	73 b1 ab 5c 15 00 31 07 73 b1 4b b2 35 32 0a 34     s..\..1.s.K.52.4
     8e9:	b1 53 31 83 58 8e 00 33 0b 34 b1 19 19 24 8d 64     .S1.X..3.4...$.d
     8f9:	52 00 34 0a 34 b1 8d aa 1a 31 83 04 35 0a 34 b1     R.4.4....1..5.4.
     909:	19 1a 6c 24 93 02 36 0a 34 b1 53 19 ac 28 93 02     ..l$..6.4.S..(..
     919:	37 0b 34 b1 19 19 c4 0c 62 06 11 38 0a 34 b1 53     7.4.....b..8.4.S
     929:	31 a9 28 93 02 39 0a 34 b1 53 51 a6 0d 92 02 3a     1.(..9.4.SQ....:
     939:	07 6a b1 19 71 04 3b 08 33 af b3 91 2a 01 3c 08     .j..q.;.3...*.<.
     949:	6b b1 4d 35 c8 20 3d 08 1c b3 19 19 8d 00 3e 09     k.M5. =.......>.
     959:	6b b1 c9 20 83 54 02 3f 09 73 b1 6b a6 0c 13 00     k.. .T.?.s.k....
     969:	40 09 34 b1 53 51 dd 48 01 41 09 34 b1 53 51 8e     @.4.SQ.H.A.4.SQ.
     979:	29 03 42 0a 34 b1 59 71 a4 28 47 02 43 0b 34 b1     ).B.4.Yq.(G.C.4.
     989:	53 51 83 0c 62 52 00 44 09 34 b1 59 d1 39 12 00     SQ..bR.D.4.Y.9..
     999:	45 0b 34 b1 19 1a ac 0c 32 18 01 46 0b 34 b1 19     E.4.....2..F.4..
     9a9:	1a ac 0c 32 c8 00 47 0a 34 b1 53 51 83 34 d3 00     ...2..G.4.SQ.4..
     9b9:	48 08 34 b1 89 72 4c 33 49 07 73 b1 59 b1 35 4a     H.4..rL3I.s.Y.5J
     9c9:	0b 34 b1 07 19 64 90 81 4c 0a 4b 0a 34 b1 89 2a     .4...d..L.K.4..*
     9d9:	49 99 ca 00 4c 0c 34 b1 c9 20 83 0c 32 c8 60 04     I...L.4.. ..2.`.
     9e9:	4d 09 34 b1 89 e3 88 66 00 4e 08 34 b1 89 6b a9     M.4....f.N.4..k.
     9f9:	33 4f 09 34 b1 53 d1 99 14 00 50 0a 34 b1 59 51     3O.4.S....P.4.YQ
     a09:	8e 94 41 06 51 0a 3c af 53 d1 5c 49 a3 00 52 09     ..A.Q.<.S.\I..R.
     a19:	34 b1 59 51 8e d4 0c 53 0a 34 b1 53 31 65 54 26     4.YQ...S.4.S1eT&
     a29:	05 54 07 73 b1 59 b1 0b 55 08 34 b1 89 9e 49 01     .T.s.Y..U.4...I.
     a39:	56 09 34 b1 89 ce 24 15 00 57 09 34 b1 89 e6 38     V.4...$..W.4...8
     a49:	62 00 58 0a 34 b1 89 32 49 15 65 00 59 08 73 b1     b.X.4..2I.e.Y.s.
     a59:	49 56 59 01 5a 0a 34 b1 19 19 c4 36 18 01 5b 07     IVY.Z.4....6..[.
     a69:	73 b1 19 b1 39 5c 09 24 b3 c9 28 a3 8c 02 5d 07     s...9\.$..(...].
     a79:	73 b1 99 cd 11 5e 05 53 b9 6b 5f 06 0c b1 19 01     s....^.S.k_.....
     a89:	60 06 52 b9 89 01 61 08 24 b1 1b 51 a9 02 62 0b     `.R...a.$..Q..b.
     a99:	34 b1 c9 20 83 15 e5 48 00 63 07 23 b1 9b 19 08     4.. ...H.c.#....
     aa9:	64 0a 34 b1 07 19 a4 11 65 1a 65 09 24 b1 53 69     d.4.....e.e.$.Si
     ab9:	64 a0 00 66 09 34 b1 ad ca 99 41 04 67 09 2c af     d..f.4....A.g.,.
     ac9:	1b 31 a9 8c 06 68 0a 34 b1 c9 20 83 15 cd 00 69     .1...h.4.. ....i
     ad9:	08 73 b1 cb 48 56 03 6a 09 7b af cd b0 54 15 00     .s..HV.j.{...T..
     ae9:	6b 0b 34 b1 c9 20 83 94 64 2a 03 6c 07 73 b1 91     k.4.. ..d*.l.s..
     af9:	5d 03 6d 08 24 b1 49 69 48 19 6e 07 24 b1 59 d1     ].m.$.IiH.n.$.Y.
     b09:	0c 6f 08 24 b1 53 51 26 05 70 09 2c af 59 51 8e     .o.$.SQ&.p.,.YQ.
     b19:	94 01 71 09 2c af 1b 51 a6 0d 02 72 08 24 b1 59     ..q.,..Q...r.$.Y
     b29:	51 83 0c 73 08 24 b1 1b 1a 0d 05 74 0a 34 b1 cb     Q..s.$.....t.4..
     b39:	20 ce 0c 32 12 75 07 24 b1 89 66 1a 76 07 63 b1      ..2.u.$..f.v.c.
     b49:	49 56 05 77 07 24 b1 89 72 1c 78 08 24 b1 89 49     IV.w.$..r.x.$..I
     b59:	aa 18 79 09 2c af 89 32 95 25 00 7a 08 24 b1 19     ..y.,..2.%.z.$..
     b69:	b1 1c 01 7b 08 73 b1 4d 49 d6 20 7c 05 b1 b1 39     ...{.s.MI. |...9
     b79:	7d 0a 73 b1 c9 20 aa 98 22 00 7e 07 14 b9 4b 2a     }.s.. ..".~...K*
     b89:	01 a0 05 00 bd 01 a1 06 b1 b1 49 23 a2 09 34 af     ..........I#..4.
     b99:	8d 23 35 67 02 a3 08 2c b1 55 71 56 02 a4 0b 2d     .#5g...,.UqV...-
     ba9:	b1 c9 20 cd 14 57 06 01 a5 09 73 b1 49 aa 5a 31     .. ..W....s.I.Z1
     bb9:	01 a6 06 a9 b1 51 02 a7 08 7b af 9b aa 92 0b a8     .....Q...{......
     bc9:	06 4b bb 49 01 a9 0d 3d af 5b 19 a8 34 55 d2 20     .K.I...=.[..4U. 
     bd9:	2d 00 aa 06 1b b7 5b 49 ab 07 1d b3 8b b2 01 ac     -.....[I........
     be9:	07 14 b3 19 19 04 ad 05 4b b5 19 ae 0c 3d af 5b     ........K....=.[
     bf9:	19 8c 34 a7 06 69 01 af 06 0c bb 19 01 b0 06 5b     ..4..i.........[
     c09:	b7 eb 02 b1 0b 35 b1 cd 28 0e 99 51 1c 02 b2 06     .....5..(..Q....
     c19:	62 b5 51 06 b3 06 62 b5 19 69 b4 06 52 b9 53 00     b.Q...b..i..R.S.
     c29:	b5 08 2c af 89 e6 48 19 b6 08 34 b1 1b 6a f5 03     ..,...H...4..j..
     c39:	b7 06 52 b5 19 01 b8 06 52 af 53 00 b9 07 63 b5     ..R.....R.S...c.
     c49:	4b 32 0d ba 06 1b b7 eb 02 bb 08 1d b3 89 a5 4c     K2.............L
     c59:	00 bc 0c 3c af c9 20 83 0c 62 54 1b 04 bd 0d 3c     ...<.. ..bT....<
     c69:	af c9 20 83 0c 92 06 31 03 01 be 0b 3c af 91 1a     .. ....1....<...
     c79:	44 15 d5 06 01 bf 09 73 b1 cb 30 c5 54 01 c0 09     D......s..0.T...
     c89:	34 b1 53 51 8e 29 03 c1 09 34 b1 53 51 8e 29 03     4.SQ.)...4.SQ.).
     c99:	c2 09 34 b1 53 51 8e 29 03 c3 09 34 b1 53 51 8e     ..4.SQ.)...4.SQ.
     ca9:	29 03 c4 0a 34 b1 89 49 c5 31 65 00 c5 09 34 b1     )...4..I.1e...4.
     cb9:	93 2a 8e 29 03 c6 09 34 b1 1b a9 1a aa 25 c7 0b     .*.)...4.....%..
     cc9:	3c af 53 51 83 0c 62 92 11 c8 0b 34 b1 19 1a ac     <.SQ..b....4....
     cd9:	0c 32 18 01 c9 0b 34 b1 19 1a ac 0c 32 18 01 ca     .2....4.....2...
     ce9:	0b 34 b1 19 1a ac 0c 32 18 01 cb 0b 34 b1 19 1a     .4.....2....4...
     cf9:	ac 0c 32 18 01 cc 07 73 b1 59 b1 35 cd 07 73 b1     ..2....s.Y.5..s.
     d09:	59 b1 35 ce 07 73 b1 59 b1 35 cf 07 73 b1 59 b1     Y.5..s.Y.5..s.Y.
     d19:	35 d0 09 34 b1 99 69 75 8d 04 d1 08 34 b1 49 73     5..4..iu....4.Is
     d29:	a9 33 d2 09 34 b1 53 d1 99 14 00 d3 09 34 b1 53     .3..4.S......4.S
     d39:	d1 99 14 00 d4 09 34 b1 53 d1 99 14 00 d5 09 34     ......4.S......4
     d49:	b1 53 d1 99 14 00 d6 0a 34 b1 89 49 45 33 29 00     .S......4..IE3).
     d59:	d7 08 24 b1 89 49 aa 18 d8 09 34 b1 1b e9 48 47     ..$..I....4...HG
     d69:	02 d9 08 34 b1 89 9e 49 01 da 08 34 b1 89 9e 49     ...4...I...4...I
     d79:	01 db 08 34 b1 89 9e 49 01 dc 0a 34 b1 89 19 45     ...4...I...4...E
     d89:	33 29 00 dd 08 73 b1 49 56 59 01 de 0b 34 b1 c9     3)...s.IVY...4..
     d99:	60 c5 91 32 c8 00 df 09 34 b1 53 51 95 56 02 e0     `..2....4.SQ.V..
     da9:	0a 34 b1 cb 28 8e a8 54 01 e1 09 34 b1 ad c1 88     .4..(..T...4....
     db9:	4a 15 e2 09 34 b1 ad d2 88 4a 15 e3 0a 34 b1 4b     J...4....J...4.K
     dc9:	2a 8e a8 54 01 e4 09 34 b1 ab e1 88 4a 15 e5 09     *..T...4....J...
     dd9:	34 b1 93 72 44 a5 0a e6 08 24 b1 1b 69 c5 01 e7     4..rD....$..i...
     de9:	08 6b af 9b 19 a8 04 e8 0b 34 b1 cb 28 aa 34 32     .k.......4..(.42
     df9:	50 00 e9 0a 34 b1 ad 81 4a 23 03 05 ea 0b 34 b1     P...4...J#....4.
     e09:	8b 29 aa 34 32 50 00 eb 0b 34 b1 49 99 50 69 64     .).42P...4.I.Pid
     e19:	a0 00 ec 08 73 b1 c9 20 c9 6a ed 07 73 b1 2b 65     ....s.. .j..s.+e
     e29:	35 ee 07 73 b1 ab 66 35 ef 08 73 b1 49 19 c8 6a     5..s..f5..s.I..j
     e39:	f0 0a 34 b1 cb c8 8a 32 29 00 f1 09 34 b1 4b 2a     ..4....2)...4.K*
     e49:	ad 68 06 f2 0a 34 b1 cb 28 aa 28 93 02 f3 0a 34     .h...4..(.(....4
     e59:	b1 ad 81 8a 32 29 00 f4 0a 34 b1 d3 84 8a 32 29     ....2)...4....2)
     e69:	00 f5 0a 34 b1 4b 2a aa 28 93 02 f6 0a 34 b1 ab     ...4.K*.(....4..
     e79:	a1 8a 32 29 00 f7 09 2c b1 d3 70 64 a8 00 f8 09     ..2)...,..pd....
     e89:	24 b1 1b 69 a4 91 00 f9 09 34 b1 cb a8 34 d3 00     $..i.....4...4..
     e99:	fa 07 34 b1 6d 9a 69 fb 08 34 b1 d3 30 9a 69 fc     ..4.m.i..4..0.i.
     ea9:	09 34 b1 ab 51 34 d3 00 fd 09 3c af 6d ca 54 96     .4..Q4....<.m.T.
     eb9:	00 fe 0a 34 af c9 60 45 39 52 06 ff 0a 3c af ab     ...4..`E9R...<..
     ec9:	51 94 a9 2c 01 00 00 00 04 ff ff 00 00              Q..,.........

00000ed6 <__ctors_end>:
     ed6:	11 24       	eor	r1, r1
     ed8:	1f be       	out	0x3f, r1	; 63
     eda:	cf ef       	ldi	r28, 0xFF	; 255
     edc:	d8 e0       	ldi	r29, 0x08	; 8
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	cd bf       	out	0x3d, r28	; 61

00000ee2 <__do_copy_data>:
     ee2:	12 e0       	ldi	r17, 0x02	; 2
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b1 e0       	ldi	r27, 0x01	; 1
     ee8:	e0 e4       	ldi	r30, 0x40	; 64
     eea:	f4 e4       	ldi	r31, 0x44	; 68
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <__do_copy_data+0x10>
     eee:	05 90       	lpm	r0, Z+
     ef0:	0d 92       	st	X+, r0
     ef2:	a4 3c       	cpi	r26, 0xC4	; 196
     ef4:	b1 07       	cpc	r27, r17
     ef6:	d9 f7       	brne	.-10     	; 0xeee <__do_copy_data+0xc>

00000ef8 <__do_clear_bss>:
     ef8:	27 e0       	ldi	r18, 0x07	; 7
     efa:	a4 ec       	ldi	r26, 0xC4	; 196
     efc:	b2 e0       	ldi	r27, 0x02	; 2
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <.do_clear_bss_start>

00000f00 <.do_clear_bss_loop>:
     f00:	1d 92       	st	X+, r1

00000f02 <.do_clear_bss_start>:
     f02:	ac 3b       	cpi	r26, 0xBC	; 188
     f04:	b2 07       	cpc	r27, r18
     f06:	e1 f7       	brne	.-8      	; 0xf00 <.do_clear_bss_loop>
     f08:	0e 94 de 08 	call	0x11bc	; 0x11bc <main>
     f0c:	0c 94 1e 22 	jmp	0x443c	; 0x443c <_exit>

00000f10 <__bad_interrupt>:
     f10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f14 <__vector_5>:
		
		return angledegree; 
}


ISR(PCINT2_vect){//PD
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
	static int runcount1 = 0;
	
	//check which device it is and keep that device for the falling edge
	static int prevDevice;
	static int device;
	if ((device = PIND) == 0)
     f3e:	89 b1       	in	r24, 0x09	; 9
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <device.1740+0x1>
     f46:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <device.1740>
     f4a:	89 2b       	or	r24, r25
     f4c:	41 f4       	brne	.+16     	; 0xf5e <__vector_5+0x4a>
	{
		device = prevDevice;//save the current device
     f4e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <prevDevice.1739>
     f52:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <prevDevice.1739+0x1>
     f56:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <device.1740+0x1>
     f5a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <device.1740>
	}
	
	switch(device){
     f5e:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <device.1740>
     f62:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <device.1740+0x1>
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <__vector_5+0x5a>
     f6c:	73 c0       	rjmp	.+230    	; 0x1054 <__vector_5+0x140>
     f6e:	1c f4       	brge	.+6      	; 0xf76 <__vector_5+0x62>
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	49 f0       	breq	.+18     	; 0xf86 <__vector_5+0x72>
     f74:	d7 c0       	rjmp	.+430    	; 0x1124 <__vector_5+0x210>
     f76:	80 32       	cpi	r24, 0x20	; 32
     f78:	91 05       	cpc	r25, r1
     f7a:	29 f0       	breq	.+10     	; 0xf86 <__vector_5+0x72>
     f7c:	80 38       	cpi	r24, 0x80	; 128
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <__vector_5+0x70>
     f82:	68 c0       	rjmp	.+208    	; 0x1054 <__vector_5+0x140>
     f84:	cf c0       	rjmp	.+414    	; 0x1124 <__vector_5+0x210>
		case (1<<ECHO0):
		case 0:
		//if device is device 0 or if the pin ECHO0 gave a high
		if (runcount2 == 0)
     f86:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <runcount2.1737>
     f8a:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <runcount2.1737+0x1>
     f8e:	23 2b       	or	r18, r19
     f90:	c1 f4       	brne	.+48     	; 0xfc2 <__vector_5+0xae>
		{
			prevDevice = 0;
     f92:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <prevDevice.1739+0x1>
     f96:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <prevDevice.1739>
			TCNT1 = 0;
     f9a:	e4 e8       	ldi	r30, 0x84	; 132
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	11 82       	std	Z+1, r1	; 0x01
     fa0:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <risingEdgeTimeC+0x1>
     faa:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <risingEdgeTimeC>
			
			runcount2++;
     fae:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <runcount2.1737>
     fb2:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <runcount2.1737+0x1>
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <runcount2.1737+0x1>
     fbc:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <runcount2.1737>
     fc0:	b1 c0       	rjmp	.+354    	; 0x1124 <__vector_5+0x210>
		}
		else
		{
			prevDevice = -1;
     fc2:	2f ef       	ldi	r18, 0xFF	; 255
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <prevDevice.1739+0x1>
     fca:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <prevDevice.1739>
			fallingEdgeTimeC = TCNT1;
     fce:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fd2:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fd6:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <fallingEdgeTimeC+0x1>
     fda:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <fallingEdgeTimeC>
			
			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
     fde:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <risingEdgeTimeC>
     fe2:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <risingEdgeTimeC+0x1>
     fe6:	62 1b       	sub	r22, r18
     fe8:	73 0b       	sbc	r23, r19
     fea:	8b 01       	movw	r16, r22
     fec:	07 2e       	mov	r0, r23
     fee:	00 0c       	add	r0, r0
     ff0:	22 0b       	sbc	r18, r18
     ff2:	33 0b       	sbc	r19, r19
     ff4:	00 93 ce 02 	sts	0x02CE, r16	; 0x8002ce <echoHighLevelTimeC>
     ff8:	10 93 cf 02 	sts	0x02CF, r17	; 0x8002cf <echoHighLevelTimeC+0x1>
     ffc:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <echoHighLevelTimeC+0x2>
    1000:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <echoHighLevelTimeuS+0x1>
    1010:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal0;// in cm
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	ec 01       	movw	r28, r24
    101e:	c8 5f       	subi	r28, 0xF8	; 248
    1020:	d8 4f       	sbci	r29, 0xF8	; 248
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 ab 20 	call	0x4156	; 0x4156 <__floatunsisf>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	48 e6       	ldi	r20, 0x68	; 104
    1030:	52 e4       	ldi	r21, 0x42	; 66
    1032:	0e 94 03 20 	call	0x4006	; 0x4006 <__divsf3>
    1036:	26 e6       	ldi	r18, 0x66	; 102
    1038:	36 e6       	ldi	r19, 0x66	; 102
    103a:	46 ee       	ldi	r20, 0xE6	; 230
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1042:	68 83       	st	Y, r22
    1044:	79 83       	std	Y+1, r23	; 0x01
    1046:	8a 83       	std	Y+2, r24	; 0x02
    1048:	9b 83       	std	Y+3, r25	; 0x03
			
			runcount2 = 0;
    104a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <runcount2.1737+0x1>
    104e:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <runcount2.1737>
    1052:	68 c0       	rjmp	.+208    	; 0x1124 <__vector_5+0x210>
		break;
		
//use for multiple sound sensors
		case (1 << ECHO1):
		case 1:
		if (runcount1 == 0)
    1054:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <__data_end>
    1058:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <__data_end+0x1>
    105c:	23 2b       	or	r18, r19
    105e:	d1 f4       	brne	.+52     	; 0x1094 <__vector_5+0x180>
		{
			prevDevice = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <prevDevice.1739+0x1>
    1068:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <prevDevice.1739>
			TCNT1 = 0;
    106c:	e4 e8       	ldi	r30, 0x84	; 132
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	11 82       	std	Z+1, r1	; 0x01
    1072:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <risingEdgeTimeC+0x1>
    107c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <risingEdgeTimeC>

			runcount1++;
    1080:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
    1084:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__data_end+0x1>
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <__data_end+0x1>
    108e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
    1092:	48 c0       	rjmp	.+144    	; 0x1124 <__vector_5+0x210>
		}
		else
		{
			prevDevice = -2;
    1094:	2e ef       	ldi	r18, 0xFE	; 254
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <prevDevice.1739+0x1>
    109c:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <prevDevice.1739>
			fallingEdgeTimeC = TCNT1;
    10a0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10a4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10a8:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <fallingEdgeTimeC+0x1>
    10ac:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <fallingEdgeTimeC>

			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    10b0:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <risingEdgeTimeC>
    10b4:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <risingEdgeTimeC+0x1>
    10b8:	62 1b       	sub	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	8b 01       	movw	r16, r22
    10be:	07 2e       	mov	r0, r23
    10c0:	00 0c       	add	r0, r0
    10c2:	22 0b       	sbc	r18, r18
    10c4:	33 0b       	sbc	r19, r19
    10c6:	00 93 ce 02 	sts	0x02CE, r16	; 0x8002ce <echoHighLevelTimeC>
    10ca:	10 93 cf 02 	sts	0x02CF, r17	; 0x8002cf <echoHighLevelTimeC+0x1>
    10ce:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <echoHighLevelTimeC+0x2>
    10d2:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	66 0f       	add	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <echoHighLevelTimeuS+0x1>
    10e2:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal1;// in cm
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	ec 01       	movw	r28, r24
    10f0:	c8 5f       	subi	r28, 0xF8	; 248
    10f2:	d8 4f       	sbci	r29, 0xF8	; 248
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 ab 20 	call	0x4156	; 0x4156 <__floatunsisf>
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	48 e6       	ldi	r20, 0x68	; 104
    1102:	52 e4       	ldi	r21, 0x42	; 66
    1104:	0e 94 03 20 	call	0x4006	; 0x4006 <__divsf3>
    1108:	26 e6       	ldi	r18, 0x66	; 102
    110a:	36 e6       	ldi	r19, 0x66	; 102
    110c:	46 ee       	ldi	r20, 0xE6	; 230
    110e:	5f e3       	ldi	r21, 0x3F	; 63
    1110:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1114:	68 83       	st	Y, r22
    1116:	79 83       	std	Y+1, r23	; 0x01
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	9b 83       	std	Y+3, r25	; 0x03

			runcount1 = 0;
    111c:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <__data_end+0x1>
    1120:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
		}
		break;
	}
	
	*int_Distance =(int) (echoDistance[0] + echoDistance[1]) / 2;
    1124:	c0 91 fe 06 	lds	r28, 0x06FE	; 0x8006fe <int_Distance>
    1128:	d0 91 ff 06 	lds	r29, 0x06FF	; 0x8006ff <int_Distance+0x1>
    112c:	e8 e0       	ldi	r30, 0x08	; 8
    112e:	f7 e0       	ldi	r31, 0x07	; 7
    1130:	24 81       	ldd	r18, Z+4	; 0x04
    1132:	35 81       	ldd	r19, Z+5	; 0x05
    1134:	46 81       	ldd	r20, Z+6	; 0x06
    1136:	57 81       	ldd	r21, Z+7	; 0x07
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1144:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    1148:	9b 01       	movw	r18, r22
    114a:	77 23       	and	r23, r23
    114c:	14 f4       	brge	.+4      	; 0x1152 <__vector_5+0x23e>
    114e:	2f 5f       	subi	r18, 0xFF	; 255
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	c9 01       	movw	r24, r18
    1154:	95 95       	asr	r25
    1156:	87 95       	ror	r24
    1158:	99 83       	std	Y+1, r25	; 0x01
    115a:	88 83       	st	Y, r24
}
    115c:	ff 91       	pop	r31
    115e:	ef 91       	pop	r30
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <setup_display>:
unsigned int Time_ms = 0;//accuracy is fluctuating
unsigned int Time_min = 0;//accurate

void setup_display(void){
	//screen initialization
	main_currentPage = u8g2_setup(Settings, &speed, &direction, &distance); //save the address of the currentPage
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	31 e0       	ldi	r19, 0x01	; 1
    118a:	4c e0       	ldi	r20, 0x0C	; 12
    118c:	51 e0       	ldi	r21, 0x01	; 1
    118e:	6e e0       	ldi	r22, 0x0E	; 14
    1190:	71 e0       	ldi	r23, 0x01	; 1
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <u8g2_setup>
    119a:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <main_currentPage+0x1>
    119e:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <main_currentPage>
	
	sys_init();
    11a2:	0e 94 45 09 	call	0x128a	; 0x128a <sys_init>
	but_init();
    11a6:	0e 94 43 0b 	call	0x1686	; 0x1686 <but_init>
	timeInit(&Time_min, &Time_ms);
    11aa:	68 ed       	ldi	r22, 0xD8	; 216
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	86 ed       	ldi	r24, 0xD6	; 214
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	0e 94 4b 09 	call	0x1296	; 0x1296 <timeInit>
	ADCinit();
    11b6:	0e 94 3e 0a 	call	0x147c	; 0x147c <ADCinit>
    11ba:	08 95       	ret

000011bc <main>:
}

int main()
{
	setup_display();
    11bc:	0e 94 c3 08 	call	0x1186	; 0x1186 <setup_display>
	//initDistanceSensor(&distance, &angle);
	
	sei();
    11c0:	78 94       	sei


	while(1){
		
		screenRoutine();//function for updating the display.
    11c2:	0e 94 25 12 	call	0x244a	; 0x244a <screenRoutine>
    11c6:	fd cf       	rjmp	.-6      	; 0x11c2 <main+0x6>

000011c8 <u8g2_setup>:

#define Time_cal 305 //ms calibration

int8_t * u8g2_setup(int pSettings[settings], int *pSpeed, int *pDirection, int *pDistance)
{
	settingVal = &pSettings[0];
    11c8:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <settingVal+0x1>
    11cc:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <settingVal>
	
	speedHold = pSpeed;
    11d0:	70 93 25 07 	sts	0x0725, r23	; 0x800725 <speedHold+0x1>
    11d4:	60 93 24 07 	sts	0x0724, r22	; 0x800724 <speedHold>
	directionHold = pDirection;
    11d8:	50 93 a9 07 	sts	0x07A9, r21	; 0x8007a9 <directionHold+0x1>
    11dc:	40 93 a8 07 	sts	0x07A8, r20	; 0x8007a8 <directionHold>
	distanceHold = pDistance;
    11e0:	30 93 a5 07 	sts	0x07A5, r19	; 0x8007a5 <distanceHold+0x1>
    11e4:	20 93 a4 07 	sts	0x07A4, r18	; 0x8007a4 <distanceHold>
	
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    11e8:	24 e8       	ldi	r18, 0x84	; 132
    11ea:	3c e1       	ldi	r19, 0x1C	; 28
    11ec:	49 e4       	ldi	r20, 0x49	; 73
    11ee:	5c e1       	ldi	r21, 0x1C	; 28
    11f0:	69 e5       	ldi	r22, 0x59	; 89
    11f2:	72 e0       	ldi	r23, 0x02	; 2
    11f4:	84 e3       	ldi	r24, 0x34	; 52
    11f6:	97 e0       	ldi	r25, 0x07	; 7
    11f8:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    11fc:	88 e7       	ldi	r24, 0x78	; 120
    11fe:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    1202:	84 e3       	ldi	r24, 0x34	; 52
    1204:	97 e0       	ldi	r25, 0x07	; 7
    1206:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	84 e3       	ldi	r24, 0x34	; 52
    120e:	97 e0       	ldi	r25, 0x07	; 7
    1210:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <u8x8_SetPowerSave>
	
	screenDiv = screenDiv / screenDivholder;//for better resolution
    1214:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <screenDivholder>
    1218:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <screenDivholder+0x1>
    121c:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <screenDivholder+0x2>
    1220:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <screenDivholder+0x3>
    1224:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    1228:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    122c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    1230:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    1234:	0e 94 03 20 	call	0x4006	; 0x4006 <__divsf3>
    1238:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <screenDiv>
    123c:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <screenDiv+0x1>
    1240:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <screenDiv+0x2>
    1244:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <screenDiv+0x3>

	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);
    1248:	68 e6       	ldi	r22, 0x68	; 104
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	84 e3       	ldi	r24, 0x34	; 52
    124e:	97 e0       	ldi	r25, 0x07	; 7
    1250:	0e 94 1a 1a 	call	0x3434	; 0x3434 <u8g2_SetFont>
	textHeight = u8g2_GetMaxCharHeight(&u8g2);
    1254:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <u8g2+0x50>
    1258:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <textHeight>
	maxCharWidth = u8g2_GetMaxCharWidth(&u8g2);
    125c:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <u8g2+0x4f>
    1260:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <maxCharWidth>
	
	u8g2_SetFontDirection(&u8g2, 0);//0: 0deg 1:90deg 2: 180deg 3: 270deg
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	84 e3       	ldi	r24, 0x34	; 52
    1268:	97 e0       	ldi	r25, 0x07	; 7
    126a:	0e 94 37 1a 	call	0x346e	; 0x346e <u8g2_SetFontDirection>
	
	selections[MENUPAGE] = menuChoices;
    126e:	ec ea       	ldi	r30, 0xAC	; 172
    1270:	f7 e0       	ldi	r31, 0x07	; 7
    1272:	84 e0       	ldi	r24, 0x04	; 4
    1274:	81 83       	std	Z+1, r24	; 0x01
	selections[SETTINGPAGE] = settings;
    1276:	85 e0       	ldi	r24, 0x05	; 5
    1278:	85 83       	std	Z+5, r24	; 0x05
	selectionsVis[MENUPAGE] = menuChoicesVis;
    127a:	ea e9       	ldi	r30, 0x9A	; 154
    127c:	f7 e0       	ldi	r31, 0x07	; 7
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	91 83       	std	Z+1, r25	; 0x01
	selectionsVis[SETTINGPAGE] = settingsVis;
    1282:	85 83       	std	Z+5, r24	; 0x05
	return &currentPage;
}
    1284:	81 ef       	ldi	r24, 0xF1	; 241
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	08 95       	ret

0000128a <sys_init>:

void sys_init(void)
{
	#if defined(__AVR__)
	/* select minimal prescaler (max system speed) */
	CLKPR = 0x80;
    128a:	e1 e6       	ldi	r30, 0x61	; 97
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 e8       	ldi	r24, 0x80	; 128
    1290:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1292:	10 82       	st	Z, r1
    1294:	08 95       	ret

00001296 <timeInit>:
}

//Time________________________________________________________________________________________________________________________________________________

void timeInit(unsigned int *ptime_min, unsigned int *ptime_ms){
	pTime_min = ptime_min;
    1296:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pTime_min+0x1>
    129a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pTime_min>
	pTime_ms = ptime_ms;
    129e:	70 93 33 07 	sts	0x0733, r23	; 0x800733 <pTime_ms+0x1>
    12a2:	60 93 32 07 	sts	0x0732, r22	; 0x800732 <pTime_ms>
	TCCR0B |= (1<<CS00) | (1<<CS01);
    12a6:	85 b5       	in	r24, 0x25	; 37
    12a8:	83 60       	ori	r24, 0x03	; 3
    12aa:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0B);
    12ac:	ee e6       	ldi	r30, 0x6E	; 110
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	84 60       	ori	r24, 0x04	; 4
    12b4:	80 83       	st	Z, r24
	OCR0B = 250;//to attain roughly 1 ms for every overflow. this roughness gets calibrated further in the code.
    12b6:	8a ef       	ldi	r24, 0xFA	; 250
    12b8:	88 bd       	out	0x28, r24	; 40
    12ba:	08 95       	ret

000012bc <__vector_15>:
}



ISR(TIMER0_COMPB_vect){
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
	//this routine updates the time variables.
	static int rCount = 0;
	
	if (_Time_ms >= 60000){
    12d6:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_Time_ms>
    12da:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_Time_ms+0x1>
    12de:	80 36       	cpi	r24, 0x60	; 96
    12e0:	2a ee       	ldi	r18, 0xEA	; 234
    12e2:	92 07       	cpc	r25, r18
    12e4:	b8 f0       	brcs	.+46     	; 0x1314 <__vector_15+0x58>
		_Time_ms = Time_cal-117;//Formula for the minutes. pTime_ms = (Time_cal-c): c = 0.615384615*Time_cal
    12e6:	8c eb       	ldi	r24, 0xBC	; 188
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <_Time_ms+0x1>
    12ee:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <_Time_ms>
		_Time_min++;
    12f2:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <_Time_min>
    12f6:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <_Time_min+0x1>
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <_Time_min+0x1>
    1300:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <_Time_min>
		rCount = 0;
    1304:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <rCount.9235+0x1>
    1308:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <rCount.9235>
		reDrawRequiredTime = 1; //update the screen so the overlay shows the right minutes.
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <reDrawRequiredTime>
    1312:	18 c0       	rjmp	.+48     	; 0x1344 <__vector_15+0x88>
	}else if (rCount++ >= 13000)
    1314:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <rCount.9235>
    1318:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <rCount.9235+0x1>
    131c:	a9 01       	movw	r20, r18
    131e:	4f 5f       	subi	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	50 93 ec 02 	sts	0x02EC, r21	; 0x8002ec <rCount.9235+0x1>
    1326:	40 93 eb 02 	sts	0x02EB, r20	; 0x8002eb <rCount.9235>
    132a:	28 3c       	cpi	r18, 0xC8	; 200
    132c:	32 43       	sbci	r19, 0x32	; 50
    132e:	54 f0       	brlt	.+20     	; 0x1344 <__vector_15+0x88>
	{
		_Time_ms = _Time_ms + Time_cal;
    1330:	8f 5c       	subi	r24, 0xCF	; 207
    1332:	9e 4f       	sbci	r25, 0xFE	; 254
    1334:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <_Time_ms+0x1>
    1338:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <_Time_ms>
		rCount = 0;
    133c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <rCount.9235+0x1>
    1340:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <rCount.9235>
	}

	_Time_ms++;
    1344:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_Time_ms>
    1348:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_Time_ms+0x1>
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <_Time_ms+0x1>
    1352:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <_Time_ms>
	
	*pTime_ms = _Time_ms;
    1356:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <pTime_ms>
    135a:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <pTime_ms+0x1>
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
	*pTime_min = _Time_min;
    1362:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pTime_min>
    1366:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pTime_min+0x1>
    136a:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <_Time_min>
    136e:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <_Time_min+0x1>
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
}
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	5f 91       	pop	r21
    1380:	4f 91       	pop	r20
    1382:	3f 91       	pop	r19
    1384:	2f 91       	pop	r18
    1386:	0f 90       	pop	r0
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	0f 90       	pop	r0
    138c:	1f 90       	pop	r1
    138e:	18 95       	reti

00001390 <getTimeToChar>:

void getTimeToChar(char *s, int TemplateOption){
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	00 d0       	rcall	.+0      	; 0x139e <getTimeToChar+0xe>
    139e:	1f 92       	push	r1
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	8c 01       	movw	r16, r24
    13a6:	7b 01       	movw	r14, r22
	//pTime_min and pTime_ms are global variables.
	strcpy(s, ""); // empty string s
    13a8:	fc 01       	movw	r30, r24
    13aa:	10 82       	st	Z, r1
	char Buff[3] = {0, 0, 0};
    13ac:	19 82       	std	Y+1, r1	; 0x01
    13ae:	1a 82       	std	Y+2, r1	; 0x02
    13b0:	1b 82       	std	Y+3, r1	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    13b2:	4a e0       	ldi	r20, 0x0A	; 10
    13b4:	be 01       	movw	r22, r28
    13b6:	6f 5f       	subi	r22, 0xFF	; 255
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <_Time_min>
    13be:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <_Time_min+0x1>
    13c2:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
	
	itoa(_Time_min, Buff, 10);
	
	if(_Time_min < 10){
    13c6:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <_Time_min>
    13ca:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <_Time_min+0x1>
    13ce:	0a 97       	sbiw	r24, 0x0a	; 10
    13d0:	48 f4       	brcc	.+18     	; 0x13e4 <getTimeToChar+0x54>
		strcat(s, "0");
    13d2:	f8 01       	movw	r30, r16
    13d4:	01 90       	ld	r0, Z+
    13d6:	00 20       	and	r0, r0
    13d8:	e9 f7       	brne	.-6      	; 0x13d4 <getTimeToChar+0x44>
    13da:	31 97       	sbiw	r30, 0x01	; 1
    13dc:	80 e3       	ldi	r24, 0x30	; 48
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
	}
	strcat(s, Buff);
    13e4:	be 01       	movw	r22, r28
    13e6:	6f 5f       	subi	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	c8 01       	movw	r24, r16
    13ec:	0e 94 de 21 	call	0x43bc	; 0x43bc <strcat>
    13f0:	20 91 aa 07 	lds	r18, 0x07AA	; 0x8007aa <_Time_ms>
    13f4:	30 91 ab 07 	lds	r19, 0x07AB	; 0x8007ab <_Time_ms+0x1>
    13f8:	36 95       	lsr	r19
    13fa:	27 95       	ror	r18
    13fc:	36 95       	lsr	r19
    13fe:	27 95       	ror	r18
    1400:	36 95       	lsr	r19
    1402:	27 95       	ror	r18
    1404:	a5 ec       	ldi	r26, 0xC5	; 197
    1406:	b0 e2       	ldi	r27, 0x20	; 32
    1408:	0e 94 c8 21 	call	0x4390	; 0x4390 <__umulhisi3>
    140c:	4a e0       	ldi	r20, 0x0A	; 10
    140e:	be 01       	movw	r22, r28
    1410:	6f 5f       	subi	r22, 0xFF	; 255
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	92 95       	swap	r25
    1416:	82 95       	swap	r24
    1418:	8f 70       	andi	r24, 0x0F	; 15
    141a:	89 27       	eor	r24, r25
    141c:	9f 70       	andi	r25, 0x0F	; 15
    141e:	89 27       	eor	r24, r25
    1420:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
	
	itoa((_Time_ms/1000), Buff, 10);
	strcat(s, ":");
    1424:	f8 01       	movw	r30, r16
    1426:	01 90       	ld	r0, Z+
    1428:	00 20       	and	r0, r0
    142a:	e9 f7       	brne	.-6      	; 0x1426 <getTimeToChar+0x96>
    142c:	31 97       	sbiw	r30, 0x01	; 1
    142e:	8a e3       	ldi	r24, 0x3A	; 58
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
	
	switch (TemplateOption){
    1436:	ea 94       	dec	r14
    1438:	ef 28       	or	r14, r15
    143a:	b1 f4       	brne	.+44     	; 0x1468 <getTimeToChar+0xd8>
		//only have the minutes:> 00:
		break;
		
		case 1:
		//include minutes and seconds:> 00:00
		if(_Time_ms/1000 < 10){
    143c:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <_Time_ms>
    1440:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <_Time_ms+0x1>
    1444:	80 31       	cpi	r24, 0x10	; 16
    1446:	97 42       	sbci	r25, 0x27	; 39
    1448:	48 f4       	brcc	.+18     	; 0x145c <getTimeToChar+0xcc>
			strcat(s, "0");
    144a:	f8 01       	movw	r30, r16
    144c:	01 90       	ld	r0, Z+
    144e:	00 20       	and	r0, r0
    1450:	e9 f7       	brne	.-6      	; 0x144c <getTimeToChar+0xbc>
    1452:	31 97       	sbiw	r30, 0x01	; 1
    1454:	80 e3       	ldi	r24, 0x30	; 48
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
		}
		strcat(s, Buff);
    145c:	be 01       	movw	r22, r28
    145e:	6f 5f       	subi	r22, 0xFF	; 255
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	c8 01       	movw	r24, r16
    1464:	0e 94 de 21 	call	0x43bc	; 0x43bc <strcat>
		break;
	}
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	08 95       	ret

0000147c <ADCinit>:


//Battery_____________________________________________________________________________________________________________________________________________
void ADCinit(void){
	ADMUX |= (1<<REFS0) | (1<<MUX1);
    147c:	ec e7       	ldi	r30, 0x7C	; 124
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	82 64       	ori	r24, 0x42	; 66
    1484:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    1486:	ea e7       	ldi	r30, 0x7A	; 122
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	87 6e       	ori	r24, 0xE7	; 231
    148e:	80 83       	st	Z, r24
    1490:	08 95       	ret

00001492 <updateBatterySens>:
	
}

int updateBatterySens(){
	static int ADCval = 0;
	ADCval = ADC;
    1492:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1496:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	//mimicking a battery voltage by a pot meter.

	return ADCval;
}
    149a:	08 95       	ret

0000149c <choiceAdder>:
		u8g2_SendBuffer(&u8g2);
		reDrawRequiredTime = 0;
	}
}

void choiceAdder(int8_t addValue){ //change the selection in the menu
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
	currentChoice[currentPage] += addValue;
    14a0:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <currentPage>
    14a4:	02 2e       	mov	r0, r18
    14a6:	00 0c       	add	r0, r0
    14a8:	33 0b       	sbc	r19, r19
    14aa:	f9 01       	movw	r30, r18
    14ac:	ed 5e       	subi	r30, 0xED	; 237
    14ae:	f8 4f       	sbci	r31, 0xF8	; 248
    14b0:	90 81       	ld	r25, Z
    14b2:	98 0f       	add	r25, r24
    14b4:	90 83       	st	Z, r25
	
	if(selectEnable == 1){
    14b6:	40 91 bb 07 	lds	r20, 0x07BB	; 0x8007bb <selectEnable>
    14ba:	44 23       	and	r20, r20
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <choiceAdder+0x24>
    14be:	5a c0       	rjmp	.+180    	; 0x1574 <choiceAdder+0xd8>
		if (currentChoice[currentPage] > selections[currentPage]-1)
    14c0:	f9 01       	movw	r30, r18
    14c2:	e4 55       	subi	r30, 0x54	; 84
    14c4:	f8 4f       	sbci	r31, 0xF8	; 248
    14c6:	e0 81       	ld	r30, Z
    14c8:	4e 2f       	mov	r20, r30
    14ca:	0e 2e       	mov	r0, r30
    14cc:	00 0c       	add	r0, r0
    14ce:	55 0b       	sbc	r21, r21
    14d0:	41 50       	subi	r20, 0x01	; 1
    14d2:	51 09       	sbc	r21, r1
    14d4:	69 2f       	mov	r22, r25
    14d6:	09 2e       	mov	r0, r25
    14d8:	00 0c       	add	r0, r0
    14da:	77 0b       	sbc	r23, r23
    14dc:	46 17       	cp	r20, r22
    14de:	57 07       	cpc	r21, r23
    14e0:	4c f4       	brge	.+18     	; 0x14f4 <choiceAdder+0x58>
		{
			currentChoice[currentPage] = 0;
    14e2:	f9 01       	movw	r30, r18
    14e4:	ed 5e       	subi	r30, 0xED	; 237
    14e6:	f8 4f       	sbci	r31, 0xF8	; 248
    14e8:	10 82       	st	Z, r1
			Scroll[currentPage] = 0;
    14ea:	f9 01       	movw	r30, r18
    14ec:	e8 5d       	subi	r30, 0xD8	; 216
    14ee:	f8 4f       	sbci	r31, 0xF8	; 248
    14f0:	10 82       	st	Z, r1
    14f2:	11 c0       	rjmp	.+34     	; 0x1516 <choiceAdder+0x7a>
		}
		if (currentChoice[currentPage] < 0)
    14f4:	99 23       	and	r25, r25
    14f6:	7c f4       	brge	.+30     	; 0x1516 <choiceAdder+0x7a>
		{
			currentChoice[currentPage] = selections[currentPage]-1;
    14f8:	d9 01       	movw	r26, r18
    14fa:	ad 5e       	subi	r26, 0xED	; 237
    14fc:	b8 4f       	sbci	r27, 0xF8	; 248
    14fe:	9f ef       	ldi	r25, 0xFF	; 255
    1500:	9e 0f       	add	r25, r30
    1502:	9c 93       	st	X, r25
			Scroll[currentPage] = selectionsVis[currentPage] - selections[currentPage];
    1504:	d9 01       	movw	r26, r18
    1506:	a8 5d       	subi	r26, 0xD8	; 216
    1508:	b8 4f       	sbci	r27, 0xF8	; 248
    150a:	e9 01       	movw	r28, r18
    150c:	c6 56       	subi	r28, 0x66	; 102
    150e:	d8 4f       	sbci	r29, 0xF8	; 248
    1510:	98 81       	ld	r25, Y
    1512:	9e 1b       	sub	r25, r30
    1514:	9c 93       	st	X, r25
		}
		if(currentChoice[currentPage] >= selectionsVis[currentPage] - Scroll[currentPage]){
    1516:	f9 01       	movw	r30, r18
    1518:	ed 5e       	subi	r30, 0xED	; 237
    151a:	f8 4f       	sbci	r31, 0xF8	; 248
    151c:	60 81       	ld	r22, Z
    151e:	06 2e       	mov	r0, r22
    1520:	00 0c       	add	r0, r0
    1522:	77 0b       	sbc	r23, r23
    1524:	f9 01       	movw	r30, r18
    1526:	e8 5d       	subi	r30, 0xD8	; 216
    1528:	f8 4f       	sbci	r31, 0xF8	; 248
    152a:	90 81       	ld	r25, Z
    152c:	f9 01       	movw	r30, r18
    152e:	e6 56       	subi	r30, 0x66	; 102
    1530:	f8 4f       	sbci	r31, 0xF8	; 248
    1532:	40 81       	ld	r20, Z
    1534:	04 2e       	mov	r0, r20
    1536:	00 0c       	add	r0, r0
    1538:	55 0b       	sbc	r21, r21
    153a:	49 1b       	sub	r20, r25
    153c:	51 09       	sbc	r21, r1
    153e:	97 fd       	sbrc	r25, 7
    1540:	53 95       	inc	r21
    1542:	64 17       	cp	r22, r20
    1544:	75 07       	cpc	r23, r21
    1546:	2c f0       	brlt	.+10     	; 0x1552 <choiceAdder+0xb6>
			Scroll[currentPage] += -addValue;
    1548:	f9 01       	movw	r30, r18
    154a:	e8 5d       	subi	r30, 0xD8	; 216
    154c:	f8 4f       	sbci	r31, 0xF8	; 248
    154e:	98 1b       	sub	r25, r24
    1550:	90 83       	st	Z, r25
		}
		if (currentChoice[currentPage] < -Scroll[currentPage]){
    1552:	f9 01       	movw	r30, r18
    1554:	e8 5d       	subi	r30, 0xD8	; 216
    1556:	f8 4f       	sbci	r31, 0xF8	; 248
    1558:	90 81       	ld	r25, Z
    155a:	e9 2f       	mov	r30, r25
    155c:	ff 27       	eor	r31, r31
    155e:	e1 95       	neg	r30
    1560:	0c f4       	brge	.+2      	; 0x1564 <choiceAdder+0xc8>
    1562:	f0 95       	com	r31
    1564:	6e 17       	cp	r22, r30
    1566:	7f 07       	cpc	r23, r31
    1568:	2c f4       	brge	.+10     	; 0x1574 <choiceAdder+0xd8>
			Scroll[currentPage] += -addValue;
    156a:	f9 01       	movw	r30, r18
    156c:	e8 5d       	subi	r30, 0xD8	; 216
    156e:	f8 4f       	sbci	r31, 0xF8	; 248
    1570:	98 1b       	sub	r25, r24
    1572:	90 83       	st	Z, r25
		}
	}
}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <pageHistory>:
int8_t pageHistory(_Bool GetPrevpage, int pageNum){
	#define historyBuff 4
	static short history[historyBuff];//initialize first page in case you don't use the start up screen.
	static short i = -1;
	
	if (!GetPrevpage)
    157a:	81 11       	cpse	r24, r1
    157c:	15 c0       	rjmp	.+42     	; 0x15a8 <pageHistory+0x2e>
	{
		if (i < historyBuff-1){
    157e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9264>
    1582:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9264+0x1>
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	44 f5       	brge	.+80     	; 0x15dc <pageHistory+0x62>
			history[++i] = pageNum;
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9264+0x1>
    1592:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9264>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	fc 01       	movw	r30, r24
    159c:	ed 51       	subi	r30, 0x1D	; 29
    159e:	fd 4f       	sbci	r31, 0xFD	; 253
    15a0:	71 83       	std	Z+1, r23	; 0x01
    15a2:	60 83       	st	Z, r22
		}
		return -1;
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	08 95       	ret
		}else{
		
		if (i <= 0)
    15a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.9264>
    15ac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.9264+0x1>
    15b0:	18 16       	cp	r1, r24
    15b2:	19 06       	cpc	r1, r25
    15b4:	3c f0       	brlt	.+14     	; 0x15c4 <pageHistory+0x4a>
		{
			return history[i];
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	fc 01       	movw	r30, r24
    15bc:	ed 51       	subi	r30, 0x1D	; 29
    15be:	fd 4f       	sbci	r31, 0xFD	; 253
    15c0:	80 81       	ld	r24, Z
    15c2:	08 95       	ret
			}else{
			return history[--i];
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.9264+0x1>
    15ca:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.9264>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	fc 01       	movw	r30, r24
    15d4:	ed 51       	subi	r30, 0x1D	; 29
    15d6:	fd 4f       	sbci	r31, 0xFD	; 253
    15d8:	80 81       	ld	r24, Z
    15da:	08 95       	ret
	if (!GetPrevpage)
	{
		if (i < historyBuff-1){
			history[++i] = pageNum;
		}
		return -1;
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
			return history[i];
			}else{
			return history[--i];
		}
	}
}
    15de:	08 95       	ret

000015e0 <pageSel>:
}

void pageSel(void){
	//code for managing the pageNumbers
	#define firstPage 2
	if (selectEnable){
    15e0:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <selectEnable>
    15e4:	88 23       	and	r24, r24
    15e6:	f9 f0       	breq	.+62     	; 0x1626 <pageSel+0x46>
		if (currentPage == MENUPAGE){
    15e8:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <currentPage>
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	31 f4       	brne	.+12     	; 0x15fc <pageSel+0x1c>
			currentPage = currentChoice[MENUPAGE] + firstPage; //increment with two because the menu choice pages start at 2
    15f0:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <currentChoice+0x1>
    15f4:	8e 5f       	subi	r24, 0xFE	; 254
    15f6:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <currentPage>
    15fa:	0d c0       	rjmp	.+26     	; 0x1616 <pageSel+0x36>
			}else if(currentPage == 0){
    15fc:	81 11       	cpse	r24, r1
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <pageSel+0x28>
			currentPage = MENUPAGE;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <currentPage>
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <pageSel+0x36>
			}else{
			if(currentPage == 5){
    1608:	85 30       	cpi	r24, 0x05	; 5
    160a:	29 f4       	brne	.+10     	; 0x1616 <pageSel+0x36>
				currentPage = currentChoice[5]+ 1 + 5;
    160c:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <currentChoice+0x5>
    1610:	8a 5f       	subi	r24, 0xFA	; 250
    1612:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <currentPage>
			}
			
		}
		pageHistory(0, currentPage);//update page history
    1616:	60 91 f1 02 	lds	r22, 0x02F1	; 0x8002f1 <currentPage>
    161a:	06 2e       	mov	r0, r22
    161c:	00 0c       	add	r0, r0
    161e:	77 0b       	sbc	r23, r23
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0e 94 bd 0a 	call	0x157a	; 0x157a <pageHistory>
    1626:	08 95       	ret

00001628 <__vector_3>:
}
//Buttons_____________________________________________________________________________________________________________________________________________

//the routine that gets run when the pin change interrupt gets triggered on portD for the enabled pins
ISR (BUTTON_PC_VECT)
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	8f 93       	push	r24
    1634:	9f 93       	push	r25

	if ( (BUTTON_PIN & (1<<DOWN)) == 0 )
    1636:	18 99       	sbic	0x03, 0	; 3
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <__vector_3+0x1c>
	keyPressed = DOWN;
    163a:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <keyPressed+0x1>
    163e:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <keyPressed>
    1642:	1a c0       	rjmp	.+52     	; 0x1678 <__vector_3+0x50>
	else
	if ( (BUTTON_PIN & (1<<UP)) == 0 )
    1644:	19 99       	sbic	0x03, 1	; 3
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <__vector_3+0x2e>
	keyPressed = UP;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    1650:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>
    1654:	11 c0       	rjmp	.+34     	; 0x1678 <__vector_3+0x50>
	else
	if ( (BUTTON_PIN & (1<<BACK)) == 0 )
    1656:	1a 99       	sbic	0x03, 2	; 3
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <__vector_3+0x40>
	keyPressed = BACK;
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    1662:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <__vector_3+0x50>
	else
	if ( (BUTTON_PIN & (1<<SELECT)) == 0 )
    1668:	1b 99       	sbic	0x03, 3	; 3
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <__vector_3+0x50>
	keyPressed = SELECT;
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    1674:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>

}
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <but_init>:

void but_init(void){
	BUTTON_REG &= ~((1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK));     
    1686:	84 b1       	in	r24, 0x04	; 4
    1688:	80 7f       	andi	r24, 0xF0	; 240
    168a:	84 b9       	out	0x04, r24	; 4
	// is now an input
	BUTTON_PORT |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);    // turn On the Pull-up on all those pins
    168c:	85 b1       	in	r24, 0x05	; 5
    168e:	8f 60       	ori	r24, 0x0F	; 15
    1690:	85 b9       	out	0x05, r24	; 5
	// is now an input with pull-up enabled

	if (BUTTON_PORT == PORTB){
    1692:	95 b1       	in	r25, 0x05	; 5
    1694:	85 b1       	in	r24, 0x05	; 5
    1696:	98 13       	cpse	r25, r24
    1698:	0b c0       	rjmp	.+22     	; 0x16b0 <but_init+0x2a>
		//interrupt setup
		PCICR |= (1<<PCIE0);
    169a:	e8 e6       	ldi	r30, 0x68	; 104
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	81 60       	ori	r24, 0x01	; 1
    16a2:	80 83       	st	Z, r24
		PCMSK0 |= (1 << PCINT0)|(1 << PCINT1)|(1 << PCINT3)|(1 << PCINT2);//enable the pin change interrupts on pinD 4,5,6,7
    16a4:	eb e6       	ldi	r30, 0x6B	; 107
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 60       	ori	r24, 0x0F	; 15
    16ac:	80 83       	st	Z, r24
    16ae:	1d c0       	rjmp	.+58     	; 0x16ea <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTC){
    16b0:	95 b1       	in	r25, 0x05	; 5
    16b2:	88 b1       	in	r24, 0x08	; 8
    16b4:	98 13       	cpse	r25, r24
    16b6:	0b c0       	rjmp	.+22     	; 0x16ce <but_init+0x48>
		//interrupt setup
		PCICR |= (1<<PCIE1);
    16b8:	e8 e6       	ldi	r30, 0x68	; 104
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	82 60       	ori	r24, 0x02	; 2
    16c0:	80 83       	st	Z, r24
		PCMSK1 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    16c2:	ec e6       	ldi	r30, 0x6C	; 108
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 60       	ori	r24, 0x0F	; 15
    16ca:	80 83       	st	Z, r24
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTD){
    16ce:	95 b1       	in	r25, 0x05	; 5
    16d0:	8b b1       	in	r24, 0x0b	; 11
    16d2:	98 13       	cpse	r25, r24
    16d4:	0a c0       	rjmp	.+20     	; 0x16ea <but_init+0x64>
		//interrupt setup
		PCICR |= (1<<PCIE2);
    16d6:	e8 e6       	ldi	r30, 0x68	; 104
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	84 60       	ori	r24, 0x04	; 4
    16de:	80 83       	st	Z, r24
		PCMSK2 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    16e0:	ed e6       	ldi	r30, 0x6D	; 109
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8f 60       	ori	r24, 0x0F	; 15
    16e8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16ea:	2f ef       	ldi	r18, 0xFF	; 255
    16ec:	83 ec       	ldi	r24, 0xC3	; 195
    16ee:	99 e0       	ldi	r25, 0x09	; 9
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	80 40       	sbci	r24, 0x00	; 0
    16f4:	90 40       	sbci	r25, 0x00	; 0
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <but_init+0x6a>
    16f8:	00 c0       	rjmp	.+0      	; 0x16fa <but_init+0x74>
    16fa:	00 00       	nop
    16fc:	08 95       	ret

000016fe <updateButtons>:
	_delay_ms(200);//to prevent accidental interrupt triggering/ dirty fix
}

void updateButtons(void){
	
	switch (keyPressed)
    16fe:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <keyPressed>
    1702:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <keyPressed+0x1>
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	91 05       	cpc	r25, r1
    170a:	39 f1       	breq	.+78     	; 0x175a <updateButtons+0x5c>
    170c:	1c f4       	brge	.+6      	; 0x1714 <updateButtons+0x16>
    170e:	89 2b       	or	r24, r25
    1710:	89 f1       	breq	.+98     	; 0x1774 <updateButtons+0x76>
    1712:	3d c0       	rjmp	.+122    	; 0x178e <updateButtons+0x90>
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	91 05       	cpc	r25, r1
    1718:	19 f0       	breq	.+6      	; 0x1720 <updateButtons+0x22>
    171a:	03 97       	sbiw	r24, 0x03	; 3
    171c:	91 f0       	breq	.+36     	; 0x1742 <updateButtons+0x44>
    171e:	37 c0       	rjmp	.+110    	; 0x178e <updateButtons+0x90>
	{
		case BACK:
		currentPage = pageHistory(1, 0);
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	0e 94 bd 0a 	call	0x157a	; 0x157a <pageHistory>
    172a:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <currentPage>
		reDrawRequired = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = -1;//reset key pressed
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	9f ef       	ldi	r25, 0xFF	; 255
    1738:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    173c:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>
		break;
    1740:	08 95       	ret
		
		case SELECT:
		pageSel();
    1742:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <pageSel>
		reDrawRequired = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = -1;
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    1754:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>
		break;
    1758:	08 95       	ret
		
		case UP:
		choiceAdder(-1);
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	0e 94 4e 0a 	call	0x149c	; 0x149c <choiceAdder>
		reDrawRequired = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = -1;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    176e:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>
		break;
    1772:	08 95       	ret
		
		case DOWN:
		choiceAdder(+1);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	0e 94 4e 0a 	call	0x149c	; 0x149c <choiceAdder>
		reDrawRequired = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		keyPressed = -1;
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	9f ef       	ldi	r25, 0xFF	; 255
    1784:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    1788:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>
		break;
    178c:	08 95       	ret
		default:
		keyPressed = -1;
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	9f ef       	ldi	r25, 0xFF	; 255
    1792:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <keyPressed+0x1>
    1796:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <keyPressed>
    179a:	08 95       	ret

0000179c <MenuStyle0>:
}


//pages_______________________________________________________________________________________________________________________________________________

void MenuStyle0(void){
    179c:	2f 92       	push	r2
    179e:	3f 92       	push	r3
    17a0:	4f 92       	push	r4
    17a2:	5f 92       	push	r5
    17a4:	6f 92       	push	r6
    17a6:	7f 92       	push	r7
    17a8:	8f 92       	push	r8
    17aa:	9f 92       	push	r9
    17ac:	af 92       	push	r10
    17ae:	bf 92       	push	r11
    17b0:	cf 92       	push	r12
    17b2:	df 92       	push	r13
    17b4:	ef 92       	push	r14
    17b6:	0f 93       	push	r16
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	00 d0       	rcall	.+0      	; 0x17be <MenuStyle0+0x22>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <MenuStyle0+0x24>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	//int yStat = (y+(height/2)+3);
	selectEnable = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <selectEnable>
    17ca:	0f 2e       	mov	r0, r31
    17cc:	f5 e2       	ldi	r31, 0x25	; 37
    17ce:	cf 2e       	mov	r12, r31
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	df 2e       	mov	r13, r31
    17d4:	f0 2d       	mov	r31, r0
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    17d6:	1c 82       	std	Y+4, r1	; 0x04
    17d8:	1b 82       	std	Y+3, r1	; 0x03
		if(i == currentChoice[currentPage]){
    17da:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <currentPage>
    17de:	0e 2e       	mov	r0, r30
    17e0:	00 0c       	add	r0, r0
    17e2:	ff 0b       	sbc	r31, r31
    17e4:	ed 5e       	subi	r30, 0xED	; 237
    17e6:	f8 4f       	sbci	r31, 0xF8	; 248
    17e8:	80 81       	ld	r24, Z
    17ea:	08 2e       	mov	r0, r24
    17ec:	00 0c       	add	r0, r0
    17ee:	99 0b       	sbc	r25, r25
    17f0:	2b 81       	ldd	r18, Y+3	; 0x03
    17f2:	3c 81       	ldd	r19, Y+4	; 0x04
    17f4:	82 17       	cp	r24, r18
    17f6:	93 07       	cpc	r25, r19
    17f8:	09 f0       	breq	.+2      	; 0x17fc <MenuStyle0+0x60>
    17fa:	9d c0       	rjmp	.+314    	; 0x1936 <MenuStyle0+0x19a>
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
			height = screenDiv - Margin;
    17fc:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1800:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1804:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1808:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			
			x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    180c:	b9 01       	movw	r22, r18
    180e:	33 0f       	add	r19, r19
    1810:	88 0b       	sbc	r24, r24
    1812:	99 0b       	sbc	r25, r25
    1814:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1818:	a3 01       	movw	r20, r6
    181a:	92 01       	movw	r18, r4
    181c:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e1       	ldi	r20, 0x10	; 16
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    182c:	4b 01       	movw	r8, r22
    182e:	5c 01       	movw	r10, r24
    1830:	60 91 29 07 	lds	r22, 0x0729	; 0x800729 <Scroll+0x1>
    1834:	06 2e       	mov	r0, r22
    1836:	00 0c       	add	r0, r0
    1838:	77 0b       	sbc	r23, r23
    183a:	88 0b       	sbc	r24, r24
    183c:	99 0b       	sbc	r25, r25
    183e:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1842:	a3 01       	movw	r20, r6
    1844:	92 01       	movw	r18, r4
    1846:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    184a:	9b 01       	movw	r18, r22
    184c:	ac 01       	movw	r20, r24
    184e:	c5 01       	movw	r24, r10
    1850:	b4 01       	movw	r22, r8
    1852:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1856:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    185a:	4b 01       	movw	r8, r22
    185c:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    185e:	69 30       	cpi	r22, 0x09	; 9
    1860:	71 05       	cpc	r23, r1
    1862:	0c f4       	brge	.+2      	; 0x1866 <MenuStyle0+0xca>
    1864:	d6 c0       	rjmp	.+428    	; 0x1a12 <MenuStyle0+0x276>
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
		if(i == currentChoice[currentPage]){
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
    1866:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <currentFrame>
    186a:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <currentFrame+0x1>
    186e:	2f 5f       	subi	r18, 0xFF	; 255
    1870:	3f 4f       	sbci	r19, 0xFF	; 255
    1872:	00 24       	eor	r0, r0
    1874:	36 95       	lsr	r19
    1876:	27 95       	ror	r18
    1878:	07 94       	ror	r0
    187a:	36 95       	lsr	r19
    187c:	27 95       	ror	r18
    187e:	07 94       	ror	r0
    1880:	32 2f       	mov	r19, r18
    1882:	20 2d       	mov	r18, r0
    1884:	ab ea       	ldi	r26, 0xAB	; 171
    1886:	ba ea       	ldi	r27, 0xAA	; 170
    1888:	0e 94 c8 21 	call	0x4390	; 0x4390 <__umulhisi3>
    188c:	96 95       	lsr	r25
    188e:	87 95       	ror	r24
    1890:	1c 01       	movw	r2, r24
    1892:	ef e3       	ldi	r30, 0x3F	; 63
    1894:	2e 0e       	add	r2, r30
    1896:	31 1c       	adc	r3, r1
			height = screenDiv - Margin;
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	50 e4       	ldi	r21, 0x40	; 64
    18a0:	c3 01       	movw	r24, r6
    18a2:	b2 01       	movw	r22, r4
    18a4:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <__subsf3>
    18a8:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    18ac:	56 2e       	mov	r5, r22
    18ae:	47 2e       	mov	r4, r23
			
			x = (screenWidth/2) - width / 2;
    18b0:	31 01       	movw	r6, r2
    18b2:	33 20       	and	r3, r3
    18b4:	1c f4       	brge	.+6      	; 0x18bc <MenuStyle0+0x120>
    18b6:	ff ef       	ldi	r31, 0xFF	; 255
    18b8:	6f 1a       	sub	r6, r31
    18ba:	7f 0a       	sbc	r7, r31
    18bc:	75 94       	asr	r7
    18be:	67 94       	ror	r6
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	84 e3       	ldi	r24, 0x34	; 52
    18c4:	97 e0       	ldi	r25, 0x07	; 7
    18c6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    18ca:	20 e4       	ldi	r18, 0x40	; 64
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	26 19       	sub	r18, r6
    18d0:	37 09       	sbc	r19, r7
    18d2:	3a 83       	std	Y+2, r19	; 0x02
    18d4:	29 83       	std	Y+1, r18	; 0x01
    18d6:	0f 2e       	mov	r0, r31
    18d8:	f3 e0       	ldi	r31, 0x03	; 3
    18da:	ef 2e       	mov	r14, r31
    18dc:	f0 2d       	mov	r31, r0
    18de:	05 2d       	mov	r16, r5
    18e0:	22 2d       	mov	r18, r2
    18e2:	48 2d       	mov	r20, r8
    18e4:	69 81       	ldd	r22, Y+1	; 0x01
    18e6:	84 e3       	ldi	r24, 0x34	; 52
    18e8:	97 e0       	ldi	r25, 0x07	; 7
    18ea:	0e 94 22 13 	call	0x2644	; 0x2644 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	84 e3       	ldi	r24, 0x34	; 52
    18f2:	97 e0       	ldi	r25, 0x07	; 7
    18f4:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2 , y+(height/2)+3, menuStrings[i]);
    18f8:	45 2d       	mov	r20, r5
    18fa:	54 2d       	mov	r21, r4
    18fc:	55 23       	and	r21, r21
    18fe:	14 f4       	brge	.+4      	; 0x1904 <MenuStyle0+0x168>
    1900:	4f 5f       	subi	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255
    1904:	55 95       	asr	r21
    1906:	47 95       	ror	r20
    1908:	4d 5f       	subi	r20, 0xFD	; 253
    190a:	74 2e       	mov	r7, r20
    190c:	78 0c       	add	r7, r8
    190e:	39 81       	ldd	r19, Y+1	; 0x01
    1910:	63 0e       	add	r6, r19
    1912:	f6 01       	movw	r30, r12
    1914:	40 80       	ld	r4, Z
    1916:	51 80       	ldd	r5, Z+1	; 0x01
    1918:	b2 01       	movw	r22, r4
    191a:	84 e3       	ldi	r24, 0x34	; 52
    191c:	97 e0       	ldi	r25, 0x07	; 7
    191e:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1922:	86 95       	lsr	r24
    1924:	66 2d       	mov	r22, r6
    1926:	68 1b       	sub	r22, r24
    1928:	92 01       	movw	r18, r4
    192a:	47 2d       	mov	r20, r7
    192c:	84 e3       	ldi	r24, 0x34	; 52
    192e:	97 e0       	ldi	r25, 0x07	; 7
    1930:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
    1934:	6e c0       	rjmp	.+220    	; 0x1a12 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    1936:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    193a:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    193e:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1942:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1946:	2b 81       	ldd	r18, Y+3	; 0x03
    1948:	3c 81       	ldd	r19, Y+4	; 0x04
    194a:	b9 01       	movw	r22, r18
    194c:	33 0f       	add	r19, r19
    194e:	88 0b       	sbc	r24, r24
    1950:	99 0b       	sbc	r25, r25
    1952:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1956:	a3 01       	movw	r20, r6
    1958:	92 01       	movw	r18, r4
    195a:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e1       	ldi	r20, 0x10	; 16
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    196a:	4b 01       	movw	r8, r22
    196c:	5c 01       	movw	r10, r24
    196e:	60 91 29 07 	lds	r22, 0x0729	; 0x800729 <Scroll+0x1>
    1972:	06 2e       	mov	r0, r22
    1974:	00 0c       	add	r0, r0
    1976:	77 0b       	sbc	r23, r23
    1978:	88 0b       	sbc	r24, r24
    197a:	99 0b       	sbc	r25, r25
    197c:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1980:	a3 01       	movw	r20, r6
    1982:	92 01       	movw	r18, r4
    1984:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	c5 01       	movw	r24, r10
    198e:	b4 01       	movw	r22, r8
    1990:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1994:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    1998:	4b 01       	movw	r8, r22
    199a:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    199c:	69 30       	cpi	r22, 0x09	; 9
    199e:	71 05       	cpc	r23, r1
    19a0:	c4 f1       	brlt	.+112    	; 0x1a12 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e4       	ldi	r21, 0x40	; 64
    19aa:	c3 01       	movw	r24, r6
    19ac:	b2 01       	movw	r22, r4
    19ae:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <__subsf3>
    19b2:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    19b6:	76 2e       	mov	r7, r22
    19b8:	67 2e       	mov	r6, r23
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				//u8g2_SetDefaultForegroundColor(&u8g2);
				u8g2_SetDrawColor(&u8g2, 1);
    19ba:	61 e0       	ldi	r22, 0x01	; 1
    19bc:	84 e3       	ldi	r24, 0x34	; 52
    19be:	97 e0       	ldi	r25, 0x07	; 7
    19c0:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    19c4:	0f 2e       	mov	r0, r31
    19c6:	f3 e0       	ldi	r31, 0x03	; 3
    19c8:	ef 2e       	mov	r14, r31
    19ca:	f0 2d       	mov	r31, r0
    19cc:	07 2d       	mov	r16, r7
    19ce:	20 e4       	ldi	r18, 0x40	; 64
    19d0:	48 2d       	mov	r20, r8
    19d2:	60 e2       	ldi	r22, 0x20	; 32
    19d4:	84 e3       	ldi	r24, 0x34	; 52
    19d6:	97 e0       	ldi	r25, 0x07	; 7
    19d8:	0e 94 96 13 	call	0x272c	; 0x272c <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+(height/2)+3, menuStrings[i]);
    19dc:	87 2d       	mov	r24, r7
    19de:	96 2d       	mov	r25, r6
    19e0:	99 23       	and	r25, r25
    19e2:	0c f4       	brge	.+2      	; 0x19e6 <MenuStyle0+0x24a>
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	95 95       	asr	r25
    19e8:	87 95       	ror	r24
    19ea:	8d 5f       	subi	r24, 0xFD	; 253
    19ec:	78 2e       	mov	r7, r24
    19ee:	78 0c       	add	r7, r8
    19f0:	f6 01       	movw	r30, r12
    19f2:	40 80       	ld	r4, Z
    19f4:	51 80       	ldd	r5, Z+1	; 0x01
    19f6:	b2 01       	movw	r22, r4
    19f8:	84 e3       	ldi	r24, 0x34	; 52
    19fa:	97 e0       	ldi	r25, 0x07	; 7
    19fc:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1a00:	86 95       	lsr	r24
    1a02:	60 e4       	ldi	r22, 0x40	; 64
    1a04:	68 1b       	sub	r22, r24
    1a06:	92 01       	movw	r18, r4
    1a08:	47 2d       	mov	r20, r7
    1a0a:	84 e3       	ldi	r24, 0x34	; 52
    1a0c:	97 e0       	ldi	r25, 0x07	; 7
    1a0e:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1a12:	2b 81       	ldd	r18, Y+3	; 0x03
    1a14:	3c 81       	ldd	r19, Y+4	; 0x04
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	3c 83       	std	Y+4, r19	; 0x04
    1a1c:	2b 83       	std	Y+3, r18	; 0x03
    1a1e:	32 e0       	ldi	r19, 0x02	; 2
    1a20:	c3 0e       	add	r12, r19
    1a22:	d1 1c       	adc	r13, r1
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	05 97       	sbiw	r24, 0x05	; 5
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <MenuStyle0+0x292>
    1a2c:	d6 ce       	rjmp	.-596    	; 0x17da <MenuStyle0+0x3e>
			}
		}
	}
	
	//stop drawing when the animation is done
	if (currentFrame++ >= framesNum)
    1a2e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <currentFrame>
    1a32:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <currentFrame+0x1>
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	91 05       	cpc	r25, r1
    1a3a:	30 f4       	brcc	.+12     	; 0x1a48 <MenuStyle0+0x2ac>
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <currentFrame+0x1>
    1a42:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <currentFrame>
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <MenuStyle0+0x2b8>
	{
		currentFrame = 0;
    1a48:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <currentFrame+0x1>
    1a4c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <currentFrame>
		reDrawRequired = 0;
    1a50:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
	}
	

}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	0f 91       	pop	r16
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	7f 90       	pop	r7
    1a72:	6f 90       	pop	r6
    1a74:	5f 90       	pop	r5
    1a76:	4f 90       	pop	r4
    1a78:	3f 90       	pop	r3
    1a7a:	2f 90       	pop	r2
    1a7c:	08 95       	ret

00001a7e <MenuStyle1>:

void MenuStyle1(void){
    1a7e:	2f 92       	push	r2
    1a80:	3f 92       	push	r3
    1a82:	4f 92       	push	r4
    1a84:	5f 92       	push	r5
    1a86:	6f 92       	push	r6
    1a88:	7f 92       	push	r7
    1a8a:	8f 92       	push	r8
    1a8c:	9f 92       	push	r9
    1a8e:	af 92       	push	r10
    1a90:	bf 92       	push	r11
    1a92:	cf 92       	push	r12
    1a94:	df 92       	push	r13
    1a96:	ef 92       	push	r14
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <MenuStyle1+0x24>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <MenuStyle1+0x26>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <MenuStyle1+0x28>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <selectEnable>
	int width = screenWidth;
	int height = screenDiv;
    1ab0:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    1ab4:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    1ab8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    1abc:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    1ac0:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
	
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
    1ac4:	4b 01       	movw	r8, r22
    1ac6:	77 23       	and	r23, r23
    1ac8:	1c f4       	brge	.+6      	; 0x1ad0 <MenuStyle1+0x52>
    1aca:	2f ef       	ldi	r18, 0xFF	; 255
    1acc:	82 1a       	sub	r8, r18
    1ace:	92 0a       	sbc	r9, r18
    1ad0:	95 94       	asr	r9
    1ad2:	87 94       	ror	r8
    1ad4:	33 e0       	ldi	r19, 0x03	; 3
    1ad6:	83 0e       	add	r8, r19
    1ad8:	91 1c       	adc	r9, r1
	height = height - Margin;
    1ada:	1b 01       	movw	r2, r22
    1adc:	e2 e0       	ldi	r30, 0x02	; 2
    1ade:	2e 1a       	sub	r2, r30
    1ae0:	31 08       	sbc	r3, r1
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	f5 e2       	ldi	r31, 0x25	; 37
    1ae6:	cf 2e       	mov	r12, r31
    1ae8:	f1 e0       	ldi	r31, 0x01	; 1
    1aea:	df 2e       	mov	r13, r31
    1aec:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1aee:	1e 82       	std	Y+6, r1	; 0x06
    1af0:	1d 82       	std	Y+5, r1	; 0x05
				u8g2_SetDrawColor(&u8g2, 0);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1af2:	0f 2e       	mov	r0, r31
    1af4:	f8 e2       	ldi	r31, 0x28	; 40
    1af6:	af 2e       	mov	r10, r31
    1af8:	f7 e0       	ldi	r31, 0x07	; 7
    1afa:	bf 2e       	mov	r11, r31
    1afc:	f0 2d       	mov	r31, r0
			}*/
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1afe:	10 e4       	ldi	r17, 0x40	; 64
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
		if(currentChoice[currentPage] == i){
    1b00:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <currentPage>
    1b04:	0e 2e       	mov	r0, r30
    1b06:	00 0c       	add	r0, r0
    1b08:	ff 0b       	sbc	r31, r31
    1b0a:	ed 5e       	subi	r30, 0xED	; 237
    1b0c:	f8 4f       	sbci	r31, 0xF8	; 248
    1b0e:	80 81       	ld	r24, Z
    1b10:	08 2e       	mov	r0, r24
    1b12:	00 0c       	add	r0, r0
    1b14:	99 0b       	sbc	r25, r25
    1b16:	2d 81       	ldd	r18, Y+5	; 0x05
    1b18:	3e 81       	ldd	r19, Y+6	; 0x06
    1b1a:	82 17       	cp	r24, r18
    1b1c:	93 07       	cpc	r25, r19
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <MenuStyle1+0xa4>
    1b20:	62 c0       	rjmp	.+196    	; 0x1be6 <MenuStyle1+0x168>
			//x and the y of the boxes
			//width = screenWidth;
			//height = screenDiv - Margin;
			
			// 				x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1b22:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1b26:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1b2a:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1b2e:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    1b32:	b9 01       	movw	r22, r18
    1b34:	33 0f       	add	r19, r19
    1b36:	88 0b       	sbc	r24, r24
    1b38:	99 0b       	sbc	r25, r25
    1b3a:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1b3e:	a3 01       	movw	r20, r6
    1b40:	92 01       	movw	r18, r4
    1b42:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e1       	ldi	r20, 0x10	; 16
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1b52:	69 83       	std	Y+1, r22	; 0x01
    1b54:	7a 83       	std	Y+2, r23	; 0x02
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	f5 01       	movw	r30, r10
    1b5c:	61 81       	ldd	r22, Z+1	; 0x01
    1b5e:	06 2e       	mov	r0, r22
    1b60:	00 0c       	add	r0, r0
    1b62:	77 0b       	sbc	r23, r23
    1b64:	88 0b       	sbc	r24, r24
    1b66:	99 0b       	sbc	r25, r25
    1b68:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1b6c:	a3 01       	movw	r20, r6
    1b6e:	92 01       	movw	r18, r4
    1b70:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	69 81       	ldd	r22, Y+1	; 0x01
    1b7a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1b84:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    1b88:	2b 01       	movw	r4, r22
    1b8a:	3c 01       	movw	r6, r24
			/*	if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			
			if (y >= TopMargin)
    1b8c:	69 30       	cpi	r22, 0x09	; 9
    1b8e:	71 05       	cpc	r23, r1
    1b90:	0c f4       	brge	.+2      	; 0x1b94 <MenuStyle1+0x116>
    1b92:	86 c0       	rjmp	.+268    	; 0x1ca0 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	84 e3       	ldi	r24, 0x34	; 52
    1b98:	97 e0       	ldi	r25, 0x07	; 7
    1b9a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    1b9e:	0f 2e       	mov	r0, r31
    1ba0:	f3 e0       	ldi	r31, 0x03	; 3
    1ba2:	ef 2e       	mov	r14, r31
    1ba4:	f0 2d       	mov	r31, r0
    1ba6:	02 2d       	mov	r16, r2
    1ba8:	20 e8       	ldi	r18, 0x80	; 128
    1baa:	44 2d       	mov	r20, r4
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	84 e3       	ldi	r24, 0x34	; 52
    1bb0:	97 e0       	ldi	r25, 0x07	; 7
    1bb2:	0e 94 22 13 	call	0x2644	; 0x2644 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	84 e3       	ldi	r24, 0x34	; 52
    1bba:	97 e0       	ldi	r25, 0x07	; 7
    1bbc:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1bc0:	48 0c       	add	r4, r8
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	60 80       	ld	r6, Z
    1bc6:	71 80       	ldd	r7, Z+1	; 0x01
    1bc8:	b3 01       	movw	r22, r6
    1bca:	84 e3       	ldi	r24, 0x34	; 52
    1bcc:	97 e0       	ldi	r25, 0x07	; 7
    1bce:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1bd2:	86 95       	lsr	r24
    1bd4:	61 2f       	mov	r22, r17
    1bd6:	68 1b       	sub	r22, r24
    1bd8:	93 01       	movw	r18, r6
    1bda:	44 2d       	mov	r20, r4
    1bdc:	84 e3       	ldi	r24, 0x34	; 52
    1bde:	97 e0       	ldi	r25, 0x07	; 7
    1be0:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
    1be4:	5d c0       	rjmp	.+186    	; 0x1ca0 <MenuStyle1+0x222>
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    1be6:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <screenDiv>
    1bea:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <screenDiv+0x1>
    1bee:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <screenDiv+0x2>
    1bf2:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <screenDiv+0x3>
    1bf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bfa:	b9 01       	movw	r22, r18
    1bfc:	33 0f       	add	r19, r19
    1bfe:	88 0b       	sbc	r24, r24
    1c00:	99 0b       	sbc	r25, r25
    1c02:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1c06:	a3 01       	movw	r20, r6
    1c08:	92 01       	movw	r18, r4
    1c0a:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e1       	ldi	r20, 0x10	; 16
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1c1a:	69 83       	std	Y+1, r22	; 0x01
    1c1c:	7a 83       	std	Y+2, r23	; 0x02
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	f5 01       	movw	r30, r10
    1c24:	61 81       	ldd	r22, Z+1	; 0x01
    1c26:	06 2e       	mov	r0, r22
    1c28:	00 0c       	add	r0, r0
    1c2a:	77 0b       	sbc	r23, r23
    1c2c:	88 0b       	sbc	r24, r24
    1c2e:	99 0b       	sbc	r25, r25
    1c30:	0e 94 ad 20 	call	0x415a	; 0x415a <__floatsisf>
    1c34:	a3 01       	movw	r20, r6
    1c36:	92 01       	movw	r18, r4
    1c38:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	ac 01       	movw	r20, r24
    1c40:	69 81       	ldd	r22, Y+1	; 0x01
    1c42:	7a 81       	ldd	r23, Y+2	; 0x02
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__addsf3>
    1c4c:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    1c50:	2b 01       	movw	r4, r22
    1c52:	3c 01       	movw	r6, r24
			/*
			if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			if (y >= TopMargin)
    1c54:	69 30       	cpi	r22, 0x09	; 9
    1c56:	71 05       	cpc	r23, r1
    1c58:	1c f1       	brlt	.+70     	; 0x1ca0 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	84 e3       	ldi	r24, 0x34	; 52
    1c5e:	97 e0       	ldi	r25, 0x07	; 7
    1c60:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    1c64:	0f 2e       	mov	r0, r31
    1c66:	f3 e0       	ldi	r31, 0x03	; 3
    1c68:	ef 2e       	mov	r14, r31
    1c6a:	f0 2d       	mov	r31, r0
    1c6c:	02 2d       	mov	r16, r2
    1c6e:	20 e8       	ldi	r18, 0x80	; 128
    1c70:	44 2d       	mov	r20, r4
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	84 e3       	ldi	r24, 0x34	; 52
    1c76:	97 e0       	ldi	r25, 0x07	; 7
    1c78:	0e 94 96 13 	call	0x272c	; 0x272c <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    1c7c:	48 0c       	add	r4, r8
    1c7e:	f6 01       	movw	r30, r12
    1c80:	60 80       	ld	r6, Z
    1c82:	71 80       	ldd	r7, Z+1	; 0x01
    1c84:	b3 01       	movw	r22, r6
    1c86:	84 e3       	ldi	r24, 0x34	; 52
    1c88:	97 e0       	ldi	r25, 0x07	; 7
    1c8a:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1c8e:	86 95       	lsr	r24
    1c90:	61 2f       	mov	r22, r17
    1c92:	68 1b       	sub	r22, r24
    1c94:	93 01       	movw	r18, r6
    1c96:	44 2d       	mov	r20, r4
    1c98:	84 e3       	ldi	r24, 0x34	; 52
    1c9a:	97 e0       	ldi	r25, 0x07	; 7
    1c9c:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    1ca0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca4:	2f 5f       	subi	r18, 0xFF	; 255
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	3e 83       	std	Y+6, r19	; 0x06
    1caa:	2d 83       	std	Y+5, r18	; 0x05
    1cac:	32 e0       	ldi	r19, 0x02	; 2
    1cae:	c3 0e       	add	r12, r19
    1cb0:	d1 1c       	adc	r13, r1
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	05 97       	sbiw	r24, 0x05	; 5
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <MenuStyle1+0x23e>
    1cba:	22 cf       	rjmp	.-444    	; 0x1b00 <MenuStyle1+0x82>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
		}
	}
	reDrawRequired = 0;
    1cbc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    1cc0:	26 96       	adiw	r28, 0x06	; 6
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	af 90       	pop	r10
    1cde:	9f 90       	pop	r9
    1ce0:	8f 90       	pop	r8
    1ce2:	7f 90       	pop	r7
    1ce4:	6f 90       	pop	r6
    1ce6:	5f 90       	pop	r5
    1ce8:	4f 90       	pop	r4
    1cea:	3f 90       	pop	r3
    1cec:	2f 90       	pop	r2
    1cee:	08 95       	ret

00001cf0 <StartPage>:

void StartPage(void){
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	28 97       	sbiw	r28, 0x08	; 8
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <selectEnable>
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	ee e2       	ldi	r30, 0x2E	; 46
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	de 01       	movw	r26, r28
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	8a 95       	dec	r24
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <StartPage+0x2a>
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	7c 01       	movw	r14, r24
    1d28:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i = 0; i < lineNum; i++)
	{
		u8g2_DrawStr(&u8g2, 0, textHeight * (i + 1), text[i]);
    1d2a:	f7 01       	movw	r30, r14
    1d2c:	21 91       	ld	r18, Z+
    1d2e:	31 91       	ld	r19, Z+
    1d30:	7f 01       	movw	r14, r30
    1d32:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    1d36:	14 9f       	mul	r17, r20
    1d38:	40 2d       	mov	r20, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	84 e3       	ldi	r24, 0x34	; 52
    1d40:	97 e0       	ldi	r25, 0x07	; 7
    1d42:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
    1d46:	1f 5f       	subi	r17, 0xFF	; 255
void StartPage(void){
	selectEnable = 1;
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
	
	for (int i = 0; i < lineNum; i++)
    1d48:	15 30       	cpi	r17, 0x05	; 5
    1d4a:	79 f7       	brne	.-34     	; 0x1d2a <StartPage+0x3a>
	char *text2[2] = {
		"Press \"Select\"",
		" to continue!"
	};
	
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[0]) / 2, realScreenHeight-textHeight, text2[0]);
    1d4c:	10 e4       	ldi	r17, 0x40	; 64
    1d4e:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <textHeight>
    1d52:	f1 2e       	mov	r15, r17
    1d54:	f8 1a       	sub	r15, r24
    1d56:	66 e3       	ldi	r22, 0x36	; 54
    1d58:	71 e0       	ldi	r23, 0x01	; 1
    1d5a:	84 e3       	ldi	r24, 0x34	; 52
    1d5c:	97 e0       	ldi	r25, 0x07	; 7
    1d5e:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1d62:	86 95       	lsr	r24
    1d64:	61 2f       	mov	r22, r17
    1d66:	68 1b       	sub	r22, r24
    1d68:	26 e3       	ldi	r18, 0x36	; 54
    1d6a:	31 e0       	ldi	r19, 0x01	; 1
    1d6c:	4f 2d       	mov	r20, r15
    1d6e:	84 e3       	ldi	r24, 0x34	; 52
    1d70:	97 e0       	ldi	r25, 0x07	; 7
    1d72:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[1]) / 2, realScreenHeight, text2[1]);
    1d76:	65 e4       	ldi	r22, 0x45	; 69
    1d78:	71 e0       	ldi	r23, 0x01	; 1
    1d7a:	84 e3       	ldi	r24, 0x34	; 52
    1d7c:	97 e0       	ldi	r25, 0x07	; 7
    1d7e:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1d82:	86 95       	lsr	r24
    1d84:	61 2f       	mov	r22, r17
    1d86:	68 1b       	sub	r22, r24
    1d88:	25 e4       	ldi	r18, 0x45	; 69
    1d8a:	31 e0       	ldi	r19, 0x01	; 1
    1d8c:	40 e4       	ldi	r20, 0x40	; 64
    1d8e:	84 e3       	ldi	r24, 0x34	; 52
    1d90:	97 e0       	ldi	r25, 0x07	; 7
    1d92:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	reDrawRequired = 0;
    1d96:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
}
    1d9a:	28 96       	adiw	r28, 0x08	; 8
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	08 95       	ret

00001db2 <nopage>:

void nopage(void){
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, "No content yet!");
    1db2:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    1db6:	47 5f       	subi	r20, 0xF7	; 247
    1db8:	27 e9       	ldi	r18, 0x97	; 151
    1dba:	31 e0       	ldi	r19, 0x01	; 1
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	84 e3       	ldi	r24, 0x34	; 52
    1dc0:	97 e0       	ldi	r25, 0x07	; 7
    1dc2:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	selectEnable = 0;
    1dc6:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <selectEnable>
	reDrawRequired = 0;
    1dca:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    1dce:	08 95       	ret

00001dd0 <ScreenOverlay>:
}


void ScreenOverlay(void){
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	28 97       	sbiw	r28, 0x08	; 8
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
	int y2 = height2/2;
	
	int width3 = width1/3 - 2;
	int height3 = height1 - 4;
	
	u8g2_DrawFrame(&u8g2, x1, y1, width1, height1);
    1dec:	08 e0       	ldi	r16, 0x08	; 8
    1dee:	2f e0       	ldi	r18, 0x0F	; 15
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	69 e3       	ldi	r22, 0x39	; 57
    1df4:	84 e3       	ldi	r24, 0x34	; 52
    1df6:	97 e0       	ldi	r25, 0x07	; 7
    1df8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <u8g2_DrawFrame>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
    1dfc:	04 e0       	ldi	r16, 0x04	; 4
    1dfe:	23 e0       	ldi	r18, 0x03	; 3
    1e00:	42 e0       	ldi	r20, 0x02	; 2
    1e02:	67 e4       	ldi	r22, 0x47	; 71
    1e04:	84 e3       	ldi	r24, 0x34	; 52
    1e06:	97 e0       	ldi	r25, 0x07	; 7
    1e08:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <u8g2_DrawFrame>
	
	unsigned int ADCval = updateBatterySens();
    1e0c:	0e 94 49 0a 	call	0x1492	; 0x1492 <updateBatterySens>
	if (ADCval<=256){
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	21 e0       	ldi	r18, 0x01	; 1
    1e14:	92 07       	cpc	r25, r18
    1e16:	68 f4       	brcc	.+26     	; 0x1e32 <ScreenOverlay+0x62>
		batteryBars = 0;
    1e18:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <batteryBars+0x1>
    1e1c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <batteryBars>
    1e20:	3d c0       	rjmp	.+122    	; 0x1e9c <ScreenOverlay+0xcc>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    1e22:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <batteryBars>
    1e26:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <batteryBars+0x1>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	19 06       	cpc	r1, r25
    1e2e:	04 f1       	brlt	.+64     	; 0x1e70 <ScreenOverlay+0xa0>
    1e30:	35 c0       	rjmp	.+106    	; 0x1e9c <ScreenOverlay+0xcc>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
	
	unsigned int ADCval = updateBatterySens();
	if (ADCval<=256){
		batteryBars = 0;
		}else if (ADCval <= 512){
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	22 e0       	ldi	r18, 0x02	; 2
    1e36:	92 07       	cpc	r25, r18
    1e38:	38 f4       	brcc	.+14     	; 0x1e48 <ScreenOverlay+0x78>
		batteryBars = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <batteryBars+0x1>
    1e42:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <batteryBars>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <ScreenOverlay+0xa0>
		}else if (ADCval <= 786){
    1e48:	83 31       	cpi	r24, 0x13	; 19
    1e4a:	23 e0       	ldi	r18, 0x03	; 3
    1e4c:	92 07       	cpc	r25, r18
    1e4e:	38 f4       	brcc	.+14     	; 0x1e5e <ScreenOverlay+0x8e>
		batteryBars = 2;
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <batteryBars+0x1>
    1e58:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <batteryBars>
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <ScreenOverlay+0xa0>
		}else if (ADCval <= 1024){
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	94 40       	sbci	r25, 0x04	; 4
    1e62:	f8 f6       	brcc	.-66     	; 0x1e22 <ScreenOverlay+0x52>
		batteryBars = 3;
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <batteryBars+0x1>
    1e6c:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <batteryBars>
	selectEnable = 0;
	reDrawRequired = 0;
}


void ScreenOverlay(void){
    1e70:	1b e3       	ldi	r17, 0x3B	; 59
    1e72:	e1 2c       	mov	r14, r1
    1e74:	f1 2c       	mov	r15, r1
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
	{
		u8g2_DrawBox(&u8g2, x1 + 2 + (width3+1) * i, y1 + 2, width3, height3);
    1e76:	04 e0       	ldi	r16, 0x04	; 4
    1e78:	23 e0       	ldi	r18, 0x03	; 3
    1e7a:	42 e0       	ldi	r20, 0x02	; 2
    1e7c:	61 2f       	mov	r22, r17
    1e7e:	84 e3       	ldi	r24, 0x34	; 52
    1e80:	97 e0       	ldi	r25, 0x07	; 7
    1e82:	0e 94 b8 12 	call	0x2570	; 0x2570 <u8g2_DrawBox>
		batteryBars = 2;
		}else if (ADCval <= 1024){
		batteryBars = 3;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to measure the amount of bars that need to be drawn to represent the battery's charge
    1e86:	8f ef       	ldi	r24, 0xFF	; 255
    1e88:	e8 1a       	sub	r14, r24
    1e8a:	f8 0a       	sbc	r15, r24
    1e8c:	1c 5f       	subi	r17, 0xFC	; 252
    1e8e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <batteryBars>
    1e92:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <batteryBars+0x1>
    1e96:	e8 16       	cp	r14, r24
    1e98:	f9 06       	cpc	r15, r25
    1e9a:	6c f3       	brlt	.-38     	; 0x1e76 <ScreenOverlay+0xa6>
	}
	
	
	
	//Mode:
	char modeTxt[7] = "Mode: ";
    1e9c:	87 e0       	ldi	r24, 0x07	; 7
    1e9e:	e7 ea       	ldi	r30, 0xA7	; 167
    1ea0:	f1 e0       	ldi	r31, 0x01	; 1
    1ea2:	de 01       	movw	r26, r28
    1ea4:	11 96       	adiw	r26, 0x01	; 1
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	0d 92       	st	X+, r0
    1eaa:	8a 95       	dec	r24
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <ScreenOverlay+0xd6>
	char modeTxthold[1];
	itoa(*(settingVal+0), modeTxthold, 10);
    1eae:	e0 91 22 07 	lds	r30, 0x0722	; 0x800722 <settingVal>
    1eb2:	f0 91 23 07 	lds	r31, 0x0723	; 0x800723 <settingVal+0x1>
    1eb6:	4a e0       	ldi	r20, 0x0A	; 10
    1eb8:	be 01       	movw	r22, r28
    1eba:	68 5f       	subi	r22, 0xF8	; 248
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
	strcat(modeTxt, modeTxthold);
    1ec6:	be 01       	movw	r22, r28
    1ec8:	68 5f       	subi	r22, 0xF8	; 248
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ecc:	ce 01       	movw	r24, r28
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	0e 94 de 21 	call	0x43bc	; 0x43bc <strcat>
	
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    1ed4:	69 e4       	ldi	r22, 0x49	; 73
    1ed6:	78 e0       	ldi	r23, 0x08	; 8
    1ed8:	84 e3       	ldi	r24, 0x34	; 52
    1eda:	97 e0       	ldi	r25, 0x07	; 7
    1edc:	0e 94 1a 1a 	call	0x3434	; 0x3434 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, screenWidth - u8g2_GetStrWidth(&u8g2, modeTxt), textHeight-3, modeTxt);
    1ee0:	10 91 99 07 	lds	r17, 0x0799	; 0x800799 <textHeight>
    1ee4:	13 50       	subi	r17, 0x03	; 3
    1ee6:	be 01       	movw	r22, r28
    1ee8:	6f 5f       	subi	r22, 0xFF	; 255
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	84 e3       	ldi	r24, 0x34	; 52
    1eee:	97 e0       	ldi	r25, 0x07	; 7
    1ef0:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1ef4:	60 e8       	ldi	r22, 0x80	; 128
    1ef6:	68 1b       	sub	r22, r24
    1ef8:	9e 01       	movw	r18, r28
    1efa:	2f 5f       	subi	r18, 0xFF	; 255
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	41 2f       	mov	r20, r17
    1f00:	84 e3       	ldi	r24, 0x34	; 52
    1f02:	97 e0       	ldi	r25, 0x07	; 7
    1f04:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	
	
	//Time
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    1f08:	69 e4       	ldi	r22, 0x49	; 73
    1f0a:	78 e0       	ldi	r23, 0x08	; 8
    1f0c:	84 e3       	ldi	r24, 0x34	; 52
    1f0e:	97 e0       	ldi	r25, 0x07	; 7
    1f10:	0e 94 1a 1a 	call	0x3434	; 0x3434 <u8g2_SetFont>
	static char timeTxt[7] = {0,0,0,0,0,0,0};
	getTimeToChar(timeTxt, 0);
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	8c ed       	ldi	r24, 0xDC	; 220
    1f1a:	92 e0       	ldi	r25, 0x02	; 2
    1f1c:	0e 94 c8 09 	call	0x1390	; 0x1390 <getTimeToChar>
	
	u8g2_DrawStr(&u8g2, 0, textHeight-3, timeTxt);
    1f20:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    1f24:	43 50       	subi	r20, 0x03	; 3
    1f26:	2c ed       	ldi	r18, 0xDC	; 220
    1f28:	32 e0       	ldi	r19, 0x02	; 2
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	84 e3       	ldi	r24, 0x34	; 52
    1f2e:	97 e0       	ldi	r25, 0x07	; 7
    1f30:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	
	
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);//reset font to the main font.
    1f34:	68 e6       	ldi	r22, 0x68	; 104
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	84 e3       	ldi	r24, 0x34	; 52
    1f3a:	97 e0       	ldi	r25, 0x07	; 7
    1f3c:	0e 94 1a 1a 	call	0x3434	; 0x3434 <u8g2_SetFont>
}
    1f40:	28 96       	adiw	r28, 0x08	; 8
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	08 95       	ret

00001f5a <Page_2>:

void Page_2(void){
    1f5a:	7f 92       	push	r7
    1f5c:	8f 92       	push	r8
    1f5e:	9f 92       	push	r9
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	a8 97       	sbiw	r28, 0x28	; 40
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
	#define Lines 4
	#define digAmount 8
	
	#define startLine_Data 3
	selectEnable = 0;
    1f84:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <selectEnable>
		"Direction:> ",
		"Distance:> ",
		"runTime:> "
	};
	
	int maxPrefixWidth = u8g2_GetStrWidth(&u8g2, text2[1]);
    1f88:	6e ea       	ldi	r22, 0xAE	; 174
    1f8a:	71 e0       	ldi	r23, 0x01	; 1
    1f8c:	84 e3       	ldi	r24, 0x34	; 52
    1f8e:	97 e0       	ldi	r25, 0x07	; 7
    1f90:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    1f94:	78 2e       	mov	r7, r24
	//placeholders for the data
	char d1[digAmount];
	char d2[digAmount];
	char d3[digAmount];
	char d4[digAmount];
	char *Data[Lines] = { d1, d2, d3, d4};
    1f96:	be 01       	movw	r22, r28
    1f98:	6f 5f       	subi	r22, 0xFF	; 255
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	7a a3       	std	Y+34, r23	; 0x22
    1f9e:	69 a3       	std	Y+33, r22	; 0x21
    1fa0:	6e 01       	movw	r12, r28
    1fa2:	89 e0       	ldi	r24, 0x09	; 9
    1fa4:	c8 0e       	add	r12, r24
    1fa6:	d1 1c       	adc	r13, r1
    1fa8:	dc a2       	std	Y+36, r13	; 0x24
    1faa:	cb a2       	std	Y+35, r12	; 0x23
    1fac:	7e 01       	movw	r14, r28
    1fae:	e1 e1       	ldi	r30, 0x11	; 17
    1fb0:	ee 0e       	add	r14, r30
    1fb2:	f1 1c       	adc	r15, r1
    1fb4:	fe a2       	std	Y+38, r15	; 0x26
    1fb6:	ed a2       	std	Y+37, r14	; 0x25
    1fb8:	8e 01       	movw	r16, r28
    1fba:	07 5e       	subi	r16, 0xE7	; 231
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	18 a7       	std	Y+40, r17	; 0x28
    1fc0:	0f a3       	std	Y+39, r16	; 0x27
		
	itoa(*speedHold, Data[0], 10);
    1fc2:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <speedHold>
    1fc6:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <speedHold+0x1>
    1fca:	4a e0       	ldi	r20, 0x0A	; 10
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
	itoa(*directionHold, Data[1], 10);
    1fd4:	e0 91 a8 07 	lds	r30, 0x07A8	; 0x8007a8 <directionHold>
    1fd8:	f0 91 a9 07 	lds	r31, 0x07A9	; 0x8007a9 <directionHold+0x1>
    1fdc:	4a e0       	ldi	r20, 0x0A	; 10
    1fde:	b6 01       	movw	r22, r12
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
	itoa(*distanceHold, Data[2], 10);
    1fe8:	e0 91 a4 07 	lds	r30, 0x07A4	; 0x8007a4 <distanceHold>
    1fec:	f0 91 a5 07 	lds	r31, 0x07A5	; 0x8007a5 <distanceHold+0x1>
    1ff0:	4a e0       	ldi	r20, 0x0A	; 10
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
	
	//little bit of code to make a typical digital watch look for the time String
	getTimeToChar(Data[3], 1);
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	c8 01       	movw	r24, r16
    2002:	0e 94 c8 09 	call	0x1390	; 0x1390 <getTimeToChar>
	
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    2006:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <currentChoice+0x1>
    200a:	ee 0f       	add	r30, r30
    200c:	ff 0b       	sbc	r31, r31
    200e:	eb 5d       	subi	r30, 0xDB	; 219
    2010:	fe 4f       	sbci	r31, 0xFE	; 254
    2012:	20 81       	ld	r18, Z
    2014:	31 81       	ldd	r19, Z+1	; 0x01
    2016:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    201a:	47 5f       	subi	r20, 0xF7	; 247
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	84 e3       	ldi	r24, 0x34	; 52
    2020:	97 e0       	ldi	r25, 0x07	; 7
    2022:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
    2026:	5e 01       	movw	r10, r28
    2028:	f1 e2       	ldi	r31, 0x21	; 33
    202a:	af 0e       	add	r10, r31
    202c:	b1 1c       	adc	r11, r1
    202e:	0f 2e       	mov	r0, r31
    2030:	f1 e5       	ldi	r31, 0x51	; 81
    2032:	cf 2e       	mov	r12, r31
    2034:	f2 e0       	ldi	r31, 0x02	; 2
    2036:	df 2e       	mov	r13, r31
    2038:	f0 2d       	mov	r31, r0
    203a:	0f 2e       	mov	r0, r31
    203c:	f9 e4       	ldi	r31, 0x49	; 73
    203e:	ef 2e       	mov	r14, r31
    2040:	f2 e0       	ldi	r31, 0x02	; 2
    2042:	ff 2e       	mov	r15, r31
    2044:	f0 2d       	mov	r31, r0
    2046:	13 e0       	ldi	r17, 0x03	; 3

	for (int i = 0; i < Lines; i++)
	{
		int dataWidth = u8g2_GetStrWidth(&u8g2, Data[i]);
    2048:	f5 01       	movw	r30, r10
    204a:	81 90       	ld	r8, Z+
    204c:	91 90       	ld	r9, Z+
    204e:	5f 01       	movw	r10, r30
    2050:	b4 01       	movw	r22, r8
    2052:	84 e3       	ldi	r24, 0x34	; 52
    2054:	97 e0       	ldi	r25, 0x07	; 7
    2056:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    205a:	08 2f       	mov	r16, r24
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
    205c:	f6 01       	movw	r30, r12
    205e:	21 91       	ld	r18, Z+
    2060:	31 91       	ld	r19, Z+
    2062:	6f 01       	movw	r12, r30
    2064:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    2068:	14 9f       	mul	r17, r20
    206a:	40 2d       	mov	r20, r0
    206c:	11 24       	eor	r1, r1
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	84 e3       	ldi	r24, 0x34	; 52
    2072:	97 e0       	ldi	r25, 0x07	; 7
    2074:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
    2078:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    207c:	14 9f       	mul	r17, r20
    207e:	40 2d       	mov	r20, r0
    2080:	11 24       	eor	r1, r1
    2082:	94 01       	movw	r18, r8
    2084:	67 2d       	mov	r22, r7
    2086:	84 e3       	ldi	r24, 0x34	; 52
    2088:	97 e0       	ldi	r25, 0x07	; 7
    208a:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
    208e:	f7 01       	movw	r30, r14
    2090:	21 91       	ld	r18, Z+
    2092:	31 91       	ld	r19, Z+
    2094:	7f 01       	movw	r14, r30
    2096:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    209a:	14 9f       	mul	r17, r20
    209c:	40 2d       	mov	r20, r0
    209e:	11 24       	eor	r1, r1
    20a0:	60 91 12 07 	lds	r22, 0x0712	; 0x800712 <maxCharWidth>
    20a4:	66 95       	lsr	r22
    20a6:	67 0d       	add	r22, r7
    20a8:	60 0f       	add	r22, r16
    20aa:	84 e3       	ldi	r24, 0x34	; 52
    20ac:	97 e0       	ldi	r25, 0x07	; 7
    20ae:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
    20b2:	1f 5f       	subi	r17, 0xFF	; 255
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);

	for (int i = 0; i < Lines; i++)
    20b4:	17 30       	cpi	r17, 0x07	; 7
    20b6:	41 f6       	brne	.-112    	; 0x2048 <Page_2+0xee>
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
	}
	
	reDrawRequired = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    20be:	a8 96       	adiw	r28, 0x28	; 40
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	df 90       	pop	r13
    20d8:	cf 90       	pop	r12
    20da:	bf 90       	pop	r11
    20dc:	af 90       	pop	r10
    20de:	9f 90       	pop	r9
    20e0:	8f 90       	pop	r8
    20e2:	7f 90       	pop	r7
    20e4:	08 95       	ret

000020e6 <Page_3>:

void Page_3(void){
	selectEnable = 0;
    20e6:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);//the titles needs to be the same as the titles of the choices in the menu
    20ea:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <currentChoice+0x1>
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 0b       	sbc	r31, r31
    20f2:	eb 5d       	subi	r30, 0xDB	; 219
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	20 81       	ld	r18, Z
    20f8:	31 81       	ldd	r19, Z+1	; 0x01
    20fa:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    20fe:	47 5f       	subi	r20, 0xF7	; 247
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	84 e3       	ldi	r24, 0x34	; 52
    2104:	97 e0       	ldi	r25, 0x07	; 7
    2106:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
	reDrawRequired = 0;
    210a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    210e:	08 95       	ret

00002110 <Page_4>:
}

void Page_4(void){
	selectEnable = 0;
    2110:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    2114:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <currentChoice+0x1>
    2118:	ee 0f       	add	r30, r30
    211a:	ff 0b       	sbc	r31, r31
    211c:	eb 5d       	subi	r30, 0xDB	; 219
    211e:	fe 4f       	sbci	r31, 0xFE	; 254
    2120:	20 81       	ld	r18, Z
    2122:	31 81       	ldd	r19, Z+1	; 0x01
    2124:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <textHeight>
    2128:	47 5f       	subi	r20, 0xF7	; 247
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	84 e3       	ldi	r24, 0x34	; 52
    212e:	97 e0       	ldi	r25, 0x07	; 7
    2130:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>

	reDrawRequired = 0;
    2134:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reDrawRequired>
    2138:	08 95       	ret

0000213a <Page_5>:
}

void Page_5(void){//settings
    213a:	2f 92       	push	r2
    213c:	3f 92       	push	r3
    213e:	4f 92       	push	r4
    2140:	5f 92       	push	r5
    2142:	6f 92       	push	r6
    2144:	7f 92       	push	r7
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	00 d0       	rcall	.+0      	; 0x2160 <Page_5+0x26>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <Page_5+0x28>
    2162:	1f 92       	push	r1
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <selectEnable>
	#define selector "-> "
	

	int height = screenDiv;
	
	int x = selectorWidth;
    216e:	10 91 12 07 	lds	r17, 0x0712	; 0x800712 <maxCharWidth>
    2172:	81 2f       	mov	r24, r17
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9c 01       	movw	r18, r24
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	12 2f       	mov	r17, r18
    217e:	18 0f       	add	r17, r24
	int y;
	int yStat = (height/2)+3;
    2180:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <screenDiv>
    2184:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <screenDiv+0x1>
    2188:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <screenDiv+0x2>
    218c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <screenDiv+0x3>
    2190:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fixsfsi>
    2194:	3b 01       	movw	r6, r22
    2196:	77 23       	and	r23, r23
    2198:	1c f4       	brge	.+6      	; 0x21a0 <Page_5+0x66>
    219a:	2f ef       	ldi	r18, 0xFF	; 255
    219c:	62 1a       	sub	r6, r18
    219e:	72 0a       	sbc	r7, r18
    21a0:	75 94       	asr	r7
    21a2:	67 94       	ror	r6
    21a4:	83 e0       	ldi	r24, 0x03	; 3
    21a6:	68 0e       	add	r6, r24
    21a8:	71 1c       	adc	r7, r1
	height = height - Margin;
	_Bool highlightChoice = 0;
	
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
    21aa:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <currentPage>
    21ae:	8a ef       	ldi	r24, 0xFA	; 250
    21b0:	8e 0f       	add	r24, r30
    21b2:	85 30       	cpi	r24, 0x05	; 5
    21b4:	30 f5       	brcc	.+76     	; 0x2202 <Page_5+0xc8>
		selectEnable = 0;
    21b6:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <selectEnable>
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
    21ba:	a0 91 18 07 	lds	r26, 0x0718	; 0x800718 <currentChoice+0x5>
    21be:	aa 0f       	add	r26, r26
    21c0:	bb 0b       	sbc	r27, r27
    21c2:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <settingVal>
    21c6:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <settingVal+0x1>
    21ca:	a8 0f       	add	r26, r24
    21cc:	b9 1f       	adc	r27, r25
    21ce:	0e 2e       	mov	r0, r30
    21d0:	00 0c       	add	r0, r0
    21d2:	ff 0b       	sbc	r31, r31
    21d4:	ed 5e       	subi	r30, 0xED	; 237
    21d6:	f8 4f       	sbci	r31, 0xF8	; 248
    21d8:	20 81       	ld	r18, Z
    21da:	8d 91       	ld	r24, X+
    21dc:	9c 91       	ld	r25, X
    21de:	11 97       	sbiw	r26, 0x01	; 1
    21e0:	82 1b       	sub	r24, r18
    21e2:	91 09       	sbc	r25, r1
    21e4:	27 fd       	sbrc	r18, 7
    21e6:	93 95       	inc	r25
    21e8:	8d 93       	st	X+, r24
    21ea:	9c 93       	st	X, r25
		currentChoice[currentPage] = 0;
    21ec:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <currentPage>
    21f0:	0e 2e       	mov	r0, r30
    21f2:	00 0c       	add	r0, r0
    21f4:	ff 0b       	sbc	r31, r31
    21f6:	ed 5e       	subi	r30, 0xED	; 237
    21f8:	f8 4f       	sbci	r31, 0xF8	; 248
    21fa:	10 82       	st	Z, r1
		highlightChoice = 1;
    21fc:	e1 e0       	ldi	r30, 0x01	; 1
    21fe:	ed 83       	std	Y+5, r30	; 0x05
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <Page_5+0xca>
	
	int x = selectorWidth;
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	_Bool highlightChoice = 0;
    2202:	1d 82       	std	Y+5, r1	; 0x05
    2204:	0f 2e       	mov	r0, r31
    2206:	fb e1       	ldi	r31, 0x1B	; 27
    2208:	af 2e       	mov	r10, r31
    220a:	f1 e0       	ldi	r31, 0x01	; 1
    220c:	bf 2e       	mov	r11, r31
    220e:	f0 2d       	mov	r31, r0
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
		selectEnable = 0;
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
    2210:	81 2c       	mov	r8, r1
    2212:	91 2c       	mov	r9, r1
	}
	
	for (int i = 0; i < settings; i++){
    2214:	c1 2c       	mov	r12, r1
    2216:	d1 2c       	mov	r13, r1
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;

		if(currentChoice[5] == i){
    2218:	0f 2e       	mov	r0, r31
    221a:	f3 e1       	ldi	r31, 0x13	; 19
    221c:	4f 2e       	mov	r4, r31
    221e:	f7 e0       	ldi	r31, 0x07	; 7
    2220:	5f 2e       	mov	r5, r31
    2222:	f0 2d       	mov	r31, r0
			u8g2_SetDrawColor(&u8g2, 1);
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
			if(highlightChoice){
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    2224:	0f 2e       	mov	r0, r31
    2226:	fe ef       	ldi	r31, 0xFE	; 254
    2228:	3f 2e       	mov	r3, r31
    222a:	f0 2d       	mov	r31, r0
    222c:	31 0e       	add	r3, r17
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;
    222e:	20 91 99 07 	lds	r18, 0x0799	; 0x800799 <textHeight>
    2232:	2c 9d       	mul	r18, r12
    2234:	c0 01       	movw	r24, r0
    2236:	2d 9d       	mul	r18, r13
    2238:	90 0d       	add	r25, r0
    223a:	11 24       	eor	r1, r1
    223c:	7c 01       	movw	r14, r24
    223e:	f9 e0       	ldi	r31, 0x09	; 9
    2240:	ef 0e       	add	r14, r31
    2242:	f1 1c       	adc	r15, r1

		if(currentChoice[5] == i){
    2244:	f2 01       	movw	r30, r4
    2246:	85 81       	ldd	r24, Z+5	; 0x05
    2248:	08 2e       	mov	r0, r24
    224a:	00 0c       	add	r0, r0
    224c:	99 0b       	sbc	r25, r25
    224e:	8c 15       	cp	r24, r12
    2250:	9d 05       	cpc	r25, r13
    2252:	09 f0       	breq	.+2      	; 0x2256 <Page_5+0x11c>
    2254:	6c c0       	rjmp	.+216    	; 0x232e <Page_5+0x1f4>
			
			u8g2_SetDrawColor(&u8g2, 1);
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	84 e3       	ldi	r24, 0x34	; 52
    225a:	97 e0       	ldi	r25, 0x07	; 7
    225c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
    2260:	2e 2c       	mov	r2, r14
    2262:	26 0c       	add	r2, r6
    2264:	2b eb       	ldi	r18, 0xBB	; 187
    2266:	31 e0       	ldi	r19, 0x01	; 1
    2268:	42 2d       	mov	r20, r2
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	84 e3       	ldi	r24, 0x34	; 52
    226e:	97 e0       	ldi	r25, 0x07	; 7
    2270:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
			if(highlightChoice){
    2274:	fd 81       	ldd	r31, Y+5	; 0x05
    2276:	ff 23       	and	r31, r31
    2278:	89 f1       	breq	.+98     	; 0x22dc <Page_5+0x1a2>
				u8g2_SetDrawColor(&u8g2, 1);
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	84 e3       	ldi	r24, 0x34	; 52
    227e:	97 e0       	ldi	r25, 0x07	; 7
    2280:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    2284:	00 91 99 07 	lds	r16, 0x0799	; 0x800799 <textHeight>
    2288:	0f 5f       	subi	r16, 0xFF	; 255
    228a:	f5 01       	movw	r30, r10
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	84 e3       	ldi	r24, 0x34	; 52
    2292:	97 e0       	ldi	r25, 0x07	; 7
    2294:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    2298:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <textHeight>
    229c:	42 2d       	mov	r20, r2
    229e:	49 1b       	sub	r20, r25
    22a0:	4f 5f       	subi	r20, 0xFF	; 255
    22a2:	68 94       	set
    22a4:	ee 24       	eor	r14, r14
    22a6:	e1 f8       	bld	r14, 1
    22a8:	28 2f       	mov	r18, r24
    22aa:	63 2d       	mov	r22, r3
    22ac:	84 e3       	ldi	r24, 0x34	; 52
    22ae:	97 e0       	ldi	r25, 0x07	; 7
    22b0:	0e 94 22 13 	call	0x2644	; 0x2644 <u8g2_DrawRBox>
				u8g2_SetDrawColor(&u8g2, 0);
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	84 e3       	ldi	r24, 0x34	; 52
    22b8:	97 e0       	ldi	r25, 0x07	; 7
    22ba:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    22be:	f5 01       	movw	r30, r10
    22c0:	20 81       	ld	r18, Z
    22c2:	31 81       	ldd	r19, Z+1	; 0x01
    22c4:	42 2d       	mov	r20, r2
    22c6:	61 2f       	mov	r22, r17
    22c8:	84 e3       	ldi	r24, 0x34	; 52
    22ca:	97 e0       	ldi	r25, 0x07	; 7
    22cc:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
				u8g2_SetDrawColor(&u8g2, 1);
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	84 e3       	ldi	r24, 0x34	; 52
    22d4:	97 e0       	ldi	r25, 0x07	; 7
    22d6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <u8g2_SetDrawColor>
    22da:	09 c0       	rjmp	.+18     	; 0x22ee <Page_5+0x1b4>
				}else{
				
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    22dc:	f5 01       	movw	r30, r10
    22de:	20 81       	ld	r18, Z
    22e0:	31 81       	ldd	r19, Z+1	; 0x01
    22e2:	42 2d       	mov	r20, r2
    22e4:	61 2f       	mov	r22, r17
    22e6:	84 e3       	ldi	r24, 0x34	; 52
    22e8:	97 e0       	ldi	r25, 0x07	; 7
    22ea:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
			}
			
			
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    22ee:	e0 91 22 07 	lds	r30, 0x0722	; 0x800722 <settingVal>
    22f2:	f0 91 23 07 	lds	r31, 0x0723	; 0x800723 <settingVal+0x1>
    22f6:	e8 0d       	add	r30, r8
    22f8:	f9 1d       	adc	r31, r9
    22fa:	4a e0       	ldi	r20, 0x0A	; 10
    22fc:	be 01       	movw	r22, r28
    22fe:	6f 5f       	subi	r22, 0xFF	; 255
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    230a:	f5 01       	movw	r30, r10
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	84 e3       	ldi	r24, 0x34	; 52
    2312:	97 e0       	ldi	r25, 0x07	; 7
    2314:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    2318:	68 2f       	mov	r22, r24
    231a:	61 0f       	add	r22, r17
    231c:	9e 01       	movw	r18, r28
    231e:	2f 5f       	subi	r18, 0xFF	; 255
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	42 2d       	mov	r20, r2
    2324:	84 e3       	ldi	r24, 0x34	; 52
    2326:	97 e0       	ldi	r25, 0x07	; 7
    2328:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
    232c:	2a c0       	rjmp	.+84     	; 0x2382 <Page_5+0x248>
			}else{
			u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    232e:	0e 2d       	mov	r16, r14
    2330:	06 0d       	add	r16, r6
    2332:	f5 01       	movw	r30, r10
    2334:	20 81       	ld	r18, Z
    2336:	31 81       	ldd	r19, Z+1	; 0x01
    2338:	40 2f       	mov	r20, r16
    233a:	61 2f       	mov	r22, r17
    233c:	84 e3       	ldi	r24, 0x34	; 52
    233e:	97 e0       	ldi	r25, 0x07	; 7
    2340:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    2344:	e0 91 22 07 	lds	r30, 0x0722	; 0x800722 <settingVal>
    2348:	f0 91 23 07 	lds	r31, 0x0723	; 0x800723 <settingVal+0x1>
    234c:	e8 0d       	add	r30, r8
    234e:	f9 1d       	adc	r31, r9
    2350:	4a e0       	ldi	r20, 0x0A	; 10
    2352:	be 01       	movw	r22, r28
    2354:	6f 5f       	subi	r22, 0xFF	; 255
    2356:	7f 4f       	sbci	r23, 0xFF	; 255
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    2360:	f5 01       	movw	r30, r10
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	84 e3       	ldi	r24, 0x34	; 52
    2368:	97 e0       	ldi	r25, 0x07	; 7
    236a:	0e 94 2f 1a 	call	0x345e	; 0x345e <u8g2_GetStrWidth>
    236e:	61 2f       	mov	r22, r17
    2370:	68 0f       	add	r22, r24
    2372:	9e 01       	movw	r18, r28
    2374:	2f 5f       	subi	r18, 0xFF	; 255
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	40 2f       	mov	r20, r16
    237a:	84 e3       	ldi	r24, 0x34	; 52
    237c:	97 e0       	ldi	r25, 0x07	; 7
    237e:	0e 94 c7 19 	call	0x338e	; 0x338e <u8g2_DrawStr>
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
    2382:	ff ef       	ldi	r31, 0xFF	; 255
    2384:	cf 1a       	sub	r12, r31
    2386:	df 0a       	sbc	r13, r31
    2388:	22 e0       	ldi	r18, 0x02	; 2
    238a:	82 0e       	add	r8, r18
    238c:	91 1c       	adc	r9, r1
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	a8 0e       	add	r10, r24
    2392:	b1 1c       	adc	r11, r1
    2394:	e5 e0       	ldi	r30, 0x05	; 5
    2396:	ce 16       	cp	r12, r30
    2398:	d1 04       	cpc	r13, r1
    239a:	09 f0       	breq	.+2      	; 0x239e <Page_5+0x264>
    239c:	48 cf       	rjmp	.-368    	; 0x222e <Page_5+0xf4>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
		}
	}


	reDrawRequired = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	df 90       	pop	r13
    23bc:	cf 90       	pop	r12
    23be:	bf 90       	pop	r11
    23c0:	af 90       	pop	r10
    23c2:	9f 90       	pop	r9
    23c4:	8f 90       	pop	r8
    23c6:	7f 90       	pop	r7
    23c8:	6f 90       	pop	r6
    23ca:	5f 90       	pop	r5
    23cc:	4f 90       	pop	r4
    23ce:	3f 90       	pop	r3
    23d0:	2f 90       	pop	r2
    23d2:	08 95       	ret

000023d4 <draw>:
		}
	}
}

void draw(void){
	switch(currentPage){
    23d4:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <currentPage>
    23d8:	82 30       	cpi	r24, 0x02	; 2
    23da:	e9 f0       	breq	.+58     	; 0x2416 <draw+0x42>
    23dc:	2c f4       	brge	.+10     	; 0x23e8 <draw+0x14>
    23de:	88 23       	and	r24, r24
    23e0:	41 f0       	breq	.+16     	; 0x23f2 <draw+0x1e>
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	49 f0       	breq	.+18     	; 0x23f8 <draw+0x24>
    23e6:	26 c0       	rjmp	.+76     	; 0x2434 <draw+0x60>
    23e8:	83 30       	cpi	r24, 0x03	; 3
    23ea:	d1 f0       	breq	.+52     	; 0x2420 <draw+0x4c>
    23ec:	84 30       	cpi	r24, 0x04	; 4
    23ee:	e9 f0       	breq	.+58     	; 0x242a <draw+0x56>
    23f0:	21 c0       	rjmp	.+66     	; 0x2434 <draw+0x60>
		case 0:// page 0 start
		StartPage();
    23f2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <StartPage>
		break;//end page0
    23f6:	08 95       	ret
		
		case 1://page 1 menu
		ScreenOverlay();//remove this if you don't want the overlay
    23f8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <ScreenOverlay>
		
		switch (MenuAnim)//for switching between menu animations
    23fc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MenuAnim>
    2400:	88 23       	and	r24, r24
    2402:	19 f0       	breq	.+6      	; 0x240a <draw+0x36>
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	21 f0       	breq	.+8      	; 0x2410 <draw+0x3c>
    2408:	08 95       	ret
		{
			case 0://animation 0
			MenuStyle0();
    240a:	0e 94 ce 0b 	call	0x179c	; 0x179c <MenuStyle0>
			break;//end animation 0
    240e:	08 95       	ret
			
			case 1://animation 1
			MenuStyle1();
    2410:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <MenuStyle1>
			break;//end animation 1
    2414:	08 95       	ret
		}
		break;//end page 1
		
		case 2:
		ScreenOverlay();
    2416:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <ScreenOverlay>
		Page_2();
    241a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <Page_2>
		break;
    241e:	08 95       	ret

		case 3:
		ScreenOverlay();
    2420:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <ScreenOverlay>
		Page_3();
    2424:	0e 94 73 10 	call	0x20e6	; 0x20e6 <Page_3>
		break;
    2428:	08 95       	ret
		
		case 4:
		ScreenOverlay();
    242a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <ScreenOverlay>
		Page_4();
    242e:	0e 94 88 10 	call	0x2110	; 0x2110 <Page_4>
		break;
    2432:	08 95       	ret
		
		default:
		if (currentPage >= SETTINGPAGE && currentPage <= SETTINGPAGE + settings){
    2434:	85 50       	subi	r24, 0x05	; 5
    2436:	86 30       	cpi	r24, 0x06	; 6
    2438:	28 f4       	brcc	.+10     	; 0x2444 <draw+0x70>
			ScreenOverlay();
    243a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <ScreenOverlay>
			Page_5();
    243e:	0e 94 9d 10 	call	0x213a	; 0x213a <Page_5>
    2442:	08 95       	ret
			}else{
			nopage();
    2444:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <nopage>
    2448:	08 95       	ret

0000244a <screenRoutine>:

	return ADCval;
}
//--------------------------------------
void screenRoutine(void){
	updateButtons();
    244a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <updateButtons>
	updateBatterySens();
    244e:	0e 94 49 0a 	call	0x1492	; 0x1492 <updateBatterySens>
	if (reDrawRequired || reDrawRequiredTime)
    2452:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <reDrawRequired>
    2456:	81 11       	cpse	r24, r1
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <screenRoutine+0x18>
    245a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <reDrawRequiredTime>
    245e:	88 23       	and	r24, r24
    2460:	79 f0       	breq	.+30     	; 0x2480 <screenRoutine+0x36>
	{
		reDrawRequired = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <reDrawRequired>
		u8g2_ClearBuffer(&u8g2);
    2468:	84 e3       	ldi	r24, 0x34	; 52
    246a:	97 e0       	ldi	r25, 0x07	; 7
    246c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <u8g2_ClearBuffer>
		draw();
    2470:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <draw>
		u8g2_SendBuffer(&u8g2);
    2474:	84 e3       	ldi	r24, 0x34	; 52
    2476:	97 e0       	ldi	r25, 0x07	; 7
    2478:	0e 94 73 14 	call	0x28e6	; 0x28e6 <u8g2_SendBuffer>
		reDrawRequiredTime = 0;
    247c:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <reDrawRequiredTime>
    2480:	08 95       	ret

00002482 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2482:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2486:	88 e4       	ldi	r24, 0x48	; 72
    2488:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    248c:	08 95       	ret

0000248e <i2c_start_wait>:
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	ec eb       	ldi	r30, 0xBC	; 188
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	44 ea       	ldi	r20, 0xA4	; 164
    2498:	a9 eb       	ldi	r26, 0xB9	; 185
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	cb eb       	ldi	r28, 0xBB	; 187
    249e:	d0 e0       	ldi	r29, 0x00	; 0
    24a0:	54 e8       	ldi	r21, 0x84	; 132
    24a2:	64 e9       	ldi	r22, 0x94	; 148
    24a4:	40 83       	st	Z, r20
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	90 81       	ld	r25, Z
    24ac:	99 23       	and	r25, r25
    24ae:	34 f0       	brlt	.+12     	; 0x24bc <i2c_start_wait+0x2e>
    24b0:	2f 5f       	subi	r18, 0xFF	; 255
    24b2:	3f 4f       	sbci	r19, 0xFF	; 255
    24b4:	21 15       	cp	r18, r1
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	39 07       	cpc	r19, r25
    24ba:	b9 f7       	brne	.-18     	; 0x24aa <i2c_start_wait+0x1c>
    24bc:	9c 91       	ld	r25, X
    24be:	98 7f       	andi	r25, 0xF8	; 248
    24c0:	98 30       	cpi	r25, 0x08	; 8
    24c2:	11 f0       	breq	.+4      	; 0x24c8 <i2c_start_wait+0x3a>
    24c4:	90 31       	cpi	r25, 0x10	; 16
    24c6:	71 f7       	brne	.-36     	; 0x24a4 <i2c_start_wait+0x16>
    24c8:	88 83       	st	Y, r24
    24ca:	50 83       	st	Z, r21
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	90 81       	ld	r25, Z
    24d2:	99 23       	and	r25, r25
    24d4:	34 f0       	brlt	.+12     	; 0x24e2 <i2c_start_wait+0x54>
    24d6:	2f 5f       	subi	r18, 0xFF	; 255
    24d8:	3f 4f       	sbci	r19, 0xFF	; 255
    24da:	21 15       	cp	r18, r1
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	39 07       	cpc	r19, r25
    24e0:	b9 f7       	brne	.-18     	; 0x24d0 <i2c_start_wait+0x42>
    24e2:	9c 91       	ld	r25, X
    24e4:	98 7f       	andi	r25, 0xF8	; 248
    24e6:	90 32       	cpi	r25, 0x20	; 32
    24e8:	11 f0       	breq	.+4      	; 0x24ee <i2c_start_wait+0x60>
    24ea:	98 35       	cpi	r25, 0x58	; 88
    24ec:	69 f4       	brne	.+26     	; 0x2508 <i2c_start_wait+0x7a>
    24ee:	60 83       	st	Z, r22
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	90 81       	ld	r25, Z
    24f6:	94 ff       	sbrs	r25, 4
    24f8:	d5 cf       	rjmp	.-86     	; 0x24a4 <i2c_start_wait+0x16>
    24fa:	2f 5f       	subi	r18, 0xFF	; 255
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	21 15       	cp	r18, r1
    2500:	91 e0       	ldi	r25, 0x01	; 1
    2502:	39 07       	cpc	r19, r25
    2504:	b9 f7       	brne	.-18     	; 0x24f4 <i2c_start_wait+0x66>
    2506:	ce cf       	rjmp	.-100    	; 0x24a4 <i2c_start_wait+0x16>
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	08 95       	ret

0000250e <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    250e:	84 e9       	ldi	r24, 0x94	; 148
    2510:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	ec eb       	ldi	r30, 0xBC	; 188
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	20 81       	ld	r18, Z
    251e:	24 ff       	sbrs	r18, 4
    2520:	05 c0       	rjmp	.+10     	; 0x252c <i2c_stop+0x1e>
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	81 15       	cp	r24, r1
    2526:	21 e0       	ldi	r18, 0x01	; 1
    2528:	92 07       	cpc	r25, r18
    252a:	c1 f7       	brne	.-16     	; 0x251c <i2c_stop+0xe>
    252c:	08 95       	ret

0000252e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    252e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
    2532:	84 e8       	ldi	r24, 0x84	; 132
    2534:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a0 e0       	ldi	r26, 0x00	; 0
    253e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    2540:	ec eb       	ldi	r30, 0xBC	; 188
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	20 81       	ld	r18, Z
    2546:	22 23       	and	r18, r18
    2548:	2c f0       	brlt	.+10     	; 0x2554 <i2c_write+0x26>
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	a1 09       	sbc	r26, r1
    254e:	b1 09       	sbc	r27, r1
    2550:	c8 f7       	brcc	.-14     	; 0x2544 <i2c_write+0x16>
    2552:	04 c0       	rjmp	.+8      	; 0x255c <i2c_write+0x2e>
	if(i2c_timer == 0)
    2554:	89 2b       	or	r24, r25
    2556:	8a 2b       	or	r24, r26
    2558:	8b 2b       	or	r24, r27
    255a:	41 f0       	breq	.+16     	; 0x256c <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    255c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    2560:	98 7f       	andi	r25, 0xF8	; 248
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	98 32       	cpi	r25, 0x28	; 40
    2566:	19 f4       	brne	.+6      	; 0x256e <i2c_write+0x40>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	08 95       	ret
    256c:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    256e:	08 95       	ret

00002570 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	7c 01       	movw	r14, r24
    2580:	16 2f       	mov	r17, r22
    2582:	c4 2f       	mov	r28, r20
    2584:	d2 2e       	mov	r13, r18
    2586:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2588:	04 2f       	mov	r16, r20
    258a:	0d 0f       	add	r16, r29
    258c:	26 2f       	mov	r18, r22
    258e:	2d 0d       	add	r18, r13
    2590:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    2594:	88 23       	and	r24, r24
    2596:	61 f0       	breq	.+24     	; 0x25b0 <u8g2_DrawBox+0x40>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    2598:	dd 23       	and	r29, r29
    259a:	51 f0       	breq	.+20     	; 0x25b0 <u8g2_DrawBox+0x40>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    259c:	00 e0       	ldi	r16, 0x00	; 0
    259e:	2d 2d       	mov	r18, r13
    25a0:	4c 2f       	mov	r20, r28
    25a2:	61 2f       	mov	r22, r17
    25a4:	c7 01       	movw	r24, r14
    25a6:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
    y++;    
    25aa:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
    25ac:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    25ae:	b1 f7       	brne	.-20     	; 0x259c <u8g2_DrawBox+0x2c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	ff 90       	pop	r15
    25ba:	ef 90       	pop	r14
    25bc:	df 90       	pop	r13
    25be:	08 95       	ret

000025c0 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	7c 01       	movw	r14, r24
    25d2:	d6 2f       	mov	r29, r22
    25d4:	c4 2f       	mov	r28, r20
    25d6:	d2 2e       	mov	r13, r18
    25d8:	10 2f       	mov	r17, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    25da:	c6 2e       	mov	r12, r22
    25dc:	c2 0e       	add	r12, r18
    25de:	04 2f       	mov	r16, r20
    25e0:	01 0f       	add	r16, r17
    25e2:	2c 2d       	mov	r18, r12
    25e4:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    25e8:	88 23       	and	r24, r24
    25ea:	19 f1       	breq	.+70     	; 0x2632 <u8g2_DrawFrame+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    25ec:	00 e0       	ldi	r16, 0x00	; 0
    25ee:	2d 2d       	mov	r18, r13
    25f0:	4c 2f       	mov	r20, r28
    25f2:	6d 2f       	mov	r22, r29
    25f4:	c7 01       	movw	r24, r14
    25f6:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
  if (h >= 2) {
    25fa:	12 30       	cpi	r17, 0x02	; 2
    25fc:	d0 f0       	brcs	.+52     	; 0x2632 <u8g2_DrawFrame+0x72>
    h-=2;
    25fe:	12 50       	subi	r17, 0x02	; 2
    y++;
    2600:	cf 5f       	subi	r28, 0xFF	; 255
    if (h > 0) {
    2602:	11 23       	and	r17, r17
    2604:	79 f0       	breq	.+30     	; 0x2624 <u8g2_DrawFrame+0x64>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    2606:	01 e0       	ldi	r16, 0x01	; 1
    2608:	21 2f       	mov	r18, r17
    260a:	4c 2f       	mov	r20, r28
    260c:	6d 2f       	mov	r22, r29
    260e:	c7 01       	movw	r24, r14
    2610:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    2614:	6f ef       	ldi	r22, 0xFF	; 255
    2616:	6c 0d       	add	r22, r12
    2618:	21 2f       	mov	r18, r17
    261a:	4c 2f       	mov	r20, r28
    261c:	c7 01       	movw	r24, r14
    261e:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
      y+=h;
    2622:	c1 0f       	add	r28, r17
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    2624:	00 e0       	ldi	r16, 0x00	; 0
    2626:	2d 2d       	mov	r18, r13
    2628:	4c 2f       	mov	r20, r28
    262a:	6d 2f       	mov	r22, r29
    262c:	c7 01       	movw	r24, r14
    262e:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
  }
}
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	08 95       	ret

00002644 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    2644:	7f 92       	push	r7
    2646:	8f 92       	push	r8
    2648:	9f 92       	push	r9
    264a:	af 92       	push	r10
    264c:	bf 92       	push	r11
    264e:	cf 92       	push	r12
    2650:	df 92       	push	r13
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	6c 01       	movw	r12, r24
    2660:	16 2f       	mov	r17, r22
    2662:	f4 2e       	mov	r15, r20
    2664:	b2 2e       	mov	r11, r18
    2666:	c0 2f       	mov	r28, r16
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    2668:	a4 2e       	mov	r10, r20
    266a:	a0 0e       	add	r10, r16
    266c:	d6 2f       	mov	r29, r22
    266e:	d2 0f       	add	r29, r18
    2670:	0a 2d       	mov	r16, r10
    2672:	2d 2f       	mov	r18, r29
    2674:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    2678:	88 23       	and	r24, r24
    267a:	09 f4       	brne	.+2      	; 0x267e <u8g2_DrawRBox+0x3a>
    267c:	49 c0       	rjmp	.+146    	; 0x2710 <u8g2_DrawRBox+0xcc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    267e:	81 2e       	mov	r8, r17
    2680:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    2682:	9f 2c       	mov	r9, r15
    2684:	9e 0c       	add	r9, r14
    2686:	8e 2d       	mov	r24, r14
    2688:	80 95       	com	r24
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
    268a:	d8 0f       	add	r29, r24
  
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;
    268c:	a8 0e       	add	r10, r24

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    268e:	02 e0       	ldi	r16, 0x02	; 2
    2690:	2e 2d       	mov	r18, r14
    2692:	49 2d       	mov	r20, r9
    2694:	68 2d       	mov	r22, r8
    2696:	c6 01       	movw	r24, r12
    2698:	0e 94 80 15 	call	0x2b00	; 0x2b00 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    269c:	01 e0       	ldi	r16, 0x01	; 1
    269e:	2e 2d       	mov	r18, r14
    26a0:	49 2d       	mov	r20, r9
    26a2:	6d 2f       	mov	r22, r29
    26a4:	c6 01       	movw	r24, r12
    26a6:	0e 94 80 15 	call	0x2b00	; 0x2b00 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    26aa:	04 e0       	ldi	r16, 0x04	; 4
    26ac:	2e 2d       	mov	r18, r14
    26ae:	4a 2d       	mov	r20, r10
    26b0:	68 2d       	mov	r22, r8
    26b2:	c6 01       	movw	r24, r12
    26b4:	0e 94 80 15 	call	0x2b00	; 0x2b00 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    26b8:	08 e0       	ldi	r16, 0x08	; 8
    26ba:	2e 2d       	mov	r18, r14
    26bc:	4a 2d       	mov	r20, r10
    26be:	6d 2f       	mov	r22, r29
    26c0:	c6 01       	movw	r24, r12
    26c2:	0e 94 80 15 	call	0x2b00	; 0x2b00 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    26c6:	2b 2d       	mov	r18, r11
    26c8:	2e 19       	sub	r18, r14
    ww -= r;
    26ca:	2e 19       	sub	r18, r14
    xl++;
    yu++;
    
    if ( ww >= 3 )
    26cc:	23 30       	cpi	r18, 0x03	; 3
    26ce:	98 f0       	brcs	.+38     	; 0x26f6 <u8g2_DrawRBox+0xb2>
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
    26d0:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    26d2:	de ef       	ldi	r29, 0xFE	; 254
    26d4:	d2 0f       	add	r29, r18
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
    26d6:	77 24       	eor	r7, r7
    26d8:	73 94       	inc	r7
    26da:	7e 0c       	add	r7, r14
    26dc:	07 2d       	mov	r16, r7
    26de:	2d 2f       	mov	r18, r29
    26e0:	4f 2d       	mov	r20, r15
    26e2:	68 2d       	mov	r22, r8
    26e4:	c6 01       	movw	r24, r12
    26e6:	0e 94 b8 12 	call	0x2570	; 0x2570 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
    26ea:	2d 2f       	mov	r18, r29
    26ec:	4a 2d       	mov	r20, r10
    26ee:	68 2d       	mov	r22, r8
    26f0:	c6 01       	movw	r24, r12
    26f2:	0e 94 b8 12 	call	0x2570	; 0x2570 <u8g2_DrawBox>
    }
    
    hh = h;
    hh -= r;
    26f6:	ce 19       	sub	r28, r14
    hh -= r;
    26f8:	ce 19       	sub	r28, r14
    //h--;
    if ( hh >= 3 )
    26fa:	c3 30       	cpi	r28, 0x03	; 3
    26fc:	48 f0       	brcs	.+18     	; 0x2710 <u8g2_DrawRBox+0xcc>
    {
      hh -= 2;
      u8g2_DrawBox(u8g2, x, yu, w, hh);
    26fe:	0e ef       	ldi	r16, 0xFE	; 254
    2700:	0c 0f       	add	r16, r28
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	49 0d       	add	r20, r9
    2706:	2b 2d       	mov	r18, r11
    2708:	61 2f       	mov	r22, r17
    270a:	c6 01       	movw	r24, r12
    270c:	0e 94 b8 12 	call	0x2570	; 0x2570 <u8g2_DrawBox>
    }
  }
}
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	cf 90       	pop	r12
    2720:	bf 90       	pop	r11
    2722:	af 90       	pop	r10
    2724:	9f 90       	pop	r9
    2726:	8f 90       	pop	r8
    2728:	7f 90       	pop	r7
    272a:	08 95       	ret

0000272c <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    272c:	8f 92       	push	r8
    272e:	9f 92       	push	r9
    2730:	af 92       	push	r10
    2732:	bf 92       	push	r11
    2734:	cf 92       	push	r12
    2736:	df 92       	push	r13
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	ec 01       	movw	r28, r24
    2746:	16 2f       	mov	r17, r22
    2748:	f4 2e       	mov	r15, r20
    274a:	c2 2e       	mov	r12, r18
    274c:	b0 2e       	mov	r11, r16
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    274e:	a4 2e       	mov	r10, r20
    2750:	a0 0e       	add	r10, r16
    2752:	d6 2e       	mov	r13, r22
    2754:	d2 0e       	add	r13, r18
    2756:	0a 2d       	mov	r16, r10
    2758:	2d 2d       	mov	r18, r13
    275a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    275e:	88 23       	and	r24, r24
    2760:	09 f4       	brne	.+2      	; 0x2764 <u8g2_DrawRFrame+0x38>
    2762:	52 c0       	rjmp	.+164    	; 0x2808 <u8g2_DrawRFrame+0xdc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    2764:	81 2e       	mov	r8, r17
    2766:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    2768:	9f 2c       	mov	r9, r15
    276a:	9e 0c       	add	r9, r14
    276c:	8e 2d       	mov	r24, r14
    276e:	80 95       	com	r24
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
    2770:	d8 0e       	add	r13, r24
    
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;
    2772:	a8 0e       	add	r10, r24

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    2774:	02 e0       	ldi	r16, 0x02	; 2
    2776:	2e 2d       	mov	r18, r14
    2778:	49 2d       	mov	r20, r9
    277a:	68 2d       	mov	r22, r8
    277c:	ce 01       	movw	r24, r28
    277e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    2782:	01 e0       	ldi	r16, 0x01	; 1
    2784:	2e 2d       	mov	r18, r14
    2786:	49 2d       	mov	r20, r9
    2788:	6d 2d       	mov	r22, r13
    278a:	ce 01       	movw	r24, r28
    278c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    2790:	04 e0       	ldi	r16, 0x04	; 4
    2792:	2e 2d       	mov	r18, r14
    2794:	4a 2d       	mov	r20, r10
    2796:	68 2d       	mov	r22, r8
    2798:	ce 01       	movw	r24, r28
    279a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    279e:	08 e0       	ldi	r16, 0x08	; 8
    27a0:	2e 2d       	mov	r18, r14
    27a2:	4a 2d       	mov	r20, r10
    27a4:	6d 2d       	mov	r22, r13
    27a6:	ce 01       	movw	r24, r28
    27a8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <u8g2_DrawCircle>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    27ac:	2c 2d       	mov	r18, r12
    27ae:	2e 19       	sub	r18, r14
    ww -= r;
    27b0:	2e 19       	sub	r18, r14
    hh = h;
    hh -= r;
    27b2:	0b 2d       	mov	r16, r11
    27b4:	0e 19       	sub	r16, r14
    hh -= r;
    27b6:	0e 19       	sub	r16, r14
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
    27b8:	23 30       	cpi	r18, 0x03	; 3
    27ba:	a0 f0       	brcs	.+40     	; 0x27e4 <u8g2_DrawRFrame+0xb8>
    ww -= r;
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    27bc:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    27be:	0f 2e       	mov	r0, r31
    27c0:	fe ef       	ldi	r31, 0xFE	; 254
    27c2:	ef 2e       	mov	r14, r31
    27c4:	f0 2d       	mov	r31, r0
    27c6:	e2 0e       	add	r14, r18
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
    27c8:	2e 2d       	mov	r18, r14
    27ca:	4f 2d       	mov	r20, r15
    27cc:	68 2d       	mov	r22, r8
    27ce:	ce 01       	movw	r24, r28
    27d0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    27d4:	4f ef       	ldi	r20, 0xFF	; 255
    27d6:	4b 0d       	add	r20, r11
    27d8:	4f 0d       	add	r20, r15
    27da:	2e 2d       	mov	r18, r14
    27dc:	68 2d       	mov	r22, r8
    27de:	ce 01       	movw	r24, r28
    27e0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
    27e4:	03 30       	cpi	r16, 0x03	; 3
    27e6:	80 f0       	brcs	.+32     	; 0x2808 <u8g2_DrawRFrame+0xdc>
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
    27e8:	93 94       	inc	r9
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
    27ea:	02 50       	subi	r16, 0x02	; 2
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
    27ec:	20 2f       	mov	r18, r16
    27ee:	49 2d       	mov	r20, r9
    27f0:	61 2f       	mov	r22, r17
    27f2:	ce 01       	movw	r24, r28
    27f4:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
    27f8:	6f ef       	ldi	r22, 0xFF	; 255
    27fa:	6c 0d       	add	r22, r12
    27fc:	61 0f       	add	r22, r17
    27fe:	20 2f       	mov	r18, r16
    2800:	49 2d       	mov	r20, r9
    2802:	ce 01       	movw	r24, r28
    2804:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    }
  }
}
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	ff 90       	pop	r15
    2812:	ef 90       	pop	r14
    2814:	df 90       	pop	r13
    2816:	cf 90       	pop	r12
    2818:	bf 90       	pop	r11
    281a:	af 90       	pop	r10
    281c:	9f 90       	pop	r9
    281e:	8f 90       	pop	r8
    2820:	08 95       	ret

00002822 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    2822:	af 92       	push	r10
    2824:	bf 92       	push	r11
    2826:	cf 92       	push	r12
    2828:	df 92       	push	r13
    282a:	ef 92       	push	r14
    282c:	ff 92       	push	r15
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    2838:	dc 01       	movw	r26, r24
    283a:	94 96       	adiw	r26, 0x24	; 36
    283c:	bc 90       	ld	r11, X
    283e:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    2840:	95 96       	adiw	r26, 0x25	; 37
    2842:	dc 91       	ld	r29, X
    2844:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    2846:	ed 91       	ld	r30, X+
    2848:	fc 91       	ld	r31, X
    284a:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    284c:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    284e:	c1 2c       	mov	r12, r1
    2850:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2852:	d7 01       	movw	r26, r14
    2854:	ed 91       	ld	r30, X+
    2856:	fc 91       	ld	r31, X
    2858:	11 97       	sbiw	r26, 0x01	; 1
    285a:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    285c:	92 96       	adiw	r26, 0x22	; 34
    285e:	0d 91       	ld	r16, X+
    2860:	1c 91       	ld	r17, X
    2862:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    2864:	42 2f       	mov	r20, r18
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	44 0f       	add	r20, r20
    286a:	55 1f       	adc	r21, r21
    286c:	44 0f       	add	r20, r20
    286e:	55 1f       	adc	r21, r21
    2870:	44 0f       	add	r20, r20
    2872:	55 1f       	adc	r21, r21
    2874:	4c 9d       	mul	r20, r12
    2876:	c0 01       	movw	r24, r0
    2878:	4d 9d       	mul	r20, r13
    287a:	90 0d       	add	r25, r0
    287c:	5c 9d       	mul	r21, r12
    287e:	90 0d       	add	r25, r0
    2880:	11 24       	eor	r1, r1
    2882:	08 0f       	add	r16, r24
    2884:	19 1f       	adc	r17, r25
    2886:	4c 2f       	mov	r20, r28
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	c7 01       	movw	r24, r14
    288c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    2890:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    2892:	8c 2f       	mov	r24, r28
    2894:	8d 1b       	sub	r24, r29
    2896:	8b 15       	cp	r24, r11
    2898:	28 f4       	brcc	.+10     	; 0x28a4 <u8g2_send_buffer+0x82>
    289a:	bf ef       	ldi	r27, 0xFF	; 255
    289c:	cb 1a       	sub	r12, r27
    289e:	db 0a       	sbc	r13, r27
    28a0:	ca 15       	cp	r28, r10
    28a2:	b8 f2       	brcs	.-82     	; 0x2852 <u8g2_send_buffer+0x30>
}
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	bf 90       	pop	r11
    28b6:	af 90       	pop	r10
    28b8:	08 95       	ret

000028ba <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    28ba:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    28bc:	a0 81       	ld	r26, Z
    28be:	b1 81       	ldd	r27, Z+1	; 0x01
    28c0:	50 96       	adiw	r26, 0x10	; 16
    28c2:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    28c4:	44 a1       	ldd	r20, Z+36	; 0x24
    28c6:	94 9f       	mul	r25, r20
    28c8:	a0 01       	movw	r20, r0
    28ca:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    28cc:	44 0f       	add	r20, r20
    28ce:	55 1f       	adc	r21, r21
    28d0:	44 0f       	add	r20, r20
    28d2:	55 1f       	adc	r21, r21
    28d4:	44 0f       	add	r20, r20
    28d6:	55 1f       	adc	r21, r21
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	82 a1       	ldd	r24, Z+34	; 0x22
    28de:	93 a1       	ldd	r25, Z+35	; 0x23
    28e0:	0e 94 d7 21 	call	0x43ae	; 0x43ae <memset>
    28e4:	08 95       	ret

000028e6 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    28ec:	0e 94 11 14 	call	0x2822	; 0x2822 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    28f0:	ce 01       	movw	r24, r28
    28f2:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <u8x8_RefreshDisplay>
}
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	08 95       	ret

000028fc <u8g2_draw_circle_section>:
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
    }
}
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	6c 01       	movw	r12, r24
    290c:	d6 2f       	mov	r29, r22
    290e:	14 2f       	mov	r17, r20
    2910:	c2 2f       	mov	r28, r18
    2912:	e0 fe       	sbrs	r14, 0
    2914:	0d c0       	rjmp	.+26     	; 0x2930 <u8g2_draw_circle_section+0x34>
    2916:	40 2f       	mov	r20, r16
    2918:	41 1b       	sub	r20, r17
    291a:	62 2f       	mov	r22, r18
    291c:	6d 0f       	add	r22, r29
    291e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2922:	40 2f       	mov	r20, r16
    2924:	4d 1b       	sub	r20, r29
    2926:	61 2f       	mov	r22, r17
    2928:	6c 0f       	add	r22, r28
    292a:	c6 01       	movw	r24, r12
    292c:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2930:	e1 fe       	sbrs	r14, 1
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <u8g2_draw_circle_section+0x54>
    2934:	40 2f       	mov	r20, r16
    2936:	41 1b       	sub	r20, r17
    2938:	6c 2f       	mov	r22, r28
    293a:	6d 1b       	sub	r22, r29
    293c:	c6 01       	movw	r24, r12
    293e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2942:	40 2f       	mov	r20, r16
    2944:	4d 1b       	sub	r20, r29
    2946:	6c 2f       	mov	r22, r28
    2948:	61 1b       	sub	r22, r17
    294a:	c6 01       	movw	r24, r12
    294c:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2950:	e3 fe       	sbrs	r14, 3
    2952:	0e c0       	rjmp	.+28     	; 0x2970 <u8g2_draw_circle_section+0x74>
    2954:	40 2f       	mov	r20, r16
    2956:	41 0f       	add	r20, r17
    2958:	6c 2f       	mov	r22, r28
    295a:	6d 0f       	add	r22, r29
    295c:	c6 01       	movw	r24, r12
    295e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2962:	40 2f       	mov	r20, r16
    2964:	4d 0f       	add	r20, r29
    2966:	61 2f       	mov	r22, r17
    2968:	6c 0f       	add	r22, r28
    296a:	c6 01       	movw	r24, r12
    296c:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2970:	e2 fe       	sbrs	r14, 2
    2972:	0e c0       	rjmp	.+28     	; 0x2990 <u8g2_draw_circle_section+0x94>
    2974:	40 2f       	mov	r20, r16
    2976:	41 0f       	add	r20, r17
    2978:	6c 2f       	mov	r22, r28
    297a:	6d 1b       	sub	r22, r29
    297c:	c6 01       	movw	r24, r12
    297e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2982:	40 2f       	mov	r20, r16
    2984:	4d 0f       	add	r20, r29
    2986:	6c 2f       	mov	r22, r28
    2988:	61 1b       	sub	r22, r17
    298a:	c6 01       	movw	r24, r12
    298c:	0e 94 c4 1a 	call	0x3588	; 0x3588 <u8g2_DrawPixel>
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	08 95       	ret

000029a0 <u8g2_draw_disc_section>:
    29a0:	cf 92       	push	r12
    29a2:	df 92       	push	r13
    29a4:	ef 92       	push	r14
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	6c 01       	movw	r12, r24
    29b0:	c6 2f       	mov	r28, r22
    29b2:	14 2f       	mov	r17, r20
    29b4:	d2 2f       	mov	r29, r18
    29b6:	e0 fe       	sbrs	r14, 0
    29b8:	11 c0       	rjmp	.+34     	; 0x29dc <u8g2_draw_disc_section+0x3c>
    29ba:	21 e0       	ldi	r18, 0x01	; 1
    29bc:	24 0f       	add	r18, r20
    29be:	40 2f       	mov	r20, r16
    29c0:	41 1b       	sub	r20, r17
    29c2:	6d 2f       	mov	r22, r29
    29c4:	6c 0f       	add	r22, r28
    29c6:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    29ca:	21 e0       	ldi	r18, 0x01	; 1
    29cc:	2c 0f       	add	r18, r28
    29ce:	40 2f       	mov	r20, r16
    29d0:	4c 1b       	sub	r20, r28
    29d2:	61 2f       	mov	r22, r17
    29d4:	6d 0f       	add	r22, r29
    29d6:	c6 01       	movw	r24, r12
    29d8:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    29dc:	e1 fe       	sbrs	r14, 1
    29de:	12 c0       	rjmp	.+36     	; 0x2a04 <u8g2_draw_disc_section+0x64>
    29e0:	21 e0       	ldi	r18, 0x01	; 1
    29e2:	21 0f       	add	r18, r17
    29e4:	40 2f       	mov	r20, r16
    29e6:	41 1b       	sub	r20, r17
    29e8:	6d 2f       	mov	r22, r29
    29ea:	6c 1b       	sub	r22, r28
    29ec:	c6 01       	movw	r24, r12
    29ee:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    29f2:	21 e0       	ldi	r18, 0x01	; 1
    29f4:	2c 0f       	add	r18, r28
    29f6:	40 2f       	mov	r20, r16
    29f8:	4c 1b       	sub	r20, r28
    29fa:	6d 2f       	mov	r22, r29
    29fc:	61 1b       	sub	r22, r17
    29fe:	c6 01       	movw	r24, r12
    2a00:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    2a04:	e3 fe       	sbrs	r14, 3
    2a06:	10 c0       	rjmp	.+32     	; 0x2a28 <u8g2_draw_disc_section+0x88>
    2a08:	21 e0       	ldi	r18, 0x01	; 1
    2a0a:	21 0f       	add	r18, r17
    2a0c:	40 2f       	mov	r20, r16
    2a0e:	6d 2f       	mov	r22, r29
    2a10:	6c 0f       	add	r22, r28
    2a12:	c6 01       	movw	r24, r12
    2a14:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    2a18:	21 e0       	ldi	r18, 0x01	; 1
    2a1a:	2c 0f       	add	r18, r28
    2a1c:	40 2f       	mov	r20, r16
    2a1e:	61 2f       	mov	r22, r17
    2a20:	6d 0f       	add	r22, r29
    2a22:	c6 01       	movw	r24, r12
    2a24:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    2a28:	e2 fe       	sbrs	r14, 2
    2a2a:	10 c0       	rjmp	.+32     	; 0x2a4c <u8g2_draw_disc_section+0xac>
    2a2c:	21 e0       	ldi	r18, 0x01	; 1
    2a2e:	21 0f       	add	r18, r17
    2a30:	6d 2f       	mov	r22, r29
    2a32:	6c 1b       	sub	r22, r28
    2a34:	40 2f       	mov	r20, r16
    2a36:	c6 01       	movw	r24, r12
    2a38:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    2a3c:	21 e0       	ldi	r18, 0x01	; 1
    2a3e:	2c 0f       	add	r18, r28
    2a40:	6d 2f       	mov	r22, r29
    2a42:	61 1b       	sub	r22, r17
    2a44:	40 2f       	mov	r20, r16
    2a46:	c6 01       	movw	r24, r12
    2a48:	0e 94 be 1a 	call	0x357c	; 0x357c <u8g2_DrawVLine>
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
    2a5a:	08 95       	ret

00002a5c <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	5c 01       	movw	r10, r24
    2a76:	c6 2e       	mov	r12, r22
    2a78:	94 2e       	mov	r9, r20
    2a7a:	c2 2f       	mov	r28, r18
    2a7c:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    2a7e:	01 e0       	ldi	r16, 0x01	; 1
    2a80:	02 0f       	add	r16, r18
    2a82:	04 0f       	add	r16, r20
    2a84:	21 e0       	ldi	r18, 0x01	; 1
    2a86:	26 0f       	add	r18, r22
    2a88:	2c 0f       	add	r18, r28
    2a8a:	4c 1b       	sub	r20, r28
    2a8c:	6c 1b       	sub	r22, r28
    2a8e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    2a92:	88 23       	and	r24, r24
    2a94:	41 f1       	breq	.+80     	; 0x2ae6 <u8g2_DrawCircle+0x8a>
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    2a96:	d1 e0       	ldi	r29, 0x01	; 1
    2a98:	dc 1b       	sub	r29, r28
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    2a9a:	dc 2e       	mov	r13, r28
    2a9c:	d1 94       	neg	r13
    2a9e:	dd 0c       	add	r13, r13
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    2aa0:	e8 2c       	mov	r14, r8
    2aa2:	09 2d       	mov	r16, r9
    2aa4:	2c 2d       	mov	r18, r12
    2aa6:	4c 2f       	mov	r20, r28
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	c5 01       	movw	r24, r10
    2aac:	0e 94 7e 14 	call	0x28fc	; 0x28fc <u8g2_draw_circle_section>
    
    while ( x < y )
    2ab0:	cc 23       	and	r28, r28
    2ab2:	c9 f0       	breq	.+50     	; 0x2ae6 <u8g2_DrawCircle+0x8a>
    2ab4:	0f 2e       	mov	r0, r31
    2ab6:	f3 e0       	ldi	r31, 0x03	; 3
    2ab8:	ff 2e       	mov	r15, r31
    2aba:	f0 2d       	mov	r31, r0
    2abc:	10 e0       	ldi	r17, 0x00	; 0
    {
      if (f >= 0) 
    2abe:	dd 23       	and	r29, r29
    2ac0:	24 f0       	brlt	.+8      	; 0x2aca <u8g2_DrawCircle+0x6e>
      {
        y--;
    2ac2:	c1 50       	subi	r28, 0x01	; 1
        ddF_y += 2;
    2ac4:	d3 94       	inc	r13
    2ac6:	d3 94       	inc	r13
        f += ddF_y;
    2ac8:	dd 0d       	add	r29, r13
      }
      x++;
    2aca:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;
    2acc:	df 0d       	add	r29, r15

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    2ace:	e8 2c       	mov	r14, r8
    2ad0:	09 2d       	mov	r16, r9
    2ad2:	2c 2d       	mov	r18, r12
    2ad4:	4c 2f       	mov	r20, r28
    2ad6:	61 2f       	mov	r22, r17
    2ad8:	c5 01       	movw	r24, r10
    2ada:	0e 94 7e 14 	call	0x28fc	; 0x28fc <u8g2_draw_circle_section>
    2ade:	f3 94       	inc	r15
    2ae0:	f3 94       	inc	r15
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    2ae2:	1c 17       	cp	r17, r28
    2ae4:	60 f3       	brcs	.-40     	; 0x2abe <u8g2_DrawCircle+0x62>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	ef 90       	pop	r14
    2af2:	df 90       	pop	r13
    2af4:	cf 90       	pop	r12
    2af6:	bf 90       	pop	r11
    2af8:	af 90       	pop	r10
    2afa:	9f 90       	pop	r9
    2afc:	8f 90       	pop	r8
    2afe:	08 95       	ret

00002b00 <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    2b00:	8f 92       	push	r8
    2b02:	9f 92       	push	r9
    2b04:	af 92       	push	r10
    2b06:	bf 92       	push	r11
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	5c 01       	movw	r10, r24
    2b1a:	c6 2e       	mov	r12, r22
    2b1c:	94 2e       	mov	r9, r20
    2b1e:	c2 2f       	mov	r28, r18
    2b20:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    2b22:	01 e0       	ldi	r16, 0x01	; 1
    2b24:	02 0f       	add	r16, r18
    2b26:	04 0f       	add	r16, r20
    2b28:	21 e0       	ldi	r18, 0x01	; 1
    2b2a:	26 0f       	add	r18, r22
    2b2c:	2c 0f       	add	r18, r28
    2b2e:	4c 1b       	sub	r20, r28
    2b30:	6c 1b       	sub	r22, r28
    2b32:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    2b36:	88 23       	and	r24, r24
    2b38:	41 f1       	breq	.+80     	; 0x2b8a <u8g2_DrawDisc+0x8a>
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
  f -= rad;
    2b3a:	d1 e0       	ldi	r29, 0x01	; 1
    2b3c:	dc 1b       	sub	r29, r28
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
  ddF_y *= 2;
    2b3e:	dc 2e       	mov	r13, r28
    2b40:	d1 94       	neg	r13
    2b42:	dd 0c       	add	r13, r13
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
    2b44:	e8 2c       	mov	r14, r8
    2b46:	09 2d       	mov	r16, r9
    2b48:	2c 2d       	mov	r18, r12
    2b4a:	4c 2f       	mov	r20, r28
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	c5 01       	movw	r24, r10
    2b50:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <u8g2_draw_disc_section>
  
  while ( x < y )
    2b54:	cc 23       	and	r28, r28
    2b56:	c9 f0       	breq	.+50     	; 0x2b8a <u8g2_DrawDisc+0x8a>
    2b58:	0f 2e       	mov	r0, r31
    2b5a:	f3 e0       	ldi	r31, 0x03	; 3
    2b5c:	ff 2e       	mov	r15, r31
    2b5e:	f0 2d       	mov	r31, r0
    2b60:	10 e0       	ldi	r17, 0x00	; 0
  {
    if (f >= 0) 
    2b62:	dd 23       	and	r29, r29
    2b64:	24 f0       	brlt	.+8      	; 0x2b6e <u8g2_DrawDisc+0x6e>
    {
      y--;
    2b66:	c1 50       	subi	r28, 0x01	; 1
      ddF_y += 2;
    2b68:	d3 94       	inc	r13
    2b6a:	d3 94       	inc	r13
      f += ddF_y;
    2b6c:	dd 0d       	add	r29, r13
    }
    x++;
    2b6e:	1f 5f       	subi	r17, 0xFF	; 255
    ddF_x += 2;
    f += ddF_x;
    2b70:	df 0d       	add	r29, r15

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
    2b72:	e8 2c       	mov	r14, r8
    2b74:	09 2d       	mov	r16, r9
    2b76:	2c 2d       	mov	r18, r12
    2b78:	4c 2f       	mov	r20, r28
    2b7a:	61 2f       	mov	r22, r17
    2b7c:	c5 01       	movw	r24, r10
    2b7e:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <u8g2_draw_disc_section>
    2b82:	f3 94       	inc	r15
    2b84:	f3 94       	inc	r15
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
  
  while ( x < y )
    2b86:	1c 17       	cp	r17, r28
    2b88:	60 f3       	brcs	.-40     	; 0x2b62 <u8g2_DrawDisc+0x62>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	df 90       	pop	r13
    2b98:	cf 90       	pop	r12
    2b9a:	bf 90       	pop	r11
    2b9c:	af 90       	pop	r10
    2b9e:	9f 90       	pop	r9
    2ba0:	8f 90       	pop	r8
    2ba2:	08 95       	ret

00002ba4 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    2ba4:	28 e0       	ldi	r18, 0x08	; 8
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	20 83       	st	Z, r18
  return buf;
  #endif
}
    2baa:	83 ef       	ldi	r24, 0xF3	; 243
    2bac:	92 e0       	ldi	r25, 0x02	; 2
    2bae:	08 95       	ret

00002bb0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2bb0:	cf 92       	push	r12
    2bb2:	df 92       	push	r13
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	1f 92       	push	r1
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	7c 01       	movw	r14, r24
    2bc8:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    2bca:	89 01       	movw	r16, r18
    2bcc:	9a 01       	movw	r18, r20
    2bce:	48 e9       	ldi	r20, 0x98	; 152
    2bd0:	5d e1       	ldi	r21, 0x1D	; 29
    2bd2:	6b e2       	ldi	r22, 0x2B	; 43
    2bd4:	7f e1       	ldi	r23, 0x1F	; 31
    2bd6:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    2bda:	ce 01       	movw	r24, r28
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    2be2:	86 01       	movw	r16, r12
    2be4:	25 e1       	ldi	r18, 0x15	; 21
    2be6:	3b e1       	ldi	r19, 0x1B	; 27
    2be8:	49 81       	ldd	r20, Y+1	; 0x01
    2bea:	bc 01       	movw	r22, r24
    2bec:	c7 01       	movw	r24, r14
    2bee:	0e 94 0c 1c 	call	0x3818	; 0x3818 <u8g2_SetupBuffer>
}
    2bf2:	0f 90       	pop	r0
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	ff 90       	pop	r15
    2bfe:	ef 90       	pop	r14
    2c00:	df 90       	pop	r13
    2c02:	cf 90       	pop	r12
    2c04:	08 95       	ret

00002c06 <u8g2_font_get_word>:
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  return u8g2_string_width(u8g2, str);
}
    2c06:	fc 01       	movw	r30, r24
    2c08:	e6 0f       	add	r30, r22
    2c0a:	f1 1d       	adc	r31, r1
    2c0c:	84 91       	lpm	r24, Z
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	98 2f       	mov	r25, r24
    2c12:	88 27       	eor	r24, r24
    2c14:	31 96       	adiw	r30, 0x01	; 1
    2c16:	e4 91       	lpm	r30, Z
    2c18:	8e 0f       	add	r24, r30
    2c1a:	91 1d       	adc	r25, r1
    2c1c:	08 95       	ret

00002c1e <u8g2_font_calc_vref_font>:
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	08 95       	ret

00002c22 <u8g2_read_font_info>:
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	ec 01       	movw	r28, r24
    2c2c:	8b 01       	movw	r16, r22
    2c2e:	fb 01       	movw	r30, r22
    2c30:	84 91       	lpm	r24, Z
    2c32:	88 83       	st	Y, r24
    2c34:	31 96       	adiw	r30, 0x01	; 1
    2c36:	e4 91       	lpm	r30, Z
    2c38:	e9 83       	std	Y+1, r30	; 0x01
    2c3a:	fb 01       	movw	r30, r22
    2c3c:	32 96       	adiw	r30, 0x02	; 2
    2c3e:	e4 91       	lpm	r30, Z
    2c40:	ea 83       	std	Y+2, r30	; 0x02
    2c42:	fb 01       	movw	r30, r22
    2c44:	33 96       	adiw	r30, 0x03	; 3
    2c46:	e4 91       	lpm	r30, Z
    2c48:	eb 83       	std	Y+3, r30	; 0x03
    2c4a:	fb 01       	movw	r30, r22
    2c4c:	34 96       	adiw	r30, 0x04	; 4
    2c4e:	e4 91       	lpm	r30, Z
    2c50:	ec 83       	std	Y+4, r30	; 0x04
    2c52:	fb 01       	movw	r30, r22
    2c54:	35 96       	adiw	r30, 0x05	; 5
    2c56:	e4 91       	lpm	r30, Z
    2c58:	ed 83       	std	Y+5, r30	; 0x05
    2c5a:	fb 01       	movw	r30, r22
    2c5c:	36 96       	adiw	r30, 0x06	; 6
    2c5e:	e4 91       	lpm	r30, Z
    2c60:	ee 83       	std	Y+6, r30	; 0x06
    2c62:	fb 01       	movw	r30, r22
    2c64:	37 96       	adiw	r30, 0x07	; 7
    2c66:	e4 91       	lpm	r30, Z
    2c68:	ef 83       	std	Y+7, r30	; 0x07
    2c6a:	fb 01       	movw	r30, r22
    2c6c:	38 96       	adiw	r30, 0x08	; 8
    2c6e:	e4 91       	lpm	r30, Z
    2c70:	e8 87       	std	Y+8, r30	; 0x08
    2c72:	fb 01       	movw	r30, r22
    2c74:	39 96       	adiw	r30, 0x09	; 9
    2c76:	e4 91       	lpm	r30, Z
    2c78:	e9 87       	std	Y+9, r30	; 0x09
    2c7a:	fb 01       	movw	r30, r22
    2c7c:	3a 96       	adiw	r30, 0x0a	; 10
    2c7e:	e4 91       	lpm	r30, Z
    2c80:	ea 87       	std	Y+10, r30	; 0x0a
    2c82:	fb 01       	movw	r30, r22
    2c84:	3b 96       	adiw	r30, 0x0b	; 11
    2c86:	e4 91       	lpm	r30, Z
    2c88:	eb 87       	std	Y+11, r30	; 0x0b
    2c8a:	fb 01       	movw	r30, r22
    2c8c:	3c 96       	adiw	r30, 0x0c	; 12
    2c8e:	e4 91       	lpm	r30, Z
    2c90:	ec 87       	std	Y+12, r30	; 0x0c
    2c92:	fb 01       	movw	r30, r22
    2c94:	3d 96       	adiw	r30, 0x0d	; 13
    2c96:	e4 91       	lpm	r30, Z
    2c98:	ed 87       	std	Y+13, r30	; 0x0d
    2c9a:	fb 01       	movw	r30, r22
    2c9c:	3e 96       	adiw	r30, 0x0e	; 14
    2c9e:	e4 91       	lpm	r30, Z
    2ca0:	ee 87       	std	Y+14, r30	; 0x0e
    2ca2:	fb 01       	movw	r30, r22
    2ca4:	3f 96       	adiw	r30, 0x0f	; 15
    2ca6:	e4 91       	lpm	r30, Z
    2ca8:	ef 87       	std	Y+15, r30	; 0x0f
    2caa:	fb 01       	movw	r30, r22
    2cac:	70 96       	adiw	r30, 0x10	; 16
    2cae:	e4 91       	lpm	r30, Z
    2cb0:	e8 8b       	std	Y+16, r30	; 0x10
    2cb2:	61 e1       	ldi	r22, 0x11	; 17
    2cb4:	c8 01       	movw	r24, r16
    2cb6:	0e 94 03 16 	call	0x2c06	; 0x2c06 <u8g2_font_get_word>
    2cba:	9a 8b       	std	Y+18, r25	; 0x12
    2cbc:	89 8b       	std	Y+17, r24	; 0x11
    2cbe:	63 e1       	ldi	r22, 0x13	; 19
    2cc0:	c8 01       	movw	r24, r16
    2cc2:	0e 94 03 16 	call	0x2c06	; 0x2c06 <u8g2_font_get_word>
    2cc6:	9c 8b       	std	Y+20, r25	; 0x14
    2cc8:	8b 8b       	std	Y+19, r24	; 0x13
    2cca:	65 e1       	ldi	r22, 0x15	; 21
    2ccc:	c8 01       	movw	r24, r16
    2cce:	0e 94 03 16 	call	0x2c06	; 0x2c06 <u8g2_font_get_word>
    2cd2:	9e 8b       	std	Y+22, r25	; 0x16
    2cd4:	8d 8b       	std	Y+21, r24	; 0x15
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	08 95       	ret

00002ce0 <u8g2_font_decode_get_unsigned_bits>:
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	18 96       	adiw	r26, 0x08	; 8
    2ce4:	9c 91       	ld	r25, X
    2ce6:	18 97       	sbiw	r26, 0x08	; 8
    2ce8:	ed 91       	ld	r30, X+
    2cea:	fc 91       	ld	r31, X
    2cec:	11 97       	sbiw	r26, 0x01	; 1
    2cee:	24 91       	lpm	r18, Z
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	09 2e       	mov	r0, r25
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <u8g2_font_decode_get_unsigned_bits+0x1a>
    2cf6:	35 95       	asr	r19
    2cf8:	27 95       	ror	r18
    2cfa:	0a 94       	dec	r0
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <u8g2_font_decode_get_unsigned_bits+0x16>
    2cfe:	89 2f       	mov	r24, r25
    2d00:	86 0f       	add	r24, r22
    2d02:	88 30       	cpi	r24, 0x08	; 8
    2d04:	10 f4       	brcc	.+4      	; 0x2d0a <u8g2_font_decode_get_unsigned_bits+0x2a>
    2d06:	e2 2f       	mov	r30, r18
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <u8g2_font_decode_get_unsigned_bits+0x48>
    2d0a:	31 96       	adiw	r30, 0x01	; 1
    2d0c:	11 96       	adiw	r26, 0x01	; 1
    2d0e:	fc 93       	st	X, r31
    2d10:	ee 93       	st	-X, r30
    2d12:	e4 91       	lpm	r30, Z
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	38 e0       	ldi	r19, 0x08	; 8
    2d18:	39 1b       	sub	r19, r25
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <u8g2_font_decode_get_unsigned_bits+0x40>
    2d1c:	ee 0f       	add	r30, r30
    2d1e:	ff 1f       	adc	r31, r31
    2d20:	3a 95       	dec	r19
    2d22:	e2 f7       	brpl	.-8      	; 0x2d1c <u8g2_font_decode_get_unsigned_bits+0x3c>
    2d24:	e2 2b       	or	r30, r18
    2d26:	88 50       	subi	r24, 0x08	; 8
    2d28:	18 96       	adiw	r26, 0x08	; 8
    2d2a:	8c 93       	st	X, r24
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <u8g2_font_decode_get_unsigned_bits+0x56>
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	6a 95       	dec	r22
    2d38:	e2 f7       	brpl	.-8      	; 0x2d32 <u8g2_font_decode_get_unsigned_bits+0x52>
    2d3a:	81 50       	subi	r24, 0x01	; 1
    2d3c:	8e 23       	and	r24, r30
    2d3e:	08 95       	ret

00002d40 <u8g2_font_setup_decode>:
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	ec 01       	movw	r28, r24
    2d4a:	8c 01       	movw	r16, r24
    2d4c:	07 5c       	subi	r16, 0xC7	; 199
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	7a af       	std	Y+58, r23	; 0x3a
    2d52:	69 af       	std	Y+57, r22	; 0x39
    2d54:	fc 01       	movw	r30, r24
    2d56:	ef 5b       	subi	r30, 0xBF	; 191
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	10 82       	st	Z, r1
    2d5c:	39 96       	adiw	r30, 0x09	; 9
    2d5e:	60 81       	ld	r22, Z
    2d60:	c8 01       	movw	r24, r16
    2d62:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <u8g2_font_decode_get_unsigned_bits>
    2d66:	8f af       	std	Y+63, r24	; 0x3f
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e5 5b       	subi	r30, 0xB5	; 181
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	60 81       	ld	r22, Z
    2d70:	c8 01       	movw	r24, r16
    2d72:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <u8g2_font_decode_get_unsigned_bits>
    2d76:	fe 01       	movw	r30, r28
    2d78:	e0 5c       	subi	r30, 0xC0	; 192
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 83       	st	Z, r24
    2d7e:	b3 96       	adiw	r30, 0x23	; 35
    2d80:	80 81       	ld	r24, Z
    2d82:	b0 97       	sbiw	r30, 0x20	; 32
    2d84:	80 83       	st	Z, r24
    2d86:	cc 5b       	subi	r28, 0xBC	; 188
    2d88:	df 4f       	sbci	r29, 0xFF	; 255
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	81 11       	cpse	r24, r1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	98 83       	st	Y, r25
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	08 95       	ret

00002d9c <u8g2_font_decode_get_signed_bits>:
    2d9c:	cf 93       	push	r28
    2d9e:	c6 2f       	mov	r28, r22
    2da0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <u8g2_font_decode_get_unsigned_bits>
    2da4:	c1 50       	subi	r28, 0x01	; 1
    2da6:	21 e0       	ldi	r18, 0x01	; 1
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <u8g2_font_decode_get_signed_bits+0x14>
    2dac:	22 0f       	add	r18, r18
    2dae:	33 1f       	adc	r19, r19
    2db0:	ca 95       	dec	r28
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <u8g2_font_decode_get_signed_bits+0x10>
    2db4:	82 1b       	sub	r24, r18
    2db6:	cf 91       	pop	r28
    2db8:	08 95       	ret

00002dba <u8g2_add_vector_y>:
    2dba:	21 30       	cpi	r18, 0x01	; 1
    2dbc:	31 f0       	breq	.+12     	; 0x2dca <u8g2_add_vector_y+0x10>
    2dbe:	18 f0       	brcs	.+6      	; 0x2dc6 <u8g2_add_vector_y+0xc>
    2dc0:	22 30       	cpi	r18, 0x02	; 2
    2dc2:	29 f0       	breq	.+10     	; 0x2dce <u8g2_add_vector_y+0x14>
    2dc4:	06 c0       	rjmp	.+12     	; 0x2dd2 <u8g2_add_vector_y+0x18>
    2dc6:	84 0f       	add	r24, r20
    2dc8:	08 95       	ret
    2dca:	86 0f       	add	r24, r22
    2dcc:	08 95       	ret
    2dce:	84 1b       	sub	r24, r20
    2dd0:	08 95       	ret
    2dd2:	86 1b       	sub	r24, r22
    2dd4:	08 95       	ret

00002dd6 <u8g2_add_vector_x>:
    2dd6:	21 30       	cpi	r18, 0x01	; 1
    2dd8:	31 f0       	breq	.+12     	; 0x2de6 <u8g2_add_vector_x+0x10>
    2dda:	18 f0       	brcs	.+6      	; 0x2de2 <u8g2_add_vector_x+0xc>
    2ddc:	22 30       	cpi	r18, 0x02	; 2
    2dde:	29 f0       	breq	.+10     	; 0x2dea <u8g2_add_vector_x+0x14>
    2de0:	06 c0       	rjmp	.+12     	; 0x2dee <u8g2_add_vector_x+0x18>
    2de2:	86 0f       	add	r24, r22
    2de4:	08 95       	ret
    2de6:	84 1b       	sub	r24, r20
    2de8:	08 95       	ret
    2dea:	86 1b       	sub	r24, r22
    2dec:	08 95       	ret
    2dee:	84 0f       	add	r24, r20
    2df0:	08 95       	ret

00002df2 <u8g2_font_decode_len>:
    2df2:	2f 92       	push	r2
    2df4:	3f 92       	push	r3
    2df6:	4f 92       	push	r4
    2df8:	5f 92       	push	r5
    2dfa:	6f 92       	push	r6
    2dfc:	7f 92       	push	r7
    2dfe:	8f 92       	push	r8
    2e00:	9f 92       	push	r9
    2e02:	af 92       	push	r10
    2e04:	bf 92       	push	r11
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <u8g2_font_decode_len+0x26>
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <u8g2_font_decode_len+0x28>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <u8g2_font_decode_len+0x2a>
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	7c 01       	movw	r14, r24
    2e22:	6e 83       	std	Y+6, r22	; 0x06
    2e24:	34 2e       	mov	r3, r20
    2e26:	fc 01       	movw	r30, r24
    2e28:	75 ac       	ldd	r7, Z+61	; 0x3d
    2e2a:	16 ad       	ldd	r17, Z+62	; 0x3e
    2e2c:	6c 01       	movw	r12, r24
    2e2e:	f5 e4       	ldi	r31, 0x45	; 69
    2e30:	cf 0e       	add	r12, r31
    2e32:	d1 1c       	adc	r13, r1
    2e34:	5c 01       	movw	r10, r24
    2e36:	82 e4       	ldi	r24, 0x42	; 66
    2e38:	a8 0e       	add	r10, r24
    2e3a:	b1 1c       	adc	r11, r1
    2e3c:	47 01       	movw	r8, r14
    2e3e:	93 e6       	ldi	r25, 0x63	; 99
    2e40:	89 0e       	add	r8, r25
    2e42:	91 1c       	adc	r9, r1
    2e44:	f7 01       	movw	r30, r14
    2e46:	ec 5b       	subi	r30, 0xBC	; 188
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	fc 83       	std	Y+4, r31	; 0x04
    2e4c:	eb 83       	std	Y+3, r30	; 0x03
    2e4e:	c7 01       	movw	r24, r14
    2e50:	8d 5b       	subi	r24, 0xBD	; 189
    2e52:	9f 4f       	sbci	r25, 0xFF	; 255
    2e54:	9a 83       	std	Y+2, r25	; 0x02
    2e56:	89 83       	std	Y+1, r24	; 0x01
    2e58:	f7 01       	movw	r30, r14
    2e5a:	f7 ad       	ldd	r31, Z+63	; 0x3f
    2e5c:	f7 19       	sub	r31, r7
    2e5e:	fd 83       	std	Y+5, r31	; 0x05
    2e60:	5e 80       	ldd	r5, Y+6	; 0x06
    2e62:	f5 15       	cp	r31, r5
    2e64:	08 f4       	brcc	.+2      	; 0x2e68 <u8g2_font_decode_len+0x76>
    2e66:	5f 2e       	mov	r5, r31
    2e68:	f7 01       	movw	r30, r14
    2e6a:	64 ac       	ldd	r6, Z+60	; 0x3c
    2e6c:	f6 01       	movw	r30, r12
    2e6e:	00 81       	ld	r16, Z
    2e70:	21 2e       	mov	r2, r17
    2e72:	20 2f       	mov	r18, r16
    2e74:	41 2f       	mov	r20, r17
    2e76:	67 2d       	mov	r22, r7
    2e78:	f7 01       	movw	r30, r14
    2e7a:	83 ad       	ldd	r24, Z+59	; 0x3b
    2e7c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <u8g2_add_vector_x>
    2e80:	48 2e       	mov	r4, r24
    2e82:	20 2f       	mov	r18, r16
    2e84:	41 2f       	mov	r20, r17
    2e86:	67 2d       	mov	r22, r7
    2e88:	86 2d       	mov	r24, r6
    2e8a:	0e 94 dd 16 	call	0x2dba	; 0x2dba <u8g2_add_vector_y>
    2e8e:	33 20       	and	r3, r3
    2e90:	61 f0       	breq	.+24     	; 0x2eaa <u8g2_font_decode_len+0xb8>
    2e92:	e9 81       	ldd	r30, Y+1	; 0x01
    2e94:	fa 81       	ldd	r31, Y+2	; 0x02
    2e96:	90 81       	ld	r25, Z
    2e98:	f4 01       	movw	r30, r8
    2e9a:	90 83       	st	Z, r25
    2e9c:	25 2d       	mov	r18, r5
    2e9e:	48 2f       	mov	r20, r24
    2ea0:	64 2d       	mov	r22, r4
    2ea2:	c7 01       	movw	r24, r14
    2ea4:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
    2ea8:	0f c0       	rjmp	.+30     	; 0x2ec8 <u8g2_font_decode_len+0xd6>
    2eaa:	f5 01       	movw	r30, r10
    2eac:	90 81       	ld	r25, Z
    2eae:	91 11       	cpse	r25, r1
    2eb0:	0b c0       	rjmp	.+22     	; 0x2ec8 <u8g2_font_decode_len+0xd6>
    2eb2:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb4:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb6:	90 81       	ld	r25, Z
    2eb8:	f4 01       	movw	r30, r8
    2eba:	90 83       	st	Z, r25
    2ebc:	25 2d       	mov	r18, r5
    2ebe:	48 2f       	mov	r20, r24
    2ec0:	64 2d       	mov	r22, r4
    2ec2:	c7 01       	movw	r24, r14
    2ec4:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
    2ec8:	fe 81       	ldd	r31, Y+6	; 0x06
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	f8 17       	cp	r31, r24
    2ece:	28 f0       	brcs	.+10     	; 0x2eda <u8g2_font_decode_len+0xe8>
    2ed0:	f8 1b       	sub	r31, r24
    2ed2:	fe 83       	std	Y+6, r31	; 0x06
    2ed4:	1f 5f       	subi	r17, 0xFF	; 255
    2ed6:	71 2c       	mov	r7, r1
    2ed8:	bf cf       	rjmp	.-130    	; 0x2e58 <u8g2_font_decode_len+0x66>
    2eda:	8e 81       	ldd	r24, Y+6	; 0x06
    2edc:	87 0d       	add	r24, r7
    2ede:	f7 01       	movw	r30, r14
    2ee0:	85 af       	std	Z+61, r24	; 0x3d
    2ee2:	26 ae       	std	Z+62, r2	; 0x3e
    2ee4:	26 96       	adiw	r28, 0x06	; 6
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	1f 91       	pop	r17
    2ef6:	0f 91       	pop	r16
    2ef8:	ff 90       	pop	r15
    2efa:	ef 90       	pop	r14
    2efc:	df 90       	pop	r13
    2efe:	cf 90       	pop	r12
    2f00:	bf 90       	pop	r11
    2f02:	af 90       	pop	r10
    2f04:	9f 90       	pop	r9
    2f06:	8f 90       	pop	r8
    2f08:	7f 90       	pop	r7
    2f0a:	6f 90       	pop	r6
    2f0c:	5f 90       	pop	r5
    2f0e:	4f 90       	pop	r4
    2f10:	3f 90       	pop	r3
    2f12:	2f 90       	pop	r2
    2f14:	08 95       	ret

00002f16 <u8g2_font_decode_glyph>:
    2f16:	8f 92       	push	r8
    2f18:	9f 92       	push	r9
    2f1a:	af 92       	push	r10
    2f1c:	bf 92       	push	r11
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	ec 01       	movw	r28, r24
    2f30:	7c 01       	movw	r14, r24
    2f32:	89 e3       	ldi	r24, 0x39	; 57
    2f34:	e8 0e       	add	r14, r24
    2f36:	f1 1c       	adc	r15, r1
    2f38:	ce 01       	movw	r24, r28
    2f3a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <u8g2_font_setup_decode>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e0 5c       	subi	r30, 0xC0	; 192
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	90 80       	ld	r9, Z
    2f46:	3c 96       	adiw	r30, 0x0c	; 12
    2f48:	60 81       	ld	r22, Z
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <u8g2_font_decode_get_signed_bits>
    2f50:	b8 2e       	mov	r11, r24
    2f52:	fe 01       	movw	r30, r28
    2f54:	e3 5b       	subi	r30, 0xB3	; 179
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	c7 01       	movw	r24, r14
    2f5c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <u8g2_font_decode_get_signed_bits>
    2f60:	18 2f       	mov	r17, r24
    2f62:	fe 01       	movw	r30, r28
    2f64:	e2 5b       	subi	r30, 0xB2	; 178
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	60 81       	ld	r22, Z
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <u8g2_font_decode_get_signed_bits>
    2f70:	88 2e       	mov	r8, r24
    2f72:	df ac       	ldd	r13, Y+63	; 0x3f
    2f74:	1d 14       	cp	r1, r13
    2f76:	0c f0       	brlt	.+2      	; 0x2f7a <u8g2_font_decode_glyph+0x64>
    2f78:	79 c0       	rjmp	.+242    	; 0x306c <u8g2_font_decode_glyph+0x156>
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	eb 5b       	subi	r30, 0xBB	; 187
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	00 81       	ld	r16, Z
    2f82:	19 0d       	add	r17, r9
    2f84:	11 95       	neg	r17
    2f86:	20 2f       	mov	r18, r16
    2f88:	41 2f       	mov	r20, r17
    2f8a:	6b 2d       	mov	r22, r11
    2f8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f8e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <u8g2_add_vector_x>
    2f92:	c8 2e       	mov	r12, r24
    2f94:	8b af       	std	Y+59, r24	; 0x3b
    2f96:	20 2f       	mov	r18, r16
    2f98:	41 2f       	mov	r20, r17
    2f9a:	6b 2d       	mov	r22, r11
    2f9c:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f9e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <u8g2_add_vector_y>
    2fa2:	8c af       	std	Y+60, r24	; 0x3c
    2fa4:	01 30       	cpi	r16, 0x01	; 1
    2fa6:	59 f0       	breq	.+22     	; 0x2fbe <u8g2_font_decode_glyph+0xa8>
    2fa8:	28 f0       	brcs	.+10     	; 0x2fb4 <u8g2_font_decode_glyph+0x9e>
    2faa:	02 30       	cpi	r16, 0x02	; 2
    2fac:	91 f0       	breq	.+36     	; 0x2fd2 <u8g2_font_decode_glyph+0xbc>
    2fae:	03 30       	cpi	r16, 0x03	; 3
    2fb0:	d9 f0       	breq	.+54     	; 0x2fe8 <u8g2_font_decode_glyph+0xd2>
    2fb2:	23 c0       	rjmp	.+70     	; 0x2ffa <u8g2_font_decode_glyph+0xe4>
    2fb4:	2d 2d       	mov	r18, r13
    2fb6:	2c 0d       	add	r18, r12
    2fb8:	09 2d       	mov	r16, r9
    2fba:	08 0f       	add	r16, r24
    2fbc:	20 c0       	rjmp	.+64     	; 0x2ffe <u8g2_font_decode_glyph+0xe8>
    2fbe:	9c 2d       	mov	r25, r12
    2fc0:	99 19       	sub	r25, r9
    2fc2:	21 e0       	ldi	r18, 0x01	; 1
    2fc4:	2c 0d       	add	r18, r12
    2fc6:	0d 2d       	mov	r16, r13
    2fc8:	08 0f       	add	r16, r24
    2fca:	cc 24       	eor	r12, r12
    2fcc:	c3 94       	inc	r12
    2fce:	c9 0e       	add	r12, r25
    2fd0:	16 c0       	rjmp	.+44     	; 0x2ffe <u8g2_font_decode_glyph+0xe8>
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	39 2f       	mov	r19, r25
    2fd6:	3d 19       	sub	r19, r13
    2fd8:	21 e0       	ldi	r18, 0x01	; 1
    2fda:	2c 0d       	add	r18, r12
    2fdc:	99 19       	sub	r25, r9
    2fde:	01 e0       	ldi	r16, 0x01	; 1
    2fe0:	08 0f       	add	r16, r24
    2fe2:	89 0f       	add	r24, r25
    2fe4:	c3 0e       	add	r12, r19
    2fe6:	0b c0       	rjmp	.+22     	; 0x2ffe <u8g2_font_decode_glyph+0xe8>
    2fe8:	29 2d       	mov	r18, r9
    2fea:	2c 0d       	add	r18, r12
    2fec:	98 2f       	mov	r25, r24
    2fee:	9d 19       	sub	r25, r13
    2ff0:	01 e0       	ldi	r16, 0x01	; 1
    2ff2:	08 0f       	add	r16, r24
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	89 0f       	add	r24, r25
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <u8g2_font_decode_glyph+0xe8>
    2ffa:	08 2f       	mov	r16, r24
    2ffc:	2c 2d       	mov	r18, r12
    2ffe:	48 2f       	mov	r20, r24
    3000:	6c 2d       	mov	r22, r12
    3002:	ce 01       	movw	r24, r28
    3004:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    3008:	88 23       	and	r24, r24
    300a:	81 f1       	breq	.+96     	; 0x306c <u8g2_font_decode_glyph+0x156>
    300c:	1d ae       	std	Y+61, r1	; 0x3d
    300e:	1e ae       	std	Y+62, r1	; 0x3e
    3010:	5e 01       	movw	r10, r28
    3012:	e8 e4       	ldi	r30, 0x48	; 72
    3014:	ae 0e       	add	r10, r30
    3016:	b1 1c       	adc	r11, r1
    3018:	6e 01       	movw	r12, r28
    301a:	f9 e4       	ldi	r31, 0x49	; 73
    301c:	cf 0e       	add	r12, r31
    301e:	d1 1c       	adc	r13, r1
    3020:	f5 01       	movw	r30, r10
    3022:	60 81       	ld	r22, Z
    3024:	c7 01       	movw	r24, r14
    3026:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <u8g2_font_decode_get_unsigned_bits>
    302a:	08 2f       	mov	r16, r24
    302c:	f6 01       	movw	r30, r12
    302e:	60 81       	ld	r22, Z
    3030:	c7 01       	movw	r24, r14
    3032:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <u8g2_font_decode_get_unsigned_bits>
    3036:	18 2f       	mov	r17, r24
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	60 2f       	mov	r22, r16
    303c:	ce 01       	movw	r24, r28
    303e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <u8g2_font_decode_len>
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	61 2f       	mov	r22, r17
    3046:	ce 01       	movw	r24, r28
    3048:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <u8g2_font_decode_len>
    304c:	61 e0       	ldi	r22, 0x01	; 1
    304e:	c7 01       	movw	r24, r14
    3050:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <u8g2_font_decode_get_unsigned_bits>
    3054:	81 11       	cpse	r24, r1
    3056:	f0 cf       	rjmp	.-32     	; 0x3038 <u8g2_font_decode_glyph+0x122>
    3058:	8e ad       	ldd	r24, Y+62	; 0x3e
    305a:	89 15       	cp	r24, r9
    305c:	0c f3       	brlt	.-62     	; 0x3020 <u8g2_font_decode_glyph+0x10a>
    305e:	fe 01       	movw	r30, r28
    3060:	ed 59       	subi	r30, 0x9D	; 157
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	cd 5b       	subi	r28, 0xBD	; 189
    3066:	df 4f       	sbci	r29, 0xFF	; 255
    3068:	88 81       	ld	r24, Y
    306a:	80 83       	st	Z, r24
    306c:	88 2d       	mov	r24, r8
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	1f 91       	pop	r17
    3074:	0f 91       	pop	r16
    3076:	ff 90       	pop	r15
    3078:	ef 90       	pop	r14
    307a:	df 90       	pop	r13
    307c:	cf 90       	pop	r12
    307e:	bf 90       	pop	r11
    3080:	af 90       	pop	r10
    3082:	9f 90       	pop	r9
    3084:	8f 90       	pop	r8
    3086:	08 95       	ret

00003088 <u8g2_font_get_glyph_data>:
    3088:	ef 92       	push	r14
    308a:	ff 92       	push	r15
    308c:	0f 93       	push	r16
    308e:	1f 93       	push	r17
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	fc 01       	movw	r30, r24
    3096:	c5 a9       	ldd	r28, Z+53	; 0x35
    3098:	d6 a9       	ldd	r29, Z+54	; 0x36
    309a:	67 96       	adiw	r28, 0x17	; 23
    309c:	6f 3f       	cpi	r22, 0xFF	; 255
    309e:	71 05       	cpc	r23, r1
    30a0:	11 f0       	breq	.+4      	; 0x30a6 <u8g2_font_get_glyph_data+0x1e>
    30a2:	08 f0       	brcs	.+2      	; 0x30a6 <u8g2_font_get_glyph_data+0x1e>
    30a4:	36 c0       	rjmp	.+108    	; 0x3112 <u8g2_font_get_glyph_data+0x8a>
    30a6:	61 36       	cpi	r22, 0x61	; 97
    30a8:	71 05       	cpc	r23, r1
    30aa:	38 f0       	brcs	.+14     	; 0x30ba <u8g2_font_get_glyph_data+0x32>
    30ac:	e7 5a       	subi	r30, 0xA7	; 167
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	c8 0f       	add	r28, r24
    30b6:	d9 1f       	adc	r29, r25
    30b8:	0a c0       	rjmp	.+20     	; 0x30ce <u8g2_font_get_glyph_data+0x46>
    30ba:	61 34       	cpi	r22, 0x41	; 65
    30bc:	71 05       	cpc	r23, r1
    30be:	38 f0       	brcs	.+14     	; 0x30ce <u8g2_font_get_glyph_data+0x46>
    30c0:	fc 01       	movw	r30, r24
    30c2:	e9 5a       	subi	r30, 0xA9	; 169
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	c8 0f       	add	r28, r24
    30cc:	d9 1f       	adc	r29, r25
    30ce:	ce 01       	movw	r24, r28
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	fc 01       	movw	r30, r24
    30d4:	24 91       	lpm	r18, Z
    30d6:	22 23       	and	r18, r18
    30d8:	09 f4       	brne	.+2      	; 0x30dc <u8g2_font_get_glyph_data+0x54>
    30da:	5a c0       	rjmp	.+180    	; 0x3190 <u8g2_font_get_glyph_data+0x108>
    30dc:	fe 01       	movw	r30, r28
    30de:	24 91       	lpm	r18, Z
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	62 17       	cp	r22, r18
    30e4:	73 07       	cpc	r23, r19
    30e6:	51 f4       	brne	.+20     	; 0x30fc <u8g2_font_get_glyph_data+0x74>
    30e8:	06 c0       	rjmp	.+12     	; 0x30f6 <u8g2_font_get_glyph_data+0x6e>
    30ea:	fe 01       	movw	r30, r28
    30ec:	24 91       	lpm	r18, Z
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	62 17       	cp	r22, r18
    30f2:	73 07       	cpc	r23, r19
    30f4:	19 f4       	brne	.+6      	; 0x30fc <u8g2_font_get_glyph_data+0x74>
    30f6:	ce 01       	movw	r24, r28
    30f8:	02 96       	adiw	r24, 0x02	; 2
    30fa:	52 c0       	rjmp	.+164    	; 0x31a0 <u8g2_font_get_glyph_data+0x118>
    30fc:	fc 01       	movw	r30, r24
    30fe:	84 91       	lpm	r24, Z
    3100:	c8 0f       	add	r28, r24
    3102:	d1 1d       	adc	r29, r1
    3104:	ce 01       	movw	r24, r28
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	fc 01       	movw	r30, r24
    310a:	24 91       	lpm	r18, Z
    310c:	21 11       	cpse	r18, r1
    310e:	ed cf       	rjmp	.-38     	; 0x30ea <u8g2_font_get_glyph_data+0x62>
    3110:	42 c0       	rjmp	.+132    	; 0x3196 <u8g2_font_get_glyph_data+0x10e>
    3112:	8b 01       	movw	r16, r22
    3114:	fc 01       	movw	r30, r24
    3116:	e5 5a       	subi	r30, 0xA5	; 165
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	c8 0f       	add	r28, r24
    3120:	d9 1f       	adc	r29, r25
    3122:	7e 01       	movw	r14, r28
    3124:	60 e0       	ldi	r22, 0x00	; 0
    3126:	c7 01       	movw	r24, r14
    3128:	0e 94 03 16 	call	0x2c06	; 0x2c06 <u8g2_font_get_word>
    312c:	c8 0f       	add	r28, r24
    312e:	d9 1f       	adc	r29, r25
    3130:	62 e0       	ldi	r22, 0x02	; 2
    3132:	c7 01       	movw	r24, r14
    3134:	0e 94 03 16 	call	0x2c06	; 0x2c06 <u8g2_font_get_word>
    3138:	f4 e0       	ldi	r31, 0x04	; 4
    313a:	ef 0e       	add	r14, r31
    313c:	f1 1c       	adc	r15, r1
    313e:	80 17       	cp	r24, r16
    3140:	91 07       	cpc	r25, r17
    3142:	80 f3       	brcs	.-32     	; 0x3124 <u8g2_font_get_glyph_data+0x9c>
    3144:	fe 01       	movw	r30, r28
    3146:	84 91       	lpm	r24, Z
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	98 2f       	mov	r25, r24
    314c:	88 27       	eor	r24, r24
    314e:	31 96       	adiw	r30, 0x01	; 1
    3150:	e4 91       	lpm	r30, Z
    3152:	8e 2b       	or	r24, r30
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	11 f1       	breq	.+68     	; 0x319c <u8g2_font_get_glyph_data+0x114>
    3158:	08 17       	cp	r16, r24
    315a:	19 07       	cpc	r17, r25
    315c:	39 f4       	brne	.+14     	; 0x316c <u8g2_font_get_glyph_data+0xe4>
    315e:	03 c0       	rjmp	.+6      	; 0x3166 <u8g2_font_get_glyph_data+0xde>
    3160:	08 17       	cp	r16, r24
    3162:	19 07       	cpc	r17, r25
    3164:	19 f4       	brne	.+6      	; 0x316c <u8g2_font_get_glyph_data+0xe4>
    3166:	ce 01       	movw	r24, r28
    3168:	03 96       	adiw	r24, 0x03	; 3
    316a:	1a c0       	rjmp	.+52     	; 0x31a0 <u8g2_font_get_glyph_data+0x118>
    316c:	fe 01       	movw	r30, r28
    316e:	32 96       	adiw	r30, 0x02	; 2
    3170:	e4 91       	lpm	r30, Z
    3172:	ce 0f       	add	r28, r30
    3174:	d1 1d       	adc	r29, r1
    3176:	fe 01       	movw	r30, r28
    3178:	84 91       	lpm	r24, Z
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	98 2f       	mov	r25, r24
    317e:	88 27       	eor	r24, r24
    3180:	31 96       	adiw	r30, 0x01	; 1
    3182:	e4 91       	lpm	r30, Z
    3184:	8e 2b       	or	r24, r30
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	59 f7       	brne	.-42     	; 0x3160 <u8g2_font_get_glyph_data+0xd8>
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	08 c0       	rjmp	.+16     	; 0x31a0 <u8g2_font_get_glyph_data+0x118>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	05 c0       	rjmp	.+10     	; 0x31a0 <u8g2_font_get_glyph_data+0x118>
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <u8g2_font_get_glyph_data+0x118>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	ff 90       	pop	r15
    31aa:	ef 90       	pop	r14
    31ac:	08 95       	ret

000031ae <u8g2_GetGlyphWidth>:
    31ae:	0f 93       	push	r16
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	ec 01       	movw	r28, r24
    31b8:	0e 94 44 18 	call	0x3088	; 0x3088 <u8g2_font_get_glyph_data>
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	f1 f0       	breq	.+60     	; 0x31fc <u8g2_GetGlyphWidth+0x4e>
    31c0:	bc 01       	movw	r22, r24
    31c2:	ce 01       	movw	r24, r28
    31c4:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <u8g2_font_setup_decode>
    31c8:	8e 01       	movw	r16, r28
    31ca:	07 5c       	subi	r16, 0xC7	; 199
    31cc:	1f 4f       	sbci	r17, 0xFF	; 255
    31ce:	fe 01       	movw	r30, r28
    31d0:	e4 5b       	subi	r30, 0xB4	; 180
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	60 81       	ld	r22, Z
    31d6:	c8 01       	movw	r24, r16
    31d8:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <u8g2_font_decode_get_signed_bits>
    31dc:	fe 01       	movw	r30, r28
    31de:	ef 59       	subi	r30, 0x9F	; 159
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 83       	st	Z, r24
    31e4:	74 97       	sbiw	r30, 0x14	; 20
    31e6:	60 81       	ld	r22, Z
    31e8:	c8 01       	movw	r24, r16
    31ea:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <u8g2_font_decode_get_signed_bits>
    31ee:	c2 5b       	subi	r28, 0xB2	; 178
    31f0:	df 4f       	sbci	r29, 0xFF	; 255
    31f2:	68 81       	ld	r22, Y
    31f4:	c8 01       	movw	r24, r16
    31f6:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <u8g2_font_decode_get_signed_bits>
    31fa:	01 c0       	rjmp	.+2      	; 0x31fe <u8g2_GetGlyphWidth+0x50>
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	df 91       	pop	r29
    3200:	cf 91       	pop	r28
    3202:	1f 91       	pop	r17
    3204:	0f 91       	pop	r16
    3206:	08 95       	ret

00003208 <u8g2_string_width>:
    3208:	ef 92       	push	r14
    320a:	ff 92       	push	r15
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	ec 01       	movw	r28, r24
    3216:	e6 2e       	mov	r14, r22
    3218:	f7 2e       	mov	r15, r23
    321a:	1f ae       	std	Y+63, r1	; 0x3f
    321c:	0e 94 46 1c 	call	0x388c	; 0x388c <u8x8_utf8_init>
    3220:	0e 2d       	mov	r16, r14
    3222:	1f 2d       	mov	r17, r15
    3224:	e1 2c       	mov	r14, r1
    3226:	f1 2c       	mov	r15, r1
    3228:	f8 01       	movw	r30, r16
    322a:	61 91       	ld	r22, Z+
    322c:	8f 01       	movw	r16, r30
    322e:	ea 81       	ldd	r30, Y+2	; 0x02
    3230:	fb 81       	ldd	r31, Y+3	; 0x03
    3232:	ce 01       	movw	r24, r28
    3234:	09 95       	icall
    3236:	8f 3f       	cpi	r24, 0xFF	; 255
    3238:	ff ef       	ldi	r31, 0xFF	; 255
    323a:	9f 07       	cpc	r25, r31
    323c:	59 f0       	breq	.+22     	; 0x3254 <u8g2_string_width+0x4c>
    323e:	8e 3f       	cpi	r24, 0xFE	; 254
    3240:	2f ef       	ldi	r18, 0xFF	; 255
    3242:	92 07       	cpc	r25, r18
    3244:	89 f3       	breq	.-30     	; 0x3228 <u8g2_string_width+0x20>
    3246:	bc 01       	movw	r22, r24
    3248:	ce 01       	movw	r24, r28
    324a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <u8g2_GetGlyphWidth>
    324e:	e8 2e       	mov	r14, r24
    3250:	f8 0e       	add	r15, r24
    3252:	ea cf       	rjmp	.-44     	; 0x3228 <u8g2_string_width+0x20>
    3254:	8f ad       	ldd	r24, Y+63	; 0x3f
    3256:	88 23       	and	r24, r24
    3258:	31 f0       	breq	.+12     	; 0x3266 <u8g2_string_width+0x5e>
    325a:	cf 59       	subi	r28, 0x9F	; 159
    325c:	df 4f       	sbci	r29, 0xFF	; 255
    325e:	98 81       	ld	r25, Y
    3260:	89 0f       	add	r24, r25
    3262:	f8 0e       	add	r15, r24
    3264:	fe 18       	sub	r15, r14
    3266:	8f 2d       	mov	r24, r15
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	ff 90       	pop	r15
    3272:	ef 90       	pop	r14
    3274:	08 95       	ret

00003276 <u8g2_DrawGlyph>:
    3276:	ef 92       	push	r14
    3278:	ff 92       	push	r15
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	cf 93       	push	r28
    3280:	df 93       	push	r29
    3282:	ec 01       	movw	r28, r24
    3284:	06 2f       	mov	r16, r22
    3286:	14 2f       	mov	r17, r20
    3288:	79 01       	movw	r14, r18
    328a:	fc 01       	movw	r30, r24
    328c:	eb 5b       	subi	r30, 0xBB	; 187
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	61 f0       	breq	.+24     	; 0x32ae <u8g2_DrawGlyph+0x38>
    3296:	28 f0       	brcs	.+10     	; 0x32a2 <u8g2_DrawGlyph+0x2c>
    3298:	82 30       	cpi	r24, 0x02	; 2
    329a:	79 f0       	breq	.+30     	; 0x32ba <u8g2_DrawGlyph+0x44>
    329c:	83 30       	cpi	r24, 0x03	; 3
    329e:	99 f0       	breq	.+38     	; 0x32c6 <u8g2_DrawGlyph+0x50>
    32a0:	17 c0       	rjmp	.+46     	; 0x32d0 <u8g2_DrawGlyph+0x5a>
    32a2:	ef a9       	ldd	r30, Y+55	; 0x37
    32a4:	f8 ad       	ldd	r31, Y+56	; 0x38
    32a6:	ce 01       	movw	r24, r28
    32a8:	09 95       	icall
    32aa:	18 0f       	add	r17, r24
    32ac:	11 c0       	rjmp	.+34     	; 0x32d0 <u8g2_DrawGlyph+0x5a>
    32ae:	ef a9       	ldd	r30, Y+55	; 0x37
    32b0:	f8 ad       	ldd	r31, Y+56	; 0x38
    32b2:	ce 01       	movw	r24, r28
    32b4:	09 95       	icall
    32b6:	08 1b       	sub	r16, r24
    32b8:	0b c0       	rjmp	.+22     	; 0x32d0 <u8g2_DrawGlyph+0x5a>
    32ba:	ef a9       	ldd	r30, Y+55	; 0x37
    32bc:	f8 ad       	ldd	r31, Y+56	; 0x38
    32be:	ce 01       	movw	r24, r28
    32c0:	09 95       	icall
    32c2:	18 1b       	sub	r17, r24
    32c4:	05 c0       	rjmp	.+10     	; 0x32d0 <u8g2_DrawGlyph+0x5a>
    32c6:	ef a9       	ldd	r30, Y+55	; 0x37
    32c8:	f8 ad       	ldd	r31, Y+56	; 0x38
    32ca:	ce 01       	movw	r24, r28
    32cc:	09 95       	icall
    32ce:	08 0f       	add	r16, r24
    32d0:	0b af       	std	Y+59, r16	; 0x3b
    32d2:	1c af       	std	Y+60, r17	; 0x3c
    32d4:	b7 01       	movw	r22, r14
    32d6:	ce 01       	movw	r24, r28
    32d8:	0e 94 44 18 	call	0x3088	; 0x3088 <u8g2_font_get_glyph_data>
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	29 f0       	breq	.+10     	; 0x32ea <u8g2_DrawGlyph+0x74>
    32e0:	bc 01       	movw	r22, r24
    32e2:	ce 01       	movw	r24, r28
    32e4:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <u8g2_font_decode_glyph>
    32e8:	01 c0       	rjmp	.+2      	; 0x32ec <u8g2_DrawGlyph+0x76>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	08 95       	ret

000032fa <u8g2_draw_string>:
    32fa:	bf 92       	push	r11
    32fc:	cf 92       	push	r12
    32fe:	df 92       	push	r13
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	ec 01       	movw	r28, r24
    330e:	b6 2e       	mov	r11, r22
    3310:	c4 2e       	mov	r12, r20
    3312:	e2 2e       	mov	r14, r18
    3314:	f3 2e       	mov	r15, r19
    3316:	0e 94 46 1c 	call	0x388c	; 0x388c <u8x8_utf8_init>
    331a:	0e 2d       	mov	r16, r14
    331c:	1f 2d       	mov	r17, r15
    331e:	d1 2c       	mov	r13, r1
    3320:	7e 01       	movw	r14, r28
    3322:	25 e4       	ldi	r18, 0x45	; 69
    3324:	e2 0e       	add	r14, r18
    3326:	f1 1c       	adc	r15, r1
    3328:	f8 01       	movw	r30, r16
    332a:	61 91       	ld	r22, Z+
    332c:	8f 01       	movw	r16, r30
    332e:	ea 81       	ldd	r30, Y+2	; 0x02
    3330:	fb 81       	ldd	r31, Y+3	; 0x03
    3332:	ce 01       	movw	r24, r28
    3334:	09 95       	icall
    3336:	8f 3f       	cpi	r24, 0xFF	; 255
    3338:	ff ef       	ldi	r31, 0xFF	; 255
    333a:	9f 07       	cpc	r25, r31
    333c:	e9 f0       	breq	.+58     	; 0x3378 <u8g2_draw_string+0x7e>
    333e:	8e 3f       	cpi	r24, 0xFE	; 254
    3340:	2f ef       	ldi	r18, 0xFF	; 255
    3342:	92 07       	cpc	r25, r18
    3344:	89 f3       	breq	.-30     	; 0x3328 <u8g2_draw_string+0x2e>
    3346:	9c 01       	movw	r18, r24
    3348:	4c 2d       	mov	r20, r12
    334a:	6b 2d       	mov	r22, r11
    334c:	ce 01       	movw	r24, r28
    334e:	0e 94 3b 19 	call	0x3276	; 0x3276 <u8g2_DrawGlyph>
    3352:	f7 01       	movw	r30, r14
    3354:	90 81       	ld	r25, Z
    3356:	91 30       	cpi	r25, 0x01	; 1
    3358:	41 f0       	breq	.+16     	; 0x336a <u8g2_draw_string+0x70>
    335a:	28 f0       	brcs	.+10     	; 0x3366 <u8g2_draw_string+0x6c>
    335c:	92 30       	cpi	r25, 0x02	; 2
    335e:	39 f0       	breq	.+14     	; 0x336e <u8g2_draw_string+0x74>
    3360:	93 30       	cpi	r25, 0x03	; 3
    3362:	39 f0       	breq	.+14     	; 0x3372 <u8g2_draw_string+0x78>
    3364:	07 c0       	rjmp	.+14     	; 0x3374 <u8g2_draw_string+0x7a>
    3366:	b8 0e       	add	r11, r24
    3368:	05 c0       	rjmp	.+10     	; 0x3374 <u8g2_draw_string+0x7a>
    336a:	c8 0e       	add	r12, r24
    336c:	03 c0       	rjmp	.+6      	; 0x3374 <u8g2_draw_string+0x7a>
    336e:	b8 1a       	sub	r11, r24
    3370:	01 c0       	rjmp	.+2      	; 0x3374 <u8g2_draw_string+0x7a>
    3372:	c8 1a       	sub	r12, r24
    3374:	d8 0e       	add	r13, r24
    3376:	d8 cf       	rjmp	.-80     	; 0x3328 <u8g2_draw_string+0x2e>
    3378:	8d 2d       	mov	r24, r13
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	ff 90       	pop	r15
    3384:	ef 90       	pop	r14
    3386:	df 90       	pop	r13
    3388:	cf 90       	pop	r12
    338a:	bf 90       	pop	r11
    338c:	08 95       	ret

0000338e <u8g2_DrawStr>:
    338e:	e9 e3       	ldi	r30, 0x39	; 57
    3390:	fc e1       	ldi	r31, 0x1C	; 28
    3392:	dc 01       	movw	r26, r24
    3394:	13 96       	adiw	r26, 0x03	; 3
    3396:	fc 93       	st	X, r31
    3398:	ee 93       	st	-X, r30
    339a:	12 97       	sbiw	r26, 0x02	; 2
    339c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <u8g2_draw_string>
    33a0:	08 95       	ret

000033a2 <u8g2_UpdateRefHeight>:
    33a2:	fc 01       	movw	r30, r24
    33a4:	25 a9       	ldd	r18, Z+53	; 0x35
    33a6:	36 a9       	ldd	r19, Z+54	; 0x36
    33a8:	23 2b       	or	r18, r19
    33aa:	e9 f1       	breq	.+122    	; 0x3426 <u8g2_UpdateRefHeight+0x84>
    33ac:	ed 5a       	subi	r30, 0xAD	; 173
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	20 81       	ld	r18, Z
    33b2:	3c 96       	adiw	r30, 0x0c	; 12
    33b4:	20 83       	st	Z, r18
    33b6:	3b 97       	sbiw	r30, 0x0b	; 11
    33b8:	40 81       	ld	r20, Z
    33ba:	3c 96       	adiw	r30, 0x0c	; 12
    33bc:	40 83       	st	Z, r20
    33be:	32 97       	sbiw	r30, 0x02	; 2
    33c0:	30 81       	ld	r19, Z
    33c2:	33 23       	and	r19, r19
    33c4:	81 f1       	breq	.+96     	; 0x3426 <u8g2_UpdateRefHeight+0x84>
    33c6:	31 30       	cpi	r19, 0x01	; 1
    33c8:	79 f4       	brne	.+30     	; 0x33e8 <u8g2_UpdateRefHeight+0x46>
    33ca:	39 97       	sbiw	r30, 0x09	; 9
    33cc:	30 81       	ld	r19, Z
    33ce:	23 17       	cp	r18, r19
    33d0:	14 f4       	brge	.+4      	; 0x33d6 <u8g2_UpdateRefHeight+0x34>
    33d2:	3a 96       	adiw	r30, 0x0a	; 10
    33d4:	30 83       	st	Z, r19
    33d6:	fc 01       	movw	r30, r24
    33d8:	ea 5a       	subi	r30, 0xAA	; 170
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	20 81       	ld	r18, Z
    33de:	24 17       	cp	r18, r20
    33e0:	14 f5       	brge	.+68     	; 0x3426 <u8g2_UpdateRefHeight+0x84>
    33e2:	3a 96       	adiw	r30, 0x0a	; 10
    33e4:	20 83       	st	Z, r18
    33e6:	08 95       	ret
    33e8:	fc 01       	movw	r30, r24
    33ea:	e0 5b       	subi	r30, 0xB0	; 176
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	e0 81       	ld	r30, Z
    33f0:	dc 01       	movw	r26, r24
    33f2:	ae 5a       	subi	r26, 0xAE	; 174
    33f4:	bf 4f       	sbci	r27, 0xFF	; 255
    33f6:	5c 91       	ld	r21, X
    33f8:	02 2e       	mov	r0, r18
    33fa:	00 0c       	add	r0, r0
    33fc:	33 0b       	sbc	r19, r19
    33fe:	65 2f       	mov	r22, r21
    3400:	05 2e       	mov	r0, r21
    3402:	00 0c       	add	r0, r0
    3404:	77 0b       	sbc	r23, r23
    3406:	6e 0f       	add	r22, r30
    3408:	71 1d       	adc	r23, r1
    340a:	e7 fd       	sbrc	r30, 7
    340c:	7a 95       	dec	r23
    340e:	26 17       	cp	r18, r22
    3410:	37 07       	cpc	r19, r23
    3412:	1c f4       	brge	.+6      	; 0x341a <u8g2_UpdateRefHeight+0x78>
    3414:	1d 96       	adiw	r26, 0x0d	; 13
    3416:	e5 0f       	add	r30, r21
    3418:	ec 93       	st	X, r30
    341a:	54 17       	cp	r21, r20
    341c:	24 f4       	brge	.+8      	; 0x3426 <u8g2_UpdateRefHeight+0x84>
    341e:	fc 01       	movw	r30, r24
    3420:	e0 5a       	subi	r30, 0xA0	; 160
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	50 83       	st	Z, r21
    3426:	08 95       	ret

00003428 <u8g2_SetFontPosBaseline>:
    3428:	2f e0       	ldi	r18, 0x0F	; 15
    342a:	36 e1       	ldi	r19, 0x16	; 22
    342c:	fc 01       	movw	r30, r24
    342e:	30 af       	std	Z+56, r19	; 0x38
    3430:	27 ab       	std	Z+55, r18	; 0x37
    3432:	08 95       	ret

00003434 <u8g2_SetFont>:
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	fc 01       	movw	r30, r24
    343a:	25 a9       	ldd	r18, Z+53	; 0x35
    343c:	36 a9       	ldd	r19, Z+54	; 0x36
    343e:	26 17       	cp	r18, r22
    3440:	37 07       	cpc	r19, r23
    3442:	51 f0       	breq	.+20     	; 0x3458 <u8g2_SetFont+0x24>
    3444:	ec 01       	movw	r28, r24
    3446:	76 ab       	std	Z+54, r23	; 0x36
    3448:	65 ab       	std	Z+53, r22	; 0x35
    344a:	8a 5b       	subi	r24, 0xBA	; 186
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <u8g2_read_font_info>
    3452:	ce 01       	movw	r24, r28
    3454:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <u8g2_UpdateRefHeight>
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret

0000345e <u8g2_GetStrWidth>:
    345e:	29 e3       	ldi	r18, 0x39	; 57
    3460:	3c e1       	ldi	r19, 0x1C	; 28
    3462:	fc 01       	movw	r30, r24
    3464:	33 83       	std	Z+3, r19	; 0x03
    3466:	22 83       	std	Z+2, r18	; 0x02
    3468:	0e 94 04 19 	call	0x3208	; 0x3208 <u8g2_string_width>
    346c:	08 95       	ret

0000346e <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    346e:	8b 5b       	subi	r24, 0xBB	; 187
    3470:	9f 4f       	sbci	r25, 0xFF	; 255
    3472:	fc 01       	movw	r30, r24
    3474:	60 83       	st	Z, r22
    3476:	08 95       	ret

00003478 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3478:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    347a:	dc 01       	movw	r26, r24
    347c:	98 96       	adiw	r26, 0x28	; 40
    347e:	3c 91       	ld	r19, X
    3480:	98 97       	sbiw	r26, 0x28	; 40
    3482:	43 1b       	sub	r20, r19
    3484:	5e 96       	adiw	r26, 0x1e	; 30
    3486:	ed 91       	ld	r30, X+
    3488:	fc 91       	ld	r31, X
    348a:	5f 97       	sbiw	r26, 0x1f	; 31
    348c:	09 95       	icall
}
    348e:	0f 91       	pop	r16
    3490:	08 95       	ret

00003492 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3492:	0f 93       	push	r16
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    3494:	fc 01       	movw	r30, r24
    3496:	e3 5a       	subi	r30, 0xA3	; 163
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	30 81       	ld	r19, Z
    349c:	33 23       	and	r19, r19
    349e:	09 f4       	brne	.+2      	; 0x34a2 <u8g2_DrawHVLine+0x10>
    34a0:	65 c0       	rjmp	.+202    	; 0x356c <u8g2_DrawHVLine+0xda>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    34a2:	22 23       	and	r18, r18
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <u8g2_DrawHVLine+0x16>
    34a6:	62 c0       	rjmp	.+196    	; 0x356c <u8g2_DrawHVLine+0xda>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    34a8:	22 30       	cpi	r18, 0x02	; 2
    34aa:	58 f0       	brcs	.+22     	; 0x34c2 <u8g2_DrawHVLine+0x30>
      {
	if ( dir == 2 )
    34ac:	02 30       	cpi	r16, 0x02	; 2
    34ae:	19 f4       	brne	.+6      	; 0x34b6 <u8g2_DrawHVLine+0x24>
    34b0:	6f 5f       	subi	r22, 0xFF	; 255
	{
	  x -= len;
	  x++;
    34b2:	62 1b       	sub	r22, r18
    34b4:	0a c0       	rjmp	.+20     	; 0x34ca <u8g2_DrawHVLine+0x38>
	}
	else if ( dir == 3 )
    34b6:	03 30       	cpi	r16, 0x03	; 3
    34b8:	21 f4       	brne	.+8      	; 0x34c2 <u8g2_DrawHVLine+0x30>
    34ba:	4f 5f       	subi	r20, 0xFF	; 255
	{
	  y -= len;
	  y++;
    34bc:	42 1b       	sub	r20, r18
	}
      }
      dir &= 1;  
    34be:	51 e0       	ldi	r21, 0x01	; 1
    34c0:	2d c0       	rjmp	.+90     	; 0x351c <u8g2_DrawHVLine+0x8a>
      
      /* clip against the user window */
      if ( dir == 0 )
    34c2:	50 2f       	mov	r21, r16
    34c4:	51 70       	andi	r21, 0x01	; 1
    34c6:	00 fd       	sbrc	r16, 0
    34c8:	29 c0       	rjmp	.+82     	; 0x351c <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
    34ca:	dc 01       	movw	r26, r24
    34cc:	9f 96       	adiw	r26, 0x2f	; 47
    34ce:	3c 91       	ld	r19, X
    34d0:	9f 97       	sbiw	r26, 0x2f	; 47
    34d2:	43 17       	cp	r20, r19
    34d4:	08 f4       	brcc	.+2      	; 0x34d8 <u8g2_DrawHVLine+0x46>
    34d6:	4a c0       	rjmp	.+148    	; 0x356c <u8g2_DrawHVLine+0xda>
	  return;
	if ( y >= u8g2->user_y1 )
    34d8:	d0 96       	adiw	r26, 0x30	; 48
    34da:	3c 91       	ld	r19, X
    34dc:	d0 97       	sbiw	r26, 0x30	; 48
    34de:	43 17       	cp	r20, r19
    34e0:	08 f0       	brcs	.+2      	; 0x34e4 <u8g2_DrawHVLine+0x52>
    34e2:	44 c0       	rjmp	.+136    	; 0x356c <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    34e4:	9e 96       	adiw	r26, 0x2e	; 46
    34e6:	3c 91       	ld	r19, X
    34e8:	9e 97       	sbiw	r26, 0x2e	; 46
    34ea:	9d 96       	adiw	r26, 0x2d	; 45
    34ec:	5c 91       	ld	r21, X
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    34ee:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    34f0:	26 17       	cp	r18, r22
    34f2:	30 f4       	brcc	.+12     	; 0x3500 <u8g2_DrawHVLine+0x6e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    34f4:	63 17       	cp	r22, r19
    34f6:	18 f4       	brcc	.+6      	; 0x34fe <u8g2_DrawHVLine+0x6c>
    {
      b = d;
      b--;
    34f8:	2f ef       	ldi	r18, 0xFF	; 255
    34fa:	23 0f       	add	r18, r19
    34fc:	03 c0       	rjmp	.+6      	; 0x3504 <u8g2_DrawHVLine+0x72>
    }
    else
    {
      a = c;
    34fe:	65 2f       	mov	r22, r21
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    3500:	63 17       	cp	r22, r19
    3502:	a0 f5       	brcc	.+104    	; 0x356c <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    3504:	52 17       	cp	r21, r18
    3506:	90 f5       	brcc	.+100    	; 0x356c <u8g2_DrawHVLine+0xda>
    3508:	65 17       	cp	r22, r21
    350a:	08 f4       	brcc	.+2      	; 0x350e <u8g2_DrawHVLine+0x7c>
    350c:	65 2f       	mov	r22, r21
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    350e:	23 17       	cp	r18, r19
    3510:	08 f4       	brcc	.+2      	; 0x3514 <u8g2_DrawHVLine+0x82>
    3512:	32 2f       	mov	r19, r18
    3514:	23 2f       	mov	r18, r19
    3516:	26 1b       	sub	r18, r22
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	1e c0       	rjmp	.+60     	; 0x3558 <u8g2_DrawHVLine+0xc6>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    351c:	fc 01       	movw	r30, r24
    351e:	35 a5       	ldd	r19, Z+45	; 0x2d
    3520:	63 17       	cp	r22, r19
    3522:	20 f1       	brcs	.+72     	; 0x356c <u8g2_DrawHVLine+0xda>
	  return;
	if ( x >= u8g2->user_x1 )
    3524:	36 a5       	ldd	r19, Z+46	; 0x2e
    3526:	63 17       	cp	r22, r19
    3528:	08 f5       	brcc	.+66     	; 0x356c <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    352a:	30 a9       	ldd	r19, Z+48	; 0x30
    352c:	77 a5       	ldd	r23, Z+47	; 0x2f
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    352e:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    3530:	24 17       	cp	r18, r20
    3532:	30 f4       	brcc	.+12     	; 0x3540 <u8g2_DrawHVLine+0xae>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    3534:	43 17       	cp	r20, r19
    3536:	18 f4       	brcc	.+6      	; 0x353e <u8g2_DrawHVLine+0xac>
    {
      b = d;
      b--;
    3538:	2f ef       	ldi	r18, 0xFF	; 255
    353a:	23 0f       	add	r18, r19
    353c:	03 c0       	rjmp	.+6      	; 0x3544 <u8g2_DrawHVLine+0xb2>
    }
    else
    {
      a = c;
    353e:	47 2f       	mov	r20, r23
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    3540:	43 17       	cp	r20, r19
    3542:	a0 f4       	brcc	.+40     	; 0x356c <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    3544:	72 17       	cp	r23, r18
    3546:	90 f4       	brcc	.+36     	; 0x356c <u8g2_DrawHVLine+0xda>
    3548:	47 17       	cp	r20, r23
    354a:	08 f4       	brcc	.+2      	; 0x354e <u8g2_DrawHVLine+0xbc>
    354c:	47 2f       	mov	r20, r23
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    354e:	23 17       	cp	r18, r19
    3550:	08 f4       	brcc	.+2      	; 0x3554 <u8g2_DrawHVLine+0xc2>
    3552:	32 2f       	mov	r19, r18
    3554:	23 2f       	mov	r18, r19
    3556:	24 1b       	sub	r18, r20
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    3558:	dc 01       	movw	r26, r24
    355a:	90 96       	adiw	r26, 0x20	; 32
    355c:	ed 91       	ld	r30, X+
    355e:	fc 91       	ld	r31, X
    3560:	91 97       	sbiw	r26, 0x21	; 33
    3562:	04 80       	ldd	r0, Z+4	; 0x04
    3564:	f5 81       	ldd	r31, Z+5	; 0x05
    3566:	e0 2d       	mov	r30, r0
    3568:	05 2f       	mov	r16, r21
    356a:	09 95       	icall
    }
}
    356c:	0f 91       	pop	r16
    356e:	08 95       	ret

00003570 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    3570:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    3572:	00 e0       	ldi	r16, 0x00	; 0
    3574:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
}
    3578:	0f 91       	pop	r16
    357a:	08 95       	ret

0000357c <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    357c:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
    357e:	01 e0       	ldi	r16, 0x01	; 1
    3580:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
}
    3584:	0f 91       	pop	r16
    3586:	08 95       	ret

00003588 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    3588:	0f 93       	push	r16
    358a:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    358c:	87 a5       	ldd	r24, Z+47	; 0x2f
    358e:	48 17       	cp	r20, r24
    3590:	70 f0       	brcs	.+28     	; 0x35ae <u8g2_DrawPixel+0x26>
    return;
  if ( y >= u8g2->user_y1 )
    3592:	80 a9       	ldd	r24, Z+48	; 0x30
    3594:	48 17       	cp	r20, r24
    3596:	58 f4       	brcc	.+22     	; 0x35ae <u8g2_DrawPixel+0x26>
    return;
  if ( x < u8g2->user_x0 )
    3598:	85 a5       	ldd	r24, Z+45	; 0x2d
    359a:	68 17       	cp	r22, r24
    359c:	40 f0       	brcs	.+16     	; 0x35ae <u8g2_DrawPixel+0x26>
    return;
  if ( x >= u8g2->user_x1 )
    359e:	86 a5       	ldd	r24, Z+46	; 0x2e
    35a0:	68 17       	cp	r22, r24
    35a2:	28 f4       	brcc	.+10     	; 0x35ae <u8g2_DrawPixel+0x26>
    35a4:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    35a6:	00 e0       	ldi	r16, 0x00	; 0
    35a8:	21 e0       	ldi	r18, 0x01	; 1
    35aa:	0e 94 49 1a 	call	0x3492	; 0x3492 <u8g2_DrawHVLine>
}
    35ae:	0f 91       	pop	r16
    35b0:	08 95       	ret

000035b2 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    35b2:	63 30       	cpi	r22, 0x03	; 3
    35b4:	28 f4       	brcc	.+10     	; 0x35c0 <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    35b6:	fc 01       	movw	r30, r24
    35b8:	ed 59       	subi	r30, 0x9D	; 157
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	60 83       	st	Z, r22
    35be:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    35c0:	fc 01       	movw	r30, r24
    35c2:	ed 59       	subi	r30, 0x9D	; 157
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	21 e0       	ldi	r18, 0x01	; 1
    35c8:	20 83       	st	Z, r18
    35ca:	08 95       	ret

000035cc <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    35cc:	46 17       	cp	r20, r22
    35ce:	38 f4       	brcc	.+14     	; 0x35de <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
    35d0:	82 17       	cp	r24, r18
    35d2:	60 f0       	brcs	.+24     	; 0x35ec <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	24 17       	cp	r18, r20
    35d8:	60 f0       	brcs	.+24     	; 0x35f2 <u8g2_is_intersection_decision_tree+0x26>
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    35de:	82 17       	cp	r24, r18
    35e0:	38 f4       	brcc	.+14     	; 0x35f0 <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	24 17       	cp	r18, r20
    35e6:	28 f0       	brcs	.+10     	; 0x35f2 <u8g2_is_intersection_decision_tree+0x26>
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	08 95       	ret
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    35f2:	08 95       	ret

000035f4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    35f4:	ff 92       	push	r15
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	ec 01       	movw	r28, r24
    3600:	16 2f       	mov	r17, r22
    3602:	f2 2e       	mov	r15, r18
    3604:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    3606:	68 a9       	ldd	r22, Y+48	; 0x30
    3608:	8f a5       	ldd	r24, Y+47	; 0x2f
    360a:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <u8g2_is_intersection_decision_tree>
    360e:	88 23       	and	r24, r24
    3610:	31 f0       	breq	.+12     	; 0x361e <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    3612:	2f 2d       	mov	r18, r15
    3614:	41 2f       	mov	r20, r17
    3616:	6e a5       	ldd	r22, Y+46	; 0x2e
    3618:	8d a5       	ldd	r24, Y+45	; 0x2d
    361a:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <u8g2_is_intersection_decision_tree>
}
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	ff 90       	pop	r15
    3628:	08 95       	ret

0000362a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	0f 93       	push	r16
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    3636:	34 2f       	mov	r19, r20
    3638:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	03 2e       	mov	r0, r19
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	0a 94       	dec	r0
    3648:	e2 f7       	brpl	.-8      	; 0x3642 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    364a:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    364c:	f7 01       	movw	r30, r14
    364e:	ed 59       	subi	r30, 0x9D	; 157
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	50 81       	ld	r21, Z
    3654:	52 30       	cpi	r21, 0x02	; 2
    3656:	20 f4       	brcc	.+8      	; 0x3660 <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    3658:	51 30       	cpi	r21, 0x01	; 1
    365a:	21 f0       	breq	.+8      	; 0x3664 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    365c:	78 2f       	mov	r23, r24
    365e:	04 c0       	rjmp	.+8      	; 0x3668 <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    3664:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    3666:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    3668:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    366a:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    366c:	d7 01       	movw	r26, r14
    366e:	92 96       	adiw	r26, 0x22	; 34
    3670:	8d 91       	ld	r24, X+
    3672:	9c 91       	ld	r25, X
    3674:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    3676:	ed 91       	ld	r30, X+
    3678:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    367a:	d0 89       	ldd	r29, Z+16	; 0x10
    367c:	d4 9f       	mul	r29, r20
    367e:	f0 01       	movw	r30, r0
    3680:	d5 9f       	mul	r29, r21
    3682:	f0 0d       	add	r31, r0
    3684:	11 24       	eor	r1, r1
    3686:	e6 0f       	add	r30, r22
    3688:	f1 1d       	adc	r31, r1
    368a:	e8 0f       	add	r30, r24
    368c:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    368e:	01 11       	cpse	r16, r1
    3690:	07 c0       	rjmp	.+14     	; 0x36a0 <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    3692:	80 81       	ld	r24, Z
    3694:	87 2b       	or	r24, r23
    3696:	8c 27       	eor	r24, r28
    3698:	81 93       	st	Z+, r24
	ptr++;
	len--;
    369a:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    369c:	d1 f7       	brne	.-12     	; 0x3692 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    369e:	22 c0       	rjmp	.+68     	; 0x36e4 <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    36a0:	a7 01       	movw	r20, r14
    36a2:	4d 59       	subi	r20, 0x9D	; 157
    36a4:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    36a6:	90 81       	ld	r25, Z
    36a8:	97 2b       	or	r25, r23
    36aa:	9c 27       	eor	r25, r28
    36ac:	90 83       	st	Z, r25
      
      bit_pos++;
    36ae:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    36b0:	37 70       	andi	r19, 0x07	; 7

      len--;
    36b2:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    36b4:	31 11       	cpse	r19, r1
    36b6:	0e c0       	rjmp	.+28     	; 0x36d4 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    36b8:	d7 01       	movw	r26, r14
    36ba:	96 96       	adiw	r26, 0x26	; 38
    36bc:	8c 91       	ld	r24, X
    36be:	e8 0f       	add	r30, r24
    36c0:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    36c2:	da 01       	movw	r26, r20
    36c4:	8c 91       	ld	r24, X
    36c6:	82 30       	cpi	r24, 0x02	; 2
    36c8:	40 f4       	brcc	.+16     	; 0x36da <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    36ca:	81 30       	cpi	r24, 0x01	; 1
    36cc:	41 f0       	breq	.+16     	; 0x36de <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    36ce:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    36d0:	71 e0       	ldi	r23, 0x01	; 1
    36d2:	06 c0       	rjmp	.+12     	; 0x36e0 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    36d4:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    36d6:	cc 0f       	add	r28, r28
    36d8:	03 c0       	rjmp	.+6      	; 0x36e0 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    36da:	c1 e0       	ldi	r28, 0x01	; 1
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    36de:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    36e0:	21 11       	cpse	r18, r1
    36e2:	e1 cf       	rjmp	.-62     	; 0x36a6 <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	0f 91       	pop	r16
    36ea:	ff 90       	pop	r15
    36ec:	ef 90       	pop	r14
    36ee:	08 95       	ret

000036f0 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    36f0:	fc 01       	movw	r30, r24
    36f2:	a0 81       	ld	r26, Z
    36f4:	b1 81       	ldd	r27, Z+1	; 0x01
    36f6:	84 a1       	ldd	r24, Z+36	; 0x24
    36f8:	98 2f       	mov	r25, r24
    36fa:	99 0f       	add	r25, r25
    36fc:	99 0f       	add	r25, r25
    36fe:	99 0f       	add	r25, r25
    3700:	97 a3       	std	Z+39, r25	; 0x27
    3702:	50 96       	adiw	r26, 0x10	; 16
    3704:	9c 91       	ld	r25, X
    3706:	50 97       	sbiw	r26, 0x10	; 16
    3708:	90 32       	cpi	r25, 0x20	; 32
    370a:	08 f0       	brcs	.+2      	; 0x370e <u8g2_update_dimension_common+0x1e>
    370c:	9f e1       	ldi	r25, 0x1F	; 31
    370e:	99 0f       	add	r25, r25
    3710:	99 0f       	add	r25, r25
    3712:	99 0f       	add	r25, r25
    3714:	96 a3       	std	Z+38, r25	; 0x26
    3716:	45 a1       	ldd	r20, Z+37	; 0x25
    3718:	94 2f       	mov	r25, r20
    371a:	99 0f       	add	r25, r25
    371c:	99 0f       	add	r25, r25
    371e:	99 0f       	add	r25, r25
    3720:	90 a7       	std	Z+40, r25	; 0x28
    3722:	51 96       	adiw	r26, 0x11	; 17
    3724:	5c 91       	ld	r21, X
    3726:	51 97       	sbiw	r26, 0x11	; 17
    3728:	24 2f       	mov	r18, r20
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	28 0f       	add	r18, r24
    372e:	31 1d       	adc	r19, r1
    3730:	65 2f       	mov	r22, r21
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	62 17       	cp	r22, r18
    3736:	73 07       	cpc	r23, r19
    3738:	14 f4       	brge	.+4      	; 0x373e <u8g2_update_dimension_common+0x4e>
    373a:	85 2f       	mov	r24, r21
    373c:	84 1b       	sub	r24, r20
    373e:	91 a7       	std	Z+41, r25	; 0x29
    3740:	88 0f       	add	r24, r24
    3742:	88 0f       	add	r24, r24
    3744:	88 0f       	add	r24, r24
    3746:	89 0f       	add	r24, r25
    3748:	82 a7       	std	Z+42, r24	; 0x2a
    374a:	80 ef       	ldi	r24, 0xF0	; 240
    374c:	83 a7       	std	Z+43, r24	; 0x2b
    374e:	54 96       	adiw	r26, 0x14	; 20
    3750:	8d 91       	ld	r24, X+
    3752:	9c 91       	ld	r25, X
    3754:	55 97       	sbiw	r26, 0x15	; 21
    3756:	81 3f       	cpi	r24, 0xF1	; 241
    3758:	91 05       	cpc	r25, r1
    375a:	08 f4       	brcc	.+2      	; 0x375e <u8g2_update_dimension_common+0x6e>
    375c:	83 a7       	std	Z+43, r24	; 0x2b
    375e:	56 96       	adiw	r26, 0x16	; 22
    3760:	8c 91       	ld	r24, X
    3762:	84 a7       	std	Z+44, r24	; 0x2c
    3764:	08 95       	ret

00003766 <u8g2_update_dimension_r0>:
    3766:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <u8g2_update_dimension_common>
    376a:	08 95       	ret

0000376c <u8g2_apply_clip_window>:
    376c:	0f 93       	push	r16
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	ec 01       	movw	r28, r24
    3774:	0c a9       	ldd	r16, Y+52	; 0x34
    3776:	2a a9       	ldd	r18, Y+50	; 0x32
    3778:	4b a9       	ldd	r20, Y+51	; 0x33
    377a:	69 a9       	ldd	r22, Y+49	; 0x31
    377c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <u8g2_IsIntersection>
    3780:	81 11       	cpse	r24, r1
    3782:	04 c0       	rjmp	.+8      	; 0x378c <u8g2_apply_clip_window+0x20>
    3784:	c3 5a       	subi	r28, 0xA3	; 163
    3786:	df 4f       	sbci	r29, 0xFF	; 255
    3788:	18 82       	st	Y, r1
    378a:	19 c0       	rjmp	.+50     	; 0x37be <u8g2_apply_clip_window+0x52>
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	fe 01       	movw	r30, r28
    3790:	e3 5a       	subi	r30, 0xA3	; 163
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 83       	st	Z, r24
    3796:	89 a9       	ldd	r24, Y+49	; 0x31
    3798:	9d a5       	ldd	r25, Y+45	; 0x2d
    379a:	98 17       	cp	r25, r24
    379c:	08 f4       	brcc	.+2      	; 0x37a0 <u8g2_apply_clip_window+0x34>
    379e:	8d a7       	std	Y+45, r24	; 0x2d
    37a0:	8a a9       	ldd	r24, Y+50	; 0x32
    37a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    37a4:	89 17       	cp	r24, r25
    37a6:	08 f4       	brcc	.+2      	; 0x37aa <u8g2_apply_clip_window+0x3e>
    37a8:	8e a7       	std	Y+46, r24	; 0x2e
    37aa:	8b a9       	ldd	r24, Y+51	; 0x33
    37ac:	9f a5       	ldd	r25, Y+47	; 0x2f
    37ae:	98 17       	cp	r25, r24
    37b0:	08 f4       	brcc	.+2      	; 0x37b4 <u8g2_apply_clip_window+0x48>
    37b2:	8f a7       	std	Y+47, r24	; 0x2f
    37b4:	8c a9       	ldd	r24, Y+52	; 0x34
    37b6:	98 a9       	ldd	r25, Y+48	; 0x30
    37b8:	89 17       	cp	r24, r25
    37ba:	08 f4       	brcc	.+2      	; 0x37be <u8g2_apply_clip_window+0x52>
    37bc:	88 ab       	std	Y+48, r24	; 0x30
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	0f 91       	pop	r16
    37c4:	08 95       	ret

000037c6 <u8g2_update_page_win_r0>:
    37c6:	fc 01       	movw	r30, r24
    37c8:	15 a6       	std	Z+45, r1	; 0x2d
    37ca:	83 a5       	ldd	r24, Z+43	; 0x2b
    37cc:	86 a7       	std	Z+46, r24	; 0x2e
    37ce:	81 a5       	ldd	r24, Z+41	; 0x29
    37d0:	87 a7       	std	Z+47, r24	; 0x2f
    37d2:	82 a5       	ldd	r24, Z+42	; 0x2a
    37d4:	80 ab       	std	Z+48, r24	; 0x30
    37d6:	cf 01       	movw	r24, r30
    37d8:	0e 94 b6 1b 	call	0x376c	; 0x376c <u8g2_apply_clip_window>
    37dc:	08 95       	ret

000037de <u8g2_draw_l90_r0>:
    37de:	0f 93       	push	r16
    37e0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <u8g2_draw_hv_line_2dir>
    37e4:	0f 91       	pop	r16
    37e6:	08 95       	ret

000037e8 <u8g2_SetMaxClipWindow>:
    37e8:	dc 01       	movw	r26, r24
    37ea:	d1 96       	adiw	r26, 0x31	; 49
    37ec:	1c 92       	st	X, r1
    37ee:	d1 97       	sbiw	r26, 0x31	; 49
    37f0:	d3 96       	adiw	r26, 0x33	; 51
    37f2:	1c 92       	st	X, r1
    37f4:	d3 97       	sbiw	r26, 0x33	; 51
    37f6:	8f ef       	ldi	r24, 0xFF	; 255
    37f8:	d2 96       	adiw	r26, 0x32	; 50
    37fa:	8c 93       	st	X, r24
    37fc:	d2 97       	sbiw	r26, 0x32	; 50
    37fe:	d4 96       	adiw	r26, 0x34	; 52
    3800:	8c 93       	st	X, r24
    3802:	d4 97       	sbiw	r26, 0x34	; 52
    3804:	90 96       	adiw	r26, 0x20	; 32
    3806:	ed 91       	ld	r30, X+
    3808:	fc 91       	ld	r31, X
    380a:	91 97       	sbiw	r26, 0x21	; 33
    380c:	02 80       	ldd	r0, Z+2	; 0x02
    380e:	f3 81       	ldd	r31, Z+3	; 0x03
    3810:	e0 2d       	mov	r30, r0
    3812:	cd 01       	movw	r24, r26
    3814:	09 95       	icall
    3816:	08 95       	ret

00003818 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    3822:	1e aa       	std	Y+54, r1	; 0x36
    3824:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    3826:	3f 8f       	std	Y+31, r19	; 0x1f
    3828:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    382a:	7b a3       	std	Y+35, r23	; 0x23
    382c:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    382e:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    3830:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    3832:	fc 01       	movw	r30, r24
    3834:	ee 5b       	subi	r30, 0xBE	; 190
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    383a:	b0 96       	adiw	r30, 0x20	; 32
    383c:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    383e:	31 96       	adiw	r30, 0x01	; 1
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    3844:	31 96       	adiw	r30, 0x01	; 1
    3846:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    3848:	19 a3       	std	Y+33, r17	; 0x21
    384a:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    384c:	d8 01       	movw	r26, r16
    384e:	ed 91       	ld	r30, X+
    3850:	fc 91       	ld	r31, X
    3852:	ce 01       	movw	r24, r28
    3854:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    3856:	ce 01       	movw	r24, r28
    3858:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    385c:	ce 01       	movw	r24, r28
    385e:	0e 94 14 1a 	call	0x3428	; 0x3428 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    3862:	cb 5b       	subi	r28, 0xBB	; 187
    3864:	df 4f       	sbci	r29, 0xFF	; 255
    3866:	18 82       	st	Y, r1
#endif
}
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	08 95       	ret

00003872 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    3872:	66 23       	and	r22, r22
    3874:	29 f0       	breq	.+10     	; 0x3880 <u8x8_ascii_next+0xe>
    3876:	6a 30       	cpi	r22, 0x0A	; 10
    3878:	31 f0       	breq	.+12     	; 0x3886 <u8x8_ascii_next+0x14>
    387a:	86 2f       	mov	r24, r22
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	08 95       	ret
    3880:	8f ef       	ldi	r24, 0xFF	; 255
    3882:	9f ef       	ldi	r25, 0xFF	; 255
    3884:	08 95       	ret
    3886:	8f ef       	ldi	r24, 0xFF	; 255
    3888:	9f ef       	ldi	r25, 0xFF	; 255
    388a:	08 95       	ret

0000388c <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    388c:	fc 01       	movw	r30, r24
    388e:	10 8e       	std	Z+24, r1	; 0x18
    3890:	08 95       	ret

00003892 <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3892:	0f 93       	push	r16
    3894:	1f 93       	push	r17
    3896:	cf 93       	push	r28
    3898:	df 93       	push	r29
	uint8_t *data;
	switch(msg){
    389a:	68 31       	cpi	r22, 0x18	; 24
    389c:	19 f1       	breq	.+70     	; 0x38e4 <u8x8_byte_avr_hw_i2c+0x52>
    389e:	28 f4       	brcc	.+10     	; 0x38aa <u8x8_byte_avr_hw_i2c+0x18>
    38a0:	64 31       	cpi	r22, 0x14	; 20
    38a2:	e1 f0       	breq	.+56     	; 0x38dc <u8x8_byte_avr_hw_i2c+0x4a>
    38a4:	67 31       	cpi	r22, 0x17	; 23
    38a6:	39 f0       	breq	.+14     	; 0x38b6 <u8x8_byte_avr_hw_i2c+0x24>
    38a8:	27 c0       	rjmp	.+78     	; 0x38f8 <u8x8_byte_avr_hw_i2c+0x66>
    38aa:	69 31       	cpi	r22, 0x19	; 25
    38ac:	09 f1       	breq	.+66     	; 0x38f0 <u8x8_byte_avr_hw_i2c+0x5e>
    38ae:	60 32       	cpi	r22, 0x20	; 32
    38b0:	19 f5       	brne	.+70     	; 0x38f8 <u8x8_byte_avr_hw_i2c+0x66>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	24 c0       	rjmp	.+72     	; 0x38fe <u8x8_byte_avr_hw_i2c+0x6c>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    38b6:	8f ef       	ldi	r24, 0xFF	; 255
    38b8:	84 0f       	add	r24, r20
    38ba:	44 23       	and	r20, r20
    38bc:	f9 f0       	breq	.+62     	; 0x38fc <u8x8_byte_avr_hw_i2c+0x6a>
    38be:	e9 01       	movw	r28, r18
    38c0:	08 2f       	mov	r16, r24
    38c2:	10 e0       	ldi	r17, 0x00	; 0
    38c4:	0f 5f       	subi	r16, 0xFF	; 255
    38c6:	1f 4f       	sbci	r17, 0xFF	; 255
    38c8:	02 0f       	add	r16, r18
    38ca:	13 1f       	adc	r17, r19
				i2c_write(*data++);
    38cc:	89 91       	ld	r24, Y+
    38ce:	0e 94 97 12 	call	0x252e	; 0x252e <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    38d2:	0c 17       	cp	r16, r28
    38d4:	1d 07       	cpc	r17, r29
    38d6:	d1 f7       	brne	.-12     	; 0x38cc <u8x8_byte_avr_hw_i2c+0x3a>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	11 c0       	rjmp	.+34     	; 0x38fe <u8x8_byte_avr_hw_i2c+0x6c>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    38dc:	0e 94 41 12 	call	0x2482	; 0x2482 <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    38e2:	0d c0       	rjmp	.+26     	; 0x38fe <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    38e4:	fc 01       	movw	r30, r24
    38e6:	86 89       	ldd	r24, Z+22	; 0x16
    38e8:	0e 94 47 12 	call	0x248e	; 0x248e <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    38ec:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    38ee:	07 c0       	rjmp	.+14     	; 0x38fe <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    38f0:	0e 94 87 12 	call	0x250e	; 0x250e <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    38f6:	03 c0       	rjmp	.+6      	; 0x38fe <u8x8_byte_avr_hw_i2c+0x6c>
		default:
			return 0;
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	01 c0       	rjmp	.+2      	; 0x38fe <u8x8_byte_avr_hw_i2c+0x6c>
	}
	return 1;
    38fc:	81 e0       	ldi	r24, 0x01	; 1
}
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	08 95       	ret

00003908 <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    3908:	6a 32       	cpi	r22, 0x2A	; 42
    390a:	51 f0       	breq	.+20     	; 0x3920 <u8x8_avr_delay+0x18>
    390c:	18 f4       	brcc	.+6      	; 0x3914 <u8x8_avr_delay+0xc>
    390e:	69 32       	cpi	r22, 0x29	; 41
    3910:	59 f0       	breq	.+22     	; 0x3928 <u8x8_avr_delay+0x20>
    3912:	33 c0       	rjmp	.+102    	; 0x397a <u8x8_avr_delay+0x72>
    3914:	6b 32       	cpi	r22, 0x2B	; 43
    3916:	61 f0       	breq	.+24     	; 0x3930 <u8x8_avr_delay+0x28>
    3918:	6c 32       	cpi	r22, 0x2C	; 44
    391a:	79 f5       	brne	.+94     	; 0x397a <u8x8_avr_delay+0x72>
			break;
		default:
			return 0;
	}

	return 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	08 95       	ret
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3920:	41 11       	cpse	r20, r1
    3922:	19 c0       	rjmp	.+50     	; 0x3956 <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3928:	41 11       	cpse	r20, r1
    392a:	1d c0       	rjmp	.+58     	; 0x3966 <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    3930:	24 2f       	mov	r18, r20
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	a4 e6       	ldi	r26, 0x64	; 100
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	0e 94 c8 21 	call	0x4390	; 0x4390 <__umulhisi3>
    393c:	20 ea       	ldi	r18, 0xA0	; 160
    393e:	3f e0       	ldi	r19, 0x0F	; 15
    3940:	40 e0       	ldi	r20, 0x00	; 0
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	0e 94 a6 21 	call	0x434c	; 0x434c <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    3948:	23 32       	cpi	r18, 0x23	; 35
    394a:	c8 f4       	brcc	.+50     	; 0x397e <u8x8_avr_delay+0x76>
				break;

			__asm__ __volatile__ (
    394c:	82 2f       	mov	r24, r18
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	f1 f7       	brne	.-4      	; 0x394e <u8x8_avr_delay+0x46>
			break;
		default:
			return 0;
	}

	return 1;
    3952:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    3954:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3956:	83 e0       	ldi	r24, 0x03	; 3
    3958:	8a 95       	dec	r24
    395a:	f1 f7       	brne	.-4      	; 0x3958 <u8x8_avr_delay+0x50>
    395c:	00 00       	nop
    395e:	41 50       	subi	r20, 0x01	; 1
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3960:	d1 f7       	brne	.-12     	; 0x3956 <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3966:	89 ef       	ldi	r24, 0xF9	; 249
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	f1 f7       	brne	.-4      	; 0x396a <u8x8_avr_delay+0x62>
    396e:	00 c0       	rjmp	.+0      	; 0x3970 <u8x8_avr_delay+0x68>
    3970:	00 00       	nop
    3972:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3974:	c1 f7       	brne	.-16     	; 0x3966 <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	08 95       	ret
	}

	return 1;
    397e:	81 e0       	ldi	r24, 0x01	; 1
}
    3980:	08 95       	ret

00003982 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    3982:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    3984:	dc 01       	movw	r26, r24
    3986:	18 96       	adiw	r26, 0x08	; 8
    3988:	ed 91       	ld	r30, X+
    398a:	fc 91       	ld	r31, X
    398c:	19 97       	sbiw	r26, 0x09	; 9
    398e:	46 2f       	mov	r20, r22
    3990:	67 e1       	ldi	r22, 0x17	; 23
    3992:	09 95       	icall
}
    3994:	08 95       	ret

00003996 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    3996:	cf 93       	push	r28
    3998:	df 93       	push	r29
    399a:	1f 92       	push	r1
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    39a2:	ae 01       	movw	r20, r28
    39a4:	4f 5f       	subi	r20, 0xFF	; 255
    39a6:	5f 4f       	sbci	r21, 0xFF	; 255
    39a8:	61 e0       	ldi	r22, 0x01	; 1
    39aa:	0e 94 c1 1c 	call	0x3982	; 0x3982 <u8x8_byte_SendBytes>
}
    39ae:	0f 90       	pop	r0
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	08 95       	ret

000039b6 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    39b6:	dc 01       	movw	r26, r24
    39b8:	18 96       	adiw	r26, 0x08	; 8
    39ba:	ed 91       	ld	r30, X+
    39bc:	fc 91       	ld	r31, X
    39be:	19 97       	sbiw	r26, 0x09	; 9
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e0       	ldi	r20, 0x00	; 0
    39c6:	68 e1       	ldi	r22, 0x18	; 24
    39c8:	09 95       	icall
}
    39ca:	08 95       	ret

000039cc <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    39cc:	dc 01       	movw	r26, r24
    39ce:	18 96       	adiw	r26, 0x08	; 8
    39d0:	ed 91       	ld	r30, X+
    39d2:	fc 91       	ld	r31, X
    39d4:	19 97       	sbiw	r26, 0x09	; 9
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e0       	ldi	r20, 0x00	; 0
    39dc:	69 e1       	ldi	r22, 0x19	; 25
    39de:	09 95       	icall
}
    39e0:	08 95       	ret

000039e2 <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	ec 01       	movw	r28, r24
    39ee:	16 2f       	mov	r17, r22
    39f0:	7a 01       	movw	r14, r20
    39f2:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <u8x8_byte_StartTransfer>
    39f6:	60 e4       	ldi	r22, 0x40	; 64
    39f8:	ce 01       	movw	r24, r28
    39fa:	0e 94 cb 1c 	call	0x3996	; 0x3996 <u8x8_byte_SendByte>
    39fe:	e8 85       	ldd	r30, Y+8	; 0x08
    3a00:	f9 85       	ldd	r31, Y+9	; 0x09
    3a02:	97 01       	movw	r18, r14
    3a04:	41 2f       	mov	r20, r17
    3a06:	67 e1       	ldi	r22, 0x17	; 23
    3a08:	ce 01       	movw	r24, r28
    3a0a:	09 95       	icall
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <u8x8_byte_EndTransfer>
    3a12:	df 91       	pop	r29
    3a14:	cf 91       	pop	r28
    3a16:	1f 91       	pop	r17
    3a18:	ff 90       	pop	r15
    3a1a:	ef 90       	pop	r14
    3a1c:	08 95       	ret

00003a1e <u8x8_cad_SendCmd>:
    3a1e:	46 2f       	mov	r20, r22
    3a20:	dc 01       	movw	r26, r24
    3a22:	16 96       	adiw	r26, 0x06	; 6
    3a24:	ed 91       	ld	r30, X+
    3a26:	fc 91       	ld	r31, X
    3a28:	17 97       	sbiw	r26, 0x07	; 7
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	65 e1       	ldi	r22, 0x15	; 21
    3a30:	09 95       	icall
    3a32:	08 95       	ret

00003a34 <u8x8_cad_SendArg>:
    3a34:	46 2f       	mov	r20, r22
    3a36:	dc 01       	movw	r26, r24
    3a38:	16 96       	adiw	r26, 0x06	; 6
    3a3a:	ed 91       	ld	r30, X+
    3a3c:	fc 91       	ld	r31, X
    3a3e:	17 97       	sbiw	r26, 0x07	; 7
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	66 e1       	ldi	r22, 0x16	; 22
    3a46:	09 95       	icall
    3a48:	08 95       	ret

00003a4a <u8x8_cad_SendData>:
    3a4a:	9a 01       	movw	r18, r20
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	16 96       	adiw	r26, 0x06	; 6
    3a50:	ed 91       	ld	r30, X+
    3a52:	fc 91       	ld	r31, X
    3a54:	17 97       	sbiw	r26, 0x07	; 7
    3a56:	46 2f       	mov	r20, r22
    3a58:	67 e1       	ldi	r22, 0x17	; 23
    3a5a:	09 95       	icall
    3a5c:	08 95       	ret

00003a5e <u8x8_cad_StartTransfer>:
    3a5e:	dc 01       	movw	r26, r24
    3a60:	16 96       	adiw	r26, 0x06	; 6
    3a62:	ed 91       	ld	r30, X+
    3a64:	fc 91       	ld	r31, X
    3a66:	17 97       	sbiw	r26, 0x07	; 7
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	68 e1       	ldi	r22, 0x18	; 24
    3a70:	09 95       	icall
    3a72:	08 95       	ret

00003a74 <u8x8_cad_EndTransfer>:
    3a74:	dc 01       	movw	r26, r24
    3a76:	16 96       	adiw	r26, 0x06	; 6
    3a78:	ed 91       	ld	r30, X+
    3a7a:	fc 91       	ld	r31, X
    3a7c:	17 97       	sbiw	r26, 0x07	; 7
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e0       	ldi	r20, 0x00	; 0
    3a84:	69 e1       	ldi	r22, 0x19	; 25
    3a86:	09 95       	icall
    3a88:	08 95       	ret

00003a8a <u8x8_cad_SendSequence>:
    3a8a:	ef 92       	push	r14
    3a8c:	ff 92       	push	r15
    3a8e:	0f 93       	push	r16
    3a90:	1f 93       	push	r17
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	1f 92       	push	r1
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	7c 01       	movw	r14, r24
    3a9e:	8b 01       	movw	r16, r22
    3aa0:	d8 01       	movw	r26, r16
    3aa2:	6c 91       	ld	r22, X
    3aa4:	67 31       	cpi	r22, 0x17	; 23
    3aa6:	c1 f0       	breq	.+48     	; 0x3ad8 <u8x8_cad_SendSequence+0x4e>
    3aa8:	18 f4       	brcc	.+6      	; 0x3ab0 <u8x8_cad_SendSequence+0x26>
    3aaa:	65 31       	cpi	r22, 0x15	; 21
    3aac:	30 f4       	brcc	.+12     	; 0x3aba <u8x8_cad_SendSequence+0x30>
    3aae:	38 c0       	rjmp	.+112    	; 0x3b20 <u8x8_cad_SendSequence+0x96>
    3ab0:	6a 31       	cpi	r22, 0x1A	; 26
    3ab2:	f8 f0       	brcs	.+62     	; 0x3af2 <u8x8_cad_SendSequence+0x68>
    3ab4:	6e 3f       	cpi	r22, 0xFE	; 254
    3ab6:	51 f1       	breq	.+84     	; 0x3b0c <u8x8_cad_SendSequence+0x82>
    3ab8:	33 c0       	rjmp	.+102    	; 0x3b20 <u8x8_cad_SendSequence+0x96>
    3aba:	f8 01       	movw	r30, r16
    3abc:	41 81       	ldd	r20, Z+1	; 0x01
    3abe:	49 83       	std	Y+1, r20	; 0x01
    3ac0:	d7 01       	movw	r26, r14
    3ac2:	16 96       	adiw	r26, 0x06	; 6
    3ac4:	ed 91       	ld	r30, X+
    3ac6:	fc 91       	ld	r31, X
    3ac8:	17 97       	sbiw	r26, 0x07	; 7
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	c7 01       	movw	r24, r14
    3ad0:	09 95       	icall
    3ad2:	0e 5f       	subi	r16, 0xFE	; 254
    3ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad6:	e4 cf       	rjmp	.-56     	; 0x3aa0 <u8x8_cad_SendSequence+0x16>
    3ad8:	f8 01       	movw	r30, r16
    3ada:	81 81       	ldd	r24, Z+1	; 0x01
    3adc:	89 83       	std	Y+1, r24	; 0x01
    3ade:	ae 01       	movw	r20, r28
    3ae0:	4f 5f       	subi	r20, 0xFF	; 255
    3ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae4:	61 e0       	ldi	r22, 0x01	; 1
    3ae6:	c7 01       	movw	r24, r14
    3ae8:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <u8x8_cad_SendData>
    3aec:	0e 5f       	subi	r16, 0xFE	; 254
    3aee:	1f 4f       	sbci	r17, 0xFF	; 255
    3af0:	d7 cf       	rjmp	.-82     	; 0x3aa0 <u8x8_cad_SendSequence+0x16>
    3af2:	0f 5f       	subi	r16, 0xFF	; 255
    3af4:	1f 4f       	sbci	r17, 0xFF	; 255
    3af6:	d7 01       	movw	r26, r14
    3af8:	16 96       	adiw	r26, 0x06	; 6
    3afa:	ed 91       	ld	r30, X+
    3afc:	fc 91       	ld	r31, X
    3afe:	17 97       	sbiw	r26, 0x07	; 7
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e0       	ldi	r20, 0x00	; 0
    3b06:	c7 01       	movw	r24, r14
    3b08:	09 95       	icall
    3b0a:	ca cf       	rjmp	.-108    	; 0x3aa0 <u8x8_cad_SendSequence+0x16>
    3b0c:	f8 01       	movw	r30, r16
    3b0e:	41 81       	ldd	r20, Z+1	; 0x01
    3b10:	49 83       	std	Y+1, r20	; 0x01
    3b12:	69 e2       	ldi	r22, 0x29	; 41
    3b14:	c7 01       	movw	r24, r14
    3b16:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8x8_gpio_call>
    3b1a:	0e 5f       	subi	r16, 0xFE	; 254
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	c0 cf       	rjmp	.-128    	; 0x3aa0 <u8x8_cad_SendSequence+0x16>
    3b20:	0f 90       	pop	r0
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	1f 91       	pop	r17
    3b28:	0f 91       	pop	r16
    3b2a:	ff 90       	pop	r15
    3b2c:	ef 90       	pop	r14
    3b2e:	08 95       	ret

00003b30 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3b30:	ef 92       	push	r14
    3b32:	ff 92       	push	r15
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	7c 01       	movw	r14, r24
    3b3c:	c4 2f       	mov	r28, r20
    3b3e:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    3b40:	66 31       	cpi	r22, 0x16	; 22
    3b42:	29 f1       	breq	.+74     	; 0x3b8e <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    3b44:	30 f4       	brcc	.+12     	; 0x3b52 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    3b46:	64 31       	cpi	r22, 0x14	; 20
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    3b4a:	42 c0       	rjmp	.+132    	; 0x3bd0 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    3b4c:	65 31       	cpi	r22, 0x15	; 21
    3b4e:	49 f0       	breq	.+18     	; 0x3b62 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    3b50:	62 c0       	rjmp	.+196    	; 0x3c16 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    3b52:	68 31       	cpi	r22, 0x18	; 24
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <u8x8_cad_ssd13xx_fast_i2c+0x28>
    3b56:	50 c0       	rjmp	.+160    	; 0x3bf8 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    3b58:	f8 f0       	brcs	.+62     	; 0x3b98 <u8x8_cad_ssd13xx_fast_i2c+0x68>
    3b5a:	69 31       	cpi	r22, 0x19	; 25
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    3b5e:	50 c0       	rjmp	.+160    	; 0x3c00 <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    3b60:	5a c0       	rjmp	.+180    	; 0x3c16 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    3b62:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <in_transfer.3298>
    3b66:	88 23       	and	r24, r24
    3b68:	19 f0       	breq	.+6      	; 0x3b70 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    3b6a:	c7 01       	movw	r24, r14
    3b6c:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    3b70:	c7 01       	movw	r24, r14
    3b72:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    3b76:	60 e0       	ldi	r22, 0x00	; 0
    3b78:	c7 01       	movw	r24, r14
    3b7a:	0e 94 cb 1c 	call	0x3996	; 0x3996 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    3b7e:	6c 2f       	mov	r22, r28
    3b80:	c7 01       	movw	r24, r14
    3b82:	0e 94 cb 1c 	call	0x3996	; 0x3996 <u8x8_byte_SendByte>
      in_transfer = 1;
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <in_transfer.3298>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    3b8c:	45 c0       	rjmp	.+138    	; 0x3c18 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    3b8e:	64 2f       	mov	r22, r20
    3b90:	0e 94 cb 1c 	call	0x3996	; 0x3996 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    3b96:	40 c0       	rjmp	.+128    	; 0x3c18 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    3b98:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <in_transfer.3298>
    3b9c:	88 23       	and	r24, r24
    3b9e:	19 f0       	breq	.+6      	; 0x3ba6 <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    3ba0:	c7 01       	movw	r24, r14
    3ba2:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3ba6:	c9 31       	cpi	r28, 0x19	; 25
    3ba8:	50 f0       	brcs	.+20     	; 0x3bbe <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    3baa:	a8 01       	movw	r20, r16
    3bac:	68 e1       	ldi	r22, 0x18	; 24
    3bae:	c7 01       	movw	r24, r14
    3bb0:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <u8x8_i2c_data_transfer>
	arg_int-=24;
    3bb4:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    3bb6:	08 5e       	subi	r16, 0xE8	; 232
    3bb8:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3bba:	c9 31       	cpi	r28, 0x19	; 25
    3bbc:	b0 f7       	brcc	.-20     	; 0x3baa <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    3bbe:	a8 01       	movw	r20, r16
    3bc0:	6c 2f       	mov	r22, r28
    3bc2:	c7 01       	movw	r24, r14
    3bc4:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    3bc8:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    3bce:	24 c0       	rjmp	.+72     	; 0x3c18 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	56 96       	adiw	r26, 0x16	; 22
    3bd4:	8c 91       	ld	r24, X
    3bd6:	56 97       	sbiw	r26, 0x16	; 22
    3bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bda:	19 f4       	brne	.+6      	; 0x3be2 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    3bdc:	88 e7       	ldi	r24, 0x78	; 120
    3bde:	56 96       	adiw	r26, 0x16	; 22
    3be0:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    3be2:	d7 01       	movw	r26, r14
    3be4:	18 96       	adiw	r26, 0x08	; 8
    3be6:	ed 91       	ld	r30, X+
    3be8:	fc 91       	ld	r31, X
    3bea:	19 97       	sbiw	r26, 0x09	; 9
    3bec:	98 01       	movw	r18, r16
    3bee:	4c 2f       	mov	r20, r28
    3bf0:	64 e1       	ldi	r22, 0x14	; 20
    3bf2:	c7 01       	movw	r24, r14
    3bf4:	09 95       	icall
    3bf6:	10 c0       	rjmp	.+32     	; 0x3c18 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    3bf8:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    3bfe:	0c c0       	rjmp	.+24     	; 0x3c18 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    3c00:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <in_transfer.3298>
    3c04:	88 23       	and	r24, r24
    3c06:	19 f0       	breq	.+6      	; 0x3c0e <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    3c08:	c7 01       	movw	r24, r14
    3c0a:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <u8x8_byte_EndTransfer>
      in_transfer = 0;
    3c0e:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <in_transfer.3298>
      break;
    default:
      return 0;
  }
  return 1;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    3c14:	01 c0       	rjmp	.+2      	; 0x3c18 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    3c16:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    3c18:	cf 91       	pop	r28
    3c1a:	1f 91       	pop	r17
    3c1c:	0f 91       	pop	r16
    3c1e:	ff 90       	pop	r15
    3c20:	ef 90       	pop	r14
    3c22:	08 95       	ret

00003c24 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    3c24:	fc 01       	movw	r30, r24
    3c26:	71 83       	std	Z+1, r23	; 0x01
    3c28:	60 83       	st	Z, r22
    3c2a:	fb 01       	movw	r30, r22
    3c2c:	22 89       	ldd	r18, Z+18	; 0x12
    3c2e:	fc 01       	movw	r30, r24
    3c30:	24 8b       	std	Z+20, r18	; 0x14
    3c32:	08 95       	ret

00003c34 <u8x8_d_helper_display_init>:
    3c34:	cf 93       	push	r28
    3c36:	df 93       	push	r29
    3c38:	ec 01       	movw	r28, r24
    3c3a:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c3c:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	68 e2       	ldi	r22, 0x28	; 40
    3c46:	09 95       	icall
    3c48:	ee 81       	ldd	r30, Y+6	; 0x06
    3c4a:	ff 81       	ldd	r31, Y+7	; 0x07
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	64 e1       	ldi	r22, 0x14	; 20
    3c54:	ce 01       	movw	r24, r28
    3c56:	09 95       	icall
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	6b e4       	ldi	r22, 0x4B	; 75
    3c5c:	ce 01       	movw	r24, r28
    3c5e:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8x8_gpio_call>
    3c62:	e8 81       	ld	r30, Y
    3c64:	f9 81       	ldd	r31, Y+1	; 0x01
    3c66:	44 81       	ldd	r20, Z+4	; 0x04
    3c68:	69 e2       	ldi	r22, 0x29	; 41
    3c6a:	ce 01       	movw	r24, r28
    3c6c:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8x8_gpio_call>
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	6b e4       	ldi	r22, 0x4B	; 75
    3c74:	ce 01       	movw	r24, r28
    3c76:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8x8_gpio_call>
    3c7a:	e8 81       	ld	r30, Y
    3c7c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c7e:	44 81       	ldd	r20, Z+4	; 0x04
    3c80:	69 e2       	ldi	r22, 0x29	; 41
    3c82:	ce 01       	movw	r24, r28
    3c84:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8x8_gpio_call>
    3c88:	41 e0       	ldi	r20, 0x01	; 1
    3c8a:	6b e4       	ldi	r22, 0x4B	; 75
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8x8_gpio_call>
    3c92:	e8 81       	ld	r30, Y
    3c94:	f9 81       	ldd	r31, Y+1	; 0x01
    3c96:	45 81       	ldd	r20, Z+5	; 0x05
    3c98:	69 e2       	ldi	r22, 0x29	; 41
    3c9a:	ce 01       	movw	r24, r28
    3c9c:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8x8_gpio_call>
    3ca0:	df 91       	pop	r29
    3ca2:	cf 91       	pop	r28
    3ca4:	08 95       	ret

00003ca6 <u8x8_DrawTile>:
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	00 d0       	rcall	.+0      	; 0x3cb0 <u8x8_DrawTile+0xa>
    3cb0:	00 d0       	rcall	.+0      	; 0x3cb2 <u8x8_DrawTile+0xc>
    3cb2:	1f 92       	push	r1
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	6c 83       	std	Y+4, r22	; 0x04
    3cba:	4d 83       	std	Y+5, r20	; 0x05
    3cbc:	2b 83       	std	Y+3, r18	; 0x03
    3cbe:	1a 83       	std	Y+2, r17	; 0x02
    3cc0:	09 83       	std	Y+1, r16	; 0x01
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	14 96       	adiw	r26, 0x04	; 4
    3cc6:	ed 91       	ld	r30, X+
    3cc8:	fc 91       	ld	r31, X
    3cca:	15 97       	sbiw	r26, 0x05	; 5
    3ccc:	9e 01       	movw	r18, r28
    3cce:	2f 5f       	subi	r18, 0xFF	; 255
    3cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd2:	41 e0       	ldi	r20, 0x01	; 1
    3cd4:	6f e0       	ldi	r22, 0x0F	; 15
    3cd6:	09 95       	icall
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
    3cde:	0f 90       	pop	r0
    3ce0:	0f 90       	pop	r0
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	08 95       	ret

00003cec <u8x8_SetupMemory>:
    3cec:	dc 01       	movw	r26, r24
    3cee:	14 96       	adiw	r26, 0x04	; 4
    3cf0:	ed 91       	ld	r30, X+
    3cf2:	fc 91       	ld	r31, X
    3cf4:	15 97       	sbiw	r26, 0x05	; 5
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e0       	ldi	r20, 0x00	; 0
    3cfc:	69 e0       	ldi	r22, 0x09	; 9
    3cfe:	09 95       	icall
    3d00:	08 95       	ret

00003d02 <u8x8_InitDisplay>:
    3d02:	dc 01       	movw	r26, r24
    3d04:	14 96       	adiw	r26, 0x04	; 4
    3d06:	ed 91       	ld	r30, X+
    3d08:	fc 91       	ld	r31, X
    3d0a:	15 97       	sbiw	r26, 0x05	; 5
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e0       	ldi	r20, 0x00	; 0
    3d12:	6a e0       	ldi	r22, 0x0A	; 10
    3d14:	09 95       	icall
    3d16:	08 95       	ret

00003d18 <u8x8_SetPowerSave>:
    3d18:	46 2f       	mov	r20, r22
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	14 96       	adiw	r26, 0x04	; 4
    3d1e:	ed 91       	ld	r30, X+
    3d20:	fc 91       	ld	r31, X
    3d22:	15 97       	sbiw	r26, 0x05	; 5
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	6b e0       	ldi	r22, 0x0B	; 11
    3d2a:	09 95       	icall
    3d2c:	08 95       	ret

00003d2e <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    3d2e:	dc 01       	movw	r26, r24
    3d30:	14 96       	adiw	r26, 0x04	; 4
    3d32:	ed 91       	ld	r30, X+
    3d34:	fc 91       	ld	r31, X
    3d36:	15 97       	sbiw	r26, 0x05	; 5
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	60 e1       	ldi	r22, 0x10	; 16
    3d40:	09 95       	icall
    3d42:	08 95       	ret

00003d44 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3d44:	ef 92       	push	r14
    3d46:	ff 92       	push	r15
    3d48:	0f 93       	push	r16
    3d4a:	1f 93       	push	r17
    3d4c:	cf 93       	push	r28
    3d4e:	df 93       	push	r29
    3d50:	8c 01       	movw	r16, r24
    3d52:	c4 2f       	mov	r28, r20
    3d54:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    3d56:	6d 30       	cpi	r22, 0x0D	; 13
    3d58:	b9 f0       	breq	.+46     	; 0x3d88 <u8x8_d_ssd1306_sh1106_generic+0x44>
    3d5a:	18 f4       	brcc	.+6      	; 0x3d62 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    3d5c:	6b 30       	cpi	r22, 0x0B	; 11
    3d5e:	31 f0       	breq	.+12     	; 0x3d6c <u8x8_d_ssd1306_sh1106_generic+0x28>
    3d60:	72 c0       	rjmp	.+228    	; 0x3e46 <u8x8_d_ssd1306_sh1106_generic+0x102>
    3d62:	6e 30       	cpi	r22, 0x0E	; 14
    3d64:	69 f1       	breq	.+90     	; 0x3dc0 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    3d66:	6f 30       	cpi	r22, 0x0F	; 15
    3d68:	d1 f1       	breq	.+116    	; 0x3dde <u8x8_d_ssd1306_sh1106_generic+0x9a>
    3d6a:	6d c0       	rjmp	.+218    	; 0x3e46 <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    3d6c:	41 11       	cpse	r20, r1
    3d6e:	06 c0       	rjmp	.+12     	; 0x3d7c <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    3d70:	6a e8       	ldi	r22, 0x8A	; 138
    3d72:	72 e0       	ldi	r23, 0x02	; 2
    3d74:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	66 c0       	rjmp	.+204    	; 0x3e48 <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    3d7c:	65 e8       	ldi	r22, 0x85	; 133
    3d7e:	72 e0       	ldi	r23, 0x02	; 2
    3d80:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	60 c0       	rjmp	.+192    	; 0x3e48 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    3d88:	41 11       	cpse	r20, r1
    3d8a:	0d c0       	rjmp	.+26     	; 0x3da6 <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    3d8c:	6e e7       	ldi	r22, 0x7E	; 126
    3d8e:	72 e0       	ldi	r23, 0x02	; 2
    3d90:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    3d94:	d8 01       	movw	r26, r16
    3d96:	ed 91       	ld	r30, X+
    3d98:	fc 91       	ld	r31, X
    3d9a:	11 97       	sbiw	r26, 0x01	; 1
    3d9c:	82 89       	ldd	r24, Z+18	; 0x12
    3d9e:	54 96       	adiw	r26, 0x14	; 20
    3da0:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	51 c0       	rjmp	.+162    	; 0x3e48 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    3da6:	67 e7       	ldi	r22, 0x77	; 119
    3da8:	72 e0       	ldi	r23, 0x02	; 2
    3daa:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    3dae:	d8 01       	movw	r26, r16
    3db0:	ed 91       	ld	r30, X+
    3db2:	fc 91       	ld	r31, X
    3db4:	11 97       	sbiw	r26, 0x01	; 1
    3db6:	83 89       	ldd	r24, Z+19	; 0x13
    3db8:	54 96       	adiw	r26, 0x14	; 20
    3dba:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	44 c0       	rjmp	.+136    	; 0x3e48 <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    3dc0:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    3dc4:	61 e8       	ldi	r22, 0x81	; 129
    3dc6:	c8 01       	movw	r24, r16
    3dc8:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    3dcc:	6c 2f       	mov	r22, r28
    3dce:	c8 01       	movw	r24, r16
    3dd0:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    3dd4:	c8 01       	movw	r24, r16
    3dd6:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    3ddc:	35 c0       	rjmp	.+106    	; 0x3e48 <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    3dde:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    3de2:	f7 01       	movw	r30, r14
    3de4:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    3de6:	dd 0f       	add	r29, r29
    3de8:	dd 0f       	add	r29, r29
    3dea:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    3dec:	d8 01       	movw	r26, r16
    3dee:	54 96       	adiw	r26, 0x14	; 20
    3df0:	8c 91       	ld	r24, X
    3df2:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    3df4:	60 e4       	ldi	r22, 0x40	; 64
    3df6:	c8 01       	movw	r24, r16
    3df8:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    3dfc:	6d 2f       	mov	r22, r29
    3dfe:	62 95       	swap	r22
    3e00:	6f 70       	andi	r22, 0x0F	; 15
    3e02:	60 61       	ori	r22, 0x10	; 16
    3e04:	c8 01       	movw	r24, r16
    3e06:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    3e0a:	6d 2f       	mov	r22, r29
    3e0c:	6f 70       	andi	r22, 0x0F	; 15
    3e0e:	c8 01       	movw	r24, r16
    3e10:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    3e14:	f7 01       	movw	r30, r14
    3e16:	64 81       	ldd	r22, Z+4	; 0x04
    3e18:	60 6b       	ori	r22, 0xB0	; 176
    3e1a:	c8 01       	movw	r24, r16
    3e1c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    3e20:	d7 01       	movw	r26, r14
    3e22:	4d 91       	ld	r20, X+
    3e24:	5c 91       	ld	r21, X
    3e26:	11 97       	sbiw	r26, 0x01	; 1
    3e28:	12 96       	adiw	r26, 0x02	; 2
    3e2a:	6c 91       	ld	r22, X
    3e2c:	66 0f       	add	r22, r22
    3e2e:	66 0f       	add	r22, r22
    3e30:	66 0f       	add	r22, r22
    3e32:	c8 01       	movw	r24, r16
    3e34:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    3e38:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    3e3a:	91 f7       	brne	.-28     	; 0x3e20 <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    3e3c:	c8 01       	movw	r24, r16
    3e3e:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    3e42:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    3e44:	01 c0       	rjmp	.+2      	; 0x3e48 <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    3e46:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	08 95       	ret

00003e56 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	cf 93       	push	r28
    3e5c:	8c 01       	movw	r16, r24
    3e5e:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    3e60:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <u8x8_d_ssd1306_sh1106_generic>
    3e64:	81 11       	cpse	r24, r1
    3e66:	15 c0       	rjmp	.+42     	; 0x3e92 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    3e68:	c9 30       	cpi	r28, 0x09	; 9
    3e6a:	61 f0       	breq	.+24     	; 0x3e84 <u8x8_d_ssd1306_128x64_noname+0x2e>
    3e6c:	ca 30       	cpi	r28, 0x0A	; 10
    3e6e:	91 f4       	brne	.+36     	; 0x3e94 <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    3e70:	c8 01       	movw	r24, r16
    3e72:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    3e76:	6f e8       	ldi	r22, 0x8F	; 143
    3e78:	72 e0       	ldi	r23, 0x02	; 2
    3e7a:	c8 01       	movw	r24, r16
    3e7c:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    3e80:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    3e82:	08 c0       	rjmp	.+16     	; 0x3e94 <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    3e84:	6f e5       	ldi	r22, 0x5F	; 95
    3e86:	72 e0       	ldi	r23, 0x02	; 2
    3e88:	c8 01       	movw	r24, r16
    3e8a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    3e90:	01 c0       	rjmp	.+2      	; 0x3e94 <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    3e92:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    3e94:	cf 91       	pop	r28
    3e96:	1f 91       	pop	r17
    3e98:	0f 91       	pop	r16
    3e9a:	08 95       	ret

00003e9c <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	1a 96       	adiw	r26, 0x0a	; 10
    3ea0:	ed 91       	ld	r30, X+
    3ea2:	fc 91       	ld	r31, X
    3ea4:	1b 97       	sbiw	r26, 0x0b	; 11
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	09 95       	icall
    3eac:	08 95       	ret

00003eae <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	08 95       	ret

00003eb2 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    3eb2:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    3eb4:	11 82       	std	Z+1, r1	; 0x01
    3eb6:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    3eb8:	87 e5       	ldi	r24, 0x57	; 87
    3eba:	9f e1       	ldi	r25, 0x1F	; 31
    3ebc:	95 83       	std	Z+5, r25	; 0x05
    3ebe:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    3ec0:	97 83       	std	Z+7, r25	; 0x07
    3ec2:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    3ec4:	91 87       	std	Z+9, r25	; 0x09
    3ec6:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    3ec8:	93 87       	std	Z+11, r25	; 0x0b
    3eca:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    3ecc:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    3ece:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    3ed0:	14 86       	std	Z+12, r1	; 0x0c
    3ed2:	15 86       	std	Z+13, r1	; 0x0d
    3ed4:	16 86       	std	Z+14, r1	; 0x0e
    3ed6:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    3ed8:	8f ef       	ldi	r24, 0xFF	; 255
    3eda:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    3edc:	82 8f       	std	Z+26, r24	; 0x1a
    3ede:	08 95       	ret

00003ee0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    3ee0:	af 92       	push	r10
    3ee2:	bf 92       	push	r11
    3ee4:	cf 92       	push	r12
    3ee6:	df 92       	push	r13
    3ee8:	ef 92       	push	r14
    3eea:	ff 92       	push	r15
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	ec 01       	movw	r28, r24
    3ef6:	5b 01       	movw	r10, r22
    3ef8:	6a 01       	movw	r12, r20
    3efa:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    3efc:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    3f00:	bd 82       	std	Y+5, r11	; 0x05
    3f02:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    3f04:	df 82       	std	Y+7, r13	; 0x07
    3f06:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    3f08:	f9 86       	std	Y+9, r15	; 0x09
    3f0a:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    3f0c:	1b 87       	std	Y+11, r17	; 0x0b
    3f0e:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    3f10:	ce 01       	movw	r24, r28
    3f12:	0e 94 76 1e 	call	0x3cec	; 0x3cec <u8x8_SetupMemory>
}
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	1f 91       	pop	r17
    3f1c:	0f 91       	pop	r16
    3f1e:	ff 90       	pop	r15
    3f20:	ef 90       	pop	r14
    3f22:	df 90       	pop	r13
    3f24:	cf 90       	pop	r12
    3f26:	bf 90       	pop	r11
    3f28:	af 90       	pop	r10
    3f2a:	08 95       	ret

00003f2c <__subsf3>:
    3f2c:	50 58       	subi	r21, 0x80	; 128

00003f2e <__addsf3>:
    3f2e:	bb 27       	eor	r27, r27
    3f30:	aa 27       	eor	r26, r26
    3f32:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__addsf3x>
    3f36:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__fp_round>
    3f3a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__fp_pscA>
    3f3e:	38 f0       	brcs	.+14     	; 0x3f4e <__addsf3+0x20>
    3f40:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <__fp_pscB>
    3f44:	20 f0       	brcs	.+8      	; 0x3f4e <__addsf3+0x20>
    3f46:	39 f4       	brne	.+14     	; 0x3f56 <__addsf3+0x28>
    3f48:	9f 3f       	cpi	r25, 0xFF	; 255
    3f4a:	19 f4       	brne	.+6      	; 0x3f52 <__addsf3+0x24>
    3f4c:	26 f4       	brtc	.+8      	; 0x3f56 <__addsf3+0x28>
    3f4e:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__fp_nan>
    3f52:	0e f4       	brtc	.+2      	; 0x3f56 <__addsf3+0x28>
    3f54:	e0 95       	com	r30
    3f56:	e7 fb       	bst	r30, 7
    3f58:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_inf>

00003f5c <__addsf3x>:
    3f5c:	e9 2f       	mov	r30, r25
    3f5e:	0e 94 10 21 	call	0x4220	; 0x4220 <__fp_split3>
    3f62:	58 f3       	brcs	.-42     	; 0x3f3a <__addsf3+0xc>
    3f64:	ba 17       	cp	r27, r26
    3f66:	62 07       	cpc	r22, r18
    3f68:	73 07       	cpc	r23, r19
    3f6a:	84 07       	cpc	r24, r20
    3f6c:	95 07       	cpc	r25, r21
    3f6e:	20 f0       	brcs	.+8      	; 0x3f78 <__addsf3x+0x1c>
    3f70:	79 f4       	brne	.+30     	; 0x3f90 <__addsf3x+0x34>
    3f72:	a6 f5       	brtc	.+104    	; 0x3fdc <__addsf3x+0x80>
    3f74:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__fp_zero>
    3f78:	0e f4       	brtc	.+2      	; 0x3f7c <__addsf3x+0x20>
    3f7a:	e0 95       	com	r30
    3f7c:	0b 2e       	mov	r0, r27
    3f7e:	ba 2f       	mov	r27, r26
    3f80:	a0 2d       	mov	r26, r0
    3f82:	0b 01       	movw	r0, r22
    3f84:	b9 01       	movw	r22, r18
    3f86:	90 01       	movw	r18, r0
    3f88:	0c 01       	movw	r0, r24
    3f8a:	ca 01       	movw	r24, r20
    3f8c:	a0 01       	movw	r20, r0
    3f8e:	11 24       	eor	r1, r1
    3f90:	ff 27       	eor	r31, r31
    3f92:	59 1b       	sub	r21, r25
    3f94:	99 f0       	breq	.+38     	; 0x3fbc <__addsf3x+0x60>
    3f96:	59 3f       	cpi	r21, 0xF9	; 249
    3f98:	50 f4       	brcc	.+20     	; 0x3fae <__addsf3x+0x52>
    3f9a:	50 3e       	cpi	r21, 0xE0	; 224
    3f9c:	68 f1       	brcs	.+90     	; 0x3ff8 <__addsf3x+0x9c>
    3f9e:	1a 16       	cp	r1, r26
    3fa0:	f0 40       	sbci	r31, 0x00	; 0
    3fa2:	a2 2f       	mov	r26, r18
    3fa4:	23 2f       	mov	r18, r19
    3fa6:	34 2f       	mov	r19, r20
    3fa8:	44 27       	eor	r20, r20
    3faa:	58 5f       	subi	r21, 0xF8	; 248
    3fac:	f3 cf       	rjmp	.-26     	; 0x3f94 <__addsf3x+0x38>
    3fae:	46 95       	lsr	r20
    3fb0:	37 95       	ror	r19
    3fb2:	27 95       	ror	r18
    3fb4:	a7 95       	ror	r26
    3fb6:	f0 40       	sbci	r31, 0x00	; 0
    3fb8:	53 95       	inc	r21
    3fba:	c9 f7       	brne	.-14     	; 0x3fae <__addsf3x+0x52>
    3fbc:	7e f4       	brtc	.+30     	; 0x3fdc <__addsf3x+0x80>
    3fbe:	1f 16       	cp	r1, r31
    3fc0:	ba 0b       	sbc	r27, r26
    3fc2:	62 0b       	sbc	r22, r18
    3fc4:	73 0b       	sbc	r23, r19
    3fc6:	84 0b       	sbc	r24, r20
    3fc8:	ba f0       	brmi	.+46     	; 0x3ff8 <__addsf3x+0x9c>
    3fca:	91 50       	subi	r25, 0x01	; 1
    3fcc:	a1 f0       	breq	.+40     	; 0x3ff6 <__addsf3x+0x9a>
    3fce:	ff 0f       	add	r31, r31
    3fd0:	bb 1f       	adc	r27, r27
    3fd2:	66 1f       	adc	r22, r22
    3fd4:	77 1f       	adc	r23, r23
    3fd6:	88 1f       	adc	r24, r24
    3fd8:	c2 f7       	brpl	.-16     	; 0x3fca <__addsf3x+0x6e>
    3fda:	0e c0       	rjmp	.+28     	; 0x3ff8 <__addsf3x+0x9c>
    3fdc:	ba 0f       	add	r27, r26
    3fde:	62 1f       	adc	r22, r18
    3fe0:	73 1f       	adc	r23, r19
    3fe2:	84 1f       	adc	r24, r20
    3fe4:	48 f4       	brcc	.+18     	; 0x3ff8 <__addsf3x+0x9c>
    3fe6:	87 95       	ror	r24
    3fe8:	77 95       	ror	r23
    3fea:	67 95       	ror	r22
    3fec:	b7 95       	ror	r27
    3fee:	f7 95       	ror	r31
    3ff0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ff2:	08 f0       	brcs	.+2      	; 0x3ff6 <__addsf3x+0x9a>
    3ff4:	b0 cf       	rjmp	.-160    	; 0x3f56 <__addsf3+0x28>
    3ff6:	93 95       	inc	r25
    3ff8:	88 0f       	add	r24, r24
    3ffa:	08 f0       	brcs	.+2      	; 0x3ffe <__addsf3x+0xa2>
    3ffc:	99 27       	eor	r25, r25
    3ffe:	ee 0f       	add	r30, r30
    4000:	97 95       	ror	r25
    4002:	87 95       	ror	r24
    4004:	08 95       	ret

00004006 <__divsf3>:
    4006:	0e 94 17 20 	call	0x402e	; 0x402e <__divsf3x>
    400a:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__fp_round>
    400e:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <__fp_pscB>
    4012:	58 f0       	brcs	.+22     	; 0x402a <__divsf3+0x24>
    4014:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__fp_pscA>
    4018:	40 f0       	brcs	.+16     	; 0x402a <__divsf3+0x24>
    401a:	29 f4       	brne	.+10     	; 0x4026 <__divsf3+0x20>
    401c:	5f 3f       	cpi	r21, 0xFF	; 255
    401e:	29 f0       	breq	.+10     	; 0x402a <__divsf3+0x24>
    4020:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_inf>
    4024:	51 11       	cpse	r21, r1
    4026:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__fp_szero>
    402a:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__fp_nan>

0000402e <__divsf3x>:
    402e:	0e 94 10 21 	call	0x4220	; 0x4220 <__fp_split3>
    4032:	68 f3       	brcs	.-38     	; 0x400e <__divsf3+0x8>

00004034 <__divsf3_pse>:
    4034:	99 23       	and	r25, r25
    4036:	b1 f3       	breq	.-20     	; 0x4024 <__divsf3+0x1e>
    4038:	55 23       	and	r21, r21
    403a:	91 f3       	breq	.-28     	; 0x4020 <__divsf3+0x1a>
    403c:	95 1b       	sub	r25, r21
    403e:	55 0b       	sbc	r21, r21
    4040:	bb 27       	eor	r27, r27
    4042:	aa 27       	eor	r26, r26
    4044:	62 17       	cp	r22, r18
    4046:	73 07       	cpc	r23, r19
    4048:	84 07       	cpc	r24, r20
    404a:	38 f0       	brcs	.+14     	; 0x405a <__divsf3_pse+0x26>
    404c:	9f 5f       	subi	r25, 0xFF	; 255
    404e:	5f 4f       	sbci	r21, 0xFF	; 255
    4050:	22 0f       	add	r18, r18
    4052:	33 1f       	adc	r19, r19
    4054:	44 1f       	adc	r20, r20
    4056:	aa 1f       	adc	r26, r26
    4058:	a9 f3       	breq	.-22     	; 0x4044 <__divsf3_pse+0x10>
    405a:	35 d0       	rcall	.+106    	; 0x40c6 <__divsf3_pse+0x92>
    405c:	0e 2e       	mov	r0, r30
    405e:	3a f0       	brmi	.+14     	; 0x406e <__divsf3_pse+0x3a>
    4060:	e0 e8       	ldi	r30, 0x80	; 128
    4062:	32 d0       	rcall	.+100    	; 0x40c8 <__divsf3_pse+0x94>
    4064:	91 50       	subi	r25, 0x01	; 1
    4066:	50 40       	sbci	r21, 0x00	; 0
    4068:	e6 95       	lsr	r30
    406a:	00 1c       	adc	r0, r0
    406c:	ca f7       	brpl	.-14     	; 0x4060 <__divsf3_pse+0x2c>
    406e:	2b d0       	rcall	.+86     	; 0x40c6 <__divsf3_pse+0x92>
    4070:	fe 2f       	mov	r31, r30
    4072:	29 d0       	rcall	.+82     	; 0x40c6 <__divsf3_pse+0x92>
    4074:	66 0f       	add	r22, r22
    4076:	77 1f       	adc	r23, r23
    4078:	88 1f       	adc	r24, r24
    407a:	bb 1f       	adc	r27, r27
    407c:	26 17       	cp	r18, r22
    407e:	37 07       	cpc	r19, r23
    4080:	48 07       	cpc	r20, r24
    4082:	ab 07       	cpc	r26, r27
    4084:	b0 e8       	ldi	r27, 0x80	; 128
    4086:	09 f0       	breq	.+2      	; 0x408a <__divsf3_pse+0x56>
    4088:	bb 0b       	sbc	r27, r27
    408a:	80 2d       	mov	r24, r0
    408c:	bf 01       	movw	r22, r30
    408e:	ff 27       	eor	r31, r31
    4090:	93 58       	subi	r25, 0x83	; 131
    4092:	5f 4f       	sbci	r21, 0xFF	; 255
    4094:	3a f0       	brmi	.+14     	; 0x40a4 <__divsf3_pse+0x70>
    4096:	9e 3f       	cpi	r25, 0xFE	; 254
    4098:	51 05       	cpc	r21, r1
    409a:	78 f0       	brcs	.+30     	; 0x40ba <__divsf3_pse+0x86>
    409c:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_inf>
    40a0:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__fp_szero>
    40a4:	5f 3f       	cpi	r21, 0xFF	; 255
    40a6:	e4 f3       	brlt	.-8      	; 0x40a0 <__divsf3_pse+0x6c>
    40a8:	98 3e       	cpi	r25, 0xE8	; 232
    40aa:	d4 f3       	brlt	.-12     	; 0x40a0 <__divsf3_pse+0x6c>
    40ac:	86 95       	lsr	r24
    40ae:	77 95       	ror	r23
    40b0:	67 95       	ror	r22
    40b2:	b7 95       	ror	r27
    40b4:	f7 95       	ror	r31
    40b6:	9f 5f       	subi	r25, 0xFF	; 255
    40b8:	c9 f7       	brne	.-14     	; 0x40ac <__divsf3_pse+0x78>
    40ba:	88 0f       	add	r24, r24
    40bc:	91 1d       	adc	r25, r1
    40be:	96 95       	lsr	r25
    40c0:	87 95       	ror	r24
    40c2:	97 f9       	bld	r25, 7
    40c4:	08 95       	ret
    40c6:	e1 e0       	ldi	r30, 0x01	; 1
    40c8:	66 0f       	add	r22, r22
    40ca:	77 1f       	adc	r23, r23
    40cc:	88 1f       	adc	r24, r24
    40ce:	bb 1f       	adc	r27, r27
    40d0:	62 17       	cp	r22, r18
    40d2:	73 07       	cpc	r23, r19
    40d4:	84 07       	cpc	r24, r20
    40d6:	ba 07       	cpc	r27, r26
    40d8:	20 f0       	brcs	.+8      	; 0x40e2 <__divsf3_pse+0xae>
    40da:	62 1b       	sub	r22, r18
    40dc:	73 0b       	sbc	r23, r19
    40de:	84 0b       	sbc	r24, r20
    40e0:	ba 0b       	sbc	r27, r26
    40e2:	ee 1f       	adc	r30, r30
    40e4:	88 f7       	brcc	.-30     	; 0x40c8 <__divsf3_pse+0x94>
    40e6:	e0 95       	com	r30
    40e8:	08 95       	ret

000040ea <__fixsfsi>:
    40ea:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <__fixunssfsi>
    40ee:	68 94       	set
    40f0:	b1 11       	cpse	r27, r1
    40f2:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__fp_szero>
    40f6:	08 95       	ret

000040f8 <__fixunssfsi>:
    40f8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fp_splitA>
    40fc:	88 f0       	brcs	.+34     	; 0x4120 <__fixunssfsi+0x28>
    40fe:	9f 57       	subi	r25, 0x7F	; 127
    4100:	98 f0       	brcs	.+38     	; 0x4128 <__fixunssfsi+0x30>
    4102:	b9 2f       	mov	r27, r25
    4104:	99 27       	eor	r25, r25
    4106:	b7 51       	subi	r27, 0x17	; 23
    4108:	b0 f0       	brcs	.+44     	; 0x4136 <__fixunssfsi+0x3e>
    410a:	e1 f0       	breq	.+56     	; 0x4144 <__fixunssfsi+0x4c>
    410c:	66 0f       	add	r22, r22
    410e:	77 1f       	adc	r23, r23
    4110:	88 1f       	adc	r24, r24
    4112:	99 1f       	adc	r25, r25
    4114:	1a f0       	brmi	.+6      	; 0x411c <__fixunssfsi+0x24>
    4116:	ba 95       	dec	r27
    4118:	c9 f7       	brne	.-14     	; 0x410c <__fixunssfsi+0x14>
    411a:	14 c0       	rjmp	.+40     	; 0x4144 <__fixunssfsi+0x4c>
    411c:	b1 30       	cpi	r27, 0x01	; 1
    411e:	91 f0       	breq	.+36     	; 0x4144 <__fixunssfsi+0x4c>
    4120:	0e 94 32 21 	call	0x4264	; 0x4264 <__fp_zero>
    4124:	b1 e0       	ldi	r27, 0x01	; 1
    4126:	08 95       	ret
    4128:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__fp_zero>
    412c:	67 2f       	mov	r22, r23
    412e:	78 2f       	mov	r23, r24
    4130:	88 27       	eor	r24, r24
    4132:	b8 5f       	subi	r27, 0xF8	; 248
    4134:	39 f0       	breq	.+14     	; 0x4144 <__fixunssfsi+0x4c>
    4136:	b9 3f       	cpi	r27, 0xF9	; 249
    4138:	cc f3       	brlt	.-14     	; 0x412c <__fixunssfsi+0x34>
    413a:	86 95       	lsr	r24
    413c:	77 95       	ror	r23
    413e:	67 95       	ror	r22
    4140:	b3 95       	inc	r27
    4142:	d9 f7       	brne	.-10     	; 0x413a <__fixunssfsi+0x42>
    4144:	3e f4       	brtc	.+14     	; 0x4154 <__fixunssfsi+0x5c>
    4146:	90 95       	com	r25
    4148:	80 95       	com	r24
    414a:	70 95       	com	r23
    414c:	61 95       	neg	r22
    414e:	7f 4f       	sbci	r23, 0xFF	; 255
    4150:	8f 4f       	sbci	r24, 0xFF	; 255
    4152:	9f 4f       	sbci	r25, 0xFF	; 255
    4154:	08 95       	ret

00004156 <__floatunsisf>:
    4156:	e8 94       	clt
    4158:	09 c0       	rjmp	.+18     	; 0x416c <__floatsisf+0x12>

0000415a <__floatsisf>:
    415a:	97 fb       	bst	r25, 7
    415c:	3e f4       	brtc	.+14     	; 0x416c <__floatsisf+0x12>
    415e:	90 95       	com	r25
    4160:	80 95       	com	r24
    4162:	70 95       	com	r23
    4164:	61 95       	neg	r22
    4166:	7f 4f       	sbci	r23, 0xFF	; 255
    4168:	8f 4f       	sbci	r24, 0xFF	; 255
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	99 23       	and	r25, r25
    416e:	a9 f0       	breq	.+42     	; 0x419a <__floatsisf+0x40>
    4170:	f9 2f       	mov	r31, r25
    4172:	96 e9       	ldi	r25, 0x96	; 150
    4174:	bb 27       	eor	r27, r27
    4176:	93 95       	inc	r25
    4178:	f6 95       	lsr	r31
    417a:	87 95       	ror	r24
    417c:	77 95       	ror	r23
    417e:	67 95       	ror	r22
    4180:	b7 95       	ror	r27
    4182:	f1 11       	cpse	r31, r1
    4184:	f8 cf       	rjmp	.-16     	; 0x4176 <__floatsisf+0x1c>
    4186:	fa f4       	brpl	.+62     	; 0x41c6 <__floatsisf+0x6c>
    4188:	bb 0f       	add	r27, r27
    418a:	11 f4       	brne	.+4      	; 0x4190 <__floatsisf+0x36>
    418c:	60 ff       	sbrs	r22, 0
    418e:	1b c0       	rjmp	.+54     	; 0x41c6 <__floatsisf+0x6c>
    4190:	6f 5f       	subi	r22, 0xFF	; 255
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	8f 4f       	sbci	r24, 0xFF	; 255
    4196:	9f 4f       	sbci	r25, 0xFF	; 255
    4198:	16 c0       	rjmp	.+44     	; 0x41c6 <__floatsisf+0x6c>
    419a:	88 23       	and	r24, r24
    419c:	11 f0       	breq	.+4      	; 0x41a2 <__floatsisf+0x48>
    419e:	96 e9       	ldi	r25, 0x96	; 150
    41a0:	11 c0       	rjmp	.+34     	; 0x41c4 <__floatsisf+0x6a>
    41a2:	77 23       	and	r23, r23
    41a4:	21 f0       	breq	.+8      	; 0x41ae <__floatsisf+0x54>
    41a6:	9e e8       	ldi	r25, 0x8E	; 142
    41a8:	87 2f       	mov	r24, r23
    41aa:	76 2f       	mov	r23, r22
    41ac:	05 c0       	rjmp	.+10     	; 0x41b8 <__floatsisf+0x5e>
    41ae:	66 23       	and	r22, r22
    41b0:	71 f0       	breq	.+28     	; 0x41ce <__floatsisf+0x74>
    41b2:	96 e8       	ldi	r25, 0x86	; 134
    41b4:	86 2f       	mov	r24, r22
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	2a f0       	brmi	.+10     	; 0x41c6 <__floatsisf+0x6c>
    41bc:	9a 95       	dec	r25
    41be:	66 0f       	add	r22, r22
    41c0:	77 1f       	adc	r23, r23
    41c2:	88 1f       	adc	r24, r24
    41c4:	da f7       	brpl	.-10     	; 0x41bc <__floatsisf+0x62>
    41c6:	88 0f       	add	r24, r24
    41c8:	96 95       	lsr	r25
    41ca:	87 95       	ror	r24
    41cc:	97 f9       	bld	r25, 7
    41ce:	08 95       	ret

000041d0 <__fp_inf>:
    41d0:	97 f9       	bld	r25, 7
    41d2:	9f 67       	ori	r25, 0x7F	; 127
    41d4:	80 e8       	ldi	r24, 0x80	; 128
    41d6:	70 e0       	ldi	r23, 0x00	; 0
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	08 95       	ret

000041dc <__fp_nan>:
    41dc:	9f ef       	ldi	r25, 0xFF	; 255
    41de:	80 ec       	ldi	r24, 0xC0	; 192
    41e0:	08 95       	ret

000041e2 <__fp_pscA>:
    41e2:	00 24       	eor	r0, r0
    41e4:	0a 94       	dec	r0
    41e6:	16 16       	cp	r1, r22
    41e8:	17 06       	cpc	r1, r23
    41ea:	18 06       	cpc	r1, r24
    41ec:	09 06       	cpc	r0, r25
    41ee:	08 95       	ret

000041f0 <__fp_pscB>:
    41f0:	00 24       	eor	r0, r0
    41f2:	0a 94       	dec	r0
    41f4:	12 16       	cp	r1, r18
    41f6:	13 06       	cpc	r1, r19
    41f8:	14 06       	cpc	r1, r20
    41fa:	05 06       	cpc	r0, r21
    41fc:	08 95       	ret

000041fe <__fp_round>:
    41fe:	09 2e       	mov	r0, r25
    4200:	03 94       	inc	r0
    4202:	00 0c       	add	r0, r0
    4204:	11 f4       	brne	.+4      	; 0x420a <__fp_round+0xc>
    4206:	88 23       	and	r24, r24
    4208:	52 f0       	brmi	.+20     	; 0x421e <__fp_round+0x20>
    420a:	bb 0f       	add	r27, r27
    420c:	40 f4       	brcc	.+16     	; 0x421e <__fp_round+0x20>
    420e:	bf 2b       	or	r27, r31
    4210:	11 f4       	brne	.+4      	; 0x4216 <__fp_round+0x18>
    4212:	60 ff       	sbrs	r22, 0
    4214:	04 c0       	rjmp	.+8      	; 0x421e <__fp_round+0x20>
    4216:	6f 5f       	subi	r22, 0xFF	; 255
    4218:	7f 4f       	sbci	r23, 0xFF	; 255
    421a:	8f 4f       	sbci	r24, 0xFF	; 255
    421c:	9f 4f       	sbci	r25, 0xFF	; 255
    421e:	08 95       	ret

00004220 <__fp_split3>:
    4220:	57 fd       	sbrc	r21, 7
    4222:	90 58       	subi	r25, 0x80	; 128
    4224:	44 0f       	add	r20, r20
    4226:	55 1f       	adc	r21, r21
    4228:	59 f0       	breq	.+22     	; 0x4240 <__fp_splitA+0x10>
    422a:	5f 3f       	cpi	r21, 0xFF	; 255
    422c:	71 f0       	breq	.+28     	; 0x424a <__fp_splitA+0x1a>
    422e:	47 95       	ror	r20

00004230 <__fp_splitA>:
    4230:	88 0f       	add	r24, r24
    4232:	97 fb       	bst	r25, 7
    4234:	99 1f       	adc	r25, r25
    4236:	61 f0       	breq	.+24     	; 0x4250 <__fp_splitA+0x20>
    4238:	9f 3f       	cpi	r25, 0xFF	; 255
    423a:	79 f0       	breq	.+30     	; 0x425a <__fp_splitA+0x2a>
    423c:	87 95       	ror	r24
    423e:	08 95       	ret
    4240:	12 16       	cp	r1, r18
    4242:	13 06       	cpc	r1, r19
    4244:	14 06       	cpc	r1, r20
    4246:	55 1f       	adc	r21, r21
    4248:	f2 cf       	rjmp	.-28     	; 0x422e <__fp_split3+0xe>
    424a:	46 95       	lsr	r20
    424c:	f1 df       	rcall	.-30     	; 0x4230 <__fp_splitA>
    424e:	08 c0       	rjmp	.+16     	; 0x4260 <__fp_splitA+0x30>
    4250:	16 16       	cp	r1, r22
    4252:	17 06       	cpc	r1, r23
    4254:	18 06       	cpc	r1, r24
    4256:	99 1f       	adc	r25, r25
    4258:	f1 cf       	rjmp	.-30     	; 0x423c <__fp_splitA+0xc>
    425a:	86 95       	lsr	r24
    425c:	71 05       	cpc	r23, r1
    425e:	61 05       	cpc	r22, r1
    4260:	08 94       	sec
    4262:	08 95       	ret

00004264 <__fp_zero>:
    4264:	e8 94       	clt

00004266 <__fp_szero>:
    4266:	bb 27       	eor	r27, r27
    4268:	66 27       	eor	r22, r22
    426a:	77 27       	eor	r23, r23
    426c:	cb 01       	movw	r24, r22
    426e:	97 f9       	bld	r25, 7
    4270:	08 95       	ret

00004272 <__mulsf3>:
    4272:	0e 94 4c 21 	call	0x4298	; 0x4298 <__mulsf3x>
    4276:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__fp_round>
    427a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__fp_pscA>
    427e:	38 f0       	brcs	.+14     	; 0x428e <__mulsf3+0x1c>
    4280:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <__fp_pscB>
    4284:	20 f0       	brcs	.+8      	; 0x428e <__mulsf3+0x1c>
    4286:	95 23       	and	r25, r21
    4288:	11 f0       	breq	.+4      	; 0x428e <__mulsf3+0x1c>
    428a:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_inf>
    428e:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__fp_nan>
    4292:	11 24       	eor	r1, r1
    4294:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__fp_szero>

00004298 <__mulsf3x>:
    4298:	0e 94 10 21 	call	0x4220	; 0x4220 <__fp_split3>
    429c:	70 f3       	brcs	.-36     	; 0x427a <__mulsf3+0x8>

0000429e <__mulsf3_pse>:
    429e:	95 9f       	mul	r25, r21
    42a0:	c1 f3       	breq	.-16     	; 0x4292 <__mulsf3+0x20>
    42a2:	95 0f       	add	r25, r21
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	55 1f       	adc	r21, r21
    42a8:	62 9f       	mul	r22, r18
    42aa:	f0 01       	movw	r30, r0
    42ac:	72 9f       	mul	r23, r18
    42ae:	bb 27       	eor	r27, r27
    42b0:	f0 0d       	add	r31, r0
    42b2:	b1 1d       	adc	r27, r1
    42b4:	63 9f       	mul	r22, r19
    42b6:	aa 27       	eor	r26, r26
    42b8:	f0 0d       	add	r31, r0
    42ba:	b1 1d       	adc	r27, r1
    42bc:	aa 1f       	adc	r26, r26
    42be:	64 9f       	mul	r22, r20
    42c0:	66 27       	eor	r22, r22
    42c2:	b0 0d       	add	r27, r0
    42c4:	a1 1d       	adc	r26, r1
    42c6:	66 1f       	adc	r22, r22
    42c8:	82 9f       	mul	r24, r18
    42ca:	22 27       	eor	r18, r18
    42cc:	b0 0d       	add	r27, r0
    42ce:	a1 1d       	adc	r26, r1
    42d0:	62 1f       	adc	r22, r18
    42d2:	73 9f       	mul	r23, r19
    42d4:	b0 0d       	add	r27, r0
    42d6:	a1 1d       	adc	r26, r1
    42d8:	62 1f       	adc	r22, r18
    42da:	83 9f       	mul	r24, r19
    42dc:	a0 0d       	add	r26, r0
    42de:	61 1d       	adc	r22, r1
    42e0:	22 1f       	adc	r18, r18
    42e2:	74 9f       	mul	r23, r20
    42e4:	33 27       	eor	r19, r19
    42e6:	a0 0d       	add	r26, r0
    42e8:	61 1d       	adc	r22, r1
    42ea:	23 1f       	adc	r18, r19
    42ec:	84 9f       	mul	r24, r20
    42ee:	60 0d       	add	r22, r0
    42f0:	21 1d       	adc	r18, r1
    42f2:	82 2f       	mov	r24, r18
    42f4:	76 2f       	mov	r23, r22
    42f6:	6a 2f       	mov	r22, r26
    42f8:	11 24       	eor	r1, r1
    42fa:	9f 57       	subi	r25, 0x7F	; 127
    42fc:	50 40       	sbci	r21, 0x00	; 0
    42fe:	9a f0       	brmi	.+38     	; 0x4326 <__mulsf3_pse+0x88>
    4300:	f1 f0       	breq	.+60     	; 0x433e <__mulsf3_pse+0xa0>
    4302:	88 23       	and	r24, r24
    4304:	4a f0       	brmi	.+18     	; 0x4318 <__mulsf3_pse+0x7a>
    4306:	ee 0f       	add	r30, r30
    4308:	ff 1f       	adc	r31, r31
    430a:	bb 1f       	adc	r27, r27
    430c:	66 1f       	adc	r22, r22
    430e:	77 1f       	adc	r23, r23
    4310:	88 1f       	adc	r24, r24
    4312:	91 50       	subi	r25, 0x01	; 1
    4314:	50 40       	sbci	r21, 0x00	; 0
    4316:	a9 f7       	brne	.-22     	; 0x4302 <__mulsf3_pse+0x64>
    4318:	9e 3f       	cpi	r25, 0xFE	; 254
    431a:	51 05       	cpc	r21, r1
    431c:	80 f0       	brcs	.+32     	; 0x433e <__mulsf3_pse+0xa0>
    431e:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_inf>
    4322:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__fp_szero>
    4326:	5f 3f       	cpi	r21, 0xFF	; 255
    4328:	e4 f3       	brlt	.-8      	; 0x4322 <__mulsf3_pse+0x84>
    432a:	98 3e       	cpi	r25, 0xE8	; 232
    432c:	d4 f3       	brlt	.-12     	; 0x4322 <__mulsf3_pse+0x84>
    432e:	86 95       	lsr	r24
    4330:	77 95       	ror	r23
    4332:	67 95       	ror	r22
    4334:	b7 95       	ror	r27
    4336:	f7 95       	ror	r31
    4338:	e7 95       	ror	r30
    433a:	9f 5f       	subi	r25, 0xFF	; 255
    433c:	c1 f7       	brne	.-16     	; 0x432e <__mulsf3_pse+0x90>
    433e:	fe 2b       	or	r31, r30
    4340:	88 0f       	add	r24, r24
    4342:	91 1d       	adc	r25, r1
    4344:	96 95       	lsr	r25
    4346:	87 95       	ror	r24
    4348:	97 f9       	bld	r25, 7
    434a:	08 95       	ret

0000434c <__udivmodsi4>:
    434c:	a1 e2       	ldi	r26, 0x21	; 33
    434e:	1a 2e       	mov	r1, r26
    4350:	aa 1b       	sub	r26, r26
    4352:	bb 1b       	sub	r27, r27
    4354:	fd 01       	movw	r30, r26
    4356:	0d c0       	rjmp	.+26     	; 0x4372 <__udivmodsi4_ep>

00004358 <__udivmodsi4_loop>:
    4358:	aa 1f       	adc	r26, r26
    435a:	bb 1f       	adc	r27, r27
    435c:	ee 1f       	adc	r30, r30
    435e:	ff 1f       	adc	r31, r31
    4360:	a2 17       	cp	r26, r18
    4362:	b3 07       	cpc	r27, r19
    4364:	e4 07       	cpc	r30, r20
    4366:	f5 07       	cpc	r31, r21
    4368:	20 f0       	brcs	.+8      	; 0x4372 <__udivmodsi4_ep>
    436a:	a2 1b       	sub	r26, r18
    436c:	b3 0b       	sbc	r27, r19
    436e:	e4 0b       	sbc	r30, r20
    4370:	f5 0b       	sbc	r31, r21

00004372 <__udivmodsi4_ep>:
    4372:	66 1f       	adc	r22, r22
    4374:	77 1f       	adc	r23, r23
    4376:	88 1f       	adc	r24, r24
    4378:	99 1f       	adc	r25, r25
    437a:	1a 94       	dec	r1
    437c:	69 f7       	brne	.-38     	; 0x4358 <__udivmodsi4_loop>
    437e:	60 95       	com	r22
    4380:	70 95       	com	r23
    4382:	80 95       	com	r24
    4384:	90 95       	com	r25
    4386:	9b 01       	movw	r18, r22
    4388:	ac 01       	movw	r20, r24
    438a:	bd 01       	movw	r22, r26
    438c:	cf 01       	movw	r24, r30
    438e:	08 95       	ret

00004390 <__umulhisi3>:
    4390:	a2 9f       	mul	r26, r18
    4392:	b0 01       	movw	r22, r0
    4394:	b3 9f       	mul	r27, r19
    4396:	c0 01       	movw	r24, r0
    4398:	a3 9f       	mul	r26, r19
    439a:	70 0d       	add	r23, r0
    439c:	81 1d       	adc	r24, r1
    439e:	11 24       	eor	r1, r1
    43a0:	91 1d       	adc	r25, r1
    43a2:	b2 9f       	mul	r27, r18
    43a4:	70 0d       	add	r23, r0
    43a6:	81 1d       	adc	r24, r1
    43a8:	11 24       	eor	r1, r1
    43aa:	91 1d       	adc	r25, r1
    43ac:	08 95       	ret

000043ae <memset>:
    43ae:	dc 01       	movw	r26, r24
    43b0:	01 c0       	rjmp	.+2      	; 0x43b4 <memset+0x6>
    43b2:	6d 93       	st	X+, r22
    43b4:	41 50       	subi	r20, 0x01	; 1
    43b6:	50 40       	sbci	r21, 0x00	; 0
    43b8:	e0 f7       	brcc	.-8      	; 0x43b2 <memset+0x4>
    43ba:	08 95       	ret

000043bc <strcat>:
    43bc:	fb 01       	movw	r30, r22
    43be:	dc 01       	movw	r26, r24
    43c0:	0d 90       	ld	r0, X+
    43c2:	00 20       	and	r0, r0
    43c4:	e9 f7       	brne	.-6      	; 0x43c0 <strcat+0x4>
    43c6:	11 97       	sbiw	r26, 0x01	; 1
    43c8:	01 90       	ld	r0, Z+
    43ca:	0d 92       	st	X+, r0
    43cc:	00 20       	and	r0, r0
    43ce:	e1 f7       	brne	.-8      	; 0x43c8 <strcat+0xc>
    43d0:	08 95       	ret

000043d2 <__itoa_ncheck>:
    43d2:	bb 27       	eor	r27, r27
    43d4:	4a 30       	cpi	r20, 0x0A	; 10
    43d6:	31 f4       	brne	.+12     	; 0x43e4 <__itoa_ncheck+0x12>
    43d8:	99 23       	and	r25, r25
    43da:	22 f4       	brpl	.+8      	; 0x43e4 <__itoa_ncheck+0x12>
    43dc:	bd e2       	ldi	r27, 0x2D	; 45
    43de:	90 95       	com	r25
    43e0:	81 95       	neg	r24
    43e2:	9f 4f       	sbci	r25, 0xFF	; 255
    43e4:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <__utoa_common>

000043e8 <__utoa_ncheck>:
    43e8:	bb 27       	eor	r27, r27

000043ea <__utoa_common>:
    43ea:	fb 01       	movw	r30, r22
    43ec:	55 27       	eor	r21, r21
    43ee:	aa 27       	eor	r26, r26
    43f0:	88 0f       	add	r24, r24
    43f2:	99 1f       	adc	r25, r25
    43f4:	aa 1f       	adc	r26, r26
    43f6:	a4 17       	cp	r26, r20
    43f8:	10 f0       	brcs	.+4      	; 0x43fe <__utoa_common+0x14>
    43fa:	a4 1b       	sub	r26, r20
    43fc:	83 95       	inc	r24
    43fe:	50 51       	subi	r21, 0x10	; 16
    4400:	b9 f7       	brne	.-18     	; 0x43f0 <__utoa_common+0x6>
    4402:	a0 5d       	subi	r26, 0xD0	; 208
    4404:	aa 33       	cpi	r26, 0x3A	; 58
    4406:	08 f0       	brcs	.+2      	; 0x440a <__utoa_common+0x20>
    4408:	a9 5d       	subi	r26, 0xD9	; 217
    440a:	a1 93       	st	Z+, r26
    440c:	00 97       	sbiw	r24, 0x00	; 0
    440e:	79 f7       	brne	.-34     	; 0x43ee <__utoa_common+0x4>
    4410:	b1 11       	cpse	r27, r1
    4412:	b1 93       	st	Z+, r27
    4414:	11 92       	st	Z+, r1
    4416:	cb 01       	movw	r24, r22
    4418:	0c 94 0e 22 	jmp	0x441c	; 0x441c <strrev>

0000441c <strrev>:
    441c:	dc 01       	movw	r26, r24
    441e:	fc 01       	movw	r30, r24
    4420:	67 2f       	mov	r22, r23
    4422:	71 91       	ld	r23, Z+
    4424:	77 23       	and	r23, r23
    4426:	e1 f7       	brne	.-8      	; 0x4420 <strrev+0x4>
    4428:	32 97       	sbiw	r30, 0x02	; 2
    442a:	04 c0       	rjmp	.+8      	; 0x4434 <strrev+0x18>
    442c:	7c 91       	ld	r23, X
    442e:	6d 93       	st	X+, r22
    4430:	70 83       	st	Z, r23
    4432:	62 91       	ld	r22, -Z
    4434:	ae 17       	cp	r26, r30
    4436:	bf 07       	cpc	r27, r31
    4438:	c8 f3       	brcs	.-14     	; 0x442c <strrev+0x10>
    443a:	08 95       	ret

0000443c <_exit>:
    443c:	f8 94       	cli

0000443e <__stop_program>:
    443e:	ff cf       	rjmp	.-2      	; 0x443e <__stop_program>

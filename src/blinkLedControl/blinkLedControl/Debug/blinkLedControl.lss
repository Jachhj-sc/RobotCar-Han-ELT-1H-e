
blinkLedControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a3  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075f  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c8  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_13>:
#define RIGHT_LED_TOGGLE PORTB ^= (1<<PORTB4)


char heading = ' ';

ISR(TIMER1_OVF_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	switch(heading){
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  a8:	8c 36       	cpi	r24, 0x6C	; 108
  aa:	19 f0       	breq	.+6      	; 0xb2 <__vector_13+0x1c>
  ac:	82 37       	cpi	r24, 0x72	; 114
  ae:	39 f0       	breq	.+14     	; 0xbe <__vector_13+0x28>
  b0:	0c c0       	rjmp	.+24     	; 0xca <__vector_13+0x34>
		case Left:
		//code for editing the blinker  light
		LEFT_LED_TOGGLE;
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	89 27       	eor	r24, r25
  b8:	85 b9       	out	0x05, r24	; 5
		RIGHT_LED_OFF;
  ba:	2c 98       	cbi	0x05, 4	; 5
		break;
  bc:	08 c0       	rjmp	.+16     	; 0xce <__vector_13+0x38>
		
		case Right:
		RIGHT_LED_TOGGLE;
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	89 27       	eor	r24, r25
  c4:	85 b9       	out	0x05, r24	; 5
		LEFT_LED_OFF;
  c6:	2d 98       	cbi	0x05, 5	; 5
		break;
  c8:	02 c0       	rjmp	.+4      	; 0xce <__vector_13+0x38>
		
		default:
		LEFT_LED_OFF;
  ca:	2d 98       	cbi	0x05, 5	; 5
		RIGHT_LED_OFF;
  cc:	2c 98       	cbi	0x05, 4	; 5
		break;
		
	}
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <initBlinker>:

void initBlinker(){
	DDRB |= ((1<< DDB5) | (1<<DDB4) | (1<<DDB3));
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	88 63       	ori	r24, 0x38	; 56
  e0:	84 b9       	out	0x04, r24	; 4
	//PORTB |= ();
	
	TCCR1B |= (1<<CS12);
  e2:	e1 e8       	ldi	r30, 0x81	; 129
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1);
  ec:	ef e6       	ldi	r30, 0x6F	; 111
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <blinkerController>:
}

void blinkerController(char LR){
	switch(LR){
  f8:	8c 36       	cpi	r24, 0x6C	; 108
  fa:	19 f0       	breq	.+6      	; 0x102 <blinkerController+0xa>
  fc:	82 37       	cpi	r24, 0x72	; 114
  fe:	29 f0       	breq	.+10     	; 0x10a <blinkerController+0x12>
 100:	08 c0       	rjmp	.+16     	; 0x112 <blinkerController+0x1a>
		case Left:
		//code for editing the blinker  light
		heading  = 'l';
 102:	8c e6       	ldi	r24, 0x6C	; 108
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 108:	08 95       	ret
		
		case Right:
		heading = 'r';
 10a:	82 e7       	ldi	r24, 0x72	; 114
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 110:	08 95       	ret
		
		default:
		heading = ' ';
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 118:	08 95       	ret

0000011a <main>:
#include "blinker.h"
#include <avr/interrupt.h>

int main(void)
{
	initBlinker();
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <initBlinker>
	
	sei();
 11e:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		blinkerController(Left);
 120:	8c e6       	ldi	r24, 0x6C	; 108
 122:	0e 94 7c 00 	call	0xf8	; 0xf8 <blinkerController>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 e2       	ldi	r24, 0x23	; 35
 12a:	94 ef       	ldi	r25, 0xF4	; 244
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x12>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x1c>
 136:	00 00       	nop
		_delay_ms(5000);
		blinkerController(Right);
 138:	82 e7       	ldi	r24, 0x72	; 114
 13a:	0e 94 7c 00 	call	0xf8	; 0xf8 <blinkerController>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	83 e2       	ldi	r24, 0x23	; 35
 142:	94 ef       	ldi	r25, 0xF4	; 244
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x2a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x34>
 14e:	00 00       	nop
		_delay_ms(5000);
		blinkerController(VOID);
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	0e 94 7c 00 	call	0xf8	; 0xf8 <blinkerController>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	83 e2       	ldi	r24, 0x23	; 35
 15a:	94 ef       	ldi	r25, 0xF4	; 244
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x42>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x4c>
 166:	00 00       	nop
 168:	db cf       	rjmp	.-74     	; 0x120 <main+0x6>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>


RobotCar_Debug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025e  00800100  00005460  000054f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  0080035e  0080035e  00005752  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005752  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002278  00000000  00000000  000057c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0004a33c  00000000  00000000  00007a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035c2  00000000  00000000  00051d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000dce7  00000000  00000000  0005533a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000ca78  00000000  00000000  00063024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011278  00000000  00000000  0006fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004fa93  00000000  00000000  00080d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021d0  00000000  00000000  000d07a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__ctors_end>
       4:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__vector_1>
       8:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
       c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_3>
      10:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      14:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_5>
      18:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      1c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      20:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      24:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__vector_9>
      28:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      2c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      30:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      34:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      38:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      3c:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_15>
      40:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      44:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      48:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      4c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      50:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      54:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      58:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      5c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      60:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>
      64:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 00       	.word	0x00bf	; ????
      6a:	03 02       	muls	r16, r19
      6c:	03 04       	cpc	r0, r3
      6e:	03 05       	cpc	r16, r3
      70:	04 06       	cpc	r0, r20
      72:	0a 00       	.word	0x000a	; ????
      74:	fe 07       	cpc	r31, r30
      76:	fe 07       	cpc	r31, r30
      78:	00 01       	movw	r0, r0
      7a:	42 02       	muls	r20, r18
      7c:	88 07       	cpc	r24, r24
      7e:	c4 20       	and	r12, r4
      80:	05 00       	.word	0x0005	; ????
      82:	62 07       	cpc	r22, r18
      84:	21 07       	cpc	r18, r17
      86:	39 43       	sbci	r19, 0x39	; 57
      88:	c7 a0       	ldd	r12, Z+39	; 0x27
      8a:	04 22       	and	r0, r20
      8c:	07 9b       	sbis	0x00, 7	; 0
      8e:	52 47       	sbci	r21, 0x72	; 114
      90:	62 09       	sbc	r22, r2
      92:	23 0e       	add	r2, r19
      94:	3d 42       	sbci	r19, 0x2D	; 45
      96:	4f 29       	or	r20, r15
      98:	49 06       	cpc	r4, r25
      9a:	a5 32       	cpi	r26, 0x25	; 37
      9c:	28 a5       	ldd	r18, Y+40	; 0x28
      9e:	24 01       	movw	r4, r8
      a0:	24 0c       	add	r2, r4
      a2:	3d 42       	sbci	r19, 0x2D	; 45
      a4:	57 b6       	in	r5, 0x37	; 55
      a6:	d4 b6       	in	r13, 0x34	; 52
      a8:	24 d9       	rcall	.-3512   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      aa:	22 00       	.word	0x0022	; ????
      ac:	25 0c       	add	r2, r5
      ae:	3d 42       	sbci	r19, 0x2D	; 45
      b0:	4f a4       	ldd	r4, Y+47	; 0x2f
      b2:	74 ab       	std	Z+52, r23	; 0x34
      b4:	b4 48       	sbci	r27, 0x84	; 132
      b6:	09 00       	.word	0x0009	; ????
      b8:	26 0d       	add	r18, r6
      ba:	3d 42       	sbci	r19, 0x2D	; 45
      bc:	4f 96       	adiw	r24, 0x1f	; 31
      be:	44 49       	sbci	r20, 0x94	; 148
      c0:	56 49       	sbci	r21, 0x96	; 150
      c2:	a4 48       	sbci	r26, 0x84	; 132
      c4:	09 27       	eor	r16, r25
      c6:	06 19       	sub	r16, r6
      c8:	53 c7       	rjmp	.+3750   	; 0xf70 <getBatteryADC+0x5c>
      ca:	00 28       	or	r0, r0
      cc:	08 bb       	out	0x18, r16	; 24
      ce:	42 57       	subi	r20, 0x72	; 114
      d0:	52 aa       	std	Z+50, r5	; 0x32
      d2:	15 29       	or	r17, r5
      d4:	09 bb       	out	0x19, r16	; 25
      d6:	42 47       	sbci	r20, 0x72	; 114
      d8:	56 aa       	std	Z+54, r5	; 0x36
      da:	94 00       	.word	0x0094	; ????
      dc:	2a 0a       	sbc	r2, r26
      de:	2d 46       	sbci	r18, 0x6D	; 109
      e0:	47 96       	adiw	r24, 0x17	; 23
      e2:	54 06       	cpc	r5, r20
      e4:	a5 2d       	mov	r26, r5
      e6:	2b 0a       	sbc	r2, r27
      e8:	2d 46       	sbci	r18, 0x6D	; 109
      ea:	57 18       	sub	r5, r7
      ec:	0d 52       	subi	r16, 0x2D	; 45
      ee:	18 01       	movw	r2, r16
      f0:	2c 07       	cpc	r18, r28
      f2:	9b 3e       	cpi	r25, 0xEB	; 235
      f4:	8f 52       	subi	r24, 0x2F	; 47
      f6:	02 2d       	mov	r16, r2
      f8:	06 0d       	add	r16, r6
      fa:	4e c7       	rjmp	.+3740   	; 0xf98 <getBatteryADC+0x84>
      fc:	20 2e       	mov	r2, r16
      fe:	08 9b       	sbis	0x01, 0	; 1
     100:	3e 4f       	sbci	r19, 0xFE	; 254
     102:	b2 24       	eor	r11, r2
     104:	00 2f       	mov	r16, r16
     106:	08 3d       	cpi	r16, 0xD8	; 216
     108:	42 67       	ori	r20, 0x72	; 114
     10a:	ad 63       	ori	r26, 0x3D	; 61
     10c:	08 30       	cpi	r16, 0x08	; 8
     10e:	0b 3d       	cpi	r16, 0xDB	; 219
     110:	42 57       	subi	r20, 0x72	; 114
     112:	96 d4       	rcall	.+2348   	; 0xa40 <__stack+0x141>
     114:	6c 49       	sbci	r22, 0x9C	; 156
     116:	2d 02       	muls	r18, r29
     118:	31 0a       	sbc	r3, r17
     11a:	3d 42       	sbci	r19, 0x2D	; 45
     11c:	57 26       	eor	r5, r23
     11e:	25 61       	ori	r18, 0x15	; 21
     120:	d3 20       	and	r13, r3
     122:	32 0c       	add	r3, r2
     124:	3d 42       	sbci	r19, 0x2D	; 45
     126:	cf 92       	push	r12
     128:	85 91       	lpm	r24, Z+
     12a:	94 85       	ldd	r25, Z+12	; 0x0c
     12c:	83 00       	.word	0x0083	; ????
     12e:	33 0c       	add	r3, r3
     130:	3d 42       	sbci	r19, 0x2D	; 45
     132:	c7 20       	and	r12, r7
     134:	66 99       	sbic	0x0c, 6	; 12
     136:	aa 25       	eor	r26, r10
     138:	0b 00       	.word	0x000b	; ????
     13a:	34 0c       	add	r3, r4
     13c:	3d 42       	sbci	r19, 0x2D	; 45
     13e:	5f 26       	eor	r5, r31
     140:	25 a5       	ldd	r18, Z+45	; 0x2d
     142:	64 d0       	rcall	.+200    	; 0x20c <__trampolines_end+0x1a4>
     144:	c2 04       	cpc	r12, r2
     146:	35 0b       	sbc	r19, r21
     148:	3d 42       	sbci	r19, 0x2D	; 45
     14a:	c7 31       	cpi	r28, 0x17	; 23
     14c:	31 85       	ldd	r19, Z+9	; 0x09
     14e:	5a b2       	in	r5, 0x1a	; 26
     150:	00 36       	cpi	r16, 0x60	; 96
     152:	0c 3d       	cpi	r16, 0xDC	; 220
     154:	42 97       	sbiw	r24, 0x12	; 18
     156:	94 85       	ldd	r25, Z+12	; 0x0c
     158:	89 49       	sbci	r24, 0x99	; 153
     15a:	4b 16       	cp	r4, r27
     15c:	00 37       	cpi	r16, 0x70	; 112
     15e:	0b 3d       	cpi	r16, 0xDB	; 219
     160:	42 c7       	rjmp	.+3716   	; 0xfe6 <ADCinit+0x12>
     162:	20 66       	ori	r18, 0x60	; 96
     164:	61 56       	subi	r22, 0x61	; 97
     166:	cc 00       	.word	0x00cc	; ????
     168:	38 0c       	add	r3, r8
     16a:	3d 42       	sbci	r19, 0x2D	; 45
     16c:	cf 92       	push	r12
     16e:	69 c9       	rjmp	.-3374   	; 0xfffff442 <__eeprom_end+0xff7ef442>
     170:	92 69       	ori	r25, 0x92	; 146
     172:	c9 02       	muls	r28, r25
     174:	39 0c       	add	r3, r9
     176:	3d 42       	sbci	r19, 0x2D	; 45
     178:	cf 92       	push	r12
     17a:	49 8a       	std	Y+17, r4	; 0x11
     17c:	12 66       	ori	r17, 0x62	; 98
     17e:	91 04       	cpc	r9, r1
     180:	3a 0a       	sbc	r3, r26
     182:	bb 3e       	cpi	r27, 0xEB	; 235
     184:	4f b2       	in	r4, 0x1f	; 31
     186:	a4 c9       	rjmp	.-3256   	; 0xfffff4d0 <__eeprom_end+0xff7ef4d0>
     188:	92 00       	.word	0x0092	; ????
     18a:	3b 09       	sbc	r19, r11
     18c:	bb 3e       	cpi	r27, 0xEB	; 235
     18e:	4f b2       	in	r4, 0x1f	; 31
     190:	a4 4a       	sbci	r26, 0xA4	; 164
     192:	09 3c       	cpi	r16, 0xC9	; 201
     194:	08 bc       	out	0x28, r0	; 40
     196:	42 5f       	subi	r20, 0xF2	; 242
     198:	d4 d8       	rcall	.-3672   	; 0xfffff342 <__eeprom_end+0xff7ef342>
     19a:	00 3d       	cpi	r16, 0xD0	; 208
     19c:	08 1d       	adc	r16, r8
     19e:	4a c7       	rjmp	.+3732   	; 0x1034 <__vector_3+0x12>
     1a0:	a0 0e       	add	r10, r16
     1a2:	02 3e       	cpi	r16, 0xE2	; 226
     1a4:	08 bc       	out	0x28, r0	; 40
     1a6:	42 47       	sbci	r20, 0x72	; 114
     1a8:	d8 d4       	rcall	.+2480   	; 0xb5a <__stack+0x25b>
     1aa:	06 3f       	cpi	r16, 0xF6	; 246
     1ac:	0a 3d       	cpi	r16, 0xDA	; 218
     1ae:	42 cf       	rjmp	.-380    	; 0x34 <__FUSE_REGION_LENGTH__+0x31>
     1b0:	92 35       	cpi	r25, 0x52	; 82
     1b2:	e6 50       	subi	r30, 0x06	; 6
     1b4:	04 40       	sbci	r16, 0x04	; 4
     1b6:	0c 3d       	cpi	r16, 0xDC	; 220
     1b8:	42 cf       	rjmp	.-380    	; 0x3e <__SP_H__>
     1ba:	92 49       	sbci	r25, 0x92	; 146
     1bc:	4b 62       	ori	r20, 0x2B	; 43
     1be:	49 17       	cp	r20, r25
     1c0:	00 41       	sbci	r16, 0x10	; 16
     1c2:	0c 3d       	cpi	r16, 0xDC	; 220
     1c4:	42 57       	subi	r20, 0x72	; 114
     1c6:	96 d4       	rcall	.+2348   	; 0xaf4 <__stack+0x1f5>
     1c8:	b4 61       	ori	r27, 0x14	; 20
     1ca:	c8 b4       	in	r12, 0x28	; 40
     1cc:	00 42       	sbci	r16, 0x20	; 32
     1ce:	0d 3d       	cpi	r16, 0xDD	; 221
     1d0:	42 c7       	rjmp	.+3716   	; 0x1056 <__vector_3+0x34>
     1d2:	10 55       	subi	r17, 0x50	; 80
     1d4:	a2 64       	ori	r26, 0x42	; 66
     1d6:	aa 44       	sbci	r26, 0x4A	; 74
     1d8:	83 02       	muls	r24, r19
     1da:	43 0a       	sbc	r4, r19
     1dc:	3d 42       	sbci	r19, 0x2D	; 45
     1de:	cf 92       	push	r12
     1e0:	89 6d       	ori	r24, 0xD9	; 217
     1e2:	c9 02       	muls	r28, r25
     1e4:	44 0f       	add	r20, r20
     1e6:	3d 42       	sbci	r19, 0x2D	; 45
     1e8:	c7 10       	cpse	r12, r7
     1ea:	55 a2       	std	Z+37, r5	; 0x25
     1ec:	24 4a       	sbci	r18, 0xA4	; 164
     1ee:	a2 24       	eor	r10, r2
     1f0:	1a 14       	cp	r1, r10
     1f2:	00 45       	sbci	r16, 0x50	; 80
     1f4:	0b 3d       	cpi	r16, 0xDB	; 219
     1f6:	42 c7       	rjmp	.+3716   	; 0x107c <__vector_3+0x5a>
     1f8:	31 1c       	adc	r3, r1
     1fa:	92 30       	cpi	r25, 0x02	; 2
     1fc:	1c 04       	cpc	r1, r12
     1fe:	46 0a       	sbc	r4, r22
     200:	3d 42       	sbci	r19, 0x2D	; 45
     202:	c7 31       	cpi	r28, 0x17	; 23
     204:	1c 92       	st	X, r1
     206:	b0 08       	sbc	r11, r0
     208:	47 0b       	sbc	r20, r23
     20a:	3d 42       	sbci	r19, 0x2D	; 45
     20c:	cf 92       	push	r12
     20e:	89 a5       	ldd	r24, Y+41	; 0x29
     210:	2d 59       	subi	r18, 0x9D	; 157
     212:	00 48       	sbci	r16, 0x80	; 128
     214:	0a 3d       	cpi	r16, 0xDA	; 218
     216:	42 47       	sbci	r20, 0x72	; 114
     218:	66 1b       	sub	r22, r22
     21a:	86 cc       	rjmp	.-1780   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     21c:	16 49       	sbci	r17, 0x96	; 150
     21e:	08 bb       	out	0x18, r16	; 24
     220:	42 c7       	rjmp	.+3716   	; 0x10a6 <__vector_3+0x84>
     222:	12 75       	andi	r17, 0x52	; 82
     224:	19 4a       	sbci	r17, 0xA9	; 169
     226:	0a 3d       	cpi	r16, 0xDA	; 218
     228:	42 d7       	rcall	.+3716   	; 0x10ae <__vector_3+0x8c>
     22a:	16 b6       	in	r1, 0x36	; 54
     22c:	44 91       	lpm	r20, Z
     22e:	04 4b       	sbci	r16, 0xB4	; 180
     230:	0d 3d       	cpi	r16, 0xDD	; 221
     232:	42 47       	sbci	r20, 0x72	; 114
     234:	26 25       	eor	r18, r6
     236:	25 2d       	mov	r18, r5
     238:	89 2a       	or	r8, r25
     23a:	59 00       	.word	0x0059	; ????
     23c:	4c 08       	sbc	r4, r12
     23e:	3d 42       	sbci	r19, 0x2D	; 45
     240:	47 d8       	rcall	.-3954   	; 0xfffff2d0 <__eeprom_end+0xff7ef2d0>
     242:	e3 20       	and	r14, r3
     244:	4d 0b       	sbc	r20, r29
     246:	3d 42       	sbci	r19, 0x2D	; 45
     248:	47 a6       	std	Z+47, r4	; 0x2f
     24a:	2d 4b       	sbci	r18, 0xBD	; 189
     24c:	a2 d9       	rcall	.-3260   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     24e:	02 4e       	sbci	r16, 0xE2	; 226
     250:	0c 3d       	cpi	r16, 0xDC	; 220
     252:	42 47       	sbci	r20, 0x72	; 114
     254:	a6 4d       	sbci	r26, 0xD6	; 214
     256:	4a 22       	and	r4, r26
     258:	6d 5a       	subi	r22, 0xAD	; 173
     25a:	00 4f       	sbci	r16, 0xF0	; 240
     25c:	0a 3d       	cpi	r16, 0xDA	; 218
     25e:	42 cf       	rjmp	.-380    	; 0xe4 <__trampolines_end+0x7c>
     260:	92 79       	andi	r25, 0x92	; 146
     262:	4b 16       	cp	r4, r27
     264:	00 50       	subi	r16, 0x00	; 0
     266:	0c 3d       	cpi	r16, 0xDC	; 220
     268:	42 c7       	rjmp	.+3716   	; 0x10ee <__vector_3+0xcc>
     26a:	90 64       	ori	r25, 0x40	; 64
     26c:	da a0       	ldd	r13, Y+34	; 0x22
     26e:	84 45       	sbci	r24, 0x54	; 84
     270:	00 51       	subi	r16, 0x10	; 16
     272:	0a 45       	sbci	r16, 0x5A	; 90
     274:	3e cf       	rjmp	.-388    	; 0xf2 <__trampolines_end+0x8a>
     276:	92 79       	andi	r25, 0x92	; 146
     278:	a9 ac       	ldd	r10, Y+57	; 0x39
     27a:	01 52       	subi	r16, 0x21	; 33
     27c:	0d 3d       	cpi	r16, 0xDD	; 221
     27e:	42 c7       	rjmp	.+3716   	; 0x1104 <__vector_3+0xe2>
     280:	90 64       	ori	r25, 0x40	; 64
     282:	da a0       	ldd	r13, Y+34	; 0x22
     284:	94 2a       	or	r9, r20
     286:	59 00       	.word	0x0059	; ????
     288:	53 0b       	sbc	r21, r19
     28a:	3d 42       	sbci	r19, 0x2D	; 45
     28c:	cf 92       	push	r12
     28e:	a9 ab       	std	Y+49, r26	; 0x31
     290:	96 2c       	mov	r9, r6
     292:	00 54       	subi	r16, 0x40	; 64
     294:	09 3d       	cpi	r16, 0xD9	; 217
     296:	42 c7       	rjmp	.+3716   	; 0x111c <__vector_3+0xfa>
     298:	20 85       	ldd	r18, Z+8	; 0x08
     29a:	3d 01       	movw	r6, r26
     29c:	55 09       	sbc	r21, r5
     29e:	3d 42       	sbci	r19, 0x2D	; 45
     2a0:	47 e6       	ldi	r20, 0x67	; 103
     2a2:	5b b2       	in	r5, 0x1b	; 27
     2a4:	00 56       	subi	r16, 0x60	; 96
     2a6:	0d 3d       	cpi	r16, 0xDD	; 221
     2a8:	42 47       	sbci	r20, 0x72	; 114
     2aa:	66 4b       	sbci	r22, 0xB6	; 182
     2ac:	4a 49       	sbci	r20, 0x9A	; 154
     2ae:	94 64       	ori	r25, 0x44	; 68
     2b0:	11 00       	.word	0x0011	; ????
     2b2:	57 0a       	sbc	r5, r23
     2b4:	3d 42       	sbci	r19, 0x2D	; 45
     2b6:	47 e6       	ldi	r20, 0x67	; 103
     2b8:	92 28       	or	r9, r2
     2ba:	c9 2d       	mov	r28, r9
     2bc:	58 0b       	sbc	r21, r24
     2be:	3d 42       	sbci	r19, 0x2D	; 45
     2c0:	47 a6       	std	Z+47, r4	; 0x2f
     2c2:	25 b5       	in	r18, 0x25	; 37
     2c4:	4a 4d       	sbci	r20, 0xDA	; 218
     2c6:	0b 59       	subi	r16, 0x9B	; 155
     2c8:	0a 3d       	cpi	r16, 0xDA	; 218
     2ca:	42 47       	sbci	r20, 0x72	; 114
     2cc:	a6 25       	eor	r26, r6
     2ce:	b5 b0       	in	r11, 0x05	; 5
     2d0:	09 5a       	subi	r16, 0xA9	; 169
     2d2:	0a 3d       	cpi	r16, 0xDA	; 218
     2d4:	42 c7       	rjmp	.+3716   	; 0x115a <__vector_3+0x138>
     2d6:	20 66       	ori	r18, 0x60	; 96
     2d8:	1d 07       	cpc	r17, r29
     2da:	01 5b       	subi	r16, 0xB1	; 177
     2dc:	08 bb       	out	0x18, r16	; 24
     2de:	42 c7       	rjmp	.+3716   	; 0x1164 <__vector_3+0x142>
     2e0:	10 75       	andi	r17, 0x50	; 80
     2e2:	1a 5c       	subi	r17, 0xCA	; 202
     2e4:	08 3d       	cpi	r16, 0xD8	; 216
     2e6:	42 47       	sbci	r20, 0x72	; 114
     2e8:	98 76       	andi	r25, 0x68	; 104
     2ea:	0c 5d       	subi	r16, 0xDC	; 220
     2ec:	08 bb       	out	0x18, r16	; 24
     2ee:	42 c7       	rjmp	.+3716   	; 0x1174 <__vector_3+0x152>
     2f0:	d4 69       	ori	r29, 0x94	; 148
     2f2:	08 5e       	subi	r16, 0xE8	; 232
     2f4:	08 1d       	adc	r16, r8
     2f6:	52 57       	subi	r21, 0x72	; 114
     2f8:	96 d4       	rcall	.+2348   	; 0xc26 <__stack+0x327>
     2fa:	02 5f       	subi	r16, 0xF2	; 242
     2fc:	06 0d       	add	r16, r6
     2fe:	3e c7       	rjmp	.+3708   	; 0x117c <__vector_3+0x15a>
     300:	20 60       	ori	r18, 0x00	; 0
     302:	06 12       	cpse	r0, r22
     304:	5b 47       	sbci	r21, 0x7B	; 123
     306:	14 61       	ori	r17, 0x14	; 20
     308:	0a 2d       	mov	r16, r10
     30a:	42 cf       	rjmp	.-380    	; 0x190 <__trampolines_end+0x128>
     30c:	9a 0c       	add	r9, r10
     30e:	5a 32       	cpi	r21, 0x2A	; 42
     310:	04 62       	ori	r16, 0x24	; 36
     312:	0b 3d       	cpi	r16, 0xDB	; 219
     314:	42 47       	sbci	r20, 0x72	; 114
     316:	58 31       	cpi	r21, 0x18	; 24
     318:	69 93       	st	Y+, r22
     31a:	a2 00       	.word	0x00a2	; ????
     31c:	63 0a       	sbc	r6, r19
     31e:	2d 42       	sbci	r18, 0x2D	; 45
     320:	cf 92       	push	r12
     322:	89 59       	subi	r24, 0x99	; 153
     324:	b2 00       	.word	0x00b2	; ????
     326:	64 0a       	sbc	r6, r20
     328:	3d 42       	sbci	r19, 0x2D	; 45
     32a:	67 c5       	rjmp	.+2766   	; 0xdfa <__stack+0x4fb>
     32c:	b4 49       	sbci	r27, 0x94	; 148
     32e:	8a 12       	cpse	r8, r26
     330:	65 0a       	sbc	r6, r21
     332:	2d 42       	sbci	r18, 0x2D	; 45
     334:	cf 92       	push	r12
     336:	0d 43       	sbci	r16, 0x3D	; 61
     338:	ba 00       	.word	0x00ba	; ????
     33a:	66 0b       	sbc	r22, r22
     33c:	3d 42       	sbci	r19, 0x2D	; 45
     33e:	97 54       	subi	r25, 0x47	; 71
     340:	c9 86       	std	Y+9, r12	; 0x09
     342:	28 ac       	ldd	r2, Y+56	; 0x38
     344:	01 67       	ori	r16, 0x71	; 113
     346:	0c 3d       	cpi	r16, 0xDC	; 220
     348:	3a cf       	rjmp	.-396    	; 0x1be <__trampolines_end+0x156>
     34a:	a0 69       	ori	r26, 0x90	; 144
     34c:	c9 10       	cpse	r12, r9
     34e:	6a c9       	rjmp	.-3372   	; 0xfffff624 <__eeprom_end+0xff7ef624>
     350:	02 68       	ori	r16, 0x82	; 130
     352:	0a 3d       	cpi	r16, 0xDA	; 218
     354:	42 47       	sbci	r20, 0x72	; 114
     356:	58 31       	cpi	r21, 0x18	; 24
     358:	69 b6       	in	r6, 0x39	; 57
     35a:	00 69       	ori	r16, 0x90	; 144
     35c:	08 bb       	out	0x18, r16	; 24
     35e:	42 4f       	sbci	r20, 0xF2	; 242
     360:	28 b5       	in	r18, 0x28	; 40
     362:	0c 6a       	ori	r16, 0xAC	; 172
     364:	0b cc       	rjmp	.-2026   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     366:	3a 5f       	subi	r19, 0xFA	; 250
     368:	ac d5       	rcall	.+2904   	; 0xec2 <__stack+0x5c3>
     36a:	24 29       	or	r18, r4
     36c:	51 00       	.word	0x0051	; ????
     36e:	6b 0b       	sbc	r22, r27
     370:	3d 42       	sbci	r19, 0x2D	; 45
     372:	47 58       	subi	r20, 0x87	; 135
     374:	93 92       	.word	0x9293	; ????
     376:	a9 92       	st	Y+, r10
     378:	05 6c       	ori	r16, 0xC5	; 197
     37a:	08 bb       	out	0x18, r16	; 24
     37c:	42 87       	std	Z+10, r20	; 0x0a
     37e:	d4 cb       	rjmp	.-2136   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     380:	00 6d       	ori	r16, 0xD0	; 208
     382:	0b 2d       	mov	r16, r11
     384:	42 87       	std	Z+10, r20	; 0x0a
     386:	d2 a2       	std	Z+34, r13	; 0x22
     388:	24 4a       	sbci	r18, 0xA4	; 164
     38a:	a2 05       	cpc	r26, r2
     38c:	6e 09       	sbc	r22, r14
     38e:	2d 42       	sbci	r18, 0x2D	; 45
     390:	47 62       	ori	r20, 0x27	; 39
     392:	d2 6c       	ori	r29, 0xC2	; 194
     394:	01 6f       	ori	r16, 0xF1	; 241
     396:	09 2d       	mov	r16, r9
     398:	42 cf       	rjmp	.-380    	; 0x21e <__trampolines_end+0x1b6>
     39a:	92 d9       	rcall	.-3292   	; 0xfffff6c0 <__eeprom_end+0xff7ef6c0>
     39c:	92 05       	cpc	r25, r2
     39e:	70 0c       	add	r7, r0
     3a0:	3d 3a       	cpi	r19, 0xAD	; 173
     3a2:	47 62       	ori	r20, 0x27	; 39
     3a4:	d2 26       	eor	r13, r18
     3a6:	45 09       	sbc	r20, r5
     3a8:	43 00       	.word	0x0043	; ????
     3aa:	71 0a       	sbc	r7, r17
     3ac:	3d 3a       	cpi	r19, 0xAD	; 173
     3ae:	8f 69       	ori	r24, 0x9F	; 159
     3b0:	93 14       	cp	r9, r3
     3b2:	25 2c       	mov	r2, r5
     3b4:	72 09       	sbc	r23, r2
     3b6:	2d 42       	sbci	r18, 0x2D	; 45
     3b8:	47 62       	ori	r20, 0x27	; 39
     3ba:	12 8b       	std	Z+18, r17	; 0x12
     3bc:	00 73       	andi	r16, 0x30	; 48
     3be:	09 2d       	mov	r16, r9
     3c0:	42 cf       	rjmp	.-380    	; 0x246 <__trampolines_end+0x1de>
     3c2:	92 1e       	adc	r9, r18
     3c4:	14 00       	.word	0x0014	; ????
     3c6:	74 0c       	add	r7, r4
     3c8:	3d 42       	sbci	r19, 0x2D	; 45
     3ca:	4f 98       	cbi	0x09, 7	; 9
     3cc:	0d 51       	subi	r16, 0x1D	; 29
     3ce:	58 8a       	std	Y+16, r5	; 0x10
     3d0:	14 00       	.word	0x0014	; ????
     3d2:	75 09       	sbc	r23, r5
     3d4:	2d 42       	sbci	r18, 0x2D	; 45
     3d6:	47 e6       	ldi	r20, 0x67	; 103
     3d8:	a4 28       	or	r10, r4
     3da:	01 76       	andi	r16, 0x61	; 97
     3dc:	0b 2d       	mov	r16, r11
     3de:	42 47       	sbci	r20, 0x72	; 114
     3e0:	a6 25       	eor	r26, r6
     3e2:	a5 24       	eor	r10, r5
     3e4:	8b 00       	.word	0x008b	; ????
     3e6:	77 0a       	sbc	r7, r23
     3e8:	2d 42       	sbci	r18, 0x2D	; 45
     3ea:	47 66       	ori	r20, 0x67	; 103
     3ec:	49 94       	.word	0x9449	; ????
     3ee:	2e 00       	.word	0x002e	; ????
     3f0:	78 0a       	sbc	r7, r24
     3f2:	2d 42       	sbci	r18, 0x2D	; 45
     3f4:	47 96       	adiw	r24, 0x17	; 23
     3f6:	d4 2a       	or	r13, r20
     3f8:	b5 00       	.word	0x00b5	; ????
     3fa:	79 0c       	add	r7, r9
     3fc:	3d 3a       	cpi	r19, 0xAD	; 173
     3fe:	47 66       	ori	r20, 0x67	; 103
     400:	52 94       	swap	r5
     402:	50 4b       	sbci	r21, 0xB0	; 176
     404:	16 00       	.word	0x0016	; ????
     406:	7a 09       	sbc	r23, r10
     408:	2d 42       	sbci	r18, 0x2D	; 45
     40a:	c7 a0       	ldd	r12, Z+39	; 0x27
     40c:	b5 0d       	add	r27, r5
     40e:	02 7b       	andi	r16, 0xB2	; 178
     410:	0a bc       	out	0x2a, r0	; 42
     412:	42 97       	sbiw	r24, 0x12	; 18
     414:	12 26       	eor	r1, r18
     416:	62 14       	cp	r6, r2
     418:	0a 7c       	andi	r16, 0xCA	; 202
     41a:	06 39       	cpi	r16, 0x96	; 150
     41c:	43 c7       	rjmp	.+3718   	; 0x12a4 <__vector_3+0x282>
     41e:	21 7d       	andi	r18, 0xD1	; 209
     420:	0b bc       	out	0x2b, r0	; 43
     422:	42 87       	std	Z+10, r20	; 0x0a
     424:	18 85       	ldd	r17, Y+8	; 0x08
     426:	4a 98       	cbi	0x09, 2	; 9
     428:	48 00       	.word	0x0048	; ????
     42a:	7e 09       	sbc	r23, r14
     42c:	1d 52       	subi	r17, 0x2D	; 45
     42e:	4f a4       	ldd	r4, Y+47	; 0x2f
     430:	24 52       	subi	r18, 0x24	; 36
     432:	02 a0       	ldd	r0, Z+34	; 0x22
     434:	05 00       	.word	0x0005	; ????
     436:	62 07       	cpc	r22, r18
     438:	a1 07       	cpc	r26, r17
     43a:	39 43       	sbci	r19, 0x39	; 57
     43c:	47 32       	cpi	r20, 0x27	; 39
     43e:	08 a2       	std	Y+32, r0	; 0x20
     440:	0e 3d       	cpi	r16, 0xDE	; 222
     442:	3e 57       	subi	r19, 0x7E	; 126
     444:	36 28       	or	r3, r6
     446:	51 12       	cpse	r5, r17
     448:	25 d9       	rcall	.-3510   	; 0xfffff694 <__eeprom_end+0xff7ef694>
     44a:	10 45       	sbci	r17, 0x50	; 80
     44c:	00 a3       	std	Z+32, r16	; 0x20
     44e:	0c 3d       	cpi	r16, 0xDC	; 220
     450:	42 97       	sbiw	r24, 0x12	; 18
     452:	54 c9       	rjmp	.-3416   	; 0xfffff6fc <__eeprom_end+0xff7ef6fc>
     454:	b6 30       	cpi	r27, 0x06	; 6
     456:	52 14       	cp	r5, r2
     458:	00 a4       	ldd	r0, Z+40	; 0x28
     45a:	0b 2d       	mov	r16, r11
     45c:	42 47       	sbci	r20, 0x72	; 114
     45e:	96 4c       	sbci	r25, 0xC6	; 198
     460:	49 b4       	in	r4, 0x29	; 41
     462:	64 01       	movw	r12, r8
     464:	a5 0d       	add	r26, r5
     466:	45 3e       	cpi	r20, 0xE5	; 229
     468:	47 a6       	std	Z+47, r4	; 0x2f
     46a:	25 b5       	in	r18, 0x25	; 37
     46c:	68 90       	.word	0x9068	; ????
     46e:	c2 12       	cpse	r12, r18
     470:	00 a6       	std	Z+40, r0	; 0x28
     472:	06 39       	cpi	r16, 0x96	; 150
     474:	43 c7       	rjmp	.+3718   	; 0x12fc <__vector_5+0x44>
     476:	32 a7       	std	Z+42, r19	; 0x2a
     478:	0b 45       	sbci	r16, 0x5B	; 91
     47a:	3e cf       	rjmp	.-388    	; 0x2f8 <__trampolines_end+0x290>
     47c:	12 4e       	sbci	r17, 0xE2	; 226
     47e:	9d c6       	rjmp	.+3386   	; 0x11ba <__vector_3+0x198>
     480:	64 01       	movw	r12, r8
     482:	a8 06       	cpc	r10, r24
     484:	8b 5e       	subi	r24, 0xEB	; 235
     486:	47 12       	cpse	r4, r23
     488:	a9 0d       	add	r26, r9
     48a:	3d 42       	sbci	r19, 0x2D	; 45
     48c:	cf 92       	push	r12
     48e:	29 c9       	rjmp	.-3502   	; 0xfffff6e2 <__eeprom_end+0xff7ef6e2>
     490:	a4 24       	eor	r10, r4
     492:	5a b2       	in	r5, 0x1a	; 26
     494:	00 aa       	std	Z+48, r0	; 0x30
     496:	0a b4       	in	r0, 0x2a	; 42
     498:	46 cf       	rjmp	.-372    	; 0x326 <__trampolines_end+0x2be>
     49a:	10 29       	or	r17, r0
     49c:	4a 71       	andi	r20, 0x1A	; 26
     49e:	08 ab       	std	Y+48, r16	; 0x30
     4a0:	0c 2e       	mov	r0, r28
     4a2:	42 57       	subi	r20, 0x72	; 114
     4a4:	25 4a       	sbci	r18, 0xA5	; 165
     4a6:	a2 2c       	mov	r10, r2
     4a8:	ca a2       	std	Y+34, r12	; 0x22
     4aa:	00 ac       	ldd	r0, Z+56	; 0x38
     4ac:	07 94       	ror	r0
     4ae:	4a c7       	rjmp	.+3732   	; 0x1344 <__vector_5+0x8c>
     4b0:	90 05       	cpc	r25, r0
     4b2:	ad 06       	cpc	r10, r29
     4b4:	8c 4e       	sbci	r24, 0xEC	; 236
     4b6:	c7 10       	cpse	r12, r7
     4b8:	ae 0c       	add	r10, r14
     4ba:	3d 42       	sbci	r19, 0x2D	; 45
     4bc:	cf 92       	push	r12
     4be:	0d c9       	rjmp	.-3558   	; 0xfffff6da <__eeprom_end+0xff7ef6da>
     4c0:	34 69       	ori	r19, 0x94	; 148
     4c2:	c9 02       	muls	r28, r25
     4c4:	af 06       	cpc	r10, r31
     4c6:	0d 5e       	subi	r16, 0xED	; 237
     4c8:	c7 20       	and	r12, r7
     4ca:	b0 07       	cpc	r27, r16
     4cc:	9b 52       	subi	r25, 0x2B	; 43
     4ce:	4f 17       	cp	r20, r31
     4d0:	00 b1       	in	r16, 0x00	; 0
     4d2:	0b 35       	cpi	r16, 0x5B	; 91
     4d4:	42 57       	subi	r20, 0x72	; 114
     4d6:	18 0d       	add	r17, r8
     4d8:	52 18       	sub	r5, r2
     4da:	0d 02       	muls	r16, r29
     4dc:	b2 09       	sbc	r27, r2
     4de:	ac 4e       	sbci	r26, 0xEC	; 236
     4e0:	8f 12       	cpse	r8, r31
     4e2:	35 0d       	add	r19, r5
     4e4:	01 b3       	in	r16, 0x11	; 17
     4e6:	09 ac       	ldd	r0, Y+57	; 0x39
     4e8:	4e c7       	rjmp	.+3740   	; 0x1386 <setup_display+0x20>
     4ea:	98 88       	ldd	r9, Y+16	; 0x10
     4ec:	43 02       	muls	r20, r19
     4ee:	b4 06       	cpc	r11, r20
     4f0:	12 5b       	subi	r17, 0xB2	; 178
     4f2:	8f 02       	muls	r24, r31
     4f4:	b5 0a       	sbc	r11, r21
     4f6:	35 3e       	cpi	r19, 0xE5	; 229
     4f8:	47 66       	ori	r20, 0x67	; 103
     4fa:	9b 14       	cp	r9, r11
     4fc:	25 04       	cpc	r2, r5
     4fe:	b6 0f       	add	r27, r22
     500:	3d 42       	sbci	r19, 0x2D	; 45
     502:	cf 30       	cpi	r28, 0x0F	; 15
     504:	24 43       	sbci	r18, 0x34	; 52
     506:	92 28       	or	r9, r2
     508:	51 12       	cpse	r5, r17
     50a:	25 51       	subi	r18, 0x15	; 21
     50c:	12 b7       	in	r17, 0x32	; 50
     50e:	06 09       	sbc	r16, r6
     510:	4f 47       	sbci	r20, 0x7F	; 127
     512:	00 b8       	out	0x00, r0	; 0
     514:	06 12       	cpse	r0, r22
     516:	3b 8f       	std	Y+27, r19	; 0x1b
     518:	02 b9       	out	0x02, r16	; 2
     51a:	08 ab       	std	Y+48, r16	; 0x30
     51c:	4e 4f       	sbci	r20, 0xFE	; 254
     51e:	22 55       	subi	r18, 0x52	; 82
     520:	06 ba       	out	0x16, r0	; 22
     522:	0a b4       	in	r0, 0x2a	; 42
     524:	46 8f       	std	Z+30, r20	; 0x1e
     526:	12 49       	sbci	r17, 0x92	; 146
     528:	89 3a       	cpi	r24, 0xA9	; 169
     52a:	04 bb       	out	0x14, r16	; 20
     52c:	0d 2e       	mov	r0, r29
     52e:	42 47       	sbci	r20, 0x72	; 114
     530:	94 45       	sbci	r25, 0x54	; 84
     532:	59 94       	.word	0x9459	; ????
     534:	44 49       	sbci	r20, 0x94	; 148
     536:	14 01       	movw	r2, r8
     538:	bc 0d       	add	r27, r12
     53a:	4e 3e       	cpi	r20, 0xEE	; 238
     53c:	4f a8       	ldd	r4, Y+55	; 0x37
     53e:	16 a7       	std	Z+46, r17	; 0x2e
     540:	50 4b       	sbci	r21, 0xB0	; 176
     542:	a2 21       	and	r26, r2
     544:	0d bd       	out	0x2d, r16	; 45
     546:	0c 4e       	sbci	r16, 0xEC	; 236
     548:	3e 4f       	sbci	r19, 0xFE	; 254
     54a:	a8 16       	cp	r10, r24
     54c:	97 30       	cpi	r25, 0x07	; 7
     54e:	49 c3       	rjmp	.+1682   	; 0xbe2 <__stack+0x2e3>
     550:	70 be       	out	0x30, r7	; 48
     552:	0e 4d       	sbci	r16, 0xDE	; 222
     554:	3e 87       	std	Y+14, r19	; 0x0e
     556:	9a a5       	ldd	r25, Y+42	; 0x2a
     558:	91 94       	neg	r9
     55a:	49 49       	sbci	r20, 0x99	; 153
     55c:	32 84       	ldd	r3, Z+10	; 0x0a
     55e:	01 bf       	out	0x31, r16	; 49
     560:	0a 3d       	cpi	r16, 0xDA	; 218
     562:	42 57       	subi	r20, 0x72	; 114
     564:	0e 85       	ldd	r16, Y+14	; 0x0e
     566:	59 cb       	rjmp	.-2382   	; 0xfffffc1a <__eeprom_end+0xff7efc1a>
     568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56a:	0c 45       	sbci	r16, 0x5C	; 92
     56c:	42 4f       	sbci	r20, 0xF2	; 242
     56e:	9a 2d       	mov	r25, r10
     570:	99 36       	cpi	r25, 0x69	; 105
     572:	0c 99       	sbic	0x01, 4	; 1
     574:	16 c1       	rjmp	.+556    	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     576:	0c 45       	sbci	r16, 0x5C	; 92
     578:	42 5f       	subi	r20, 0xF2	; 242
     57a:	6d c9       	rjmp	.-3366   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     57c:	b4 61       	ori	r27, 0x14	; 20
     57e:	c8 b4       	in	r12, 0x28	; 40
     580:	00 c2       	rjmp	.+1024   	; 0x982 <__stack+0x83>
     582:	0d 45       	sbci	r16, 0x5D	; 93
     584:	42 57       	subi	r20, 0x72	; 114
     586:	96 44       	sbci	r25, 0x46	; 70
     588:	4b a6       	std	Y+43, r4	; 0x2b
     58a:	0d 43       	sbci	r16, 0x3D	; 61
     58c:	a6 05       	cpc	r26, r6
     58e:	c3 0d       	add	r28, r3
     590:	45 42       	sbci	r20, 0x25	; 37
     592:	4f a4       	ldd	r4, Y+47	; 0x2f
     594:	48 4b       	sbci	r20, 0xB8	; 184
     596:	a6 0d       	add	r26, r6
     598:	43 a6       	std	Z+43, r4	; 0x2b
     59a:	05 c4       	rjmp	.+2058   	; 0xda6 <__stack+0x4a7>
     59c:	0c 45       	sbci	r16, 0x5C	; 92
     59e:	42 4f       	sbci	r20, 0xF2	; 242
     5a0:	1d 58       	subi	r17, 0x8D	; 141
     5a2:	32 6d       	ori	r19, 0xD2	; 210
     5a4:	18 32       	cpi	r17, 0x28	; 40
     5a6:	2d c5       	rjmp	.+2650   	; 0x1002 <initDistanceSensor+0x18>
     5a8:	0d 45       	sbci	r16, 0x5D	; 93
     5aa:	42 57       	subi	r20, 0x72	; 114
     5ac:	96 44       	sbci	r25, 0x46	; 70
     5ae:	4b a6       	std	Y+43, r4	; 0x2b
     5b0:	0d 43       	sbci	r16, 0x3D	; 61
     5b2:	a6 05       	cpc	r26, r6
     5b4:	c6 0c       	add	r12, r6
     5b6:	3e 42       	sbci	r19, 0x2E	; 46
     5b8:	d7 90       	elpm	r13, Z+
     5ba:	94 9a       	sbi	0x12, 4	; 18
     5bc:	86 21       	and	r24, r6
     5be:	6a 1a       	sub	r6, r26
     5c0:	c7 0b       	sbc	r28, r23
     5c2:	4d 3a       	cpi	r20, 0xAD	; 173
     5c4:	cf 92       	push	r12
     5c6:	89 6d       	ori	r24, 0xD9	; 217
     5c8:	c9 56       	subi	r28, 0x69	; 105
     5ca:	03 c8       	rjmp	.-4090   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
     5cc:	0c 45       	sbci	r16, 0x5C	; 92
     5ce:	42 4f       	sbci	r20, 0xF2	; 242
     5d0:	36 8c       	ldd	r3, Z+30	; 0x1e
     5d2:	e1 90       	ld	r14, Z+
     5d4:	84 e1       	ldi	r24, 0x14	; 20
     5d6:	20 c9       	rjmp	.-3520   	; 0xfffff818 <__eeprom_end+0xff7ef818>
     5d8:	0c 45       	sbci	r16, 0x5C	; 92
     5da:	42 5f       	subi	r20, 0xF2	; 242
     5dc:	32 8c       	ldd	r3, Z+26	; 0x1a
     5de:	e1 90       	ld	r14, Z+
     5e0:	84 e1       	ldi	r24, 0x14	; 20
     5e2:	20 ca       	rjmp	.-3008   	; 0xfffffa24 <__eeprom_end+0xff7efa24>
     5e4:	0c 45       	sbci	r16, 0x5C	; 92
     5e6:	42 57       	subi	r20, 0x72	; 114
     5e8:	34 8c       	ldd	r3, Z+28	; 0x1c
     5ea:	e1 90       	ld	r14, Z+
     5ec:	84 e1       	ldi	r24, 0x14	; 20
     5ee:	20 cb       	rjmp	.-2496   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
     5f0:	0c 45       	sbci	r16, 0x5C	; 92
     5f2:	42 4f       	sbci	r20, 0xF2	; 242
     5f4:	65 18       	sub	r6, r5
     5f6:	c3 21       	and	r28, r3
     5f8:	09 c3       	rjmp	.+1554   	; 0xc0c <__stack+0x30d>
     5fa:	41 cc       	rjmp	.-1918   	; 0xfffffe7e <__eeprom_end+0xff7efe7e>
     5fc:	0a c3       	rjmp	.+1556   	; 0xc12 <__stack+0x313>
     5fe:	42 47       	sbci	r20, 0x72	; 114
     600:	96 2c       	mov	r9, r6
     602:	51 cb       	rjmp	.-2398   	; 0xfffffca6 <__eeprom_end+0xff7efca6>
     604:	00 cd       	rjmp	.-1536   	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
     606:	0a c3       	rjmp	.+1556   	; 0xc1c <__stack+0x31d>
     608:	42 57       	subi	r20, 0x72	; 114
     60a:	92 2c       	mov	r9, r2
     60c:	51 cb       	rjmp	.-2398   	; 0xfffffcb0 <__eeprom_end+0xff7efcb0>
     60e:	00 ce       	rjmp	.-1024   	; 0x210 <__trampolines_end+0x1a8>
     610:	0a c3       	rjmp	.+1556   	; 0xc26 <__stack+0x327>
     612:	42 4f       	sbci	r20, 0xF2	; 242
     614:	65 48       	sbci	r22, 0x85	; 133
     616:	a2 96       	adiw	r28, 0x22	; 34
     618:	01 cf       	rjmp	.-510    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     61a:	0a c3       	rjmp	.+1556   	; 0xc30 <__stack+0x331>
     61c:	42 47       	sbci	r20, 0x72	; 114
     61e:	92 2d       	mov	r25, r2
     620:	51 cb       	rjmp	.-2398   	; 0xfffffcc4 <__eeprom_end+0xff7efcc4>
     622:	00 d0       	rcall	.+0      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     624:	0e 3d       	cpi	r16, 0xDE	; 222
     626:	42 c7       	rjmp	.+3716   	; 0x14ac <pwmUpdate+0xf0>
     628:	10 55       	subi	r17, 0x50	; 80
     62a:	a2 21       	and	r26, r2
     62c:	29 25       	eor	r18, r9
     62e:	d1 a0       	ldd	r13, Z+33	; 0x21
     630:	00 d1       	rcall	.+512    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     632:	0c 45       	sbci	r16, 0x5C	; 92
     634:	42 57       	subi	r20, 0x72	; 114
     636:	d2 6d       	ori	r29, 0xD2	; 210
     638:	52 12       	cpse	r5, r18
     63a:	69 d3       	rcall	.+1746   	; 0xd0e <__stack+0x40f>
     63c:	02 d2       	rcall	.+1028   	; 0xa42 <__stack+0x143>
     63e:	0b 45       	sbci	r16, 0x5B	; 91
     640:	42 4f       	sbci	r20, 0xF2	; 242
     642:	9a 2d       	mov	r25, r10
     644:	99 5b       	subi	r25, 0xB9	; 185
     646:	b2 00       	.word	0x00b2	; ????
     648:	d3 0a       	sbc	r13, r19
     64a:	45 42       	sbci	r20, 0x25	; 37
     64c:	5f 6d       	ori	r21, 0xDF	; 223
     64e:	c9 dc       	rcall	.-1646   	; 0xffffffe2 <__eeprom_end+0xff7effe2>
     650:	92 05       	cpc	r25, r2
     652:	d4 0c       	add	r13, r4
     654:	45 42       	sbci	r20, 0x25	; 37
     656:	57 96       	adiw	r26, 0x17	; 23
     658:	44 4b       	sbci	r20, 0xB4	; 180
     65a:	e6 96       	adiw	r28, 0x36	; 54
     65c:	2c 00       	.word	0x002c	; ????
     65e:	d5 0b       	sbc	r29, r21
     660:	45 42       	sbci	r20, 0x25	; 37
     662:	57 d2       	rcall	.+1198   	; 0xb12 <__stack+0x213>
     664:	b4 64       	ori	r27, 0x44	; 68
     666:	6e c9       	rjmp	.-3364   	; 0xfffff944 <__eeprom_end+0xff7ef944>
     668:	02 d6       	rcall	.+3076   	; 0x126e <__vector_3+0x24c>
     66a:	0b 45       	sbci	r16, 0x5B	; 91
     66c:	42 4f       	sbci	r20, 0xF2	; 242
     66e:	1d 58       	subi	r17, 0x8D	; 141
     670:	32 b7       	in	r19, 0x32	; 50
     672:	64 01       	movw	r12, r8
     674:	d7 0a       	sbc	r13, r23
     676:	2d 42       	sbci	r18, 0x2D	; 45
     678:	47 96       	adiw	r24, 0x17	; 23
     67a:	d4 2a       	or	r13, r20
     67c:	b5 00       	.word	0x00b5	; ????
     67e:	d8 0c       	add	r13, r8
     680:	3d 42       	sbci	r19, 0x2D	; 45
     682:	cf 12       	cpse	r12, r31
     684:	5d 92       	st	X+, r5
     686:	69 4a       	sbci	r22, 0xA9	; 169
     688:	16 00       	.word	0x0016	; ????
     68a:	d9 0a       	sbc	r13, r25
     68c:	45 42       	sbci	r20, 0x25	; 37
     68e:	4f 1a       	sub	r4, r31
     690:	65 de       	rcall	.-822    	; 0x35c <__trampolines_end+0x2f4>
     692:	92 05       	cpc	r25, r2
     694:	da 0a       	sbc	r13, r26
     696:	45 42       	sbci	r20, 0x25	; 37
     698:	5f 29       	or	r21, r15
     69a:	f3 96       	adiw	r30, 0x33	; 51
     69c:	2c 00       	.word	0x002c	; ????
     69e:	db 0b       	sbc	r29, r27
     6a0:	45 42       	sbci	r20, 0x25	; 37
     6a2:	57 96       	adiw	r26, 0x17	; 23
     6a4:	c4 99       	sbic	0x18, 4	; 24
     6a6:	5b b2       	in	r5, 0x1b	; 27
     6a8:	00 dc       	rcall	.-2048   	; 0xfffffeaa <__eeprom_end+0xff7efeaa>
     6aa:	0a 45       	sbci	r16, 0x5A	; 90
     6ac:	42 4f       	sbci	r20, 0xF2	; 242
     6ae:	39 f3       	breq	.-50     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     6b0:	96 2c       	mov	r9, r6
     6b2:	00 dd       	rcall	.-1536   	; 0xb4 <__trampolines_end+0x4c>
     6b4:	0b 45       	sbci	r16, 0x5B	; 91
     6b6:	42 5f       	subi	r20, 0xF2	; 242
     6b8:	29 d3       	rcall	.+1618   	; 0xd0c <__stack+0x40d>
     6ba:	92 5a       	subi	r25, 0xA2	; 162
     6bc:	58 02       	muls	r21, r24
     6be:	de 0c       	add	r13, r14
     6c0:	3d 42       	sbci	r19, 0x2D	; 45
     6c2:	47 38       	cpi	r20, 0x87	; 135
     6c4:	24 d9       	rcall	.-3512   	; 0xfffff90e <__eeprom_end+0xff7ef90e>
     6c6:	a0 84       	ldd	r10, Z+8	; 0x08
     6c8:	45 00       	.word	0x0045	; ????
     6ca:	df 0d       	add	r29, r15
     6cc:	3d 42       	sbci	r19, 0x2D	; 45
     6ce:	cf 92       	push	r12
     6d0:	49 49       	sbci	r20, 0x99	; 153
     6d2:	a9 92       	st	Y+, r10
     6d4:	29 0a       	sbc	r2, r25
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	0c 45       	sbci	r16, 0x5C	; 92
     6da:	42 4f       	sbci	r20, 0xF2	; 242
     6dc:	9a 23       	and	r25, r26
     6de:	6b 32       	cpi	r22, 0x2B	; 43
     6e0:	68 c9       	rjmp	.-3376   	; 0xfffff9b2 <__eeprom_end+0xff7ef9b2>
     6e2:	10 e1       	ldi	r17, 0x10	; 16
     6e4:	0c 45       	sbci	r16, 0x5C	; 92
     6e6:	42 5f       	subi	r20, 0xF2	; 242
     6e8:	1d 59       	subi	r17, 0x9D	; 157
     6ea:	93 41       	sbci	r25, 0x13	; 19
     6ec:	4b 86       	std	Y+11, r4	; 0x0b
     6ee:	00 e2       	ldi	r16, 0x20	; 32
     6f0:	0d 45       	sbci	r16, 0x5D	; 93
     6f2:	42 57       	subi	r20, 0x72	; 114
     6f4:	96 e4       	ldi	r25, 0x46	; 70
     6f6:	c0 9a       	sbi	0x18, 0	; 24
     6f8:	0c 5a       	subi	r16, 0xAC	; 172
     6fa:	32 04       	cpc	r3, r2
     6fc:	e3 0d       	add	r30, r3
     6fe:	45 42       	sbci	r20, 0x25	; 37
     700:	57 d2       	rcall	.+1198   	; 0xbb0 <__stack+0x2b1>
     702:	0e ac       	ldd	r0, Y+62	; 0x3e
     704:	c9 a0       	ldd	r12, Y+33	; 0x21
     706:	25 43       	sbci	r18, 0x35	; 53
     708:	00 e4       	ldi	r16, 0x40	; 64
     70a:	0c 3d       	cpi	r16, 0xDC	; 220
     70c:	42 4f       	sbci	r20, 0xF2	; 242
     70e:	1d 58       	subi	r17, 0x8D	; 141
     710:	93 41       	sbci	r25, 0x13	; 19
     712:	4b 86       	std	Y+11, r4	; 0x0b
     714:	00 e5       	ldi	r16, 0x50	; 80
     716:	0d 45       	sbci	r16, 0x5D	; 93
     718:	42 57       	subi	r20, 0x72	; 114
     71a:	96 64       	ori	r25, 0x46	; 70
     71c:	d9 9a       	sbi	0x1b, 1	; 27
     71e:	0c 5a       	subi	r16, 0xAC	; 172
     720:	32 04       	cpc	r3, r2
     722:	e6 0c       	add	r14, r6
     724:	2e 42       	sbci	r18, 0x2E	; 46
     726:	cf 10       	cpse	r12, r15
     728:	26 c9       	rjmp	.-3508   	; 0xfffff976 <__eeprom_end+0xff7ef976>
     72a:	30 65       	ori	r19, 0x50	; 80
     72c:	83 00       	.word	0x0083	; ????
     72e:	e7 0b       	sbc	r30, r23
     730:	3d 3a       	cpi	r19, 0xAD	; 173
     732:	cf 92       	push	r12
     734:	89 59       	subi	r24, 0x99	; 153
     736:	b2 d5       	rcall	.+2916   	; 0x129c <__vector_3+0x27a>
     738:	00 e8       	ldi	r16, 0x80	; 128
     73a:	0c 45       	sbci	r16, 0x5C	; 92
     73c:	42 4f       	sbci	r20, 0xF2	; 242
     73e:	9a 23       	and	r25, r26
     740:	4b 36       	cpi	r20, 0x6B	; 107
     742:	0c e9       	ldi	r16, 0x9C	; 156
     744:	02 e9       	ldi	r16, 0x92	; 146
     746:	0c 45       	sbci	r16, 0x5C	; 92
     748:	42 5f       	subi	r20, 0xF2	; 242
     74a:	1d 59       	subi	r17, 0x9D	; 157
     74c:	b2 61       	ori	r27, 0x12	; 18
     74e:	48 17       	cp	r20, r24
     750:	00 ea       	ldi	r16, 0xA0	; 160
     752:	0d 45       	sbci	r16, 0x5D	; 93
     754:	42 57       	subi	r20, 0x72	; 114
     756:	96 e4       	ldi	r25, 0x46	; 70
     758:	c0 92 0d 43 	sts	0x430D, r12	; 0x80430d <__bss_end+0x3d91>
     75c:	ba 00       	.word	0x00ba	; ????
     75e:	eb 0c       	add	r14, r11
     760:	3d 42       	sbci	r19, 0x2D	; 45
     762:	4f 1d       	adc	r20, r15
     764:	58 b2       	in	r5, 0x18	; 24
     766:	61 48       	sbci	r22, 0x81	; 129
     768:	17 00       	.word	0x0017	; ????
     76a:	ec 09       	sbc	r30, r12
     76c:	c3 42       	sbci	r28, 0x23	; 35
     76e:	47 16       	cp	r4, r23
     770:	4a 2d       	mov	r20, r10
     772:	03 ed       	ldi	r16, 0xD3	; 211
     774:	08 c3       	rjmp	.+1552   	; 0xd86 <__stack+0x487>
     776:	42 4f       	sbci	r20, 0xF2	; 242
     778:	55 6a       	ori	r21, 0xA5	; 165
     77a:	19 ee       	ldi	r17, 0xE9	; 233
     77c:	08 c3       	rjmp	.+1552   	; 0xd8e <__stack+0x48f>
     77e:	42 4f       	sbci	r20, 0xF2	; 242
     780:	9b d4       	rcall	.+2358   	; 0x10b8 <__vector_3+0x96>
     782:	32 ef       	ldi	r19, 0xF2	; 242
     784:	09 bb       	out	0x19, r16	; 25
     786:	42 47       	sbci	r20, 0x72	; 114
     788:	92 49       	sbci	r25, 0x92	; 146
     78a:	2d 03       	fmul	r18, r21
     78c:	f0 0b       	sbc	r31, r16
     78e:	3d 42       	sbci	r19, 0x2D	; 45
     790:	87 2a       	or	r8, r23
     792:	2d 99       	sbic	0x05, 5	; 5
     794:	2d 59       	subi	r18, 0x9D	; 157
     796:	00 f1       	brcs	.+64     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     798:	0b 45       	sbci	r16, 0x5B	; 91
     79a:	42 57       	subi	r20, 0x72	; 114
     79c:	d2 9c       	mul	r13, r2
     79e:	98 34       	cpi	r25, 0x48	; 72
     7a0:	5b 00       	.word	0x005b	; ????
     7a2:	f2 0c       	add	r15, r2
     7a4:	45 42       	sbci	r20, 0x25	; 37
     7a6:	4f 9a       	sbi	0x09, 7	; 9
     7a8:	23 4b       	sbci	r18, 0xB3	; 179
     7aa:	66 4b       	sbci	r22, 0xB6	; 182
     7ac:	16 00       	.word	0x0016	; ????
     7ae:	f3 0b       	sbc	r31, r19
     7b0:	45 42       	sbci	r20, 0x25	; 37
     7b2:	5f 1d       	adc	r21, r15
     7b4:	59 32       	cpi	r21, 0x29	; 41
     7b6:	5b b2       	in	r5, 0x1b	; 27
     7b8:	00 f4       	brcc	.+0      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7ba:	0c 45       	sbci	r16, 0x5C	; 92
     7bc:	42 57       	subi	r20, 0x72	; 114
     7be:	96 e4       	ldi	r25, 0x46	; 70
     7c0:	c0 92 d9 92 	sts	0x92D9, r12	; 0x8092d9 <__bss_end+0x8d5d>
     7c4:	05 f5       	brhc	.+64     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7c6:	0c 45       	sbci	r16, 0x5C	; 92
     7c8:	42 57       	subi	r20, 0x72	; 114
     7ca:	d2 0e       	add	r13, r18
     7cc:	2c 99       	sbic	0x05, 4	; 5
     7ce:	2d 59       	subi	r18, 0x9D	; 157
     7d0:	00 f6       	brcc	.-128    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     7d2:	0b 3d       	cpi	r16, 0xDB	; 219
     7d4:	42 4f       	sbci	r20, 0xF2	; 242
     7d6:	1d 58       	subi	r17, 0x8D	; 141
     7d8:	32 5b       	subi	r19, 0xB2	; 178
     7da:	b2 00       	.word	0x00b2	; ????
     7dc:	f7 0a       	sbc	r15, r23
     7de:	2d 46       	sbci	r18, 0x6D	; 109
     7e0:	57 0e       	add	r5, r23
     7e2:	0c 3a       	cpi	r16, 0xAC	; 172
     7e4:	10 01       	movw	r2, r0
     7e6:	f8 0b       	sbc	r31, r24
     7e8:	2d 42       	sbci	r18, 0x2D	; 45
     7ea:	cf 20       	and	r12, r15
     7ec:	2d c9       	rjmp	.-3494   	; 0xfffffa48 <__eeprom_end+0xff7efa48>
     7ee:	34 28       	or	r3, r4
     7f0:	00 f9       	bld	r16, 0
     7f2:	0b 45       	sbci	r16, 0x5B	; 91
     7f4:	42 4f       	sbci	r20, 0xF2	; 242
     7f6:	9a 03       	fmulsu	r17, r18
     7f8:	99 93       	st	Y+, r25
     7fa:	a2 04       	cpc	r10, r2
     7fc:	fa 0a       	sbc	r15, r26
     7fe:	45 42       	sbci	r20, 0x25	; 37
     800:	5f 1d       	adc	r21, r15
     802:	c8 9c       	mul	r12, r8
     804:	14 25       	eor	r17, r4
     806:	fb 0b       	sbc	r31, r27
     808:	45 42       	sbci	r20, 0x25	; 37
     80a:	57 96       	adiw	r26, 0x17	; 23
     80c:	c4 99       	sbic	0x18, 4	; 24
     80e:	93 a2       	std	Z+35, r9	; 0x23
     810:	04 fc       	sbrc	r0, 4
     812:	0a 3d       	cpi	r16, 0xDA	; 218
     814:	42 4f       	sbci	r20, 0xF2	; 242
     816:	39 73       	andi	r19, 0x39	; 57
     818:	52 94       	swap	r5
     81a:	00 fd       	sbrc	r16, 0
     81c:	0d 4d       	sbci	r16, 0xDD	; 221
     81e:	3a 5f       	subi	r19, 0xFA	; 250
     820:	29 33       	cpi	r18, 0x39	; 57
     822:	29 4a       	sbci	r18, 0xA9	; 169
     824:	a8 25       	eor	r26, r8
     826:	0b 00       	.word	0x000b	; ????
     828:	fe 0c       	add	r15, r14
     82a:	45 3a       	cpi	r20, 0xA5	; 165
     82c:	47 38       	cpi	r20, 0x87	; 135
     82e:	24 99       	sbic	0x04, 4	; 4
     830:	6d 50       	subi	r22, 0x0D	; 13
     832:	c2 10       	cpse	r12, r2
     834:	ff 0d       	add	r31, r15
     836:	4d 3a       	cpi	r20, 0xAD	; 173
     838:	4f 39       	cpi	r20, 0x9F	; 159
     83a:	33 29       	or	r19, r3
     83c:	4a a8       	ldd	r4, Y+50	; 0x32
     83e:	25 0b       	sbc	r18, r21
     840:	00 00       	nop
     842:	00 00       	nop
     844:	04 ff       	sbrs	r16, 4
     846:	ff 00       	.word	0x00ff	; ????
	...

00000849 <u8g2_font_5x7_tf>:
     849:	bf 00 02 02 03 03 03 04 04 05 07 00 ff 06 ff 06     ................
     859:	00 01 12 02 2f 06 70 20 05 00 bd 01 21 06 b1 b1     ..../.p ....!...
     869:	19 29 22 07 5b b7 49 56 00 23 0a 2d b1 ab 86 aa     .)".[.IV.#.-....
     879:	86 aa 00 24 0a 2d b1 5b 35 d8 20 a5 05 25 09 34     ...$.-.[5. ..%.4
     889:	b1 c9 20 f6 06 01 26 09 2c b1 8b 29 56 31 05 27     .. ...&.,..)V1.'
     899:	05 99 b7 19 28 07 72 b1 53 cd 00 29 08 72 b1 89     ....(.r.S..).r..
     8a9:	a9 52 00 2a 07 6b b1 49 d5 6a 2b 0a 2d b1 cd 28     .R.*.k.I.j+.-..(
     8b9:	0e 99 51 04 2c 07 5b af 53 25 00 2d 06 0c b5 19     ..Q.,.[.S%.-....
     8c9:	01 2e 06 52 b1 19 01 2f 07 24 b3 07 b1 0d 30 08     ...R.../.$....0.
     8d9:	73 b1 ab 5c 15 00 31 07 73 b1 4b b2 35 32 0a 34     s..\..1.s.K.52.4
     8e9:	b1 53 31 83 58 8e 00 33 0b 34 b1 19 19 24 8d 64     .S1.X..3.4...$.d
     8f9:	52 00 34 0a 34 b1 8d aa 1a 31 83 04 35 0a 34 b1     R.4.4....1..5.4.
     909:	19 1a 6c 24 93 02 36 0a 34 b1 53 19 ac 28 93 02     ..l$..6.4.S..(..
     919:	37 0b 34 b1 19 19 c4 0c 62 06 11 38 0a 34 b1 53     7.4.....b..8.4.S
     929:	31 a9 28 93 02 39 0a 34 b1 53 51 a6 0d 92 02 3a     1.(..9.4.SQ....:
     939:	07 6a b1 19 71 04 3b 08 33 af b3 91 2a 01 3c 08     .j..q.;.3...*.<.
     949:	6b b1 4d 35 c8 20 3d 08 1c b3 19 19 8d 00 3e 09     k.M5. =.......>.
     959:	6b b1 c9 20 83 54 02 3f 09 73 b1 6b a6 0c 13 00     k.. .T.?.s.k....
     969:	40 09 34 b1 53 51 dd 48 01 41 09 34 b1 53 51 8e     @.4.SQ.H.A.4.SQ.
     979:	29 03 42 0a 34 b1 59 71 a4 28 47 02 43 0b 34 b1     ).B.4.Yq.(G.C.4.
     989:	53 51 83 0c 62 52 00 44 09 34 b1 59 d1 39 12 00     SQ..bR.D.4.Y.9..
     999:	45 0b 34 b1 19 1a ac 0c 32 18 01 46 0b 34 b1 19     E.4.....2..F.4..
     9a9:	1a ac 0c 32 c8 00 47 0a 34 b1 53 51 83 34 d3 00     ...2..G.4.SQ.4..
     9b9:	48 08 34 b1 89 72 4c 33 49 07 73 b1 59 b1 35 4a     H.4..rL3I.s.Y.5J
     9c9:	0b 34 b1 07 19 64 90 81 4c 0a 4b 0a 34 b1 89 2a     .4...d..L.K.4..*
     9d9:	49 99 ca 00 4c 0c 34 b1 c9 20 83 0c 32 c8 60 04     I...L.4.. ..2.`.
     9e9:	4d 09 34 b1 89 e3 88 66 00 4e 08 34 b1 89 6b a9     M.4....f.N.4..k.
     9f9:	33 4f 09 34 b1 53 d1 99 14 00 50 0a 34 b1 59 51     3O.4.S....P.4.YQ
     a09:	8e 94 41 06 51 0a 3c af 53 d1 5c 49 a3 00 52 09     ..A.Q.<.S.\I..R.
     a19:	34 b1 59 51 8e d4 0c 53 0a 34 b1 53 31 65 54 26     4.YQ...S.4.S1eT&
     a29:	05 54 07 73 b1 59 b1 0b 55 08 34 b1 89 9e 49 01     .T.s.Y..U.4...I.
     a39:	56 09 34 b1 89 ce 24 15 00 57 09 34 b1 89 e6 38     V.4...$..W.4...8
     a49:	62 00 58 0a 34 b1 89 32 49 15 65 00 59 08 73 b1     b.X.4..2I.e.Y.s.
     a59:	49 56 59 01 5a 0a 34 b1 19 19 c4 36 18 01 5b 07     IVY.Z.4....6..[.
     a69:	73 b1 19 b1 39 5c 09 24 b3 c9 28 a3 8c 02 5d 07     s...9\.$..(...].
     a79:	73 b1 99 cd 11 5e 05 53 b9 6b 5f 06 0c b1 19 01     s....^.S.k_.....
     a89:	60 06 52 b9 89 01 61 08 24 b1 1b 51 a9 02 62 0b     `.R...a.$..Q..b.
     a99:	34 b1 c9 20 83 15 e5 48 00 63 07 23 b1 9b 19 08     4.. ...H.c.#....
     aa9:	64 0a 34 b1 07 19 a4 11 65 1a 65 09 24 b1 53 69     d.4.....e.e.$.Si
     ab9:	64 a0 00 66 09 34 b1 ad ca 99 41 04 67 09 2c af     d..f.4....A.g.,.
     ac9:	1b 31 a9 8c 06 68 0a 34 b1 c9 20 83 15 cd 00 69     .1...h.4.. ....i
     ad9:	08 73 b1 cb 48 56 03 6a 09 7b af cd b0 54 15 00     .s..HV.j.{...T..
     ae9:	6b 0b 34 b1 c9 20 83 94 64 2a 03 6c 07 73 b1 91     k.4.. ..d*.l.s..
     af9:	5d 03 6d 08 24 b1 49 69 48 19 6e 07 24 b1 59 d1     ].m.$.IiH.n.$.Y.
     b09:	0c 6f 08 24 b1 53 51 26 05 70 09 2c af 59 51 8e     .o.$.SQ&.p.,.YQ.
     b19:	94 01 71 09 2c af 1b 51 a6 0d 02 72 08 24 b1 59     ..q.,..Q...r.$.Y
     b29:	51 83 0c 73 08 24 b1 1b 1a 0d 05 74 0a 34 b1 cb     Q..s.$.....t.4..
     b39:	20 ce 0c 32 12 75 07 24 b1 89 66 1a 76 07 63 b1      ..2.u.$..f.v.c.
     b49:	49 56 05 77 07 24 b1 89 72 1c 78 08 24 b1 89 49     IV.w.$..r.x.$..I
     b59:	aa 18 79 09 2c af 89 32 95 25 00 7a 08 24 b1 19     ..y.,..2.%.z.$..
     b69:	b1 1c 01 7b 08 73 b1 4d 49 d6 20 7c 05 b1 b1 39     ...{.s.MI. |...9
     b79:	7d 0a 73 b1 c9 20 aa 98 22 00 7e 07 14 b9 4b 2a     }.s.. ..".~...K*
     b89:	01 a0 05 00 bd 01 a1 06 b1 b1 49 23 a2 09 34 af     ..........I#..4.
     b99:	8d 23 35 67 02 a3 08 2c b1 55 71 56 02 a4 0b 2d     .#5g...,.UqV...-
     ba9:	b1 c9 20 cd 14 57 06 01 a5 09 73 b1 49 aa 5a 31     .. ..W....s.I.Z1
     bb9:	01 a6 06 a9 b1 51 02 a7 08 7b af 9b aa 92 0b a8     .....Q...{......
     bc9:	06 4b bb 49 01 a9 0d 3d af 5b 19 a8 34 55 d2 20     .K.I...=.[..4U. 
     bd9:	2d 00 aa 06 1b b7 5b 49 ab 07 1d b3 8b b2 01 ac     -.....[I........
     be9:	07 14 b3 19 19 04 ad 05 4b b5 19 ae 0c 3d af 5b     ........K....=.[
     bf9:	19 8c 34 a7 06 69 01 af 06 0c bb 19 01 b0 06 5b     ..4..i.........[
     c09:	b7 eb 02 b1 0b 35 b1 cd 28 0e 99 51 1c 02 b2 06     .....5..(..Q....
     c19:	62 b5 51 06 b3 06 62 b5 19 69 b4 06 52 b9 53 00     b.Q...b..i..R.S.
     c29:	b5 08 2c af 89 e6 48 19 b6 08 34 b1 1b 6a f5 03     ..,...H...4..j..
     c39:	b7 06 52 b5 19 01 b8 06 52 af 53 00 b9 07 63 b5     ..R.....R.S...c.
     c49:	4b 32 0d ba 06 1b b7 eb 02 bb 08 1d b3 89 a5 4c     K2.............L
     c59:	00 bc 0c 3c af c9 20 83 0c 62 54 1b 04 bd 0d 3c     ...<.. ..bT....<
     c69:	af c9 20 83 0c 92 06 31 03 01 be 0b 3c af 91 1a     .. ....1....<...
     c79:	44 15 d5 06 01 bf 09 73 b1 cb 30 c5 54 01 c0 09     D......s..0.T...
     c89:	34 b1 53 51 8e 29 03 c1 09 34 b1 53 51 8e 29 03     4.SQ.)...4.SQ.).
     c99:	c2 09 34 b1 53 51 8e 29 03 c3 09 34 b1 53 51 8e     ..4.SQ.)...4.SQ.
     ca9:	29 03 c4 0a 34 b1 89 49 c5 31 65 00 c5 09 34 b1     )...4..I.1e...4.
     cb9:	93 2a 8e 29 03 c6 09 34 b1 1b a9 1a aa 25 c7 0b     .*.)...4.....%..
     cc9:	3c af 53 51 83 0c 62 92 11 c8 0b 34 b1 19 1a ac     <.SQ..b....4....
     cd9:	0c 32 18 01 c9 0b 34 b1 19 1a ac 0c 32 18 01 ca     .2....4.....2...
     ce9:	0b 34 b1 19 1a ac 0c 32 18 01 cb 0b 34 b1 19 1a     .4.....2....4...
     cf9:	ac 0c 32 18 01 cc 07 73 b1 59 b1 35 cd 07 73 b1     ..2....s.Y.5..s.
     d09:	59 b1 35 ce 07 73 b1 59 b1 35 cf 07 73 b1 59 b1     Y.5..s.Y.5..s.Y.
     d19:	35 d0 09 34 b1 99 69 75 8d 04 d1 08 34 b1 49 73     5..4..iu....4.Is
     d29:	a9 33 d2 09 34 b1 53 d1 99 14 00 d3 09 34 b1 53     .3..4.S......4.S
     d39:	d1 99 14 00 d4 09 34 b1 53 d1 99 14 00 d5 09 34     ......4.S......4
     d49:	b1 53 d1 99 14 00 d6 0a 34 b1 89 49 45 33 29 00     .S......4..IE3).
     d59:	d7 08 24 b1 89 49 aa 18 d8 09 34 b1 1b e9 48 47     ..$..I....4...HG
     d69:	02 d9 08 34 b1 89 9e 49 01 da 08 34 b1 89 9e 49     ...4...I...4...I
     d79:	01 db 08 34 b1 89 9e 49 01 dc 0a 34 b1 89 19 45     ...4...I...4...E
     d89:	33 29 00 dd 08 73 b1 49 56 59 01 de 0b 34 b1 c9     3)...s.IVY...4..
     d99:	60 c5 91 32 c8 00 df 09 34 b1 53 51 95 56 02 e0     `..2....4.SQ.V..
     da9:	0a 34 b1 cb 28 8e a8 54 01 e1 09 34 b1 ad c1 88     .4..(..T...4....
     db9:	4a 15 e2 09 34 b1 ad d2 88 4a 15 e3 0a 34 b1 4b     J...4....J...4.K
     dc9:	2a 8e a8 54 01 e4 09 34 b1 ab e1 88 4a 15 e5 09     *..T...4....J...
     dd9:	34 b1 93 72 44 a5 0a e6 08 24 b1 1b 69 c5 01 e7     4..rD....$..i...
     de9:	08 6b af 9b 19 a8 04 e8 0b 34 b1 cb 28 aa 34 32     .k.......4..(.42
     df9:	50 00 e9 0a 34 b1 ad 81 4a 23 03 05 ea 0b 34 b1     P...4...J#....4.
     e09:	8b 29 aa 34 32 50 00 eb 0b 34 b1 49 99 50 69 64     .).42P...4.I.Pid
     e19:	a0 00 ec 08 73 b1 c9 20 c9 6a ed 07 73 b1 2b 65     ....s.. .j..s.+e
     e29:	35 ee 07 73 b1 ab 66 35 ef 08 73 b1 49 19 c8 6a     5..s..f5..s.I..j
     e39:	f0 0a 34 b1 cb c8 8a 32 29 00 f1 09 34 b1 4b 2a     ..4....2)...4.K*
     e49:	ad 68 06 f2 0a 34 b1 cb 28 aa 28 93 02 f3 0a 34     .h...4..(.(....4
     e59:	b1 ad 81 8a 32 29 00 f4 0a 34 b1 d3 84 8a 32 29     ....2)...4....2)
     e69:	00 f5 0a 34 b1 4b 2a aa 28 93 02 f6 0a 34 b1 ab     ...4.K*.(....4..
     e79:	a1 8a 32 29 00 f7 09 2c b1 d3 70 64 a8 00 f8 09     ..2)...,..pd....
     e89:	24 b1 1b 69 a4 91 00 f9 09 34 b1 cb a8 34 d3 00     $..i.....4...4..
     e99:	fa 07 34 b1 6d 9a 69 fb 08 34 b1 d3 30 9a 69 fc     ..4.m.i..4..0.i.
     ea9:	09 34 b1 ab 51 34 d3 00 fd 09 3c af 6d ca 54 96     .4..Q4....<.m.T.
     eb9:	00 fe 0a 34 af c9 60 45 39 52 06 ff 0a 3c af ab     ...4..`E9R...<..
     ec9:	51 94 a9 2c 01 00 00 00 04 ff ff 00 00              Q..,.........

00000ed6 <__ctors_end>:
     ed6:	11 24       	eor	r1, r1
     ed8:	1f be       	out	0x3f, r1	; 63
     eda:	cf ef       	ldi	r28, 0xFF	; 255
     edc:	d8 e0       	ldi	r29, 0x08	; 8
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	cd bf       	out	0x3d, r28	; 61

00000ee2 <__do_copy_data>:
     ee2:	13 e0       	ldi	r17, 0x03	; 3
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b1 e0       	ldi	r27, 0x01	; 1
     ee8:	e0 e6       	ldi	r30, 0x60	; 96
     eea:	f4 e5       	ldi	r31, 0x54	; 84
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <__do_copy_data+0x10>
     eee:	05 90       	lpm	r0, Z+
     ef0:	0d 92       	st	X+, r0
     ef2:	ae 35       	cpi	r26, 0x5E	; 94
     ef4:	b1 07       	cpc	r27, r17
     ef6:	d9 f7       	brne	.-10     	; 0xeee <__do_copy_data+0xc>

00000ef8 <__do_clear_bss>:
     ef8:	25 e0       	ldi	r18, 0x05	; 5
     efa:	ae e5       	ldi	r26, 0x5E	; 94
     efc:	b3 e0       	ldi	r27, 0x03	; 3
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <.do_clear_bss_start>

00000f00 <.do_clear_bss_loop>:
     f00:	1d 92       	st	X+, r1

00000f02 <.do_clear_bss_start>:
     f02:	ac 37       	cpi	r26, 0x7C	; 124
     f04:	b2 07       	cpc	r27, r18
     f06:	e1 f7       	brne	.-8      	; 0xf00 <.do_clear_bss_loop>
     f08:	0e 94 bf 0c 	call	0x197e	; 0x197e <main>
     f0c:	0c 94 2e 2a 	jmp	0x545c	; 0x545c <_exit>

00000f10 <__bad_interrupt>:
     f10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f14 <getBatteryADC>:
#include <avr/io.h>
#include <stdlib.h>
#include <math.h>


int getBatteryADC(){
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <getBatteryADC+0xa>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <getBatteryADC+0xc>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	volatile long Voltage = 0;
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	1a 82       	std	Y+2, r1	; 0x02
     f28:	1b 82       	std	Y+3, r1	; 0x03
     f2a:	1c 82       	std	Y+4, r1	; 0x04
	
	Voltage = (long) ADC;    // defined as channel 5 on my board
     f2c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     f30:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     f34:	a0 e0       	ldi	r26, 0x00	; 0
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	ab 83       	std	Y+3, r26	; 0x03
     f3e:	bc 83       	std	Y+4, r27	; 0x04

	Voltage = (Voltage * 500)/1024;
     f40:	29 81       	ldd	r18, Y+1	; 0x01
     f42:	3a 81       	ldd	r19, Y+2	; 0x02
     f44:	4b 81       	ldd	r20, Y+3	; 0x03
     f46:	5c 81       	ldd	r21, Y+4	; 0x04
     f48:	a4 ef       	ldi	r26, 0xF4	; 244
     f4a:	b1 e0       	ldi	r27, 0x01	; 1
     f4c:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <__muluhisi3>
     f50:	8b 01       	movw	r16, r22
     f52:	9c 01       	movw	r18, r24
     f54:	99 23       	and	r25, r25
     f56:	24 f4       	brge	.+8      	; 0xf60 <getBatteryADC+0x4c>
     f58:	01 50       	subi	r16, 0x01	; 1
     f5a:	1c 4f       	sbci	r17, 0xFC	; 252
     f5c:	2f 4f       	sbci	r18, 0xFF	; 255
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	d9 01       	movw	r26, r18
     f62:	c8 01       	movw	r24, r16
     f64:	07 2e       	mov	r0, r23
     f66:	7a e0       	ldi	r23, 0x0A	; 10
     f68:	b5 95       	asr	r27
     f6a:	a7 95       	ror	r26
     f6c:	97 95       	ror	r25
     f6e:	87 95       	ror	r24
     f70:	7a 95       	dec	r23
     f72:	d1 f7       	brne	.-12     	; 0xf68 <getBatteryADC+0x54>
     f74:	70 2d       	mov	r23, r0
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	ab 83       	std	Y+3, r26	; 0x03
     f7c:	bc 83       	std	Y+4, r27	; 0x04
	Voltage = Voltage * 20;        //using a resistor divider
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	ab 81       	ldd	r26, Y+3	; 0x03
     f84:	bc 81       	ldd	r27, Y+4	; 0x04
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	aa 1f       	adc	r26, r26
     f8c:	bb 1f       	adc	r27, r27
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	aa 1f       	adc	r26, r26
     f94:	bb 1f       	adc	r27, r27
     f96:	ac 01       	movw	r20, r24
     f98:	bd 01       	movw	r22, r26
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	66 1f       	adc	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	44 0f       	add	r20, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	66 1f       	adc	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	84 0f       	add	r24, r20
     fac:	95 1f       	adc	r25, r21
     fae:	a6 1f       	adc	r26, r22
     fb0:	b7 1f       	adc	r27, r23
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	ab 83       	std	Y+3, r26	; 0x03
     fb8:	bc 83       	std	Y+4, r27	; 0x04
	return (int)Voltage;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	ab 81       	ldd	r26, Y+3	; 0x03
     fc0:	bc 81       	ldd	r27, Y+4	; 0x04
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <ADCinit>:


//Battery_____________________________________________________________________________________________________________________________________________
void ADCinit(void){
	ADMUX |= (1<<REFS0) | (1<<MUX1);//enable pin PC2
     fd4:	ec e7       	ldi	r30, 0x7C	; 124
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	82 64       	ori	r24, 0x42	; 66
     fdc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     fde:	ea e7       	ldi	r30, 0x7A	; 122
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	87 6e       	ori	r24, 0xE7	; 231
     fe6:	80 83       	st	Z, r24
     fe8:	08 95       	ret

00000fea <initDistanceSensor>:
	}
	else{

	}
	*pAngle_tmp = (int) angledegree;
}
     fea:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <pDistance+0x1>
     fee:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <pDistance>
     ff2:	70 93 dd 04 	sts	0x04DD, r23	; 0x8004dd <pAngle_tmp+0x1>
     ff6:	60 93 dc 04 	sts	0x04DC, r22	; 0x8004dc <pAngle_tmp>
     ffa:	21 9a       	sbi	0x04, 1	; 4
     ffc:	22 98       	cbi	0x04, 2	; 4
     ffe:	24 9a       	sbi	0x04, 4	; 4
    1000:	25 98       	cbi	0x04, 5	; 4
    1002:	eb e6       	ldi	r30, 0x6B	; 107
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	84 62       	ori	r24, 0x24	; 36
    100a:	80 83       	st	Z, r24
    100c:	e8 e6       	ldi	r30, 0x68	; 104
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	81 60       	ori	r24, 0x01	; 1
    1014:	80 83       	st	Z, r24
    1016:	e1 e8       	ldi	r30, 0x81	; 129
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	83 60       	ori	r24, 0x03	; 3
    101e:	80 83       	st	Z, r24
    1020:	08 95       	ret

00001022 <__vector_3>:


ISR(PCINT0_vect){//PD
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
	static int runcount2 = 0;
	static int runcount1 = 0;
	//check which device it is and keep that device for the falling edge
	static int prevDevice;
	static int device;
	device = PINB;
    104c:	83 b1       	in	r24, 0x03	; 3
	device &= ~(1<<PORTB7);
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	8f 77       	andi	r24, 0x7F	; 127
    1052:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <device.1739+0x1>
    1056:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <device.1739>
	
	if (device == 0)
    105a:	89 2b       	or	r24, r25
    105c:	41 f4       	brne	.+16     	; 0x106e <__vector_3+0x4c>
	{
		device = prevDevice;//save the current device
    105e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <prevDevice.1738>
    1062:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <prevDevice.1738+0x1>
    1066:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <device.1739+0x1>
    106a:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <device.1739>
	}
	
	switch(device){
    106e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <device.1739>
    1072:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <device.1739+0x1>
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <__vector_3+0x5c>
    107c:	73 c0       	rjmp	.+230    	; 0x1164 <__vector_3+0x142>
    107e:	1c f4       	brge	.+6      	; 0x1086 <__vector_3+0x64>
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	49 f0       	breq	.+18     	; 0x1096 <__vector_3+0x74>
    1084:	d7 c0       	rjmp	.+430    	; 0x1234 <__vector_3+0x212>
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	91 05       	cpc	r25, r1
    108a:	29 f0       	breq	.+10     	; 0x1096 <__vector_3+0x74>
    108c:	80 32       	cpi	r24, 0x20	; 32
    108e:	91 05       	cpc	r25, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <__vector_3+0x72>
    1092:	68 c0       	rjmp	.+208    	; 0x1164 <__vector_3+0x142>
    1094:	cf c0       	rjmp	.+414    	; 0x1234 <__vector_3+0x212>
		case (1<<ECHO0):
		case 0:
		//if device is device 0 or if the pin ECHO0 gave a high
		if (runcount2 == 0)
    1096:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <runcount2.1736>
    109a:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <runcount2.1736+0x1>
    109e:	23 2b       	or	r18, r19
    10a0:	c1 f4       	brne	.+48     	; 0x10d2 <__vector_3+0xb0>
		{
			prevDevice = 0;
    10a2:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <prevDevice.1738+0x1>
    10a6:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <prevDevice.1738>
			TCNT1 = 0;
    10aa:	e4 e8       	ldi	r30, 0x84	; 132
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	11 82       	std	Z+1, r1	; 0x01
    10b0:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <risingEdgeTimeC+0x1>
    10ba:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <risingEdgeTimeC>
			
			runcount2++;
    10be:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <runcount2.1736>
    10c2:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <runcount2.1736+0x1>
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <runcount2.1736+0x1>
    10cc:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <runcount2.1736>
    10d0:	b1 c0       	rjmp	.+354    	; 0x1234 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -1;
    10d2:	2f ef       	ldi	r18, 0xFF	; 255
    10d4:	3f ef       	ldi	r19, 0xFF	; 255
    10d6:	30 93 63 03 	sts	0x0363, r19	; 0x800363 <prevDevice.1738+0x1>
    10da:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    10de:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10e2:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10e6:	70 93 6d 03 	sts	0x036D, r23	; 0x80036d <fallingEdgeTimeC+0x1>
    10ea:	60 93 6c 03 	sts	0x036C, r22	; 0x80036c <fallingEdgeTimeC>
			
			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    10ee:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <risingEdgeTimeC>
    10f2:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <risingEdgeTimeC+0x1>
    10f6:	62 1b       	sub	r22, r18
    10f8:	73 0b       	sbc	r23, r19
    10fa:	8b 01       	movw	r16, r22
    10fc:	07 2e       	mov	r0, r23
    10fe:	00 0c       	add	r0, r0
    1100:	22 0b       	sbc	r18, r18
    1102:	33 0b       	sbc	r19, r19
    1104:	00 93 68 03 	sts	0x0368, r16	; 0x800368 <echoHighLevelTimeC>
    1108:	10 93 69 03 	sts	0x0369, r17	; 0x800369 <echoHighLevelTimeC+0x1>
    110c:	20 93 6a 03 	sts	0x036A, r18	; 0x80036a <echoHighLevelTimeC+0x2>
    1110:	30 93 6b 03 	sts	0x036B, r19	; 0x80036b <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <echoHighLevelTimeuS+0x1>
    1120:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal0;// in cm
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	ec 01       	movw	r28, r24
    112e:	c6 51       	subi	r28, 0x16	; 22
    1130:	db 4f       	sbci	r29, 0xFB	; 251
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 b0 28 	call	0x5160	; 0x5160 <__floatunsisf>
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	48 e6       	ldi	r20, 0x68	; 104
    1140:	52 e4       	ldi	r21, 0x42	; 66
    1142:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    1146:	26 e6       	ldi	r18, 0x66	; 102
    1148:	36 e6       	ldi	r19, 0x66	; 102
    114a:	46 ee       	ldi	r20, 0xE6	; 230
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    1152:	68 83       	st	Y, r22
    1154:	79 83       	std	Y+1, r23	; 0x01
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	9b 83       	std	Y+3, r25	; 0x03
			
			runcount2 = 0;
    115a:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <runcount2.1736+0x1>
    115e:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <runcount2.1736>
    1162:	68 c0       	rjmp	.+208    	; 0x1234 <__vector_3+0x212>
		break;
		
		//use for multiple sound sensors
		case (1 << ECHO1):
		case 1:
		if (runcount1 == 0)
    1164:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__data_end>
    1168:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__data_end+0x1>
    116c:	23 2b       	or	r18, r19
    116e:	d1 f4       	brne	.+52     	; 0x11a4 <__vector_3+0x182>
		{
			prevDevice = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <prevDevice.1738+0x1>
    1178:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <prevDevice.1738>
			TCNT1 = 0;
    117c:	e4 e8       	ldi	r30, 0x84	; 132
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	11 82       	std	Z+1, r1	; 0x01
    1182:	10 82       	st	Z, r1
			risingEdgeTimeC = TCNT1;
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <risingEdgeTimeC+0x1>
    118c:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <risingEdgeTimeC>

			runcount1++;
    1190:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <__data_end>
    1194:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <__data_end+0x1>
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <__data_end+0x1>
    119e:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <__data_end>
    11a2:	48 c0       	rjmp	.+144    	; 0x1234 <__vector_3+0x212>
		}
		else
		{
			prevDevice = -2;
    11a4:	2e ef       	ldi	r18, 0xFE	; 254
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	30 93 63 03 	sts	0x0363, r19	; 0x800363 <prevDevice.1738+0x1>
    11ac:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <prevDevice.1738>
			fallingEdgeTimeC = TCNT1;
    11b0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11b4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11b8:	70 93 6d 03 	sts	0x036D, r23	; 0x80036d <fallingEdgeTimeC+0x1>
    11bc:	60 93 6c 03 	sts	0x036C, r22	; 0x80036c <fallingEdgeTimeC>

			echoHighLevelTimeC = fallingEdgeTimeC - risingEdgeTimeC;
    11c0:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <risingEdgeTimeC>
    11c4:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <risingEdgeTimeC+0x1>
    11c8:	62 1b       	sub	r22, r18
    11ca:	73 0b       	sbc	r23, r19
    11cc:	8b 01       	movw	r16, r22
    11ce:	07 2e       	mov	r0, r23
    11d0:	00 0c       	add	r0, r0
    11d2:	22 0b       	sbc	r18, r18
    11d4:	33 0b       	sbc	r19, r19
    11d6:	00 93 68 03 	sts	0x0368, r16	; 0x800368 <echoHighLevelTimeC>
    11da:	10 93 69 03 	sts	0x0369, r17	; 0x800369 <echoHighLevelTimeC+0x1>
    11de:	20 93 6a 03 	sts	0x036A, r18	; 0x80036a <echoHighLevelTimeC+0x2>
    11e2:	30 93 6b 03 	sts	0x036B, r19	; 0x80036b <echoHighLevelTimeC+0x3>
			echoHighLevelTimeuS = echoHighLevelTimeC * prescaleDiv;
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <echoHighLevelTimeuS+0x1>
    11f2:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <echoHighLevelTimeuS>
			echoDistance[device] = echoHighLevelTimeuS/58.0 + distanceCal1;// in cm
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	ec 01       	movw	r28, r24
    1200:	c6 51       	subi	r28, 0x16	; 22
    1202:	db 4f       	sbci	r29, 0xFB	; 251
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 b0 28 	call	0x5160	; 0x5160 <__floatunsisf>
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	48 e6       	ldi	r20, 0x68	; 104
    1212:	52 e4       	ldi	r21, 0x42	; 66
    1214:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    1218:	26 e6       	ldi	r18, 0x66	; 102
    121a:	36 e6       	ldi	r19, 0x66	; 102
    121c:	46 ee       	ldi	r20, 0xE6	; 230
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    1224:	68 83       	st	Y, r22
    1226:	79 83       	std	Y+1, r23	; 0x01
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	9b 83       	std	Y+3, r25	; 0x03

			runcount1 = 0;
    122c:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <__data_end+0x1>
    1230:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <__data_end>
		}
		break;
	}
	*pDistance = (int) echoDistance[0];
    1234:	c0 91 d6 04 	lds	r28, 0x04D6	; 0x8004d6 <pDistance>
    1238:	d0 91 d7 04 	lds	r29, 0x04D7	; 0x8004d7 <pDistance+0x1>
    123c:	0a ee       	ldi	r16, 0xEA	; 234
    123e:	14 e0       	ldi	r17, 0x04	; 4
    1240:	f8 01       	movw	r30, r16
    1242:	60 81       	ld	r22, Z
    1244:	71 81       	ldd	r23, Z+1	; 0x01
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    124e:	79 83       	std	Y+1, r23	; 0x01
    1250:	68 83       	st	Y, r22
	*pDistance += (int) echoDistance[1];
    1252:	c0 91 d6 04 	lds	r28, 0x04D6	; 0x8004d6 <pDistance>
    1256:	d0 91 d7 04 	lds	r29, 0x04D7	; 0x8004d7 <pDistance+0x1>
    125a:	f8 01       	movw	r30, r16
    125c:	64 81       	ldd	r22, Z+4	; 0x04
    125e:	75 81       	ldd	r23, Z+5	; 0x05
    1260:	86 81       	ldd	r24, Z+6	; 0x06
    1262:	97 81       	ldd	r25, Z+7	; 0x07
    1264:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    1268:	28 81       	ld	r18, Y
    126a:	39 81       	ldd	r19, Y+1	; 0x01
    126c:	62 0f       	add	r22, r18
    126e:	73 1f       	adc	r23, r19
    1270:	79 83       	std	Y+1, r23	; 0x01
    1272:	68 83       	st	Y, r22
	*pDistance /= 2;
    1274:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <pDistance>
    1278:	f0 91 d7 04 	lds	r31, 0x04D7	; 0x8004d7 <pDistance+0x1>
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	99 23       	and	r25, r25
    1282:	0c f4       	brge	.+2      	; 0x1286 <__vector_3+0x264>
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	95 95       	asr	r25
    1288:	87 95       	ror	r24
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
}
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <__vector_5>:
#include "avr/io.h"
#include "screencontroller.h"
#include "USART_RS232.h"

ISR(PCINT2_vect)
{
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	2f 93       	push	r18
    12c4:	3f 93       	push	r19
    12c6:	4f 93       	push	r20
    12c8:	5f 93       	push	r21
    12ca:	6f 93       	push	r22
    12cc:	7f 93       	push	r23
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	af 93       	push	r26
    12d4:	bf 93       	push	r27
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	1f 92       	push	r1
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
	if( !(PIND & (1<<PCINT16)) ){
    12e4:	48 99       	sbic	0x09, 0	; 9
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <__vector_5+0x40>
		
		char receivedchar;
		USART_ReceiveValue(&receivedchar);
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <USART_ReceiveValue>
		USART_BluetoothChanger(receivedchar);
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <USART_BluetoothChanger>
    12f6:	23 c0       	rjmp	.+70     	; 0x133e <__vector_5+0x86>
		
		}else{
			
		if ( (BUTTON_PIN & (1<<DOWN)) == 0 )
    12f8:	4c 99       	sbic	0x09, 4	; 9
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <__vector_5+0x52>
		keyPressed = DOWN;
    12fc:	84 e0       	ldi	r24, 0x04	; 4
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <keyPressed+0x1>
    1304:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <keyPressed>
    1308:	1a c0       	rjmp	.+52     	; 0x133e <__vector_5+0x86>
		else
		if ( (BUTTON_PIN & (1<<UP)) == 0 )
    130a:	4d 99       	sbic	0x09, 5	; 9
    130c:	07 c0       	rjmp	.+14     	; 0x131c <__vector_5+0x64>
		keyPressed = UP;
    130e:	85 e0       	ldi	r24, 0x05	; 5
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <keyPressed+0x1>
    1316:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <keyPressed>
    131a:	11 c0       	rjmp	.+34     	; 0x133e <__vector_5+0x86>
		else
		if ( (BUTTON_PIN & (1<<BACK)) == 0 )
    131c:	4e 99       	sbic	0x09, 6	; 9
    131e:	07 c0       	rjmp	.+14     	; 0x132e <__vector_5+0x76>
		keyPressed = BACK;
    1320:	86 e0       	ldi	r24, 0x06	; 6
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <keyPressed+0x1>
    1328:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <keyPressed>
    132c:	08 c0       	rjmp	.+16     	; 0x133e <__vector_5+0x86>
		else
		if ( (BUTTON_PIN & (1<<SELECT)) == 0 )
    132e:	4f 99       	sbic	0x09, 7	; 9
    1330:	06 c0       	rjmp	.+12     	; 0x133e <__vector_5+0x86>
		keyPressed = SELECT;
    1332:	87 e0       	ldi	r24, 0x07	; 7
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <keyPressed+0x1>
    133a:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <keyPressed>
	}
    133e:	0f 90       	pop	r0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <setup_display>:
		sendTriggPulse(TRIGG1);
		count1 = 1;
	}
	else if(TCNT1 >= cycleLengthC && count1 == 1){
		sendTriggPulse(TRIGG0);
		count1 = 0;
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	0f 2e       	mov	r0, r31
    1370:	fc e7       	ldi	r31, 0x7C	; 124
    1372:	ef 2e       	mov	r14, r31
    1374:	f3 e0       	ldi	r31, 0x03	; 3
    1376:	ff 2e       	mov	r15, r31
    1378:	f0 2d       	mov	r31, r0
    137a:	0a e8       	ldi	r16, 0x8A	; 138
    137c:	13 e0       	ldi	r17, 0x03	; 3
    137e:	2a e0       	ldi	r18, 0x0A	; 10
    1380:	31 e0       	ldi	r19, 0x01	; 1
    1382:	46 e8       	ldi	r20, 0x86	; 134
    1384:	53 e0       	ldi	r21, 0x03	; 3
    1386:	62 e0       	ldi	r22, 0x02	; 2
    1388:	71 e0       	ldi	r23, 0x01	; 1
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <u8g2_setup>
    1392:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <main_currentPage+0x1>
    1396:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <main_currentPage>
    139a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <sys_init>
    139e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <but_init>
    13a2:	68 e7       	ldi	r22, 0x78	; 120
    13a4:	73 e0       	ldi	r23, 0x03	; 3
    13a6:	86 e7       	ldi	r24, 0x76	; 118
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <timeInit>
    13ae:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ADCinit>
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	08 95       	ret

000013bc <pwmUpdate>:
	static unsigned short rightwheelSpeed = 0; //0 -255
	static unsigned short leftwheelSpeed = 0; //0-255
	
	//standard mode

	if(speed >= 0){//drive forwards
    13bc:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <speed>
    13c0:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <speed+0x1>
    13c4:	99 23       	and	r25, r25
    13c6:	0c f4       	brge	.+2      	; 0x13ca <pwmUpdate+0xe>
    13c8:	5e c0       	rjmp	.+188    	; 0x1486 <pwmUpdate+0xca>
		SetDriveForward();
    13ca:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <SetDriveForward>
		leftwheelSpeed = speed + steer;
    13ce:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <speed>
    13d2:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <speed+0x1>
    13d6:	40 91 86 03 	lds	r20, 0x0386	; 0x800386 <steer>
    13da:	50 91 87 03 	lds	r21, 0x0387	; 0x800387 <steer+0x1>
    13de:	9c 01       	movw	r18, r24
    13e0:	24 0f       	add	r18, r20
    13e2:	35 1f       	adc	r19, r21
    13e4:	b9 01       	movw	r22, r18
    13e6:	30 93 73 03 	sts	0x0373, r19	; 0x800373 <leftwheelSpeed.9000+0x1>
    13ea:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <leftwheelSpeed.9000>
		rightwheelSpeed = speed - steer;
    13ee:	84 1b       	sub	r24, r20
    13f0:	95 0b       	sbc	r25, r21
		
		if (speed - steer < 0){
    13f2:	2a f4       	brpl	.+10     	; 0x13fe <pwmUpdate+0x42>
			rightwheelSpeed = 0;
    13f4:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <rightwheelSpeed.8999+0x1>
    13f8:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <rightwheelSpeed.8999>
    13fc:	0e c0       	rjmp	.+28     	; 0x141a <pwmUpdate+0x5e>
			}else if(speed - steer >= 255){
    13fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1400:	91 05       	cpc	r25, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <pwmUpdate+0x52>
	//standard mode

	if(speed >= 0){//drive forwards
		SetDriveForward();
		leftwheelSpeed = speed + steer;
		rightwheelSpeed = speed - steer;
    1404:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <rightwheelSpeed.8999+0x1>
    1408:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <rightwheelSpeed.8999>
    140c:	06 c0       	rjmp	.+12     	; 0x141a <pwmUpdate+0x5e>
		
		if (speed - steer < 0){
			rightwheelSpeed = 0;
			}else if(speed - steer >= 255){
			rightwheelSpeed = 255;
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <rightwheelSpeed.8999+0x1>
    1416:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <rightwheelSpeed.8999>
		}
		if (speed + steer < 0){
    141a:	33 23       	and	r19, r19
    141c:	2c f4       	brge	.+10     	; 0x1428 <pwmUpdate+0x6c>
			leftwheelSpeed = 0;
    141e:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <leftwheelSpeed.9000+0x1>
    1422:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <leftwheelSpeed.9000>
    1426:	1a c0       	rjmp	.+52     	; 0x145c <pwmUpdate+0xa0>
			}else if(speed + steer >= 255){
    1428:	2f 3f       	cpi	r18, 0xFF	; 255
    142a:	31 05       	cpc	r19, r1
    142c:	4c f0       	brlt	.+18     	; 0x1440 <pwmUpdate+0x84>
			leftwheelSpeed = 255;
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <leftwheelSpeed.9000+0x1>
    1436:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <leftwheelSpeed.9000>
		}
		
		if (leftwheelSpeed > 10 && leftwheelSpeed < Settings[3]){
    143a:	6f ef       	ldi	r22, 0xFF	; 255
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <pwmUpdate+0x8a>
    1440:	6b 30       	cpi	r22, 0x0B	; 11
    1442:	71 05       	cpc	r23, r1
    1444:	58 f0       	brcs	.+22     	; 0x145c <pwmUpdate+0xa0>
    1446:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Settings+0x6>
    144a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Settings+0x7>
    144e:	68 17       	cp	r22, r24
    1450:	79 07       	cpc	r23, r25
    1452:	20 f4       	brcc	.+8      	; 0x145c <pwmUpdate+0xa0>
			leftwheelSpeed = Settings[3];
    1454:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <leftwheelSpeed.9000+0x1>
    1458:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <leftwheelSpeed.9000>
		}
		if (rightwheelSpeed > 10 && rightwheelSpeed < Settings[3]){
    145c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <rightwheelSpeed.8999>
    1460:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <rightwheelSpeed.8999+0x1>
    1464:	8b 30       	cpi	r24, 0x0B	; 11
    1466:	91 05       	cpc	r25, r1
    1468:	08 f4       	brcc	.+2      	; 0x146c <pwmUpdate+0xb0>
    146a:	6b c0       	rjmp	.+214    	; 0x1542 <pwmUpdate+0x186>
    146c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Settings+0x6>
    1470:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <Settings+0x7>
    1474:	82 17       	cp	r24, r18
    1476:	93 07       	cpc	r25, r19
    1478:	08 f0       	brcs	.+2      	; 0x147c <pwmUpdate+0xc0>
    147a:	63 c0       	rjmp	.+198    	; 0x1542 <pwmUpdate+0x186>
			rightwheelSpeed = Settings[3];
    147c:	30 93 71 03 	sts	0x0371, r19	; 0x800371 <rightwheelSpeed.8999+0x1>
    1480:	20 93 70 03 	sts	0x0370, r18	; 0x800370 <rightwheelSpeed.8999>
    1484:	5e c0       	rjmp	.+188    	; 0x1542 <pwmUpdate+0x186>
		}
		
		}else{//drive backwards
		SetDriveBackward();
    1486:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <SetDriveBackward>
		
		//change speed to a positive variable again.
		//speed *= -1;
		
		leftwheelSpeed = -speed + steer;
    148a:	40 91 86 03 	lds	r20, 0x0386	; 0x800386 <steer>
    148e:	50 91 87 03 	lds	r21, 0x0387	; 0x800387 <steer+0x1>
    1492:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <speed>
    1496:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <speed+0x1>
    149a:	9a 01       	movw	r18, r20
    149c:	28 1b       	sub	r18, r24
    149e:	39 0b       	sbc	r19, r25
    14a0:	b9 01       	movw	r22, r18
    14a2:	30 93 73 03 	sts	0x0373, r19	; 0x800373 <leftwheelSpeed.9000+0x1>
    14a6:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <leftwheelSpeed.9000>
		rightwheelSpeed = -speed - steer;
    14aa:	91 95       	neg	r25
    14ac:	81 95       	neg	r24
    14ae:	91 09       	sbc	r25, r1
    14b0:	84 1b       	sub	r24, r20
    14b2:	95 0b       	sbc	r25, r21
		
		if (-speed - steer < 0){
    14b4:	2a f4       	brpl	.+10     	; 0x14c0 <pwmUpdate+0x104>
			rightwheelSpeed = 0;
    14b6:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <rightwheelSpeed.8999+0x1>
    14ba:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <rightwheelSpeed.8999>
    14be:	0e c0       	rjmp	.+28     	; 0x14dc <pwmUpdate+0x120>
			}else if(-speed - steer >= 255){
    14c0:	8f 3f       	cpi	r24, 0xFF	; 255
    14c2:	91 05       	cpc	r25, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <pwmUpdate+0x114>
		
		//change speed to a positive variable again.
		//speed *= -1;
		
		leftwheelSpeed = -speed + steer;
		rightwheelSpeed = -speed - steer;
    14c6:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <rightwheelSpeed.8999+0x1>
    14ca:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <rightwheelSpeed.8999>
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <pwmUpdate+0x120>
		
		if (-speed - steer < 0){
			rightwheelSpeed = 0;
			}else if(-speed - steer >= 255){
			rightwheelSpeed = 255;
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <rightwheelSpeed.8999+0x1>
    14d8:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <rightwheelSpeed.8999>
		}
		if (-speed + steer < 0){
    14dc:	33 23       	and	r19, r19
    14de:	2c f4       	brge	.+10     	; 0x14ea <pwmUpdate+0x12e>
			leftwheelSpeed = 0;
    14e0:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <leftwheelSpeed.9000+0x1>
    14e4:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <leftwheelSpeed.9000>
    14e8:	1a c0       	rjmp	.+52     	; 0x151e <pwmUpdate+0x162>
			}else if(-speed + steer >= 255){
    14ea:	2f 3f       	cpi	r18, 0xFF	; 255
    14ec:	31 05       	cpc	r19, r1
    14ee:	4c f0       	brlt	.+18     	; 0x1502 <pwmUpdate+0x146>
			leftwheelSpeed = 255;
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <leftwheelSpeed.9000+0x1>
    14f8:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <leftwheelSpeed.9000>
		}
		if (leftwheelSpeed > 10 && leftwheelSpeed < Settings[3]){
    14fc:	6f ef       	ldi	r22, 0xFF	; 255
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <pwmUpdate+0x14c>
    1502:	6b 30       	cpi	r22, 0x0B	; 11
    1504:	71 05       	cpc	r23, r1
    1506:	58 f0       	brcs	.+22     	; 0x151e <pwmUpdate+0x162>
    1508:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Settings+0x6>
    150c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Settings+0x7>
    1510:	68 17       	cp	r22, r24
    1512:	79 07       	cpc	r23, r25
    1514:	20 f4       	brcc	.+8      	; 0x151e <pwmUpdate+0x162>
			leftwheelSpeed = Settings[3];
    1516:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <leftwheelSpeed.9000+0x1>
    151a:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <leftwheelSpeed.9000>
		}
		if (rightwheelSpeed > 10 && rightwheelSpeed < Settings[3]){
    151e:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <rightwheelSpeed.8999>
    1522:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <rightwheelSpeed.8999+0x1>
    1526:	8b 30       	cpi	r24, 0x0B	; 11
    1528:	91 05       	cpc	r25, r1
    152a:	58 f0       	brcs	.+22     	; 0x1542 <pwmUpdate+0x186>
    152c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Settings+0x6>
    1530:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <Settings+0x7>
    1534:	82 17       	cp	r24, r18
    1536:	93 07       	cpc	r25, r19
    1538:	20 f4       	brcc	.+8      	; 0x1542 <pwmUpdate+0x186>
			rightwheelSpeed = Settings[3];
    153a:	30 93 71 03 	sts	0x0371, r19	; 0x800371 <rightwheelSpeed.8999+0x1>
    153e:	20 93 70 03 	sts	0x0370, r18	; 0x800370 <rightwheelSpeed.8999>
		}
	}
	//speed *= -1; // revert changes so the value stays the same
	PWM_digPin9_Output(leftwheelSpeed);//left
    1542:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <leftwheelSpeed.9000>
    1546:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <PWM_digPin9_Output>
	PWM_digPin10_Output(rightwheelSpeed);//right
    154a:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <rightwheelSpeed.8999>
    154e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <PWM_digPin10_Output>
    1552:	08 95       	ret

00001554 <driveForward>:
	}
	

}

void driveForward(int cm){
    1554:	2f 92       	push	r2
    1556:	3f 92       	push	r3
    1558:	4f 92       	push	r4
    155a:	5f 92       	push	r5
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
	uint32_t PrevDistanceVal = 0;
	int countSTEER = 0;
	PrevDistanceVal = SpeedoDistanceCmMain;
    1578:	c0 90 7e 03 	lds	r12, 0x037E	; 0x80037e <SpeedoDistanceCmMain>
    157c:	d0 90 7f 03 	lds	r13, 0x037F	; 0x80037f <SpeedoDistanceCmMain+0x1>
    1580:	e0 90 80 03 	lds	r14, 0x0380	; 0x800380 <SpeedoDistanceCmMain+0x2>
    1584:	f0 90 81 03 	lds	r15, 0x0381	; 0x800381 <SpeedoDistanceCmMain+0x3>
	
	//speed = 101;
	while (SpeedoDistanceCmMain - PrevDistanceVal < cm)
    1588:	4c 01       	movw	r8, r24
    158a:	99 0f       	add	r25, r25
    158c:	aa 08       	sbc	r10, r10
    158e:	bb 08       	sbc	r11, r11
    1590:	81 14       	cp	r8, r1
    1592:	91 04       	cpc	r9, r1
    1594:	a1 04       	cpc	r10, r1
    1596:	b1 04       	cpc	r11, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <driveForward+0x48>
    159a:	e1 c0       	rjmp	.+450    	; 0x175e <driveForward+0x20a>
	{
		if(Settings[0] == 0){
    159c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Settings>
    15a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Settings+0x1>
    15a4:	89 2b       	or	r24, r25
    15a6:	b1 f0       	breq	.+44     	; 0x15d4 <driveForward+0x80>
    15a8:	61 2c       	mov	r6, r1
    15aa:	71 2c       	mov	r7, r1
			break;
		}
		if (distance < 30 && countSTEER < 1){
			//steer around object sequence
			speed = 0;
			steer = -150;
    15ac:	0f 2e       	mov	r0, r31
    15ae:	fa e6       	ldi	r31, 0x6A	; 106
    15b0:	4f 2e       	mov	r4, r31
    15b2:	55 24       	eor	r5, r5
    15b4:	5a 94       	dec	r5
    15b6:	f0 2d       	mov	r31, r0
			
			PrevDistanceVal = SpeedoCountMain / 2;
			SpeedoDistanceCmMain = SpeedoCountMain / 2;
			while (SpeedoDistanceCmMain - PrevDistanceVal < 40)
			{
				speed = 140;
    15b8:	0c e8       	ldi	r16, 0x8C	; 140
    15ba:	10 e0       	ldi	r17, 0x00	; 0
				pwmUpdate();
				SpeedoDistanceCmMain = SpeedoCountMain / 2;//centimeters
			}
			speed = 0;
			steer = 150;
    15bc:	0f 2e       	mov	r0, r31
    15be:	f6 e9       	ldi	r31, 0x96	; 150
    15c0:	2f 2e       	mov	r2, r31
    15c2:	31 2c       	mov	r3, r1
    15c4:	f0 2d       	mov	r31, r0
			countSTEER++;
		}
		
		
		//ramp up speed
		if (speed < Settings[1])
    15c6:	c0 e0       	ldi	r28, 0x00	; 0
    15c8:	d1 e0       	ldi	r29, 0x01	; 1
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <driveForward+0x96>
	PrevDistanceVal = SpeedoDistanceCmMain;
	
	//speed = 101;
	while (SpeedoDistanceCmMain - PrevDistanceVal < cm)
	{
		if(Settings[0] == 0){
    15cc:	88 81       	ld	r24, Y
    15ce:	99 81       	ldd	r25, Y+1	; 0x01
    15d0:	89 2b       	or	r24, r25
    15d2:	59 f4       	brne	.+22     	; 0x15ea <driveForward+0x96>
			speed = 0;
    15d4:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    15d8:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
			steer = 0;
    15dc:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    15e0:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
			pwmUpdate();
    15e4:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
			break;
    15e8:	ba c0       	rjmp	.+372    	; 0x175e <driveForward+0x20a>
		}
		if (distance < 30 && countSTEER < 1){
    15ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <distance>
    15ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <distance+0x1>
    15f2:	4e 97       	sbiw	r24, 0x1e	; 30
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <driveForward+0xa4>
    15f6:	6f c0       	rjmp	.+222    	; 0x16d6 <driveForward+0x182>
    15f8:	16 14       	cp	r1, r6
    15fa:	17 04       	cpc	r1, r7
    15fc:	0c f4       	brge	.+2      	; 0x1600 <driveForward+0xac>
    15fe:	6b c0       	rjmp	.+214    	; 0x16d6 <driveForward+0x182>
			//steer around object sequence
			speed = 0;
    1600:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    1604:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
			steer = -150;
    1608:	50 92 87 03 	sts	0x0387, r5	; 0x800387 <steer+0x1>
    160c:	40 92 86 03 	sts	0x0386, r4	; 0x800386 <steer>
			pwmUpdate();
    1610:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1614:	2f ef       	ldi	r18, 0xFF	; 255
    1616:	8b e4       	ldi	r24, 0x4B	; 75
    1618:	9d e1       	ldi	r25, 0x1D	; 29
    161a:	21 50       	subi	r18, 0x01	; 1
    161c:	80 40       	sbci	r24, 0x00	; 0
    161e:	90 40       	sbci	r25, 0x00	; 0
    1620:	e1 f7       	brne	.-8      	; 0x161a <driveForward+0xc6>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <driveForward+0xd0>
    1624:	00 00       	nop
			_delay_ms(600);
			steer = 0;
    1626:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    162a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
			pwmUpdate();
    162e:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
			
			//drive forward.
			
			PrevDistanceVal = SpeedoCountMain / 2;
    1632:	c0 90 82 03 	lds	r12, 0x0382	; 0x800382 <SpeedoCountMain>
    1636:	d0 90 83 03 	lds	r13, 0x0383	; 0x800383 <SpeedoCountMain+0x1>
    163a:	e0 90 84 03 	lds	r14, 0x0384	; 0x800384 <SpeedoCountMain+0x2>
    163e:	f0 90 85 03 	lds	r15, 0x0385	; 0x800385 <SpeedoCountMain+0x3>
    1642:	f6 94       	lsr	r15
    1644:	e7 94       	ror	r14
    1646:	d7 94       	ror	r13
    1648:	c7 94       	ror	r12
			SpeedoDistanceCmMain = SpeedoCountMain / 2;
    164a:	c0 92 7e 03 	sts	0x037E, r12	; 0x80037e <SpeedoDistanceCmMain>
    164e:	d0 92 7f 03 	sts	0x037F, r13	; 0x80037f <SpeedoDistanceCmMain+0x1>
    1652:	e0 92 80 03 	sts	0x0380, r14	; 0x800380 <SpeedoDistanceCmMain+0x2>
    1656:	f0 92 81 03 	sts	0x0381, r15	; 0x800381 <SpeedoDistanceCmMain+0x3>
			while (SpeedoDistanceCmMain - PrevDistanceVal < 40)
			{
				speed = 140;
    165a:	10 93 89 03 	sts	0x0389, r17	; 0x800389 <speed+0x1>
    165e:	00 93 88 03 	sts	0x0388, r16	; 0x800388 <speed>
				pwmUpdate();
    1662:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
				SpeedoDistanceCmMain = SpeedoCountMain / 2;//centimeters
    1666:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <SpeedoCountMain>
    166a:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <SpeedoCountMain+0x1>
    166e:	a0 91 84 03 	lds	r26, 0x0384	; 0x800384 <SpeedoCountMain+0x2>
    1672:	b0 91 85 03 	lds	r27, 0x0385	; 0x800385 <SpeedoCountMain+0x3>
    1676:	b6 95       	lsr	r27
    1678:	a7 95       	ror	r26
    167a:	97 95       	ror	r25
    167c:	87 95       	ror	r24
    167e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <SpeedoDistanceCmMain>
    1682:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <SpeedoDistanceCmMain+0x1>
    1686:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <SpeedoDistanceCmMain+0x2>
    168a:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <SpeedoDistanceCmMain+0x3>
			
			//drive forward.
			
			PrevDistanceVal = SpeedoCountMain / 2;
			SpeedoDistanceCmMain = SpeedoCountMain / 2;
			while (SpeedoDistanceCmMain - PrevDistanceVal < 40)
    168e:	8c 19       	sub	r24, r12
    1690:	9d 09       	sbc	r25, r13
    1692:	ae 09       	sbc	r26, r14
    1694:	bf 09       	sbc	r27, r15
    1696:	88 97       	sbiw	r24, 0x28	; 40
    1698:	a1 05       	cpc	r26, r1
    169a:	b1 05       	cpc	r27, r1
    169c:	f0 f2       	brcs	.-68     	; 0x165a <driveForward+0x106>
			{
				speed = 140;
				pwmUpdate();
				SpeedoDistanceCmMain = SpeedoCountMain / 2;//centimeters
			}
			speed = 0;
    169e:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    16a2:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
			steer = 150;
    16a6:	30 92 87 03 	sts	0x0387, r3	; 0x800387 <steer+0x1>
    16aa:	20 92 86 03 	sts	0x0386, r2	; 0x800386 <steer>
			pwmUpdate();
    16ae:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    16b2:	2f ef       	ldi	r18, 0xFF	; 255
    16b4:	8b e4       	ldi	r24, 0x4B	; 75
    16b6:	9d e1       	ldi	r25, 0x1D	; 29
    16b8:	21 50       	subi	r18, 0x01	; 1
    16ba:	80 40       	sbci	r24, 0x00	; 0
    16bc:	90 40       	sbci	r25, 0x00	; 0
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <driveForward+0x164>
    16c0:	00 c0       	rjmp	.+0      	; 0x16c2 <driveForward+0x16e>
    16c2:	00 00       	nop
			_delay_ms(600);
			
			steer = 0;
    16c4:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    16c8:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
			pwmUpdate();
    16cc:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
			countSTEER++;
    16d0:	2f ef       	ldi	r18, 0xFF	; 255
    16d2:	62 1a       	sub	r6, r18
    16d4:	72 0a       	sbc	r7, r18
		}
		
		
		//ramp up speed
		if (speed < Settings[1])
    16d6:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <speed>
    16da:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <speed+0x1>
    16de:	2a 81       	ldd	r18, Y+2	; 0x02
    16e0:	3b 81       	ldd	r19, Y+3	; 0x03
    16e2:	82 17       	cp	r24, r18
    16e4:	93 07       	cpc	r25, r19
    16e6:	3c f4       	brge	.+14     	; 0x16f6 <driveForward+0x1a2>
		{
			speed++;
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <speed+0x1>
    16ee:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <speed>
			pwmUpdate();
    16f2:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
		}
		//ramp down speed
		if (speed > Settings[1])
    16f6:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <speed>
    16fa:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <speed+0x1>
    16fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1700:	3b 81       	ldd	r19, Y+3	; 0x03
    1702:	28 17       	cp	r18, r24
    1704:	39 07       	cpc	r19, r25
    1706:	3c f4       	brge	.+14     	; 0x1716 <driveForward+0x1c2>
		{
			speed--;
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <speed+0x1>
    170e:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <speed>
			pwmUpdate();
    1712:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    1716:	8f e7       	ldi	r24, 0x7F	; 127
    1718:	9e e3       	ldi	r25, 0x3E	; 62
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <driveForward+0x1c6>
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <driveForward+0x1cc>
    1720:	00 00       	nop
		}
		_delay_ms(4);
		SpeedoDistanceCmMain = SpeedoCountMain / 2;//centimeters
    1722:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <SpeedoCountMain>
    1726:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <SpeedoCountMain+0x1>
    172a:	a0 91 84 03 	lds	r26, 0x0384	; 0x800384 <SpeedoCountMain+0x2>
    172e:	b0 91 85 03 	lds	r27, 0x0385	; 0x800385 <SpeedoCountMain+0x3>
    1732:	b6 95       	lsr	r27
    1734:	a7 95       	ror	r26
    1736:	97 95       	ror	r25
    1738:	87 95       	ror	r24
    173a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <SpeedoDistanceCmMain>
    173e:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <SpeedoDistanceCmMain+0x1>
    1742:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <SpeedoDistanceCmMain+0x2>
    1746:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <SpeedoDistanceCmMain+0x3>
	uint32_t PrevDistanceVal = 0;
	int countSTEER = 0;
	PrevDistanceVal = SpeedoDistanceCmMain;
	
	//speed = 101;
	while (SpeedoDistanceCmMain - PrevDistanceVal < cm)
    174a:	8c 19       	sub	r24, r12
    174c:	9d 09       	sbc	r25, r13
    174e:	ae 09       	sbc	r26, r14
    1750:	bf 09       	sbc	r27, r15
    1752:	88 15       	cp	r24, r8
    1754:	99 05       	cpc	r25, r9
    1756:	aa 05       	cpc	r26, r10
    1758:	bb 05       	cpc	r27, r11
    175a:	08 f4       	brcc	.+2      	; 0x175e <driveForward+0x20a>
    175c:	37 cf       	rjmp	.-402    	; 0x15cc <driveForward+0x78>
		}
		_delay_ms(4);
		SpeedoDistanceCmMain = SpeedoCountMain / 2;//centimeters
		
	}
	speed = 0;
    175e:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    1762:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
	steer = 0;
    1766:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    176a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
	pwmUpdate();
    176e:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	6f 90       	pop	r6
    178e:	5f 90       	pop	r5
    1790:	4f 90       	pop	r4
    1792:	3f 90       	pop	r3
    1794:	2f 90       	pop	r2
    1796:	08 95       	ret

00001798 <ModePicker>:
		sendTriggPulse(TRIGG0);
		count1 = 0;
	}
}

void ModePicker(){
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
	static int count3 =0;

	switch (Settings[0])
    179c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Settings>
    17a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Settings+0x1>
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	91 05       	cpc	r25, r1
    17a8:	79 f0       	breq	.+30     	; 0x17c8 <ModePicker+0x30>
    17aa:	1c f4       	brge	.+6      	; 0x17b2 <ModePicker+0x1a>
    17ac:	89 2b       	or	r24, r25
    17ae:	49 f0       	breq	.+18     	; 0x17c2 <ModePicker+0x2a>
    17b0:	e3 c0       	rjmp	.+454    	; 0x1978 <ModePicker+0x1e0>
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <ModePicker+0x22>
    17b8:	90 c0       	rjmp	.+288    	; 0x18da <ModePicker+0x142>
    17ba:	03 97       	sbiw	r24, 0x03	; 3
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <ModePicker+0x28>
    17be:	97 c0       	rjmp	.+302    	; 0x18ee <ModePicker+0x156>
    17c0:	db c0       	rjmp	.+438    	; 0x1978 <ModePicker+0x1e0>
	{
		case 0://manual mode
		pwmUpdate();//change the speed of the motors.
    17c2:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
		break;
    17c6:	d8 c0       	rjmp	.+432    	; 0x1978 <ModePicker+0x1e0>
    17c8:	2f ef       	ldi	r18, 0xFF	; 255
    17ca:	8b e7       	ldi	r24, 0x7B	; 123
    17cc:	92 e9       	ldi	r25, 0x92	; 146
    17ce:	21 50       	subi	r18, 0x01	; 1
    17d0:	80 40       	sbci	r24, 0x00	; 0
    17d2:	90 40       	sbci	r25, 0x00	; 0
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <ModePicker+0x36>
    17d6:	00 c0       	rjmp	.+0      	; 0x17d8 <ModePicker+0x40>
    17d8:	00 00       	nop
		
		case 1: //auto mode 1
		_delay_ms(3000);
		if(Settings[0] != 1){
    17da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Settings>
    17de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Settings+0x1>
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <ModePicker+0x50>
    17e6:	c8 c0       	rjmp	.+400    	; 0x1978 <ModePicker+0x1e0>
			break;
		}
		speed = Settings[3];
    17e8:	c0 e0       	ldi	r28, 0x00	; 0
    17ea:	d1 e0       	ldi	r29, 0x01	; 1
    17ec:	8e 81       	ldd	r24, Y+6	; 0x06
    17ee:	9f 81       	ldd	r25, Y+7	; 0x07
    17f0:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <speed+0x1>
    17f4:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <speed>
		pwmUpdate();
    17f8:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    17fc:	2f ef       	ldi	r18, 0xFF	; 255
    17fe:	8d e3       	ldi	r24, 0x3D	; 61
    1800:	99 e4       	ldi	r25, 0x49	; 73
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	80 40       	sbci	r24, 0x00	; 0
    1806:	90 40       	sbci	r25, 0x00	; 0
    1808:	e1 f7       	brne	.-8      	; 0x1802 <ModePicker+0x6a>
    180a:	00 c0       	rjmp	.+0      	; 0x180c <ModePicker+0x74>
    180c:	00 00       	nop
		_delay_ms(1500);

		speed = 0;
    180e:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    1812:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
		steer = Settings[3]+50;
    1816:	8e 81       	ldd	r24, Y+6	; 0x06
    1818:	9f 81       	ldd	r25, Y+7	; 0x07
    181a:	c2 96       	adiw	r24, 0x32	; 50
    181c:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <steer+0x1>
    1820:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <steer>
		pwmUpdate();
    1824:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    1828:	2f ef       	ldi	r18, 0xFF	; 255
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	93 e5       	ldi	r25, 0x53	; 83
    182e:	21 50       	subi	r18, 0x01	; 1
    1830:	80 40       	sbci	r24, 0x00	; 0
    1832:	90 40       	sbci	r25, 0x00	; 0
    1834:	e1 f7       	brne	.-8      	; 0x182e <ModePicker+0x96>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <ModePicker+0xa0>
    1838:	00 00       	nop
		_delay_ms(1700);

		speed = -Settings[3];
    183a:	8e 81       	ldd	r24, Y+6	; 0x06
    183c:	9f 81       	ldd	r25, Y+7	; 0x07
    183e:	91 95       	neg	r25
    1840:	81 95       	neg	r24
    1842:	91 09       	sbc	r25, r1
    1844:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <speed+0x1>
    1848:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <speed>
		steer = 0;
    184c:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    1850:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
		pwmUpdate();
    1854:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    1858:	2f ef       	ldi	r18, 0xFF	; 255
    185a:	83 ed       	ldi	r24, 0xD3	; 211
    185c:	90 e3       	ldi	r25, 0x30	; 48
    185e:	21 50       	subi	r18, 0x01	; 1
    1860:	80 40       	sbci	r24, 0x00	; 0
    1862:	90 40       	sbci	r25, 0x00	; 0
    1864:	e1 f7       	brne	.-8      	; 0x185e <ModePicker+0xc6>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <ModePicker+0xd0>
    1868:	00 00       	nop
		_delay_ms(1000);

		speed  = 0;
    186a:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    186e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
		steer = Settings[3]+50;
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	c2 96       	adiw	r24, 0x32	; 50
    1878:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <steer+0x1>
    187c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <steer>
		pwmUpdate();
    1880:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    1884:	2f ef       	ldi	r18, 0xFF	; 255
    1886:	83 ed       	ldi	r24, 0xD3	; 211
    1888:	90 e3       	ldi	r25, 0x30	; 48
    188a:	21 50       	subi	r18, 0x01	; 1
    188c:	80 40       	sbci	r24, 0x00	; 0
    188e:	90 40       	sbci	r25, 0x00	; 0
    1890:	e1 f7       	brne	.-8      	; 0x188a <ModePicker+0xf2>
    1892:	00 c0       	rjmp	.+0      	; 0x1894 <ModePicker+0xfc>
    1894:	00 00       	nop
		_delay_ms(1000);

		speed = Settings[3];
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	9f 81       	ldd	r25, Y+7	; 0x07
    189a:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <speed+0x1>
    189e:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <speed>
		steer = 0;
    18a2:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    18a6:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
		pwmUpdate();
    18aa:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    18ae:	2f ef       	ldi	r18, 0xFF	; 255
    18b0:	8d e3       	ldi	r24, 0x3D	; 61
    18b2:	99 e4       	ldi	r25, 0x49	; 73
    18b4:	21 50       	subi	r18, 0x01	; 1
    18b6:	80 40       	sbci	r24, 0x00	; 0
    18b8:	90 40       	sbci	r25, 0x00	; 0
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <ModePicker+0x11c>
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <ModePicker+0x126>
    18be:	00 00       	nop
		_delay_ms(1500);

		Settings[0] = 0;
    18c0:	19 82       	std	Y+1, r1	; 0x01
    18c2:	18 82       	st	Y, r1
		speed = 0;
    18c4:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    18c8:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
		steer = 0;
    18cc:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    18d0:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
		pwmUpdate();
    18d4:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
		break;
    18d8:	4f c0       	rjmp	.+158    	; 0x1978 <ModePicker+0x1e0>
    18da:	2f ef       	ldi	r18, 0xFF	; 255
    18dc:	8b e7       	ldi	r24, 0x7B	; 123
    18de:	92 e9       	ldi	r25, 0x92	; 146
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	80 40       	sbci	r24, 0x00	; 0
    18e4:	90 40       	sbci	r25, 0x00	; 0
    18e6:	e1 f7       	brne	.-8      	; 0x18e0 <ModePicker+0x148>
    18e8:	00 c0       	rjmp	.+0      	; 0x18ea <ModePicker+0x152>
    18ea:	00 00       	nop
    18ec:	45 c0       	rjmp	.+138    	; 0x1978 <ModePicker+0x1e0>
		
		
		break;
		
		case 3://auto mode 3
		if (count3 == 0)
    18ee:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <count3.8973>
    18f2:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <count3.8973+0x1>
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	f1 f4       	brne	.+60     	; 0x1936 <ModePicker+0x19e>
    18fa:	2f ef       	ldi	r18, 0xFF	; 255
    18fc:	87 ea       	ldi	r24, 0xA7	; 167
    18fe:	91 e6       	ldi	r25, 0x61	; 97
    1900:	21 50       	subi	r18, 0x01	; 1
    1902:	80 40       	sbci	r24, 0x00	; 0
    1904:	90 40       	sbci	r25, 0x00	; 0
    1906:	e1 f7       	brne	.-8      	; 0x1900 <ModePicker+0x168>
    1908:	00 c0       	rjmp	.+0      	; 0x190a <ModePicker+0x172>
    190a:	00 00       	nop
		{
			_delay_ms(2000);
			if(Settings[0] != 3){
    190c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Settings>
    1910:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Settings+0x1>
    1914:	03 97       	sbiw	r24, 0x03	; 3
    1916:	81 f5       	brne	.+96     	; 0x1978 <ModePicker+0x1e0>
				break;
			}
			
			driveForward(200);//in cm
    1918:	88 ec       	ldi	r24, 0xC8	; 200
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <driveForward>
			speed = 0;
    1920:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    1924:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
			steer = 0;
    1928:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    192c:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
			pwmUpdate();
    1930:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
    1934:	18 c0       	rjmp	.+48     	; 0x1966 <ModePicker+0x1ce>
		}else if (count3 == 1)
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	b1 f4       	brne	.+44     	; 0x1966 <ModePicker+0x1ce>
		{
			driveForward(100);//in cm
    193a:	84 e6       	ldi	r24, 0x64	; 100
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <driveForward>
			
			Settings[0] = 0;
    1942:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Settings+0x1>
    1946:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Settings>
			speed = 0;
    194a:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <speed+0x1>
    194e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <speed>
			steer = 0;
    1952:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <steer+0x1>
    1956:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <steer>
			count3 = 0;
    195a:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <count3.8973+0x1>
    195e:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <count3.8973>
			pwmUpdate();
    1962:	0e 94 de 09 	call	0x13bc	; 0x13bc <pwmUpdate>
		}

		
		//driveBackward(50);

		count3++;
    1966:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <count3.8973>
    196a:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <count3.8973+0x1>
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <count3.8973+0x1>
    1974:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <count3.8973>
		//_delay_ms(2000);
		break;
	}
	

}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <main>:
}


int main()
{
	setup_display();
    197e:	0e 94 b3 09 	call	0x1366	; 0x1366 <setup_display>
	initBluetooth(Settings, &speed, &steer);
    1982:	46 e8       	ldi	r20, 0x86	; 134
    1984:	53 e0       	ldi	r21, 0x03	; 3
    1986:	68 e8       	ldi	r22, 0x88	; 136
    1988:	73 e0       	ldi	r23, 0x03	; 3
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <initBluetooth>
	initSpeedometer(&SpeedoCountMain, &SpeedoSpeed);
    1992:	6c e7       	ldi	r22, 0x7C	; 124
    1994:	73 e0       	ldi	r23, 0x03	; 3
    1996:	82 e8       	ldi	r24, 0x82	; 130
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <initSpeedometer>
	
	initDistanceSensor(&distance, &angle_deg);//the default pins are setup in soundsensor.h
    199e:	6a e8       	ldi	r22, 0x8A	; 138
    19a0:	73 e0       	ldi	r23, 0x03	; 3
    19a2:	8a e0       	ldi	r24, 0x0A	; 10
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	0e 94 f5 07 	call	0xfea	; 0xfea <initDistanceSensor>
	
	initPWM();
    19aa:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <initPWM>

	sei();
    19ae:	78 94       	sei


	while(1){
		SpeedoDistanceCmMain = SpeedoCountMain / 2;//centimeters
    19b0:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <SpeedoCountMain>
    19b4:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <SpeedoCountMain+0x1>
    19b8:	a0 91 84 03 	lds	r26, 0x0384	; 0x800384 <SpeedoCountMain+0x2>
    19bc:	b0 91 85 03 	lds	r27, 0x0385	; 0x800385 <SpeedoCountMain+0x3>
    19c0:	b6 95       	lsr	r27
    19c2:	a7 95       	ror	r26
    19c4:	97 95       	ror	r25
    19c6:	87 95       	ror	r24
    19c8:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <SpeedoDistanceCmMain>
    19cc:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <SpeedoDistanceCmMain+0x1>
    19d0:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <SpeedoDistanceCmMain+0x2>
    19d4:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <SpeedoDistanceCmMain+0x3>
		screenRoutine();//function for updating the display.
    19d8:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <screenRoutine>
		
		

		//the variable with distance info echoDistance[deviceNum] for example echoDistance[0];

		ModePicker();
    19dc:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ModePicker>
    19e0:	e7 cf       	rjmp	.-50     	; 0x19b0 <main+0x32>

000019e2 <PWM_digPin9_init>:
}

// - - - DIGITAL PIN 9 PWM (PB1-OC1A) - - - //
void PWM_digPin9_init(bool invert_pwm9)
{
	if (invert_pwm9 == 1)
    19e2:	88 23       	and	r24, r24
    19e4:	31 f0       	breq	.+12     	; 0x19f2 <PWM_digPin9_init+0x10>
	{
		TCCR2A |= (1 << WGM20) | (1 << WGM21) | (1 << COM2A1) | (1 << COM2A0)| (1 << COM2B1) | (1 << COM2B0);
    19e6:	e0 eb       	ldi	r30, 0xB0	; 176
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	83 6f       	ori	r24, 0xF3	; 243
    19ee:	80 83       	st	Z, r24
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <PWM_digPin9_init+0x1a>
	}

	else {
		TCCR2A |= (1 << WGM20) | (1 << WGM21) | (1 << COM2A1) | (1 << COM1B1);
    19f2:	e0 eb       	ldi	r30, 0xB0	; 176
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	83 6a       	ori	r24, 0xA3	; 163
    19fa:	80 83       	st	Z, r24
	}

	TCCR2B |= (1 << CS22);
    19fc:	e1 eb       	ldi	r30, 0xB1	; 177
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	84 60       	ori	r24, 0x04	; 4
    1a04:	80 83       	st	Z, r24
	DDRB |= (1 << PINB3);//PB3
    1a06:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= (1 << PIND3);//PD3
    1a08:	53 9a       	sbi	0x0a, 3	; 10
	DDRC |= (1 << PINC0) | (1 << PINC1);
    1a0a:	87 b1       	in	r24, 0x07	; 7
    1a0c:	83 60       	ori	r24, 0x03	; 3
    1a0e:	87 b9       	out	0x07, r24	; 7
    1a10:	08 95       	ret

00001a12 <PWM_digPin9_Output>:
}

void PWM_digPin9_Output(uint8_t duty)
{
	//0-255
	OCR2A = duty;
    1a12:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    1a16:	08 95       	ret

00001a18 <PWM_digPin10_Output>:
}
// - - - DIGITAL PIN 10 PWM (PB2-OC1B) - - - //
void PWM_digPin10_Output(uint8_t duty)
{
	//0-255
	OCR2B = duty;
    1a18:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    1a1c:	08 95       	ret

00001a1e <SetDriveForward>:
}


void SetDriveForward(){
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
    1a1e:	88 b1       	in	r24, 0x08	; 8
    1a20:	83 60       	ori	r24, 0x03	; 3
    1a22:	88 b9       	out	0x08, r24	; 8
    1a24:	08 95       	ret

00001a26 <initPWM>:

#define true 1
#define false 0

void initPWM(){
	PWM_digPin9_init(0);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <PWM_digPin9_init>
	SetDriveForward();
    1a2c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <SetDriveForward>
    1a30:	08 95       	ret

00001a32 <SetDriveBackward>:
void SetDriveForward(){
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
}

void SetDriveBackward(){
	PORTC &= ~((1 << PORTC0) | (1 << PORTC1));
    1a32:	88 b1       	in	r24, 0x08	; 8
    1a34:	8c 7f       	andi	r24, 0xFC	; 252
    1a36:	88 b9       	out	0x08, r24	; 8
    1a38:	08 95       	ret

00001a3a <u8g2_setup>:
unsigned int *pTime_min;

#define Time_cal 305 //ms calibration

int8_t * u8g2_setup(int *pSettings, int *pSpeed, int *pDirection, int *pDistance, int *angle_degree, int *spdospeed_screen)
{
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
	settingVal = pSettings;
    1a42:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <settingVal+0x1>
    1a46:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <settingVal>
	angle_degHold = angle_degree;
    1a4a:	10 93 6c 05 	sts	0x056C, r17	; 0x80056c <angle_degHold+0x1>
    1a4e:	00 93 6b 05 	sts	0x056B, r16	; 0x80056b <angle_degHold>
	speedHold = pSpeed;
    1a52:	70 93 f8 04 	sts	0x04F8, r23	; 0x8004f8 <speedHold+0x1>
    1a56:	60 93 f7 04 	sts	0x04F7, r22	; 0x8004f7 <speedHold>
	directionHold = pDirection;
    1a5a:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <directionHold+0x1>
    1a5e:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <directionHold>
	distanceHold = pDistance;
    1a62:	30 93 64 05 	sts	0x0564, r19	; 0x800564 <distanceHold+0x1>
    1a66:	20 93 63 05 	sts	0x0563, r18	; 0x800563 <distanceHold>
	SpeedoSpeedHold = spdospeed_screen;
    1a6a:	f0 92 68 05 	sts	0x0568, r15	; 0x800568 <SpeedoSpeedHold+0x1>
    1a6e:	e0 92 67 05 	sts	0x0567, r14	; 0x800567 <SpeedoSpeedHold>
	u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    1a72:	2f e5       	ldi	r18, 0x5F	; 95
    1a74:	32 e2       	ldi	r19, 0x22	; 34
    1a76:	44 e2       	ldi	r20, 0x24	; 36
    1a78:	52 e2       	ldi	r21, 0x22	; 34
    1a7a:	61 e8       	ldi	r22, 0x81	; 129
    1a7c:	72 e0       	ldi	r23, 0x02	; 2
    1a7e:	8d ef       	ldi	r24, 0xFD	; 253
    1a80:	94 e0       	ldi	r25, 0x04	; 4
    1a82:	0e 94 b3 1b 	call	0x3766	; 0x3766 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    1a86:	88 e7       	ldi	r24, 0x78	; 120
    1a88:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    1a8c:	8d ef       	ldi	r24, 0xFD	; 253
    1a8e:	94 e0       	ldi	r25, 0x04	; 4
    1a90:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	8d ef       	ldi	r24, 0xFD	; 253
    1a98:	94 e0       	ldi	r25, 0x04	; 4
    1a9a:	0e 94 67 24 	call	0x48ce	; 0x48ce <u8x8_SetPowerSave>
	
	screenDiv = screenDiv / screenDivholder;//for better resolution
    1a9e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <screenDivholder>
    1aa2:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <screenDivholder+0x1>
    1aa6:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <screenDivholder+0x2>
    1aaa:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <screenDivholder+0x3>
    1aae:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <screenDiv>
    1ab2:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <screenDiv+0x1>
    1ab6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <screenDiv+0x2>
    1aba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <screenDiv+0x3>
    1abe:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    1ac2:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <screenDiv>
    1ac6:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <screenDiv+0x1>
    1aca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <screenDiv+0x2>
    1ace:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <screenDiv+0x3>

	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);
    1ad2:	68 e6       	ldi	r22, 0x68	; 104
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	8d ef       	ldi	r24, 0xFD	; 253
    1ad8:	94 e0       	ldi	r25, 0x04	; 4
    1ada:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <u8g2_SetFont>
	textHeight = u8g2_GetMaxCharHeight(&u8g2);
    1ade:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <u8g2+0x50>
    1ae2:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <textHeight>
	maxCharWidth = u8g2_GetMaxCharWidth(&u8g2);
    1ae6:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <u8g2+0x4f>
    1aea:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <maxCharWidth>
	
	u8g2_SetFontDirection(&u8g2, 0);//0: 0deg 1:90deg 2: 180deg 3: 270deg
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	8d ef       	ldi	r24, 0xFD	; 253
    1af2:	94 e0       	ldi	r25, 0x04	; 4
    1af4:	0e 94 12 20 	call	0x4024	; 0x4024 <u8g2_SetFontDirection>
	
	selections[MENUPAGE] = menuChoices;
    1af8:	ec ea       	ldi	r30, 0xAC	; 172
    1afa:	f3 e0       	ldi	r31, 0x03	; 3
    1afc:	84 e0       	ldi	r24, 0x04	; 4
    1afe:	81 83       	std	Z+1, r24	; 0x01
	selections[SETTINGPAGE] = settings;
    1b00:	85 e0       	ldi	r24, 0x05	; 5
    1b02:	85 83       	std	Z+5, r24	; 0x05
	selectionsVis[MENUPAGE] = menuChoicesVis;
    1b04:	e1 ea       	ldi	r30, 0xA1	; 161
    1b06:	f3 e0       	ldi	r31, 0x03	; 3
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	91 83       	std	Z+1, r25	; 0x01
	selectionsVis[SETTINGPAGE] = settingsVis;
    1b0c:	85 83       	std	Z+5, r24	; 0x05
	return &currentPage;
}
    1b0e:	8d ec       	ldi	r24, 0xCD	; 205
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	08 95       	ret

00001b1c <sys_init>:

void sys_init(void)
{
	#if defined(__AVR__)
	/* select minimal prescaler (max system speed) */
	CLKPR = 0x80;
    1b1c:	e1 e6       	ldi	r30, 0x61	; 97
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1b24:	10 82       	st	Z, r1
    1b26:	08 95       	ret

00001b28 <timeInit>:
}

//Time________________________________________________________________________________________________________________________________________________

void timeInit(unsigned int *ptime_min, unsigned int *ptime_ms){
	pTime_min = ptime_min;
    1b28:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <pTime_min+0x1>
    1b2c:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <pTime_min>
	pTime_ms = ptime_ms;
    1b30:	70 93 fc 04 	sts	0x04FC, r23	; 0x8004fc <pTime_ms+0x1>
    1b34:	60 93 fb 04 	sts	0x04FB, r22	; 0x8004fb <pTime_ms>
	TCCR0B |= (1<<CS00) | (1<<CS01);
    1b38:	85 b5       	in	r24, 0x25	; 37
    1b3a:	83 60       	ori	r24, 0x03	; 3
    1b3c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0B);
    1b3e:	ee e6       	ldi	r30, 0x6E	; 110
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	84 60       	ori	r24, 0x04	; 4
    1b46:	80 83       	st	Z, r24
	OCR0B = 250;//to attain roughly 1 ms for every overflow. this roughness gets calibrated further in the code.
    1b48:	8a ef       	ldi	r24, 0xFA	; 250
    1b4a:	88 bd       	out	0x28, r24	; 40
    1b4c:	08 95       	ret

00001b4e <__vector_15>:
}



ISR(TIMER0_COMPB_vect){
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	8f 93       	push	r24
    1b62:	9f 93       	push	r25
    1b64:	ef 93       	push	r30
    1b66:	ff 93       	push	r31
	//this routine updates the time variables.
	static int rCount = 0;
	
	if (_Time_ms >= 60000){
    1b68:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <_Time_ms>
    1b6c:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <_Time_ms+0x1>
    1b70:	80 36       	cpi	r24, 0x60	; 96
    1b72:	2a ee       	ldi	r18, 0xEA	; 234
    1b74:	92 07       	cpc	r25, r18
    1b76:	b8 f0       	brcs	.+46     	; 0x1ba6 <__vector_15+0x58>
		_Time_ms = Time_cal-117;//Formula for the minutes. pTime_ms = (Time_cal-c): c = 0.615384615*Time_cal
    1b78:	8c eb       	ldi	r24, 0xBC	; 188
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <_Time_ms+0x1>
    1b80:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <_Time_ms>
		_Time_min++;
    1b84:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_Time_min>
    1b88:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <_Time_min+0x1>
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <_Time_min+0x1>
    1b92:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <_Time_min>
		rCount = 0;
    1b96:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <rCount.9441+0x1>
    1b9a:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <rCount.9441>
		reDrawRequiredTime = 1; //update the screen so the overlay shows the right minutes.
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <reDrawRequiredTime>
    1ba4:	18 c0       	rjmp	.+48     	; 0x1bd6 <__vector_15+0x88>
	}else if (rCount++ >= 13000)
    1ba6:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <rCount.9441>
    1baa:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <rCount.9441+0x1>
    1bae:	a9 01       	movw	r20, r18
    1bb0:	4f 5f       	subi	r20, 0xFF	; 255
    1bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb4:	50 93 9c 03 	sts	0x039C, r21	; 0x80039c <rCount.9441+0x1>
    1bb8:	40 93 9b 03 	sts	0x039B, r20	; 0x80039b <rCount.9441>
    1bbc:	28 3c       	cpi	r18, 0xC8	; 200
    1bbe:	32 43       	sbci	r19, 0x32	; 50
    1bc0:	54 f0       	brlt	.+20     	; 0x1bd6 <__vector_15+0x88>
	{
		_Time_ms = _Time_ms + Time_cal;
    1bc2:	8f 5c       	subi	r24, 0xCF	; 207
    1bc4:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc6:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <_Time_ms+0x1>
    1bca:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <_Time_ms>
		rCount = 0;
    1bce:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <rCount.9441+0x1>
    1bd2:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <rCount.9441>
	}

	_Time_ms++;
    1bd6:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <_Time_ms>
    1bda:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <_Time_ms+0x1>
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <_Time_ms+0x1>
    1be4:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <_Time_ms>
	
	*pTime_ms = _Time_ms;
    1be8:	e0 91 fb 04 	lds	r30, 0x04FB	; 0x8004fb <pTime_ms>
    1bec:	f0 91 fc 04 	lds	r31, 0x04FC	; 0x8004fc <pTime_ms+0x1>
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
	*pTime_min = _Time_min;
    1bf4:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <pTime_min>
    1bf8:	f0 91 fa 04 	lds	r31, 0x04FA	; 0x8004fa <pTime_min+0x1>
    1bfc:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_Time_min>
    1c00:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <_Time_min+0x1>
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
}
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	5f 91       	pop	r21
    1c12:	4f 91       	pop	r20
    1c14:	3f 91       	pop	r19
    1c16:	2f 91       	pop	r18
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <getTimeToChar>:

void getTimeToChar(char *s, int TemplateOption){
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <getTimeToChar+0xe>
    1c30:	1f 92       	push	r1
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	8c 01       	movw	r16, r24
    1c38:	7b 01       	movw	r14, r22
	//pTime_min and pTime_ms are global variables.
	strcpy(s, ""); // empty string s
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	10 82       	st	Z, r1
	char Buff[3] = {0, 0, 0};
    1c3e:	19 82       	std	Y+1, r1	; 0x01
    1c40:	1a 82       	std	Y+2, r1	; 0x02
    1c42:	1b 82       	std	Y+3, r1	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1c44:	4a e0       	ldi	r20, 0x0A	; 10
    1c46:	be 01       	movw	r22, r28
    1c48:	6f 5f       	subi	r22, 0xFF	; 255
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_Time_min>
    1c50:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <_Time_min+0x1>
    1c54:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	
	itoa(_Time_min, Buff, 10);
	
	if(_Time_min < 10){
    1c58:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_Time_min>
    1c5c:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <_Time_min+0x1>
    1c60:	0a 97       	sbiw	r24, 0x0a	; 10
    1c62:	48 f4       	brcc	.+18     	; 0x1c76 <getTimeToChar+0x54>
		strcat(s, "0");
    1c64:	f8 01       	movw	r30, r16
    1c66:	01 90       	ld	r0, Z+
    1c68:	00 20       	and	r0, r0
    1c6a:	e9 f7       	brne	.-6      	; 0x1c66 <getTimeToChar+0x44>
    1c6c:	31 97       	sbiw	r30, 0x01	; 1
    1c6e:	80 e3       	ldi	r24, 0x30	; 48
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
	}
	strcat(s, Buff);
    1c76:	be 01       	movw	r22, r28
    1c78:	6f 5f       	subi	r22, 0xFF	; 255
    1c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	0e 94 ee 29 	call	0x53dc	; 0x53dc <strcat>
    1c82:	20 91 6d 05 	lds	r18, 0x056D	; 0x80056d <_Time_ms>
    1c86:	30 91 6e 05 	lds	r19, 0x056E	; 0x80056e <_Time_ms+0x1>
    1c8a:	36 95       	lsr	r19
    1c8c:	27 95       	ror	r18
    1c8e:	36 95       	lsr	r19
    1c90:	27 95       	ror	r18
    1c92:	36 95       	lsr	r19
    1c94:	27 95       	ror	r18
    1c96:	a5 ec       	ldi	r26, 0xC5	; 197
    1c98:	b0 e2       	ldi	r27, 0x20	; 32
    1c9a:	0e 94 cd 29 	call	0x539a	; 0x539a <__umulhisi3>
    1c9e:	4a e0       	ldi	r20, 0x0A	; 10
    1ca0:	be 01       	movw	r22, r28
    1ca2:	6f 5f       	subi	r22, 0xFF	; 255
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	92 95       	swap	r25
    1ca8:	82 95       	swap	r24
    1caa:	8f 70       	andi	r24, 0x0F	; 15
    1cac:	89 27       	eor	r24, r25
    1cae:	9f 70       	andi	r25, 0x0F	; 15
    1cb0:	89 27       	eor	r24, r25
    1cb2:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	
	itoa((_Time_ms/1000), Buff, 10);
	strcat(s, ":");
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	01 90       	ld	r0, Z+
    1cba:	00 20       	and	r0, r0
    1cbc:	e9 f7       	brne	.-6      	; 0x1cb8 <getTimeToChar+0x96>
    1cbe:	31 97       	sbiw	r30, 0x01	; 1
    1cc0:	8a e3       	ldi	r24, 0x3A	; 58
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
	
	switch (TemplateOption){
    1cc8:	ea 94       	dec	r14
    1cca:	ef 28       	or	r14, r15
    1ccc:	b1 f4       	brne	.+44     	; 0x1cfa <getTimeToChar+0xd8>
		//only have the minutes:> 00:
		break;
		
		case 1:
		//include minutes and seconds:> 00:00
		if(_Time_ms/1000 < 10){
    1cce:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <_Time_ms>
    1cd2:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <_Time_ms+0x1>
    1cd6:	80 31       	cpi	r24, 0x10	; 16
    1cd8:	97 42       	sbci	r25, 0x27	; 39
    1cda:	48 f4       	brcc	.+18     	; 0x1cee <getTimeToChar+0xcc>
			strcat(s, "0");
    1cdc:	f8 01       	movw	r30, r16
    1cde:	01 90       	ld	r0, Z+
    1ce0:	00 20       	and	r0, r0
    1ce2:	e9 f7       	brne	.-6      	; 0x1cde <getTimeToChar+0xbc>
    1ce4:	31 97       	sbiw	r30, 0x01	; 1
    1ce6:	80 e3       	ldi	r24, 0x30	; 48
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
		}
		strcat(s, Buff);
    1cee:	be 01       	movw	r22, r28
    1cf0:	6f 5f       	subi	r22, 0xFF	; 255
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	c8 01       	movw	r24, r16
    1cf6:	0e 94 ee 29 	call	0x53dc	; 0x53dc <strcat>
		break;
	}
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	08 95       	ret

00001d0e <choiceAdder>:
		
		reDrawRequiredTime = 0;
	}
}

void choiceAdder(int8_t addValue){ //change the selection in the menu
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
	currentChoice[currentPage] += addValue;
    1d12:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <currentPage>
    1d16:	02 2e       	mov	r0, r18
    1d18:	00 0c       	add	r0, r0
    1d1a:	33 0b       	sbc	r19, r19
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	ee 53       	subi	r30, 0x3E	; 62
    1d20:	fc 4f       	sbci	r31, 0xFC	; 252
    1d22:	90 81       	ld	r25, Z
    1d24:	98 0f       	add	r25, r24
    1d26:	90 83       	st	Z, r25
	
	if(selectEnable == 1){
    1d28:	40 91 6f 05 	lds	r20, 0x056F	; 0x80056f <selectEnable>
    1d2c:	44 23       	and	r20, r20
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <choiceAdder+0x24>
    1d30:	5a c0       	rjmp	.+180    	; 0x1de6 <choiceAdder+0xd8>
		if (currentChoice[currentPage] > selections[currentPage]-1)
    1d32:	f9 01       	movw	r30, r18
    1d34:	e4 55       	subi	r30, 0x54	; 84
    1d36:	fc 4f       	sbci	r31, 0xFC	; 252
    1d38:	e0 81       	ld	r30, Z
    1d3a:	4e 2f       	mov	r20, r30
    1d3c:	0e 2e       	mov	r0, r30
    1d3e:	00 0c       	add	r0, r0
    1d40:	55 0b       	sbc	r21, r21
    1d42:	41 50       	subi	r20, 0x01	; 1
    1d44:	51 09       	sbc	r21, r1
    1d46:	69 2f       	mov	r22, r25
    1d48:	09 2e       	mov	r0, r25
    1d4a:	00 0c       	add	r0, r0
    1d4c:	77 0b       	sbc	r23, r23
    1d4e:	46 17       	cp	r20, r22
    1d50:	57 07       	cpc	r21, r23
    1d52:	4c f4       	brge	.+18     	; 0x1d66 <choiceAdder+0x58>
		{
			currentChoice[currentPage] = 0;
    1d54:	f9 01       	movw	r30, r18
    1d56:	ee 53       	subi	r30, 0x3E	; 62
    1d58:	fc 4f       	sbci	r31, 0xFC	; 252
    1d5a:	10 82       	st	Z, r1
			Scroll[currentPage] = 0;
    1d5c:	f9 01       	movw	r30, r18
    1d5e:	e9 54       	subi	r30, 0x49	; 73
    1d60:	fc 4f       	sbci	r31, 0xFC	; 252
    1d62:	10 82       	st	Z, r1
    1d64:	11 c0       	rjmp	.+34     	; 0x1d88 <choiceAdder+0x7a>
		}
		if (currentChoice[currentPage] < 0)
    1d66:	99 23       	and	r25, r25
    1d68:	7c f4       	brge	.+30     	; 0x1d88 <choiceAdder+0x7a>
		{
			currentChoice[currentPage] = selections[currentPage]-1;
    1d6a:	d9 01       	movw	r26, r18
    1d6c:	ae 53       	subi	r26, 0x3E	; 62
    1d6e:	bc 4f       	sbci	r27, 0xFC	; 252
    1d70:	9f ef       	ldi	r25, 0xFF	; 255
    1d72:	9e 0f       	add	r25, r30
    1d74:	9c 93       	st	X, r25
			Scroll[currentPage] = selectionsVis[currentPage] - selections[currentPage];
    1d76:	d9 01       	movw	r26, r18
    1d78:	a9 54       	subi	r26, 0x49	; 73
    1d7a:	bc 4f       	sbci	r27, 0xFC	; 252
    1d7c:	e9 01       	movw	r28, r18
    1d7e:	cf 55       	subi	r28, 0x5F	; 95
    1d80:	dc 4f       	sbci	r29, 0xFC	; 252
    1d82:	98 81       	ld	r25, Y
    1d84:	9e 1b       	sub	r25, r30
    1d86:	9c 93       	st	X, r25
		}
		if(currentChoice[currentPage] >= selectionsVis[currentPage] - Scroll[currentPage]){
    1d88:	f9 01       	movw	r30, r18
    1d8a:	ee 53       	subi	r30, 0x3E	; 62
    1d8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d8e:	60 81       	ld	r22, Z
    1d90:	06 2e       	mov	r0, r22
    1d92:	00 0c       	add	r0, r0
    1d94:	77 0b       	sbc	r23, r23
    1d96:	f9 01       	movw	r30, r18
    1d98:	e9 54       	subi	r30, 0x49	; 73
    1d9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d9c:	90 81       	ld	r25, Z
    1d9e:	f9 01       	movw	r30, r18
    1da0:	ef 55       	subi	r30, 0x5F	; 95
    1da2:	fc 4f       	sbci	r31, 0xFC	; 252
    1da4:	40 81       	ld	r20, Z
    1da6:	04 2e       	mov	r0, r20
    1da8:	00 0c       	add	r0, r0
    1daa:	55 0b       	sbc	r21, r21
    1dac:	49 1b       	sub	r20, r25
    1dae:	51 09       	sbc	r21, r1
    1db0:	97 fd       	sbrc	r25, 7
    1db2:	53 95       	inc	r21
    1db4:	64 17       	cp	r22, r20
    1db6:	75 07       	cpc	r23, r21
    1db8:	2c f0       	brlt	.+10     	; 0x1dc4 <choiceAdder+0xb6>
			Scroll[currentPage] += -addValue;
    1dba:	f9 01       	movw	r30, r18
    1dbc:	e9 54       	subi	r30, 0x49	; 73
    1dbe:	fc 4f       	sbci	r31, 0xFC	; 252
    1dc0:	98 1b       	sub	r25, r24
    1dc2:	90 83       	st	Z, r25
		}
		if (currentChoice[currentPage] < -Scroll[currentPage]){
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	e9 54       	subi	r30, 0x49	; 73
    1dc8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dca:	90 81       	ld	r25, Z
    1dcc:	e9 2f       	mov	r30, r25
    1dce:	ff 27       	eor	r31, r31
    1dd0:	e1 95       	neg	r30
    1dd2:	0c f4       	brge	.+2      	; 0x1dd6 <choiceAdder+0xc8>
    1dd4:	f0 95       	com	r31
    1dd6:	6e 17       	cp	r22, r30
    1dd8:	7f 07       	cpc	r23, r31
    1dda:	2c f4       	brge	.+10     	; 0x1de6 <choiceAdder+0xd8>
			Scroll[currentPage] += -addValue;
    1ddc:	f9 01       	movw	r30, r18
    1dde:	e9 54       	subi	r30, 0x49	; 73
    1de0:	fc 4f       	sbci	r31, 0xFC	; 252
    1de2:	98 1b       	sub	r25, r24
    1de4:	90 83       	st	Z, r25
		}
	}
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <pageHistory>:
int8_t pageHistory(_Bool GetPrevpage, int pageNum){
	#define historyBuff 4
	static short history[historyBuff];//initialize first page in case you don't use the start up screen.
	static short i = -1;
	
	if (!GetPrevpage)
    1dec:	81 11       	cpse	r24, r1
    1dee:	15 c0       	rjmp	.+42     	; 0x1e1a <pageHistory+0x2e>
	{
		if (i < historyBuff-1){
    1df0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i.9466>
    1df4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <i.9466+0x1>
    1df8:	83 30       	cpi	r24, 0x03	; 3
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	44 f5       	brge	.+80     	; 0x1e4e <pageHistory+0x62>
			history[++i] = pageNum;
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <i.9466+0x1>
    1e04:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i.9466>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	ed 56       	subi	r30, 0x6D	; 109
    1e10:	fc 4f       	sbci	r31, 0xFC	; 252
    1e12:	71 83       	std	Z+1, r23	; 0x01
    1e14:	60 83       	st	Z, r22
		}
		return -1;
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	08 95       	ret
		}else{
		
		if (i <= 0)
    1e1a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i.9466>
    1e1e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <i.9466+0x1>
    1e22:	18 16       	cp	r1, r24
    1e24:	19 06       	cpc	r1, r25
    1e26:	3c f0       	brlt	.+14     	; 0x1e36 <pageHistory+0x4a>
		{
			return history[i];
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	ed 56       	subi	r30, 0x6D	; 109
    1e30:	fc 4f       	sbci	r31, 0xFC	; 252
    1e32:	80 81       	ld	r24, Z
    1e34:	08 95       	ret
			}else{
			return history[--i];
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <i.9466+0x1>
    1e3c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i.9466>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	fc 01       	movw	r30, r24
    1e46:	ed 56       	subi	r30, 0x6D	; 109
    1e48:	fc 4f       	sbci	r31, 0xFC	; 252
    1e4a:	80 81       	ld	r24, Z
    1e4c:	08 95       	ret
	if (!GetPrevpage)
	{
		if (i < historyBuff-1){
			history[++i] = pageNum;
		}
		return -1;
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
			return history[i];
			}else{
			return history[--i];
		}
	}
}
    1e50:	08 95       	ret

00001e52 <pageSel>:
}

void pageSel(void){
	//code for managing the pageNumbers
	#define firstPage 2
	if (selectEnable){
    1e52:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <selectEnable>
    1e56:	88 23       	and	r24, r24
    1e58:	f9 f0       	breq	.+62     	; 0x1e98 <pageSel+0x46>
		if (currentPage == MENUPAGE){
    1e5a:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <currentPage>
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	31 f4       	brne	.+12     	; 0x1e6e <pageSel+0x1c>
			currentPage = currentChoice[MENUPAGE] + firstPage; //increment with two because the menu choice pages start at 2
    1e62:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <currentChoice+0x1>
    1e66:	8e 5f       	subi	r24, 0xFE	; 254
    1e68:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <currentPage>
    1e6c:	0d c0       	rjmp	.+26     	; 0x1e88 <pageSel+0x36>
			}else if(currentPage == 0){
    1e6e:	81 11       	cpse	r24, r1
    1e70:	04 c0       	rjmp	.+8      	; 0x1e7a <pageSel+0x28>
			currentPage = MENUPAGE;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <currentPage>
    1e78:	07 c0       	rjmp	.+14     	; 0x1e88 <pageSel+0x36>
			}else{
			if(currentPage == 5){
    1e7a:	85 30       	cpi	r24, 0x05	; 5
    1e7c:	29 f4       	brne	.+10     	; 0x1e88 <pageSel+0x36>
				currentPage = currentChoice[5]+ 1 + 5;
    1e7e:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <currentChoice+0x5>
    1e82:	8a 5f       	subi	r24, 0xFA	; 250
    1e84:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <currentPage>
			}
			
		}
		pageHistory(0, currentPage);//update page history
    1e88:	60 91 cd 03 	lds	r22, 0x03CD	; 0x8003cd <currentPage>
    1e8c:	06 2e       	mov	r0, r22
    1e8e:	00 0c       	add	r0, r0
    1e90:	77 0b       	sbc	r23, r23
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <pageHistory>
    1e98:	08 95       	ret

00001e9a <but_init>:
}*/
/*changed to interrupts.c^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/


void but_init(void){
	BUTTON_REG &= ~((1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK));     // set pinD 4 5 6 and 7 as an input
    1e9a:	8a b1       	in	r24, 0x0a	; 10
    1e9c:	8f 70       	andi	r24, 0x0F	; 15
    1e9e:	8a b9       	out	0x0a, r24	; 10
	// is now an input
	BUTTON_PORT |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);    // turn On the Pull-up on all those pins
    1ea0:	8b b1       	in	r24, 0x0b	; 11
    1ea2:	80 6f       	ori	r24, 0xF0	; 240
    1ea4:	8b b9       	out	0x0b, r24	; 11
	// is now an input with pull-up enabled

	if (BUTTON_PORT == PORTB){
    1ea6:	9b b1       	in	r25, 0x0b	; 11
    1ea8:	85 b1       	in	r24, 0x05	; 5
    1eaa:	98 13       	cpse	r25, r24
    1eac:	0b c0       	rjmp	.+22     	; 0x1ec4 <but_init+0x2a>
		//interrupt setup
		PCICR |= (1<<PCIE0);
    1eae:	e8 e6       	ldi	r30, 0x68	; 104
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	81 60       	ori	r24, 0x01	; 1
    1eb6:	80 83       	st	Z, r24
		PCMSK0 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1eb8:	eb e6       	ldi	r30, 0x6B	; 107
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	80 6f       	ori	r24, 0xF0	; 240
    1ec0:	80 83       	st	Z, r24
    1ec2:	1d c0       	rjmp	.+58     	; 0x1efe <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTC){
    1ec4:	9b b1       	in	r25, 0x0b	; 11
    1ec6:	88 b1       	in	r24, 0x08	; 8
    1ec8:	98 13       	cpse	r25, r24
    1eca:	0b c0       	rjmp	.+22     	; 0x1ee2 <but_init+0x48>
		//interrupt setup
		PCICR |= (1<<PCIE1);
    1ecc:	e8 e6       	ldi	r30, 0x68	; 104
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	82 60       	ori	r24, 0x02	; 2
    1ed4:	80 83       	st	Z, r24
		PCMSK1 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1ed6:	ec e6       	ldi	r30, 0x6C	; 108
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 6f       	ori	r24, 0xF0	; 240
    1ede:	80 83       	st	Z, r24
    1ee0:	0e c0       	rjmp	.+28     	; 0x1efe <but_init+0x64>
		
		}else if (BUTTON_PORT == PORTD){
    1ee2:	9b b1       	in	r25, 0x0b	; 11
    1ee4:	8b b1       	in	r24, 0x0b	; 11
    1ee6:	98 13       	cpse	r25, r24
    1ee8:	0a c0       	rjmp	.+20     	; 0x1efe <but_init+0x64>
		//interrupt setup
		PCICR |= (1<<PCIE2);
    1eea:	e8 e6       	ldi	r30, 0x68	; 104
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	84 60       	ori	r24, 0x04	; 4
    1ef2:	80 83       	st	Z, r24
		PCMSK2 |= (1 << DOWN)|(1 << UP)|(1 << SELECT)|(1 << BACK);//enable the pin change interrupts on pinD 4,5,6,7
    1ef4:	ed e6       	ldi	r30, 0x6D	; 109
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	80 6f       	ori	r24, 0xF0	; 240
    1efc:	80 83       	st	Z, r24
    1efe:	2f ef       	ldi	r18, 0xFF	; 255
    1f00:	83 ec       	ldi	r24, 0xC3	; 195
    1f02:	99 e0       	ldi	r25, 0x09	; 9
    1f04:	21 50       	subi	r18, 0x01	; 1
    1f06:	80 40       	sbci	r24, 0x00	; 0
    1f08:	90 40       	sbci	r25, 0x00	; 0
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <but_init+0x6a>
    1f0c:	00 c0       	rjmp	.+0      	; 0x1f0e <but_init+0x74>
    1f0e:	00 00       	nop
    1f10:	08 95       	ret

00001f12 <updateButtons>:

	_delay_ms(200);//to prevent accidental interrupt triggering/ dirty fix
}

void updateButtons(void){
	switch (keyPressed)
    1f12:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <keyPressed>
    1f16:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <keyPressed+0x1>
    1f1a:	85 30       	cpi	r24, 0x05	; 5
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	19 f1       	breq	.+70     	; 0x1f66 <updateButtons+0x54>
    1f20:	1c f4       	brge	.+6      	; 0x1f28 <updateButtons+0x16>
    1f22:	04 97       	sbiw	r24, 0x04	; 4
    1f24:	59 f1       	breq	.+86     	; 0x1f7c <updateButtons+0x6a>
    1f26:	08 95       	ret
    1f28:	86 30       	cpi	r24, 0x06	; 6
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <updateButtons+0x22>
    1f2e:	07 97       	sbiw	r24, 0x07	; 7
    1f30:	81 f0       	breq	.+32     	; 0x1f52 <updateButtons+0x40>
    1f32:	08 95       	ret
	{
		case BACK:
		currentPage = pageHistory(1, 0);
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <pageHistory>
    1f3e:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <currentPage>
		reDrawRequired = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;//reset key pressed
    1f48:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <keyPressed+0x1>
    1f4c:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <keyPressed>
		break;
    1f50:	08 95       	ret
		
		case SELECT:
		pageSel();
    1f52:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <pageSel>
		reDrawRequired = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;
    1f5c:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <keyPressed+0x1>
    1f60:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <keyPressed>
		break;
    1f64:	08 95       	ret
		
		case UP:
		choiceAdder(-1);
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
    1f68:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <choiceAdder>
		reDrawRequired = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;
    1f72:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <keyPressed+0x1>
    1f76:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <keyPressed>
		break;
    1f7a:	08 95       	ret
		
		case DOWN:
		choiceAdder(+1);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <choiceAdder>
		reDrawRequired = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		keyPressed = 0;
    1f88:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <keyPressed+0x1>
    1f8c:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <keyPressed>
    1f90:	08 95       	ret

00001f92 <MenuStyle0>:
}


//pages_______________________________________________________________________________________________________________________________________________

void MenuStyle0(void){
    1f92:	2f 92       	push	r2
    1f94:	3f 92       	push	r3
    1f96:	4f 92       	push	r4
    1f98:	5f 92       	push	r5
    1f9a:	6f 92       	push	r6
    1f9c:	7f 92       	push	r7
    1f9e:	8f 92       	push	r8
    1fa0:	9f 92       	push	r9
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	0f 93       	push	r16
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <MenuStyle0+0x22>
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <MenuStyle0+0x24>
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
	//int yStat = (y+(height/2)+3);
	selectEnable = 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <selectEnable>
    1fc0:	0f 2e       	mov	r0, r31
    1fc2:	f1 e2       	ldi	r31, 0x21	; 33
    1fc4:	cf 2e       	mov	r12, r31
    1fc6:	f1 e0       	ldi	r31, 0x01	; 1
    1fc8:	df 2e       	mov	r13, r31
    1fca:	f0 2d       	mov	r31, r0
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    1fcc:	1c 82       	std	Y+4, r1	; 0x04
    1fce:	1b 82       	std	Y+3, r1	; 0x03
		if(i == currentChoice[currentPage]){
    1fd0:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <currentPage>
    1fd4:	0e 2e       	mov	r0, r30
    1fd6:	00 0c       	add	r0, r0
    1fd8:	ff 0b       	sbc	r31, r31
    1fda:	ee 53       	subi	r30, 0x3E	; 62
    1fdc:	fc 4f       	sbci	r31, 0xFC	; 252
    1fde:	80 81       	ld	r24, Z
    1fe0:	08 2e       	mov	r0, r24
    1fe2:	00 0c       	add	r0, r0
    1fe4:	99 0b       	sbc	r25, r25
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	82 17       	cp	r24, r18
    1fec:	93 07       	cpc	r25, r19
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <MenuStyle0+0x60>
    1ff0:	9d c0       	rjmp	.+314    	; 0x212c <MenuStyle0+0x19a>
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
			height = screenDiv - Margin;
    1ff2:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    1ff6:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    1ffa:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    1ffe:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
			
			x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    2002:	b9 01       	movw	r22, r18
    2004:	33 0f       	add	r19, r19
    2006:	88 0b       	sbc	r24, r24
    2008:	99 0b       	sbc	r25, r25
    200a:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    200e:	a3 01       	movw	r20, r6
    2010:	92 01       	movw	r18, r4
    2012:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e1       	ldi	r20, 0x10	; 16
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    2022:	4b 01       	movw	r8, r22
    2024:	5c 01       	movw	r10, r24
    2026:	60 91 b8 03 	lds	r22, 0x03B8	; 0x8003b8 <Scroll+0x1>
    202a:	06 2e       	mov	r0, r22
    202c:	00 0c       	add	r0, r0
    202e:	77 0b       	sbc	r23, r23
    2030:	88 0b       	sbc	r24, r24
    2032:	99 0b       	sbc	r25, r25
    2034:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    2038:	a3 01       	movw	r20, r6
    203a:	92 01       	movw	r18, r4
    203c:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    2040:	9b 01       	movw	r18, r22
    2042:	ac 01       	movw	r20, r24
    2044:	c5 01       	movw	r24, r10
    2046:	b4 01       	movw	r22, r8
    2048:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    204c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    2050:	4b 01       	movw	r8, r22
    2052:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    2054:	69 30       	cpi	r22, 0x09	; 9
    2056:	71 05       	cpc	r23, r1
    2058:	0c f4       	brge	.+2      	; 0x205c <MenuStyle0+0xca>
    205a:	d6 c0       	rjmp	.+428    	; 0x2208 <MenuStyle0+0x276>
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
		if(i == currentChoice[currentPage]){
			//x and the y of the boxes
			width = ((currentFrame+1) *(widthCurChoice - widthChoice))/framesNum+widthChoice;
    205c:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <currentFrame>
    2060:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <currentFrame+0x1>
    2064:	2f 5f       	subi	r18, 0xFF	; 255
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	00 24       	eor	r0, r0
    206a:	36 95       	lsr	r19
    206c:	27 95       	ror	r18
    206e:	07 94       	ror	r0
    2070:	36 95       	lsr	r19
    2072:	27 95       	ror	r18
    2074:	07 94       	ror	r0
    2076:	32 2f       	mov	r19, r18
    2078:	20 2d       	mov	r18, r0
    207a:	ab ea       	ldi	r26, 0xAB	; 171
    207c:	ba ea       	ldi	r27, 0xAA	; 170
    207e:	0e 94 cd 29 	call	0x539a	; 0x539a <__umulhisi3>
    2082:	96 95       	lsr	r25
    2084:	87 95       	ror	r24
    2086:	1c 01       	movw	r2, r24
    2088:	ef e3       	ldi	r30, 0x3F	; 63
    208a:	2e 0e       	add	r2, r30
    208c:	31 1c       	adc	r3, r1
			height = screenDiv - Margin;
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e4       	ldi	r21, 0x40	; 64
    2096:	c3 01       	movw	r24, r6
    2098:	b2 01       	movw	r22, r4
    209a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__subsf3>
    209e:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    20a2:	56 2e       	mov	r5, r22
    20a4:	47 2e       	mov	r4, r23
			
			x = (screenWidth/2) - width / 2;
    20a6:	31 01       	movw	r6, r2
    20a8:	33 20       	and	r3, r3
    20aa:	1c f4       	brge	.+6      	; 0x20b2 <MenuStyle0+0x120>
    20ac:	ff ef       	ldi	r31, 0xFF	; 255
    20ae:	6f 1a       	sub	r6, r31
    20b0:	7f 0a       	sbc	r7, r31
    20b2:	75 94       	asr	r7
    20b4:	67 94       	ror	r6
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	8d ef       	ldi	r24, 0xFD	; 253
    20ba:	94 e0       	ldi	r25, 0x04	; 4
    20bc:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    20c0:	20 e4       	ldi	r18, 0x40	; 64
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	26 19       	sub	r18, r6
    20c6:	37 09       	sbc	r19, r7
    20c8:	3a 83       	std	Y+2, r19	; 0x02
    20ca:	29 83       	std	Y+1, r18	; 0x01
    20cc:	0f 2e       	mov	r0, r31
    20ce:	f3 e0       	ldi	r31, 0x03	; 3
    20d0:	ef 2e       	mov	r14, r31
    20d2:	f0 2d       	mov	r31, r0
    20d4:	05 2d       	mov	r16, r5
    20d6:	22 2d       	mov	r18, r2
    20d8:	48 2d       	mov	r20, r8
    20da:	69 81       	ldd	r22, Y+1	; 0x01
    20dc:	8d ef       	ldi	r24, 0xFD	; 253
    20de:	94 e0       	ldi	r25, 0x04	; 4
    20e0:	0e 94 bc 18 	call	0x3178	; 0x3178 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	8d ef       	ldi	r24, 0xFD	; 253
    20e8:	94 e0       	ldi	r25, 0x04	; 4
    20ea:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2 , y+(height/2)+3, menuStrings[i]);
    20ee:	45 2d       	mov	r20, r5
    20f0:	54 2d       	mov	r21, r4
    20f2:	55 23       	and	r21, r21
    20f4:	14 f4       	brge	.+4      	; 0x20fa <MenuStyle0+0x168>
    20f6:	4f 5f       	subi	r20, 0xFF	; 255
    20f8:	5f 4f       	sbci	r21, 0xFF	; 255
    20fa:	55 95       	asr	r21
    20fc:	47 95       	ror	r20
    20fe:	4d 5f       	subi	r20, 0xFD	; 253
    2100:	74 2e       	mov	r7, r20
    2102:	78 0c       	add	r7, r8
    2104:	39 81       	ldd	r19, Y+1	; 0x01
    2106:	63 0e       	add	r6, r19
    2108:	f6 01       	movw	r30, r12
    210a:	40 80       	ld	r4, Z
    210c:	51 80       	ldd	r5, Z+1	; 0x01
    210e:	b2 01       	movw	r22, r4
    2110:	8d ef       	ldi	r24, 0xFD	; 253
    2112:	94 e0       	ldi	r25, 0x04	; 4
    2114:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2118:	86 95       	lsr	r24
    211a:	66 2d       	mov	r22, r6
    211c:	68 1b       	sub	r22, r24
    211e:	92 01       	movw	r18, r4
    2120:	47 2d       	mov	r20, r7
    2122:	8d ef       	ldi	r24, 0xFD	; 253
    2124:	94 e0       	ldi	r25, 0x04	; 4
    2126:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
    212a:	6e c0       	rjmp	.+220    	; 0x2208 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    212c:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    2130:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    2134:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    2138:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    213c:	2b 81       	ldd	r18, Y+3	; 0x03
    213e:	3c 81       	ldd	r19, Y+4	; 0x04
    2140:	b9 01       	movw	r22, r18
    2142:	33 0f       	add	r19, r19
    2144:	88 0b       	sbc	r24, r24
    2146:	99 0b       	sbc	r25, r25
    2148:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    214c:	a3 01       	movw	r20, r6
    214e:	92 01       	movw	r18, r4
    2150:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e1       	ldi	r20, 0x10	; 16
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    2160:	4b 01       	movw	r8, r22
    2162:	5c 01       	movw	r10, r24
    2164:	60 91 b8 03 	lds	r22, 0x03B8	; 0x8003b8 <Scroll+0x1>
    2168:	06 2e       	mov	r0, r22
    216a:	00 0c       	add	r0, r0
    216c:	77 0b       	sbc	r23, r23
    216e:	88 0b       	sbc	r24, r24
    2170:	99 0b       	sbc	r25, r25
    2172:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    2176:	a3 01       	movw	r20, r6
    2178:	92 01       	movw	r18, r4
    217a:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    217e:	9b 01       	movw	r18, r22
    2180:	ac 01       	movw	r20, r24
    2182:	c5 01       	movw	r24, r10
    2184:	b4 01       	movw	r22, r8
    2186:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    218a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    218e:	4b 01       	movw	r8, r22
    2190:	5c 01       	movw	r10, r24
			if (y >= TopMargin)
    2192:	69 30       	cpi	r22, 0x09	; 9
    2194:	71 05       	cpc	r23, r1
    2196:	c4 f1       	brlt	.+112    	; 0x2208 <MenuStyle0+0x276>
			
			}else{
			//x and the y of the boxes
			
			width = widthChoice;
			height = screenDiv - Margin;
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	50 e4       	ldi	r21, 0x40	; 64
    21a0:	c3 01       	movw	r24, r6
    21a2:	b2 01       	movw	r22, r4
    21a4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__subsf3>
    21a8:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    21ac:	76 2e       	mov	r7, r22
    21ae:	67 2e       	mov	r6, r23
			x = (screenWidth/2)-widthChoice/2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
			if (y >= TopMargin)
			{
				//u8g2_SetDefaultForegroundColor(&u8g2);
				u8g2_SetDrawColor(&u8g2, 1);
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	8d ef       	ldi	r24, 0xFD	; 253
    21b4:	94 e0       	ldi	r25, 0x04	; 4
    21b6:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    21ba:	0f 2e       	mov	r0, r31
    21bc:	f3 e0       	ldi	r31, 0x03	; 3
    21be:	ef 2e       	mov	r14, r31
    21c0:	f0 2d       	mov	r31, r0
    21c2:	07 2d       	mov	r16, r7
    21c4:	20 e4       	ldi	r18, 0x40	; 64
    21c6:	48 2d       	mov	r20, r8
    21c8:	60 e2       	ldi	r22, 0x20	; 32
    21ca:	8d ef       	ldi	r24, 0xFD	; 253
    21cc:	94 e0       	ldi	r25, 0x04	; 4
    21ce:	0e 94 30 19 	call	0x3260	; 0x3260 <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+(height/2)+3, menuStrings[i]);
    21d2:	87 2d       	mov	r24, r7
    21d4:	96 2d       	mov	r25, r6
    21d6:	99 23       	and	r25, r25
    21d8:	0c f4       	brge	.+2      	; 0x21dc <MenuStyle0+0x24a>
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	95 95       	asr	r25
    21de:	87 95       	ror	r24
    21e0:	8d 5f       	subi	r24, 0xFD	; 253
    21e2:	78 2e       	mov	r7, r24
    21e4:	78 0c       	add	r7, r8
    21e6:	f6 01       	movw	r30, r12
    21e8:	40 80       	ld	r4, Z
    21ea:	51 80       	ldd	r5, Z+1	; 0x01
    21ec:	b2 01       	movw	r22, r4
    21ee:	8d ef       	ldi	r24, 0xFD	; 253
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    21f6:	86 95       	lsr	r24
    21f8:	60 e4       	ldi	r22, 0x40	; 64
    21fa:	68 1b       	sub	r22, r24
    21fc:	92 01       	movw	r18, r4
    21fe:	47 2d       	mov	r20, r7
    2200:	8d ef       	ldi	r24, 0xFD	; 253
    2202:	94 e0       	ldi	r25, 0x04	; 4
    2204:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	int width;
	int x;
	int y;
	
	// menu
	for (int i = 0; i < menuChoices+1; i++){
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	3c 81       	ldd	r19, Y+4	; 0x04
    220c:	2f 5f       	subi	r18, 0xFF	; 255
    220e:	3f 4f       	sbci	r19, 0xFF	; 255
    2210:	3c 83       	std	Y+4, r19	; 0x04
    2212:	2b 83       	std	Y+3, r18	; 0x03
    2214:	32 e0       	ldi	r19, 0x02	; 2
    2216:	c3 0e       	add	r12, r19
    2218:	d1 1c       	adc	r13, r1
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	05 97       	sbiw	r24, 0x05	; 5
    2220:	09 f0       	breq	.+2      	; 0x2224 <MenuStyle0+0x292>
    2222:	d6 ce       	rjmp	.-596    	; 0x1fd0 <MenuStyle0+0x3e>
			}
		}
	}
	
	//stop drawing when the animation is done
	if (currentFrame++ >= framesNum)
    2224:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <currentFrame>
    2228:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <currentFrame+0x1>
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	91 05       	cpc	r25, r1
    2230:	30 f4       	brcc	.+12     	; 0x223e <MenuStyle0+0x2ac>
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <currentFrame+0x1>
    2238:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <currentFrame>
    223c:	06 c0       	rjmp	.+12     	; 0x224a <MenuStyle0+0x2b8>
	{
		currentFrame = 0;
    223e:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <currentFrame+0x1>
    2242:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <currentFrame>
		reDrawRequired = 0;
    2246:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
	}
	

}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	0f 91       	pop	r16
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	bf 90       	pop	r11
    2260:	af 90       	pop	r10
    2262:	9f 90       	pop	r9
    2264:	8f 90       	pop	r8
    2266:	7f 90       	pop	r7
    2268:	6f 90       	pop	r6
    226a:	5f 90       	pop	r5
    226c:	4f 90       	pop	r4
    226e:	3f 90       	pop	r3
    2270:	2f 90       	pop	r2
    2272:	08 95       	ret

00002274 <MenuStyle1>:

void MenuStyle1(void){
    2274:	2f 92       	push	r2
    2276:	3f 92       	push	r3
    2278:	4f 92       	push	r4
    227a:	5f 92       	push	r5
    227c:	6f 92       	push	r6
    227e:	7f 92       	push	r7
    2280:	8f 92       	push	r8
    2282:	9f 92       	push	r9
    2284:	af 92       	push	r10
    2286:	bf 92       	push	r11
    2288:	cf 92       	push	r12
    228a:	df 92       	push	r13
    228c:	ef 92       	push	r14
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	00 d0       	rcall	.+0      	; 0x2298 <MenuStyle1+0x24>
    2298:	00 d0       	rcall	.+0      	; 0x229a <MenuStyle1+0x26>
    229a:	00 d0       	rcall	.+0      	; 0x229c <MenuStyle1+0x28>
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <selectEnable>
	int width = screenWidth;
	int height = screenDiv;
    22a6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <screenDiv>
    22aa:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <screenDiv+0x1>
    22ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <screenDiv+0x2>
    22b2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <screenDiv+0x3>
    22b6:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
	
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
    22ba:	4b 01       	movw	r8, r22
    22bc:	77 23       	and	r23, r23
    22be:	1c f4       	brge	.+6      	; 0x22c6 <MenuStyle1+0x52>
    22c0:	2f ef       	ldi	r18, 0xFF	; 255
    22c2:	82 1a       	sub	r8, r18
    22c4:	92 0a       	sbc	r9, r18
    22c6:	95 94       	asr	r9
    22c8:	87 94       	ror	r8
    22ca:	33 e0       	ldi	r19, 0x03	; 3
    22cc:	83 0e       	add	r8, r19
    22ce:	91 1c       	adc	r9, r1
	height = height - Margin;
    22d0:	1b 01       	movw	r2, r22
    22d2:	e2 e0       	ldi	r30, 0x02	; 2
    22d4:	2e 1a       	sub	r2, r30
    22d6:	31 08       	sbc	r3, r1
    22d8:	0f 2e       	mov	r0, r31
    22da:	f1 e2       	ldi	r31, 0x21	; 33
    22dc:	cf 2e       	mov	r12, r31
    22de:	f1 e0       	ldi	r31, 0x01	; 1
    22e0:	df 2e       	mov	r13, r31
    22e2:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    22e4:	1e 82       	std	Y+6, r1	; 0x06
    22e6:	1d 82       	std	Y+5, r1	; 0x05
				u8g2_SetDrawColor(&u8g2, 0);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    22e8:	0f 2e       	mov	r0, r31
    22ea:	f7 eb       	ldi	r31, 0xB7	; 183
    22ec:	af 2e       	mov	r10, r31
    22ee:	f3 e0       	ldi	r31, 0x03	; 3
    22f0:	bf 2e       	mov	r11, r31
    22f2:	f0 2d       	mov	r31, r0
			}*/
			if (y >= TopMargin)
			{
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    22f4:	10 e4       	ldi	r17, 0x40	; 64
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
		if(currentChoice[currentPage] == i){
    22f6:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <currentPage>
    22fa:	0e 2e       	mov	r0, r30
    22fc:	00 0c       	add	r0, r0
    22fe:	ff 0b       	sbc	r31, r31
    2300:	ee 53       	subi	r30, 0x3E	; 62
    2302:	fc 4f       	sbci	r31, 0xFC	; 252
    2304:	80 81       	ld	r24, Z
    2306:	08 2e       	mov	r0, r24
    2308:	00 0c       	add	r0, r0
    230a:	99 0b       	sbc	r25, r25
    230c:	2d 81       	ldd	r18, Y+5	; 0x05
    230e:	3e 81       	ldd	r19, Y+6	; 0x06
    2310:	82 17       	cp	r24, r18
    2312:	93 07       	cpc	r25, r19
    2314:	09 f0       	breq	.+2      	; 0x2318 <MenuStyle1+0xa4>
    2316:	62 c0       	rjmp	.+196    	; 0x23dc <MenuStyle1+0x168>
			//x and the y of the boxes
			//width = screenWidth;
			//height = screenDiv - Margin;
			
			// 				x = (screenWidth/2) - width / 2;
			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    2318:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    231c:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    2320:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    2324:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
    2328:	b9 01       	movw	r22, r18
    232a:	33 0f       	add	r19, r19
    232c:	88 0b       	sbc	r24, r24
    232e:	99 0b       	sbc	r25, r25
    2330:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    2334:	a3 01       	movw	r20, r6
    2336:	92 01       	movw	r18, r4
    2338:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e1       	ldi	r20, 0x10	; 16
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    2348:	69 83       	std	Y+1, r22	; 0x01
    234a:	7a 83       	std	Y+2, r23	; 0x02
    234c:	8b 83       	std	Y+3, r24	; 0x03
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	f5 01       	movw	r30, r10
    2352:	61 81       	ldd	r22, Z+1	; 0x01
    2354:	06 2e       	mov	r0, r22
    2356:	00 0c       	add	r0, r0
    2358:	77 0b       	sbc	r23, r23
    235a:	88 0b       	sbc	r24, r24
    235c:	99 0b       	sbc	r25, r25
    235e:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    2362:	a3 01       	movw	r20, r6
    2364:	92 01       	movw	r18, r4
    2366:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    236a:	9b 01       	movw	r18, r22
    236c:	ac 01       	movw	r20, r24
    236e:	69 81       	ldd	r22, Y+1	; 0x01
    2370:	7a 81       	ldd	r23, Y+2	; 0x02
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    237a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    237e:	2b 01       	movw	r4, r22
    2380:	3c 01       	movw	r6, r24
			/*	if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			
			if (y >= TopMargin)
    2382:	69 30       	cpi	r22, 0x09	; 9
    2384:	71 05       	cpc	r23, r1
    2386:	0c f4       	brge	.+2      	; 0x238a <MenuStyle1+0x116>
    2388:	86 c0       	rjmp	.+268    	; 0x2496 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    238a:	61 e0       	ldi	r22, 0x01	; 1
    238c:	8d ef       	ldi	r24, 0xFD	; 253
    238e:	94 e0       	ldi	r25, 0x04	; 4
    2390:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x, y, width, height, MenuBoxRounding);
    2394:	0f 2e       	mov	r0, r31
    2396:	f3 e0       	ldi	r31, 0x03	; 3
    2398:	ef 2e       	mov	r14, r31
    239a:	f0 2d       	mov	r31, r0
    239c:	02 2d       	mov	r16, r2
    239e:	20 e8       	ldi	r18, 0x80	; 128
    23a0:	44 2d       	mov	r20, r4
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	8d ef       	ldi	r24, 0xFD	; 253
    23a6:	94 e0       	ldi	r25, 0x04	; 4
    23a8:	0e 94 bc 18 	call	0x3178	; 0x3178 <u8g2_DrawRBox>

				u8g2_SetDrawColor(&u8g2, 0);
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	8d ef       	ldi	r24, 0xFD	; 253
    23b0:	94 e0       	ldi	r25, 0x04	; 4
    23b2:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    23b6:	48 0c       	add	r4, r8
    23b8:	f6 01       	movw	r30, r12
    23ba:	60 80       	ld	r6, Z
    23bc:	71 80       	ldd	r7, Z+1	; 0x01
    23be:	b3 01       	movw	r22, r6
    23c0:	8d ef       	ldi	r24, 0xFD	; 253
    23c2:	94 e0       	ldi	r25, 0x04	; 4
    23c4:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    23c8:	86 95       	lsr	r24
    23ca:	61 2f       	mov	r22, r17
    23cc:	68 1b       	sub	r22, r24
    23ce:	93 01       	movw	r18, r6
    23d0:	44 2d       	mov	r20, r4
    23d2:	8d ef       	ldi	r24, 0xFD	; 253
    23d4:	94 e0       	ldi	r25, 0x04	; 4
    23d6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
    23da:	5d c0       	rjmp	.+186    	; 0x2496 <MenuStyle1+0x222>
			}
			}else{

			y = i * screenDiv + TopMargin + (Scroll[MENUPAGE] * screenDiv);
    23dc:	40 90 12 01 	lds	r4, 0x0112	; 0x800112 <screenDiv>
    23e0:	50 90 13 01 	lds	r5, 0x0113	; 0x800113 <screenDiv+0x1>
    23e4:	60 90 14 01 	lds	r6, 0x0114	; 0x800114 <screenDiv+0x2>
    23e8:	70 90 15 01 	lds	r7, 0x0115	; 0x800115 <screenDiv+0x3>
    23ec:	2d 81       	ldd	r18, Y+5	; 0x05
    23ee:	3e 81       	ldd	r19, Y+6	; 0x06
    23f0:	b9 01       	movw	r22, r18
    23f2:	33 0f       	add	r19, r19
    23f4:	88 0b       	sbc	r24, r24
    23f6:	99 0b       	sbc	r25, r25
    23f8:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    23fc:	a3 01       	movw	r20, r6
    23fe:	92 01       	movw	r18, r4
    2400:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e1       	ldi	r20, 0x10	; 16
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    2410:	69 83       	std	Y+1, r22	; 0x01
    2412:	7a 83       	std	Y+2, r23	; 0x02
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	f5 01       	movw	r30, r10
    241a:	61 81       	ldd	r22, Z+1	; 0x01
    241c:	06 2e       	mov	r0, r22
    241e:	00 0c       	add	r0, r0
    2420:	77 0b       	sbc	r23, r23
    2422:	88 0b       	sbc	r24, r24
    2424:	99 0b       	sbc	r25, r25
    2426:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    242a:	a3 01       	movw	r20, r6
    242c:	92 01       	movw	r18, r4
    242e:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    2432:	9b 01       	movw	r18, r22
    2434:	ac 01       	movw	r20, r24
    2436:	69 81       	ldd	r22, Y+1	; 0x01
    2438:	7a 81       	ldd	r23, Y+2	; 0x02
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__addsf3>
    2442:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    2446:	2b 01       	movw	r4, r22
    2448:	3c 01       	movw	r6, r24
			/*
			if (Scroll[MENUPAGE] == -1){
			y -= 2;
			}*/
			if (y >= TopMargin)
    244a:	69 30       	cpi	r22, 0x09	; 9
    244c:	71 05       	cpc	r23, r1
    244e:	1c f1       	brlt	.+70     	; 0x2496 <MenuStyle1+0x222>
			{
				u8g2_SetDrawColor(&u8g2, 1);
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	8d ef       	ldi	r24, 0xFD	; 253
    2454:	94 e0       	ldi	r25, 0x04	; 4
    2456:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
    245a:	0f 2e       	mov	r0, r31
    245c:	f3 e0       	ldi	r31, 0x03	; 3
    245e:	ef 2e       	mov	r14, r31
    2460:	f0 2d       	mov	r31, r0
    2462:	02 2d       	mov	r16, r2
    2464:	20 e8       	ldi	r18, 0x80	; 128
    2466:	44 2d       	mov	r20, r4
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	8d ef       	ldi	r24, 0xFD	; 253
    246c:	94 e0       	ldi	r25, 0x04	; 4
    246e:	0e 94 30 19 	call	0x3260	; 0x3260 <u8g2_DrawRFrame>
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
    2472:	48 0c       	add	r4, r8
    2474:	f6 01       	movw	r30, r12
    2476:	60 80       	ld	r6, Z
    2478:	71 80       	ldd	r7, Z+1	; 0x01
    247a:	b3 01       	movw	r22, r6
    247c:	8d ef       	ldi	r24, 0xFD	; 253
    247e:	94 e0       	ldi	r25, 0x04	; 4
    2480:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2484:	86 95       	lsr	r24
    2486:	61 2f       	mov	r22, r17
    2488:	68 1b       	sub	r22, r24
    248a:	93 01       	movw	r18, r6
    248c:	44 2d       	mov	r20, r4
    248e:	8d ef       	ldi	r24, 0xFD	; 253
    2490:	94 e0       	ldi	r25, 0x04	; 4
    2492:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	int x = ((screenWidth/2) - width / 2);
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	
	for (int i = 0; i < menuChoices+1; i++){//do one extra to dirty fix lib error. make one menu extra outside scope.
    2496:	2d 81       	ldd	r18, Y+5	; 0x05
    2498:	3e 81       	ldd	r19, Y+6	; 0x06
    249a:	2f 5f       	subi	r18, 0xFF	; 255
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
    249e:	3e 83       	std	Y+6, r19	; 0x06
    24a0:	2d 83       	std	Y+5, r18	; 0x05
    24a2:	32 e0       	ldi	r19, 0x02	; 2
    24a4:	c3 0e       	add	r12, r19
    24a6:	d1 1c       	adc	r13, r1
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	05 97       	sbiw	r24, 0x05	; 5
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <MenuStyle1+0x23e>
    24b0:	22 cf       	rjmp	.-444    	; 0x22f6 <MenuStyle1+0x82>
				u8g2_DrawRFrame(&u8g2, x, y, width, height, MenuBoxRounding);
				u8g2_DrawStr(&u8g2, x + (width/2) - u8g2_GetStrWidth(&u8g2, menuStrings[i]) / 2, y+yStat, menuStrings[i]);
			}
		}
	}
	reDrawRequired = 0;
    24b2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
}
    24b6:	26 96       	adiw	r28, 0x06	; 6
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ef 90       	pop	r14
    24cc:	df 90       	pop	r13
    24ce:	cf 90       	pop	r12
    24d0:	bf 90       	pop	r11
    24d2:	af 90       	pop	r10
    24d4:	9f 90       	pop	r9
    24d6:	8f 90       	pop	r8
    24d8:	7f 90       	pop	r7
    24da:	6f 90       	pop	r6
    24dc:	5f 90       	pop	r5
    24de:	4f 90       	pop	r4
    24e0:	3f 90       	pop	r3
    24e2:	2f 90       	pop	r2
    24e4:	08 95       	ret

000024e6 <StartPage>:

void StartPage(void){
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	28 97       	sbiw	r28, 0x08	; 8
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 1;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <selectEnable>
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
    2506:	88 e0       	ldi	r24, 0x08	; 8
    2508:	ea e2       	ldi	r30, 0x2A	; 42
    250a:	f1 e0       	ldi	r31, 0x01	; 1
    250c:	de 01       	movw	r26, r28
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	01 90       	ld	r0, Z+
    2512:	0d 92       	st	X+, r0
    2514:	8a 95       	dec	r24
    2516:	e1 f7       	brne	.-8      	; 0x2510 <StartPage+0x2a>
    2518:	ce 01       	movw	r24, r28
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	7c 01       	movw	r14, r24
    251e:	11 e0       	ldi	r17, 0x01	; 1
	
	for (int i = 0; i < lineNum; i++)
	{
		u8g2_DrawStr(&u8g2, 0, textHeight * (i + 1), text[i]);
    2520:	f7 01       	movw	r30, r14
    2522:	21 91       	ld	r18, Z+
    2524:	31 91       	ld	r19, Z+
    2526:	7f 01       	movw	r14, r30
    2528:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    252c:	14 9f       	mul	r17, r20
    252e:	40 2d       	mov	r20, r0
    2530:	11 24       	eor	r1, r1
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	8d ef       	ldi	r24, 0xFD	; 253
    2536:	94 e0       	ldi	r25, 0x04	; 4
    2538:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
    253c:	1f 5f       	subi	r17, 0xFF	; 255
void StartPage(void){
	selectEnable = 1;
	#define lineNum 4
	char *text[lineNum] = {"SPECIAL THANKS TO :", "Bram , William, ", "Antonis, Corne, ", "Yasmine, Adil"};
	
	for (int i = 0; i < lineNum; i++)
    253e:	15 30       	cpi	r17, 0x05	; 5
    2540:	79 f7       	brne	.-34     	; 0x2520 <StartPage+0x3a>
	char *text2[2] = {
		"Press \"Select\"",
		" to continue!"
	};
	
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[0]) / 2, realScreenHeight-textHeight, text2[0]);
    2542:	10 e4       	ldi	r17, 0x40	; 64
    2544:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <textHeight>
    2548:	f1 2e       	mov	r15, r17
    254a:	f8 1a       	sub	r15, r24
    254c:	6c e3       	ldi	r22, 0x3C	; 60
    254e:	71 e0       	ldi	r23, 0x01	; 1
    2550:	8d ef       	ldi	r24, 0xFD	; 253
    2552:	94 e0       	ldi	r25, 0x04	; 4
    2554:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2558:	86 95       	lsr	r24
    255a:	61 2f       	mov	r22, r17
    255c:	68 1b       	sub	r22, r24
    255e:	2c e3       	ldi	r18, 0x3C	; 60
    2560:	31 e0       	ldi	r19, 0x01	; 1
    2562:	4f 2d       	mov	r20, r15
    2564:	8d ef       	ldi	r24, 0xFD	; 253
    2566:	94 e0       	ldi	r25, 0x04	; 4
    2568:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, screenWidth/2 - u8g2_GetStrWidth(&u8g2, text2[1]) / 2, realScreenHeight, text2[1]);
    256c:	6b e4       	ldi	r22, 0x4B	; 75
    256e:	71 e0       	ldi	r23, 0x01	; 1
    2570:	8d ef       	ldi	r24, 0xFD	; 253
    2572:	94 e0       	ldi	r25, 0x04	; 4
    2574:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2578:	86 95       	lsr	r24
    257a:	61 2f       	mov	r22, r17
    257c:	68 1b       	sub	r22, r24
    257e:	2b e4       	ldi	r18, 0x4B	; 75
    2580:	31 e0       	ldi	r19, 0x01	; 1
    2582:	40 e4       	ldi	r20, 0x40	; 64
    2584:	8d ef       	ldi	r24, 0xFD	; 253
    2586:	94 e0       	ldi	r25, 0x04	; 4
    2588:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	reDrawRequired = 0;
    258c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
}
    2590:	28 96       	adiw	r28, 0x08	; 8
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	08 95       	ret

000025a8 <nopage>:

void nopage(void){
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, "No content yet!");
    25a8:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    25ac:	47 5f       	subi	r20, 0xF7	; 247
    25ae:	2d e9       	ldi	r18, 0x9D	; 157
    25b0:	31 e0       	ldi	r19, 0x01	; 1
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	8d ef       	ldi	r24, 0xFD	; 253
    25b6:	94 e0       	ldi	r25, 0x04	; 4
    25b8:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	selectEnable = 0;
    25bc:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <selectEnable>
	reDrawRequired = 0;
    25c0:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
    25c4:	08 95       	ret

000025c6 <ScreenOverlay>:
}


void ScreenOverlay(void){
    25c6:	ef 92       	push	r14
    25c8:	ff 92       	push	r15
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	28 97       	sbiw	r28, 0x08	; 8
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
	int y2 = height2/2;
	
	int width3 = width1/3 - 2;
	int height3 = height1 - 4;
	
	u8g2_DrawFrame(&u8g2, x1, y1, width1, height1);
    25e2:	08 e0       	ldi	r16, 0x08	; 8
    25e4:	2f e0       	ldi	r18, 0x0F	; 15
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	69 e3       	ldi	r22, 0x39	; 57
    25ea:	8d ef       	ldi	r24, 0xFD	; 253
    25ec:	94 e0       	ldi	r25, 0x04	; 4
    25ee:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <u8g2_DrawFrame>
	u8g2_DrawFrame(&u8g2, x2, y2, width2, height2);
    25f2:	04 e0       	ldi	r16, 0x04	; 4
    25f4:	23 e0       	ldi	r18, 0x03	; 3
    25f6:	42 e0       	ldi	r20, 0x02	; 2
    25f8:	67 e4       	ldi	r22, 0x47	; 71
    25fa:	8d ef       	ldi	r24, 0xFD	; 253
    25fc:	94 e0       	ldi	r25, 0x04	; 4
    25fe:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <u8g2_DrawFrame>
	
	int BattVolt = getBatteryADC();
    2602:	0e 94 8a 07 	call	0xf14	; 0xf14 <getBatteryADC>
	
	if (BattVolt >= BATTERY75){
    2606:	82 32       	cpi	r24, 0x22	; 34
    2608:	2f e1       	ldi	r18, 0x1F	; 31
    260a:	92 07       	cpc	r25, r18
    260c:	7c f0       	brlt	.+30     	; 0x262c <ScreenOverlay+0x66>
		batteryBars = 3;
    260e:	83 e0       	ldi	r24, 0x03	; 3
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <batteryBars+0x1>
    2616:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <batteryBars>
    261a:	26 c0       	rjmp	.+76     	; 0x2668 <ScreenOverlay+0xa2>
		batteryBars = 1;
		}else if (BattVolt >= BATTERY0){
		batteryBars = 0;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to indicate the amount of bars that need to be drawn to represent the battery's charge
    261c:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <batteryBars>
    2620:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <batteryBars+0x1>
    2624:	18 16       	cp	r1, r24
    2626:	19 06       	cpc	r1, r25
    2628:	fc f0       	brlt	.+62     	; 0x2668 <ScreenOverlay+0xa2>
    262a:	34 c0       	rjmp	.+104    	; 0x2694 <ScreenOverlay+0xce>
	
	int BattVolt = getBatteryADC();
	
	if (BattVolt >= BATTERY75){
		batteryBars = 3;
		}else if (BattVolt >= BATTERY50){
    262c:	86 3f       	cpi	r24, 0xF6	; 246
    262e:	2d e1       	ldi	r18, 0x1D	; 29
    2630:	92 07       	cpc	r25, r18
    2632:	3c f0       	brlt	.+14     	; 0x2642 <ScreenOverlay+0x7c>
		batteryBars = 2;
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <batteryBars+0x1>
    263c:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <batteryBars>
    2640:	13 c0       	rjmp	.+38     	; 0x2668 <ScreenOverlay+0xa2>
		}else if (BattVolt >= BATTERY25){
    2642:	82 34       	cpi	r24, 0x42	; 66
    2644:	2d e1       	ldi	r18, 0x1D	; 29
    2646:	92 07       	cpc	r25, r18
    2648:	3c f0       	brlt	.+14     	; 0x2658 <ScreenOverlay+0x92>
		batteryBars = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <batteryBars+0x1>
    2652:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <batteryBars>
    2656:	08 c0       	rjmp	.+16     	; 0x2668 <ScreenOverlay+0xa2>
		}else if (BattVolt >= BATTERY0){
    2658:	86 39       	cpi	r24, 0x96	; 150
    265a:	99 41       	sbci	r25, 0x19	; 25
    265c:	fc f2       	brlt	.-66     	; 0x261c <ScreenOverlay+0x56>
		batteryBars = 0;
    265e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <batteryBars+0x1>
    2662:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <batteryBars>
    2666:	16 c0       	rjmp	.+44     	; 0x2694 <ScreenOverlay+0xce>
	selectEnable = 0;
	reDrawRequired = 0;
}


void ScreenOverlay(void){
    2668:	1b e3       	ldi	r17, 0x3B	; 59
    266a:	e1 2c       	mov	r14, r1
    266c:	f1 2c       	mov	r15, r1
		batteryBars = 0;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to indicate the amount of bars that need to be drawn to represent the battery's charge
	{
		u8g2_DrawBox(&u8g2, x1 + 2 + (width3+1) * i, y1 + 2, width3, height3);
    266e:	04 e0       	ldi	r16, 0x04	; 4
    2670:	23 e0       	ldi	r18, 0x03	; 3
    2672:	42 e0       	ldi	r20, 0x02	; 2
    2674:	61 2f       	mov	r22, r17
    2676:	8d ef       	ldi	r24, 0xFD	; 253
    2678:	94 e0       	ldi	r25, 0x04	; 4
    267a:	0e 94 52 18 	call	0x30a4	; 0x30a4 <u8g2_DrawBox>
		batteryBars = 1;
		}else if (BattVolt >= BATTERY0){
		batteryBars = 0;
	}
	
	for (int i = 0 ; i < batteryBars; i++)//batteryBars is a global variable used to indicate the amount of bars that need to be drawn to represent the battery's charge
    267e:	8f ef       	ldi	r24, 0xFF	; 255
    2680:	e8 1a       	sub	r14, r24
    2682:	f8 0a       	sbc	r15, r24
    2684:	1c 5f       	subi	r17, 0xFC	; 252
    2686:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <batteryBars>
    268a:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <batteryBars+0x1>
    268e:	e8 16       	cp	r14, r24
    2690:	f9 06       	cpc	r15, r25
    2692:	6c f3       	brlt	.-38     	; 0x266e <ScreenOverlay+0xa8>
	}
	
	
	
	//Mode:
	char modeTxt[7] = "Mode: ";
    2694:	87 e0       	ldi	r24, 0x07	; 7
    2696:	ed ea       	ldi	r30, 0xAD	; 173
    2698:	f1 e0       	ldi	r31, 0x01	; 1
    269a:	de 01       	movw	r26, r28
    269c:	11 96       	adiw	r26, 0x01	; 1
    269e:	01 90       	ld	r0, Z+
    26a0:	0d 92       	st	X+, r0
    26a2:	8a 95       	dec	r24
    26a4:	e1 f7       	brne	.-8      	; 0x269e <ScreenOverlay+0xd8>
	char modeTxthold[1];
	itoa(*(settingVal+0), modeTxthold, 10);
    26a6:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <settingVal>
    26aa:	f0 91 f6 04 	lds	r31, 0x04F6	; 0x8004f6 <settingVal+0x1>
    26ae:	4a e0       	ldi	r20, 0x0A	; 10
    26b0:	be 01       	movw	r22, r28
    26b2:	68 5f       	subi	r22, 0xF8	; 248
    26b4:	7f 4f       	sbci	r23, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	strcat(modeTxt, modeTxthold);
    26be:	be 01       	movw	r22, r28
    26c0:	68 5f       	subi	r22, 0xF8	; 248
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	ce 01       	movw	r24, r28
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	0e 94 ee 29 	call	0x53dc	; 0x53dc <strcat>
	
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    26cc:	69 e4       	ldi	r22, 0x49	; 73
    26ce:	78 e0       	ldi	r23, 0x08	; 8
    26d0:	8d ef       	ldi	r24, 0xFD	; 253
    26d2:	94 e0       	ldi	r25, 0x04	; 4
    26d4:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, screenWidth - u8g2_GetStrWidth(&u8g2, modeTxt), textHeight-3, modeTxt);
    26d8:	10 91 62 05 	lds	r17, 0x0562	; 0x800562 <textHeight>
    26dc:	13 50       	subi	r17, 0x03	; 3
    26de:	be 01       	movw	r22, r28
    26e0:	6f 5f       	subi	r22, 0xFF	; 255
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255
    26e4:	8d ef       	ldi	r24, 0xFD	; 253
    26e6:	94 e0       	ldi	r25, 0x04	; 4
    26e8:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    26ec:	60 e8       	ldi	r22, 0x80	; 128
    26ee:	68 1b       	sub	r22, r24
    26f0:	9e 01       	movw	r18, r28
    26f2:	2f 5f       	subi	r18, 0xFF	; 255
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	41 2f       	mov	r20, r17
    26f8:	8d ef       	ldi	r24, 0xFD	; 253
    26fa:	94 e0       	ldi	r25, 0x04	; 4
    26fc:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	
	
	//Time
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
    2700:	69 e4       	ldi	r22, 0x49	; 73
    2702:	78 e0       	ldi	r23, 0x08	; 8
    2704:	8d ef       	ldi	r24, 0xFD	; 253
    2706:	94 e0       	ldi	r25, 0x04	; 4
    2708:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <u8g2_SetFont>
	static char timeTxt[7] = {0,0,0,0,0,0,0};
	getTimeToChar(timeTxt, 0);
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	8c e8       	ldi	r24, 0x8C	; 140
    2712:	93 e0       	ldi	r25, 0x03	; 3
    2714:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <getTimeToChar>
	
	u8g2_DrawStr(&u8g2, 0, textHeight-3, timeTxt);
    2718:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    271c:	43 50       	subi	r20, 0x03	; 3
    271e:	2c e8       	ldi	r18, 0x8C	; 140
    2720:	33 e0       	ldi	r19, 0x03	; 3
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	8d ef       	ldi	r24, 0xFD	; 253
    2726:	94 e0       	ldi	r25, 0x04	; 4
    2728:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	
	
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);//reset font to the main font.
    272c:	68 e6       	ldi	r22, 0x68	; 104
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	8d ef       	ldi	r24, 0xFD	; 253
    2732:	94 e0       	ldi	r25, 0x04	; 4
    2734:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <u8g2_SetFont>
}
    2738:	28 96       	adiw	r28, 0x08	; 8
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	08 95       	ret

00002752 <Page_2>:

void Page_2(void){
    2752:	7f 92       	push	r7
    2754:	8f 92       	push	r8
    2756:	9f 92       	push	r9
    2758:	af 92       	push	r10
    275a:	bf 92       	push	r11
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	a8 97       	sbiw	r28, 0x28	; 40
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
	#define Lines 4
	#define digAmount 8
	
	#define startLine_Data 3
	selectEnable = 0;
    277c:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <selectEnable>
		"Direction:> ",
		"Distance:> ",
		"runTime:> "
	};
	
	int maxPrefixWidth = u8g2_GetStrWidth(&u8g2, text2[1]);
    2780:	64 eb       	ldi	r22, 0xB4	; 180
    2782:	71 e0       	ldi	r23, 0x01	; 1
    2784:	8d ef       	ldi	r24, 0xFD	; 253
    2786:	94 e0       	ldi	r25, 0x04	; 4
    2788:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    278c:	78 2e       	mov	r7, r24
	//placeholders for the data
	char d1[digAmount];
	char d2[digAmount];
	char d3[digAmount];
	char d4[digAmount];
	char *Data[Lines] = { d1, d2, d3, d4};
    278e:	be 01       	movw	r22, r28
    2790:	6f 5f       	subi	r22, 0xFF	; 255
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	7a a3       	std	Y+34, r23	; 0x22
    2796:	69 a3       	std	Y+33, r22	; 0x21
    2798:	6e 01       	movw	r12, r28
    279a:	89 e0       	ldi	r24, 0x09	; 9
    279c:	c8 0e       	add	r12, r24
    279e:	d1 1c       	adc	r13, r1
    27a0:	dc a2       	std	Y+36, r13	; 0x24
    27a2:	cb a2       	std	Y+35, r12	; 0x23
    27a4:	7e 01       	movw	r14, r28
    27a6:	e1 e1       	ldi	r30, 0x11	; 17
    27a8:	ee 0e       	add	r14, r30
    27aa:	f1 1c       	adc	r15, r1
    27ac:	fe a2       	std	Y+38, r15	; 0x26
    27ae:	ed a2       	std	Y+37, r14	; 0x25
    27b0:	8e 01       	movw	r16, r28
    27b2:	07 5e       	subi	r16, 0xE7	; 231
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	18 a7       	std	Y+40, r17	; 0x28
    27b8:	0f a3       	std	Y+39, r16	; 0x27
	
	itoa(*speedHold, Data[0], 10);
    27ba:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <speedHold>
    27be:	f0 91 f8 04 	lds	r31, 0x04F8	; 0x8004f8 <speedHold+0x1>
    27c2:	4a e0       	ldi	r20, 0x0A	; 10
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	itoa(*directionHold, Data[1], 10);
    27cc:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <directionHold>
    27d0:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <directionHold+0x1>
    27d4:	4a e0       	ldi	r20, 0x0A	; 10
    27d6:	b6 01       	movw	r22, r12
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	itoa(*distanceHold, Data[2], 10);
    27e0:	e0 91 63 05 	lds	r30, 0x0563	; 0x800563 <distanceHold>
    27e4:	f0 91 64 05 	lds	r31, 0x0564	; 0x800564 <distanceHold+0x1>
    27e8:	4a e0       	ldi	r20, 0x0A	; 10
    27ea:	b7 01       	movw	r22, r14
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	
	//little bit of code to make a typical digital watch look for the time String
	getTimeToChar(Data[3], 1);
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	c8 01       	movw	r24, r16
    27fa:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <getTimeToChar>
	
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    27fe:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <currentChoice+0x1>
    2802:	ee 0f       	add	r30, r30
    2804:	ff 0b       	sbc	r31, r31
    2806:	ef 5d       	subi	r30, 0xDF	; 223
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	20 81       	ld	r18, Z
    280c:	31 81       	ldd	r19, Z+1	; 0x01
    280e:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    2812:	47 5f       	subi	r20, 0xF7	; 247
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	8d ef       	ldi	r24, 0xFD	; 253
    2818:	94 e0       	ldi	r25, 0x04	; 4
    281a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
    281e:	5e 01       	movw	r10, r28
    2820:	f1 e2       	ldi	r31, 0x21	; 33
    2822:	af 0e       	add	r10, r31
    2824:	b1 1c       	adc	r11, r1
    2826:	0f 2e       	mov	r0, r31
    2828:	f9 e7       	ldi	r31, 0x79	; 121
    282a:	cf 2e       	mov	r12, r31
    282c:	f2 e0       	ldi	r31, 0x02	; 2
    282e:	df 2e       	mov	r13, r31
    2830:	f0 2d       	mov	r31, r0
    2832:	0f 2e       	mov	r0, r31
    2834:	f1 e7       	ldi	r31, 0x71	; 113
    2836:	ef 2e       	mov	r14, r31
    2838:	f2 e0       	ldi	r31, 0x02	; 2
    283a:	ff 2e       	mov	r15, r31
    283c:	f0 2d       	mov	r31, r0
    283e:	13 e0       	ldi	r17, 0x03	; 3

	for (int i = 0; i < Lines; i++)
	{
		int dataWidth = u8g2_GetStrWidth(&u8g2, Data[i]);
    2840:	f5 01       	movw	r30, r10
    2842:	81 90       	ld	r8, Z+
    2844:	91 90       	ld	r9, Z+
    2846:	5f 01       	movw	r10, r30
    2848:	b4 01       	movw	r22, r8
    284a:	8d ef       	ldi	r24, 0xFD	; 253
    284c:	94 e0       	ldi	r25, 0x04	; 4
    284e:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2852:	08 2f       	mov	r16, r24
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
    2854:	f6 01       	movw	r30, r12
    2856:	21 91       	ld	r18, Z+
    2858:	31 91       	ld	r19, Z+
    285a:	6f 01       	movw	r12, r30
    285c:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    2860:	14 9f       	mul	r17, r20
    2862:	40 2d       	mov	r20, r0
    2864:	11 24       	eor	r1, r1
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	8d ef       	ldi	r24, 0xFD	; 253
    286a:	94 e0       	ldi	r25, 0x04	; 4
    286c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
    2870:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    2874:	14 9f       	mul	r17, r20
    2876:	40 2d       	mov	r20, r0
    2878:	11 24       	eor	r1, r1
    287a:	94 01       	movw	r18, r8
    287c:	67 2d       	mov	r22, r7
    287e:	8d ef       	ldi	r24, 0xFD	; 253
    2880:	94 e0       	ldi	r25, 0x04	; 4
    2882:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
    2886:	f7 01       	movw	r30, r14
    2888:	21 91       	ld	r18, Z+
    288a:	31 91       	ld	r19, Z+
    288c:	7f 01       	movw	r14, r30
    288e:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    2892:	14 9f       	mul	r17, r20
    2894:	40 2d       	mov	r20, r0
    2896:	11 24       	eor	r1, r1
    2898:	60 91 f4 04 	lds	r22, 0x04F4	; 0x8004f4 <maxCharWidth>
    289c:	66 95       	lsr	r22
    289e:	67 0d       	add	r22, r7
    28a0:	60 0f       	add	r22, r16
    28a2:	8d ef       	ldi	r24, 0xFD	; 253
    28a4:	94 e0       	ldi	r25, 0x04	; 4
    28a6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
    28aa:	1f 5f       	subi	r17, 0xFF	; 255
	
	
	//title
	u8g2_DrawStr(&u8g2, 0, textHeight + TopMargin, menuStrings[currentChoice[MENUPAGE]]);

	for (int i = 0; i < Lines; i++)
    28ac:	17 30       	cpi	r17, 0x07	; 7
    28ae:	41 f6       	brne	.-112    	; 0x2840 <Page_2+0xee>
		u8g2_DrawStr(&u8g2, 0, textHeight*(i+startLine_Data), text2[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth, textHeight*(i+startLine_Data), Data[i]);
		u8g2_DrawStr(&u8g2, maxPrefixWidth + dataWidth + maxCharWidth/2, textHeight*(i+startLine_Data), postFixes[i]);
	}
	
	reDrawRequired = 1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
}
    28b6:	a8 96       	adiw	r28, 0x28	; 40
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	1f 91       	pop	r17
    28c8:	0f 91       	pop	r16
    28ca:	ff 90       	pop	r15
    28cc:	ef 90       	pop	r14
    28ce:	df 90       	pop	r13
    28d0:	cf 90       	pop	r12
    28d2:	bf 90       	pop	r11
    28d4:	af 90       	pop	r10
    28d6:	9f 90       	pop	r9
    28d8:	8f 90       	pop	r8
    28da:	7f 90       	pop	r7
    28dc:	08 95       	ret

000028de <Page_3>:

void Page_3(void){
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	64 97       	sbiw	r28, 0x14	; 20
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
	selectEnable = 0;
    28f6:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <selectEnable>
		" deg",
		" mV",
		""
	};
	
	u8g2_DrawStr(&u8g2, 0, textHeight*1 + TopMargin, menuStrings[currentChoice[MENUPAGE]]);//the titles needs to be the same as the titles of the choices in the menu
    28fa:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <currentChoice+0x1>
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 0b       	sbc	r31, r31
    2902:	ef 5d       	subi	r30, 0xDF	; 223
    2904:	fe 4f       	sbci	r31, 0xFE	; 254
    2906:	20 81       	ld	r18, Z
    2908:	31 81       	ldd	r19, Z+1	; 0x01
    290a:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    290e:	47 5f       	subi	r20, 0xF7	; 247
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	8d ef       	ldi	r24, 0xFD	; 253
    2914:	94 e0       	ldi	r25, 0x04	; 4
    2916:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, textHeight*2 + TopMargin, Text_page2[0]);
    291a:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    291e:	44 0f       	add	r20, r20
    2920:	47 5f       	subi	r20, 0xF7	; 247
    2922:	21 ec       	ldi	r18, 0xC1	; 193
    2924:	31 e0       	ldi	r19, 0x01	; 1
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	8d ef       	ldi	r24, 0xFD	; 253
    292a:	94 e0       	ldi	r25, 0x04	; 4
    292c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, textHeight*3 + TopMargin, Text_page2[1]);
    2930:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    2934:	84 2f       	mov	r24, r20
    2936:	88 0f       	add	r24, r24
    2938:	48 0f       	add	r20, r24
    293a:	47 5f       	subi	r20, 0xF7	; 247
    293c:	2a ec       	ldi	r18, 0xCA	; 202
    293e:	31 e0       	ldi	r19, 0x01	; 1
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	8d ef       	ldi	r24, 0xFD	; 253
    2944:	94 e0       	ldi	r25, 0x04	; 4
    2946:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, textHeight*4 + TopMargin, Text_page2[2]);
    294a:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    294e:	44 0f       	add	r20, r20
    2950:	44 0f       	add	r20, r20
    2952:	47 5f       	subi	r20, 0xF7	; 247
    2954:	25 ed       	ldi	r18, 0xD5	; 213
    2956:	31 e0       	ldi	r19, 0x01	; 1
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	8d ef       	ldi	r24, 0xFD	; 253
    295c:	94 e0       	ldi	r25, 0x04	; 4
    295e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	
	char angle_txt[4];
	itoa(*angle_degHold, angle_txt, 10);
    2962:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <angle_degHold>
    2966:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <angle_degHold+0x1>
    296a:	4a e0       	ldi	r20, 0x0A	; 10
    296c:	be 01       	movw	r22, r28
    296e:	6f 5f       	subi	r22, 0xFF	; 255
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	u8g2_DrawStr(&u8g2, u8g2_GetStrWidth(&u8g2, Text_page2[0]), textHeight*2+ TopMargin, angle_txt);
    297a:	10 91 62 05 	lds	r17, 0x0562	; 0x800562 <textHeight>
    297e:	11 0f       	add	r17, r17
    2980:	17 5f       	subi	r17, 0xF7	; 247
    2982:	61 ec       	ldi	r22, 0xC1	; 193
    2984:	71 e0       	ldi	r23, 0x01	; 1
    2986:	8d ef       	ldi	r24, 0xFD	; 253
    2988:	94 e0       	ldi	r25, 0x04	; 4
    298a:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    298e:	9e 01       	movw	r18, r28
    2990:	2f 5f       	subi	r18, 0xFF	; 255
    2992:	3f 4f       	sbci	r19, 0xFF	; 255
    2994:	41 2f       	mov	r20, r17
    2996:	68 2f       	mov	r22, r24
    2998:	8d ef       	ldi	r24, 0xFD	; 253
    299a:	94 e0       	ldi	r25, 0x04	; 4
    299c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, u8g2_GetStrWidth(&u8g2, Text_page2[0]) + u8g2_GetStrWidth(&u8g2, angle_txt), textHeight*2+ TopMargin, Textpostfix_page2[0]);
    29a0:	10 91 62 05 	lds	r17, 0x0562	; 0x800562 <textHeight>
    29a4:	11 0f       	add	r17, r17
    29a6:	17 5f       	subi	r17, 0xF7	; 247
    29a8:	61 ec       	ldi	r22, 0xC1	; 193
    29aa:	71 e0       	ldi	r23, 0x01	; 1
    29ac:	8d ef       	ldi	r24, 0xFD	; 253
    29ae:	94 e0       	ldi	r25, 0x04	; 4
    29b0:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    29b4:	08 2f       	mov	r16, r24
    29b6:	be 01       	movw	r22, r28
    29b8:	6f 5f       	subi	r22, 0xFF	; 255
    29ba:	7f 4f       	sbci	r23, 0xFF	; 255
    29bc:	8d ef       	ldi	r24, 0xFD	; 253
    29be:	94 e0       	ldi	r25, 0x04	; 4
    29c0:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    29c4:	60 2f       	mov	r22, r16
    29c6:	68 0f       	add	r22, r24
    29c8:	2d ed       	ldi	r18, 0xDD	; 221
    29ca:	31 e0       	ldi	r19, 0x01	; 1
    29cc:	41 2f       	mov	r20, r17
    29ce:	8d ef       	ldi	r24, 0xFD	; 253
    29d0:	94 e0       	ldi	r25, 0x04	; 4
    29d2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	
	volatile int voltage = getBatteryADC();
    29d6:	0e 94 8a 07 	call	0xf14	; 0xf14 <getBatteryADC>
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
	char Batt_txt[6];
	itoa(voltage, Batt_txt, 10);
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	4a e0       	ldi	r20, 0x0A	; 10
    29e4:	be 01       	movw	r22, r28
    29e6:	69 5f       	subi	r22, 0xF9	; 249
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	u8g2_DrawStr(&u8g2, u8g2_GetStrWidth(&u8g2, Text_page2[1]), textHeight*3+ TopMargin, Batt_txt);
    29ee:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <textHeight>
    29f2:	18 2f       	mov	r17, r24
    29f4:	11 0f       	add	r17, r17
    29f6:	81 0f       	add	r24, r17
    29f8:	19 e0       	ldi	r17, 0x09	; 9
    29fa:	18 0f       	add	r17, r24
    29fc:	6a ec       	ldi	r22, 0xCA	; 202
    29fe:	71 e0       	ldi	r23, 0x01	; 1
    2a00:	8d ef       	ldi	r24, 0xFD	; 253
    2a02:	94 e0       	ldi	r25, 0x04	; 4
    2a04:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2a08:	9e 01       	movw	r18, r28
    2a0a:	29 5f       	subi	r18, 0xF9	; 249
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	41 2f       	mov	r20, r17
    2a10:	68 2f       	mov	r22, r24
    2a12:	8d ef       	ldi	r24, 0xFD	; 253
    2a14:	94 e0       	ldi	r25, 0x04	; 4
    2a16:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, u8g2_GetStrWidth(&u8g2, Text_page2[1]) + u8g2_GetStrWidth(&u8g2, Batt_txt), textHeight*3+ TopMargin, Textpostfix_page2[1]);
    2a1a:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <textHeight>
    2a1e:	18 2f       	mov	r17, r24
    2a20:	11 0f       	add	r17, r17
    2a22:	81 0f       	add	r24, r17
    2a24:	19 e0       	ldi	r17, 0x09	; 9
    2a26:	18 0f       	add	r17, r24
    2a28:	6a ec       	ldi	r22, 0xCA	; 202
    2a2a:	71 e0       	ldi	r23, 0x01	; 1
    2a2c:	8d ef       	ldi	r24, 0xFD	; 253
    2a2e:	94 e0       	ldi	r25, 0x04	; 4
    2a30:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2a34:	08 2f       	mov	r16, r24
    2a36:	be 01       	movw	r22, r28
    2a38:	69 5f       	subi	r22, 0xF9	; 249
    2a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3c:	8d ef       	ldi	r24, 0xFD	; 253
    2a3e:	94 e0       	ldi	r25, 0x04	; 4
    2a40:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2a44:	60 2f       	mov	r22, r16
    2a46:	68 0f       	add	r22, r24
    2a48:	22 ee       	ldi	r18, 0xE2	; 226
    2a4a:	31 e0       	ldi	r19, 0x01	; 1
    2a4c:	41 2f       	mov	r20, r17
    2a4e:	8d ef       	ldi	r24, 0xFD	; 253
    2a50:	94 e0       	ldi	r25, 0x04	; 4
    2a52:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	
	char SPDO_txt[8];
	//snprintf(SPDO_txt, 5, "%f", *SpeedoSpeedHold);
	
	itoa((*SpeedoSpeedHold), SPDO_txt, 10);
    2a56:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <SpeedoSpeedHold>
    2a5a:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <SpeedoSpeedHold+0x1>
    2a5e:	4a e0       	ldi	r20, 0x0A	; 10
    2a60:	be 01       	movw	r22, r28
    2a62:	63 5f       	subi	r22, 0xF3	; 243
    2a64:	7f 4f       	sbci	r23, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
	u8g2_DrawStr(&u8g2, u8g2_GetStrWidth(&u8g2, Text_page2[2]), textHeight*4+ TopMargin, SPDO_txt);
    2a6e:	10 91 62 05 	lds	r17, 0x0562	; 0x800562 <textHeight>
    2a72:	11 0f       	add	r17, r17
    2a74:	11 0f       	add	r17, r17
    2a76:	17 5f       	subi	r17, 0xF7	; 247
    2a78:	65 ed       	ldi	r22, 0xD5	; 213
    2a7a:	71 e0       	ldi	r23, 0x01	; 1
    2a7c:	8d ef       	ldi	r24, 0xFD	; 253
    2a7e:	94 e0       	ldi	r25, 0x04	; 4
    2a80:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2a84:	9e 01       	movw	r18, r28
    2a86:	23 5f       	subi	r18, 0xF3	; 243
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	41 2f       	mov	r20, r17
    2a8c:	68 2f       	mov	r22, r24
    2a8e:	8d ef       	ldi	r24, 0xFD	; 253
    2a90:	94 e0       	ldi	r25, 0x04	; 4
    2a92:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, u8g2_GetStrWidth(&u8g2, Text_page2[2]), textHeight*4+ TopMargin, SPDO_txt);
    2a96:	10 91 62 05 	lds	r17, 0x0562	; 0x800562 <textHeight>
    2a9a:	11 0f       	add	r17, r17
    2a9c:	11 0f       	add	r17, r17
    2a9e:	17 5f       	subi	r17, 0xF7	; 247
    2aa0:	65 ed       	ldi	r22, 0xD5	; 213
    2aa2:	71 e0       	ldi	r23, 0x01	; 1
    2aa4:	8d ef       	ldi	r24, 0xFD	; 253
    2aa6:	94 e0       	ldi	r25, 0x04	; 4
    2aa8:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2aac:	9e 01       	movw	r18, r28
    2aae:	23 5f       	subi	r18, 0xF3	; 243
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	41 2f       	mov	r20, r17
    2ab4:	68 2f       	mov	r22, r24
    2ab6:	8d ef       	ldi	r24, 0xFD	; 253
    2ab8:	94 e0       	ldi	r25, 0x04	; 4
    2aba:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
	//u8g2_DrawStr(&u8g2, u8g2_GetStrWidth(&u8g2, Text_page2[2]) + u8g2_GetStrWidth(&u8g2, SPDO_txt), textHeight*4+ TopMargin, Textpostfix_page2[2]);
	
	reDrawRequired = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
}
    2ac4:	64 96       	adiw	r28, 0x14	; 20
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	08 95       	ret

00002ada <Page_4>:

void Page_4(void){
	selectEnable = 0;
    2ada:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <selectEnable>
	u8g2_DrawStr(&u8g2, 0, textHeight+ TopMargin, menuStrings[currentChoice[MENUPAGE]]);
    2ade:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <currentChoice+0x1>
    2ae2:	ee 0f       	add	r30, r30
    2ae4:	ff 0b       	sbc	r31, r31
    2ae6:	ef 5d       	subi	r30, 0xDF	; 223
    2ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aea:	20 81       	ld	r18, Z
    2aec:	31 81       	ldd	r19, Z+1	; 0x01
    2aee:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <textHeight>
    2af2:	47 5f       	subi	r20, 0xF7	; 247
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	8d ef       	ldi	r24, 0xFD	; 253
    2af8:	94 e0       	ldi	r25, 0x04	; 4
    2afa:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>

	reDrawRequired = 0;
    2afe:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <reDrawRequired>
    2b02:	08 95       	ret

00002b04 <Page_5>:
}

void Page_5(void){//settings
    2b04:	2f 92       	push	r2
    2b06:	3f 92       	push	r3
    2b08:	4f 92       	push	r4
    2b0a:	5f 92       	push	r5
    2b0c:	6f 92       	push	r6
    2b0e:	7f 92       	push	r7
    2b10:	8f 92       	push	r8
    2b12:	9f 92       	push	r9
    2b14:	af 92       	push	r10
    2b16:	bf 92       	push	r11
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <Page_5+0x26>
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <Page_5+0x28>
    2b2c:	1f 92       	push	r1
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
	selectEnable = 1;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <selectEnable>
	#define selector "-> "
	

	int height = screenDiv;
	
	int x = selectorWidth;
    2b38:	10 91 f4 04 	lds	r17, 0x04F4	; 0x8004f4 <maxCharWidth>
    2b3c:	81 2f       	mov	r24, r17
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	9c 01       	movw	r18, r24
    2b42:	22 0f       	add	r18, r18
    2b44:	33 1f       	adc	r19, r19
    2b46:	12 2f       	mov	r17, r18
    2b48:	18 0f       	add	r17, r24
	int y;
	int yStat = (height/2)+3;
    2b4a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <screenDiv>
    2b4e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <screenDiv+0x1>
    2b52:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <screenDiv+0x2>
    2b56:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <screenDiv+0x3>
    2b5a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    2b5e:	3b 01       	movw	r6, r22
    2b60:	77 23       	and	r23, r23
    2b62:	1c f4       	brge	.+6      	; 0x2b6a <Page_5+0x66>
    2b64:	2f ef       	ldi	r18, 0xFF	; 255
    2b66:	62 1a       	sub	r6, r18
    2b68:	72 0a       	sbc	r7, r18
    2b6a:	75 94       	asr	r7
    2b6c:	67 94       	ror	r6
    2b6e:	83 e0       	ldi	r24, 0x03	; 3
    2b70:	68 0e       	add	r6, r24
    2b72:	71 1c       	adc	r7, r1
	height = height - Margin;
	_Bool highlightChoice = 0;
	
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
    2b74:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <currentPage>
    2b78:	8a ef       	ldi	r24, 0xFA	; 250
    2b7a:	8e 0f       	add	r24, r30
    2b7c:	85 30       	cpi	r24, 0x05	; 5
    2b7e:	30 f5       	brcc	.+76     	; 0x2bcc <Page_5+0xc8>
		selectEnable = 0;
    2b80:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <selectEnable>
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
    2b84:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <currentChoice+0x5>
    2b88:	aa 0f       	add	r26, r26
    2b8a:	bb 0b       	sbc	r27, r27
    2b8c:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <settingVal>
    2b90:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <settingVal+0x1>
    2b94:	a8 0f       	add	r26, r24
    2b96:	b9 1f       	adc	r27, r25
    2b98:	0e 2e       	mov	r0, r30
    2b9a:	00 0c       	add	r0, r0
    2b9c:	ff 0b       	sbc	r31, r31
    2b9e:	ee 53       	subi	r30, 0x3E	; 62
    2ba0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ba2:	20 81       	ld	r18, Z
    2ba4:	8d 91       	ld	r24, X+
    2ba6:	9c 91       	ld	r25, X
    2ba8:	11 97       	sbiw	r26, 0x01	; 1
    2baa:	82 1b       	sub	r24, r18
    2bac:	91 09       	sbc	r25, r1
    2bae:	27 fd       	sbrc	r18, 7
    2bb0:	93 95       	inc	r25
    2bb2:	8d 93       	st	X+, r24
    2bb4:	9c 93       	st	X, r25
		currentChoice[currentPage] = 0;
    2bb6:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <currentPage>
    2bba:	0e 2e       	mov	r0, r30
    2bbc:	00 0c       	add	r0, r0
    2bbe:	ff 0b       	sbc	r31, r31
    2bc0:	ee 53       	subi	r30, 0x3E	; 62
    2bc2:	fc 4f       	sbci	r31, 0xFC	; 252
    2bc4:	10 82       	st	Z, r1
		highlightChoice = 1;
    2bc6:	e1 e0       	ldi	r30, 0x01	; 1
    2bc8:	ed 83       	std	Y+5, r30	; 0x05
    2bca:	01 c0       	rjmp	.+2      	; 0x2bce <Page_5+0xca>
	
	int x = selectorWidth;
	int y;
	int yStat = (height/2)+3;
	height = height - Margin;
	_Bool highlightChoice = 0;
    2bcc:	1d 82       	std	Y+5, r1	; 0x05
    2bce:	0f 2e       	mov	r0, r31
    2bd0:	f7 e1       	ldi	r31, 0x17	; 23
    2bd2:	af 2e       	mov	r10, r31
    2bd4:	f1 e0       	ldi	r31, 0x01	; 1
    2bd6:	bf 2e       	mov	r11, r31
    2bd8:	f0 2d       	mov	r31, r0
	if (currentPage > 5 && currentPage <= 5 + settings){//code for enabling the settings to be changed
		selectEnable = 0;
		//you selected a setting
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
    2bda:	81 2c       	mov	r8, r1
    2bdc:	91 2c       	mov	r9, r1
	}
	
	for (int i = 0; i < settings; i++){
    2bde:	c1 2c       	mov	r12, r1
    2be0:	d1 2c       	mov	r13, r1
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;

		if(currentChoice[5] == i){
    2be2:	0f 2e       	mov	r0, r31
    2be4:	f2 ec       	ldi	r31, 0xC2	; 194
    2be6:	4f 2e       	mov	r4, r31
    2be8:	f3 e0       	ldi	r31, 0x03	; 3
    2bea:	5f 2e       	mov	r5, r31
    2bec:	f0 2d       	mov	r31, r0
			u8g2_SetDrawColor(&u8g2, 1);
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
			if(highlightChoice){
				u8g2_SetDrawColor(&u8g2, 1);
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    2bee:	0f 2e       	mov	r0, r31
    2bf0:	fe ef       	ldi	r31, 0xFE	; 254
    2bf2:	3f 2e       	mov	r3, r31
    2bf4:	f0 2d       	mov	r31, r0
    2bf6:	31 0e       	add	r3, r17
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
		
		y = TopMargin + i * textHeight/* +  (Scroll[currentPage] * textHeight)*/;
    2bf8:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <textHeight>
    2bfc:	2c 9d       	mul	r18, r12
    2bfe:	c0 01       	movw	r24, r0
    2c00:	2d 9d       	mul	r18, r13
    2c02:	90 0d       	add	r25, r0
    2c04:	11 24       	eor	r1, r1
    2c06:	7c 01       	movw	r14, r24
    2c08:	f9 e0       	ldi	r31, 0x09	; 9
    2c0a:	ef 0e       	add	r14, r31
    2c0c:	f1 1c       	adc	r15, r1

		if(currentChoice[5] == i){
    2c0e:	f2 01       	movw	r30, r4
    2c10:	85 81       	ldd	r24, Z+5	; 0x05
    2c12:	08 2e       	mov	r0, r24
    2c14:	00 0c       	add	r0, r0
    2c16:	99 0b       	sbc	r25, r25
    2c18:	8c 15       	cp	r24, r12
    2c1a:	9d 05       	cpc	r25, r13
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <Page_5+0x11c>
    2c1e:	6c c0       	rjmp	.+216    	; 0x2cf8 <Page_5+0x1f4>
			
			u8g2_SetDrawColor(&u8g2, 1);
    2c20:	61 e0       	ldi	r22, 0x01	; 1
    2c22:	8d ef       	ldi	r24, 0xFD	; 253
    2c24:	94 e0       	ldi	r25, 0x04	; 4
    2c26:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
			
			u8g2_DrawStr(&u8g2, 0, y+yStat, selector);
    2c2a:	2e 2c       	mov	r2, r14
    2c2c:	26 0c       	add	r2, r6
    2c2e:	26 ee       	ldi	r18, 0xE6	; 230
    2c30:	31 e0       	ldi	r19, 0x01	; 1
    2c32:	42 2d       	mov	r20, r2
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	8d ef       	ldi	r24, 0xFD	; 253
    2c38:	94 e0       	ldi	r25, 0x04	; 4
    2c3a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
			if(highlightChoice){
    2c3e:	fd 81       	ldd	r31, Y+5	; 0x05
    2c40:	ff 23       	and	r31, r31
    2c42:	89 f1       	breq	.+98     	; 0x2ca6 <Page_5+0x1a2>
				u8g2_SetDrawColor(&u8g2, 1);
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	8d ef       	ldi	r24, 0xFD	; 253
    2c48:	94 e0       	ldi	r25, 0x04	; 4
    2c4a:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawRBox(&u8g2, x-2, y+yStat - textHeight+1, u8g2_GetStrWidth(&u8g2, settingStrings[i]), textHeight + 1, 2);
    2c4e:	00 91 62 05 	lds	r16, 0x0562	; 0x800562 <textHeight>
    2c52:	0f 5f       	subi	r16, 0xFF	; 255
    2c54:	f5 01       	movw	r30, r10
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	8d ef       	ldi	r24, 0xFD	; 253
    2c5c:	94 e0       	ldi	r25, 0x04	; 4
    2c5e:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2c62:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <textHeight>
    2c66:	42 2d       	mov	r20, r2
    2c68:	49 1b       	sub	r20, r25
    2c6a:	4f 5f       	subi	r20, 0xFF	; 255
    2c6c:	68 94       	set
    2c6e:	ee 24       	eor	r14, r14
    2c70:	e1 f8       	bld	r14, 1
    2c72:	28 2f       	mov	r18, r24
    2c74:	63 2d       	mov	r22, r3
    2c76:	8d ef       	ldi	r24, 0xFD	; 253
    2c78:	94 e0       	ldi	r25, 0x04	; 4
    2c7a:	0e 94 bc 18 	call	0x3178	; 0x3178 <u8g2_DrawRBox>
				u8g2_SetDrawColor(&u8g2, 0);
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	8d ef       	ldi	r24, 0xFD	; 253
    2c82:	94 e0       	ldi	r25, 0x04	; 4
    2c84:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2c88:	f5 01       	movw	r30, r10
    2c8a:	20 81       	ld	r18, Z
    2c8c:	31 81       	ldd	r19, Z+1	; 0x01
    2c8e:	42 2d       	mov	r20, r2
    2c90:	61 2f       	mov	r22, r17
    2c92:	8d ef       	ldi	r24, 0xFD	; 253
    2c94:	94 e0       	ldi	r25, 0x04	; 4
    2c96:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
				u8g2_SetDrawColor(&u8g2, 1);
    2c9a:	61 e0       	ldi	r22, 0x01	; 1
    2c9c:	8d ef       	ldi	r24, 0xFD	; 253
    2c9e:	94 e0       	ldi	r25, 0x04	; 4
    2ca0:	0e 94 b4 20 	call	0x4168	; 0x4168 <u8g2_SetDrawColor>
    2ca4:	09 c0       	rjmp	.+18     	; 0x2cb8 <Page_5+0x1b4>
				}else{
				
				u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2ca6:	f5 01       	movw	r30, r10
    2ca8:	20 81       	ld	r18, Z
    2caa:	31 81       	ldd	r19, Z+1	; 0x01
    2cac:	42 2d       	mov	r20, r2
    2cae:	61 2f       	mov	r22, r17
    2cb0:	8d ef       	ldi	r24, 0xFD	; 253
    2cb2:	94 e0       	ldi	r25, 0x04	; 4
    2cb4:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
			}
			
			
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    2cb8:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <settingVal>
    2cbc:	f0 91 f6 04 	lds	r31, 0x04F6	; 0x8004f6 <settingVal+0x1>
    2cc0:	e8 0d       	add	r30, r8
    2cc2:	f9 1d       	adc	r31, r9
    2cc4:	4a e0       	ldi	r20, 0x0A	; 10
    2cc6:	be 01       	movw	r22, r28
    2cc8:	6f 5f       	subi	r22, 0xFF	; 255
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	91 81       	ldd	r25, Z+1	; 0x01
    2cd0:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    2cd4:	f5 01       	movw	r30, r10
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	8d ef       	ldi	r24, 0xFD	; 253
    2cdc:	94 e0       	ldi	r25, 0x04	; 4
    2cde:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2ce2:	68 2f       	mov	r22, r24
    2ce4:	61 0f       	add	r22, r17
    2ce6:	9e 01       	movw	r18, r28
    2ce8:	2f 5f       	subi	r18, 0xFF	; 255
    2cea:	3f 4f       	sbci	r19, 0xFF	; 255
    2cec:	42 2d       	mov	r20, r2
    2cee:	8d ef       	ldi	r24, 0xFD	; 253
    2cf0:	94 e0       	ldi	r25, 0x04	; 4
    2cf2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
    2cf6:	2a c0       	rjmp	.+84     	; 0x2d4c <Page_5+0x248>
			}else{
			u8g2_DrawStr(&u8g2, x, y+yStat, settingStrings[i]);
    2cf8:	0e 2d       	mov	r16, r14
    2cfa:	06 0d       	add	r16, r6
    2cfc:	f5 01       	movw	r30, r10
    2cfe:	20 81       	ld	r18, Z
    2d00:	31 81       	ldd	r19, Z+1	; 0x01
    2d02:	40 2f       	mov	r20, r16
    2d04:	61 2f       	mov	r22, r17
    2d06:	8d ef       	ldi	r24, 0xFD	; 253
    2d08:	94 e0       	ldi	r25, 0x04	; 4
    2d0a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
			char tmptxt[4];
			itoa(*(settingVal + i), tmptxt, 10);
    2d0e:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <settingVal>
    2d12:	f0 91 f6 04 	lds	r31, 0x04F6	; 0x8004f6 <settingVal+0x1>
    2d16:	e8 0d       	add	r30, r8
    2d18:	f9 1d       	adc	r31, r9
    2d1a:	4a e0       	ldi	r20, 0x0A	; 10
    2d1c:	be 01       	movw	r22, r28
    2d1e:	6f 5f       	subi	r22, 0xFF	; 255
    2d20:	7f 4f       	sbci	r23, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
    2d2a:	f5 01       	movw	r30, r10
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	8d ef       	ldi	r24, 0xFD	; 253
    2d32:	94 e0       	ldi	r25, 0x04	; 4
    2d34:	0e 94 0a 20 	call	0x4014	; 0x4014 <u8g2_GetStrWidth>
    2d38:	61 2f       	mov	r22, r17
    2d3a:	68 0f       	add	r22, r24
    2d3c:	9e 01       	movw	r18, r28
    2d3e:	2f 5f       	subi	r18, 0xFF	; 255
    2d40:	3f 4f       	sbci	r19, 0xFF	; 255
    2d42:	40 2f       	mov	r20, r16
    2d44:	8d ef       	ldi	r24, 0xFD	; 253
    2d46:	94 e0       	ldi	r25, 0x04	; 4
    2d48:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_DrawStr>
		*(settingVal + currentChoice[5]) -= currentChoice[currentPage];
		currentChoice[currentPage] = 0;
		highlightChoice = 1;
	}
	
	for (int i = 0; i < settings; i++){
    2d4c:	ff ef       	ldi	r31, 0xFF	; 255
    2d4e:	cf 1a       	sub	r12, r31
    2d50:	df 0a       	sbc	r13, r31
    2d52:	22 e0       	ldi	r18, 0x02	; 2
    2d54:	82 0e       	add	r8, r18
    2d56:	91 1c       	adc	r9, r1
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	a8 0e       	add	r10, r24
    2d5c:	b1 1c       	adc	r11, r1
    2d5e:	e5 e0       	ldi	r30, 0x05	; 5
    2d60:	ce 16       	cp	r12, r30
    2d62:	d1 04       	cpc	r13, r1
    2d64:	09 f0       	breq	.+2      	; 0x2d68 <Page_5+0x264>
    2d66:	48 cf       	rjmp	.-368    	; 0x2bf8 <Page_5+0xf4>
			u8g2_DrawStr(&u8g2, x + u8g2_GetStrWidth(&u8g2, settingStrings[i]), y+yStat, tmptxt);
		}
	}


	reDrawRequired = 1;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	ff 90       	pop	r15
    2d82:	ef 90       	pop	r14
    2d84:	df 90       	pop	r13
    2d86:	cf 90       	pop	r12
    2d88:	bf 90       	pop	r11
    2d8a:	af 90       	pop	r10
    2d8c:	9f 90       	pop	r9
    2d8e:	8f 90       	pop	r8
    2d90:	7f 90       	pop	r7
    2d92:	6f 90       	pop	r6
    2d94:	5f 90       	pop	r5
    2d96:	4f 90       	pop	r4
    2d98:	3f 90       	pop	r3
    2d9a:	2f 90       	pop	r2
    2d9c:	08 95       	ret

00002d9e <draw>:
		}
	}
}

void draw(void){
	switch(currentPage){
    2d9e:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <currentPage>
    2da2:	82 30       	cpi	r24, 0x02	; 2
    2da4:	e9 f0       	breq	.+58     	; 0x2de0 <draw+0x42>
    2da6:	2c f4       	brge	.+10     	; 0x2db2 <draw+0x14>
    2da8:	88 23       	and	r24, r24
    2daa:	41 f0       	breq	.+16     	; 0x2dbc <draw+0x1e>
    2dac:	81 30       	cpi	r24, 0x01	; 1
    2dae:	49 f0       	breq	.+18     	; 0x2dc2 <draw+0x24>
    2db0:	26 c0       	rjmp	.+76     	; 0x2dfe <draw+0x60>
    2db2:	83 30       	cpi	r24, 0x03	; 3
    2db4:	d1 f0       	breq	.+52     	; 0x2dea <draw+0x4c>
    2db6:	84 30       	cpi	r24, 0x04	; 4
    2db8:	e9 f0       	breq	.+58     	; 0x2df4 <draw+0x56>
    2dba:	21 c0       	rjmp	.+66     	; 0x2dfe <draw+0x60>
		case 0:// page 0 start
		StartPage();
    2dbc:	0e 94 73 12 	call	0x24e6	; 0x24e6 <StartPage>
		break;//end page0
    2dc0:	08 95       	ret
		
		case 1://page 1 menu
		ScreenOverlay();//remove this if you don't want the overlay
    2dc2:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ScreenOverlay>
		
		switch (MenuAnim)//for switching between menu animations
    2dc6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <MenuAnim>
    2dca:	88 23       	and	r24, r24
    2dcc:	19 f0       	breq	.+6      	; 0x2dd4 <draw+0x36>
    2dce:	81 30       	cpi	r24, 0x01	; 1
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <draw+0x3c>
    2dd2:	08 95       	ret
		{
			case 0://animation 0
			MenuStyle0();
    2dd4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <MenuStyle0>
			break;//end animation 0
    2dd8:	08 95       	ret
			
			case 1://animation 1
			MenuStyle1();
    2dda:	0e 94 3a 11 	call	0x2274	; 0x2274 <MenuStyle1>
			break;//end animation 1
    2dde:	08 95       	ret
		}
		break;//end page 1
		
		case 2:
		ScreenOverlay();
    2de0:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ScreenOverlay>
		Page_2();
    2de4:	0e 94 a9 13 	call	0x2752	; 0x2752 <Page_2>
		break;
    2de8:	08 95       	ret

		case 3:
		ScreenOverlay();
    2dea:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ScreenOverlay>
		Page_3();
    2dee:	0e 94 6f 14 	call	0x28de	; 0x28de <Page_3>
		break;
    2df2:	08 95       	ret
		
		case 4:
		ScreenOverlay();
    2df4:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ScreenOverlay>
		Page_4();
    2df8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <Page_4>
		break;
    2dfc:	08 95       	ret
		
		default:
		if (currentPage >= SETTINGPAGE && currentPage <= SETTINGPAGE + settings){
    2dfe:	85 50       	subi	r24, 0x05	; 5
    2e00:	86 30       	cpi	r24, 0x06	; 6
    2e02:	28 f4       	brcc	.+10     	; 0x2e0e <draw+0x70>
			ScreenOverlay();
    2e04:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ScreenOverlay>
			Page_5();
    2e08:	0e 94 82 15 	call	0x2b04	; 0x2b04 <Page_5>
    2e0c:	08 95       	ret
			}else{
			nopage();
    2e0e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <nopage>
    2e12:	08 95       	ret

00002e14 <screenRoutine>:



//--------------------------------------
void screenRoutine(void){
	updateButtons();
    2e14:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <updateButtons>
	//updateBatterySens();
	if (reDrawRequired || reDrawRequiredTime)
    2e18:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <reDrawRequired>
    2e1c:	81 11       	cpse	r24, r1
    2e1e:	04 c0       	rjmp	.+8      	; 0x2e28 <screenRoutine+0x14>
    2e20:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <reDrawRequiredTime>
    2e24:	88 23       	and	r24, r24
    2e26:	89 f0       	breq	.+34     	; 0x2e4a <screenRoutine+0x36>
	{
		reDrawRequired = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <reDrawRequired>
		u8g2_FirstPage(&u8g2);
    2e2e:	8d ef       	ldi	r24, 0xFD	; 253
    2e30:	94 e0       	ldi	r25, 0x04	; 4
    2e32:	0e 94 21 1a 	call	0x3442	; 0x3442 <u8g2_FirstPage>
		do
		{
			draw();
    2e36:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <draw>
		} while (u8g2_NextPage(&u8g2));
    2e3a:	8d ef       	ldi	r24, 0xFD	; 253
    2e3c:	94 e0       	ldi	r25, 0x04	; 4
    2e3e:	0e 94 34 1a 	call	0x3468	; 0x3468 <u8g2_NextPage>
    2e42:	81 11       	cpse	r24, r1
    2e44:	f8 cf       	rjmp	.-16     	; 0x2e36 <screenRoutine+0x22>
		
		reDrawRequiredTime = 0;
    2e46:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <reDrawRequiredTime>
    2e4a:	08 95       	ret

00002e4c <initSpeedometer>:
// #define TRIGG0 PORTB1


void initSpeedometer( uint32_t *SPDOCount, int *SPDOspeed){
	
	spdo_Count = SPDOCount;
    2e4c:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <spdo_Count+0x1>
    2e50:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <spdo_Count>
	spdo_speed = SPDOspeed;
    2e54:	70 93 73 05 	sts	0x0573, r23	; 0x800573 <spdo_speed+0x1>
    2e58:	60 93 72 05 	sts	0x0572, r22	; 0x800572 <spdo_speed>
	DDRB &= ~(1<<PINB2);
    2e5c:	22 98       	cbi	0x04, 2	; 4
	
	EIMSK |= (1<<INT0);
    2e5e:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00)/* | (1<<ISC01)*/; //0 run interrupt any logical change. 0 & 1 = only rising edge
    2e60:	e9 e6       	ldi	r30, 0x69	; 105
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	81 60       	ori	r24, 0x01	; 1
    2e68:	80 83       	st	Z, r24
	
	//rest of the timer is setup in pwm.c
	TIMSK2 |= (1<<TOIE2);
    2e6a:	e0 e7       	ldi	r30, 0x70	; 112
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	81 60       	ori	r24, 0x01	; 1
    2e72:	80 83       	st	Z, r24
    2e74:	08 95       	ret

00002e76 <__vector_1>:
}

ISR(INT0_vect){//on pin change
    2e76:	1f 92       	push	r1
    2e78:	0f 92       	push	r0
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	0f 92       	push	r0
    2e7e:	11 24       	eor	r1, r1
    2e80:	8f 93       	push	r24
    2e82:	9f 93       	push	r25
    2e84:	af 93       	push	r26
    2e86:	bf 93       	push	r27
    2e88:	ef 93       	push	r30
    2e8a:	ff 93       	push	r31
	(*spdo_Count)++;
    2e8c:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <spdo_Count>
    2e90:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <spdo_Count+0x1>
    2e94:	80 81       	ld	r24, Z
    2e96:	91 81       	ldd	r25, Z+1	; 0x01
    2e98:	a2 81       	ldd	r26, Z+2	; 0x02
    2e9a:	b3 81       	ldd	r27, Z+3	; 0x03
    2e9c:	01 96       	adiw	r24, 0x01	; 1
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	b1 1d       	adc	r27, r1
    2ea2:	80 83       	st	Z, r24
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	a2 83       	std	Z+2, r26	; 0x02
    2ea8:	b3 83       	std	Z+3, r27	; 0x03
}
    2eaa:	ff 91       	pop	r31
    2eac:	ef 91       	pop	r30
    2eae:	bf 91       	pop	r27
    2eb0:	af 91       	pop	r26
    2eb2:	9f 91       	pop	r25
    2eb4:	8f 91       	pop	r24
    2eb6:	0f 90       	pop	r0
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	0f 90       	pop	r0
    2ebc:	1f 90       	pop	r1
    2ebe:	18 95       	reti

00002ec0 <__vector_9>:

ISR(TIMER2_OVF_vect){//timer overflow
    2ec0:	1f 92       	push	r1
    2ec2:	0f 92       	push	r0
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	0f 92       	push	r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	2f 93       	push	r18
    2ecc:	3f 93       	push	r19
    2ece:	4f 93       	push	r20
    2ed0:	5f 93       	push	r21
    2ed2:	6f 93       	push	r22
    2ed4:	7f 93       	push	r23
    2ed6:	8f 93       	push	r24
    2ed8:	9f 93       	push	r25
    2eda:	af 93       	push	r26
    2edc:	bf 93       	push	r27
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	ef 93       	push	r30
    2ee4:	ff 93       	push	r31
	static int count = 0;
	//static int prevcount = 0;
	if(count++ >= 976){//roughly every second
    2ee6:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <count.1627>
    2eea:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <count.1627+0x1>
    2eee:	9c 01       	movw	r18, r24
    2ef0:	2f 5f       	subi	r18, 0xFF	; 255
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	30 93 d0 03 	sts	0x03D0, r19	; 0x8003d0 <count.1627+0x1>
    2ef8:	20 93 cf 03 	sts	0x03CF, r18	; 0x8003cf <count.1627>
    2efc:	80 3d       	cpi	r24, 0xD0	; 208
    2efe:	93 40       	sbci	r25, 0x03	; 3
    2f00:	0c f4       	brge	.+2      	; 0x2f04 <__vector_9+0x44>
    2f02:	46 c0       	rjmp	.+140    	; 0x2f90 <__vector_9+0xd0>
		*spdo_speed = 0;
    2f04:	e0 91 72 05 	lds	r30, 0x0572	; 0x800572 <spdo_speed>
    2f08:	f0 91 73 05 	lds	r31, 0x0573	; 0x800573 <spdo_speed+0x1>
    2f0c:	11 82       	std	Z+1, r1	; 0x01
    2f0e:	10 82       	st	Z, r1
		
		spdo_CountpSec = *spdo_Count - spdo_CountPrev;
    2f10:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <spdo_Count>
    2f14:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <spdo_Count+0x1>
    2f18:	20 81       	ld	r18, Z
    2f1a:	31 81       	ldd	r19, Z+1	; 0x01
    2f1c:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <spdo_CountPrev>
    2f20:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <spdo_CountPrev+0x1>
    2f24:	28 1b       	sub	r18, r24
    2f26:	39 0b       	sbc	r19, r25
    2f28:	30 93 d2 03 	sts	0x03D2, r19	; 0x8003d2 <spdo_CountpSec+0x1>
    2f2c:	20 93 d1 03 	sts	0x03D1, r18	; 0x8003d1 <spdo_CountpSec>
		
		*spdo_speed = spdo_CountpSec / 2; //Meters and since its a time interval of 1 second you get meters per second
    2f30:	e0 91 72 05 	lds	r30, 0x0572	; 0x800572 <spdo_speed>
    2f34:	f0 91 73 05 	lds	r31, 0x0573	; 0x800573 <spdo_speed+0x1>
    2f38:	c9 01       	movw	r24, r18
    2f3a:	99 23       	and	r25, r25
    2f3c:	0c f4       	brge	.+2      	; 0x2f40 <__vector_9+0x80>
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	95 95       	asr	r25
    2f42:	87 95       	ror	r24
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	80 83       	st	Z, r24
		*spdo_speed *= 3.6; //from m/s to km/h
    2f48:	c0 91 72 05 	lds	r28, 0x0572	; 0x800572 <spdo_speed>
    2f4c:	d0 91 73 05 	lds	r29, 0x0573	; 0x800573 <spdo_speed+0x1>
    2f50:	68 81       	ld	r22, Y
    2f52:	79 81       	ldd	r23, Y+1	; 0x01
    2f54:	07 2e       	mov	r0, r23
    2f56:	00 0c       	add	r0, r0
    2f58:	88 0b       	sbc	r24, r24
    2f5a:	99 0b       	sbc	r25, r25
    2f5c:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    2f60:	26 e6       	ldi	r18, 0x66	; 102
    2f62:	36 e6       	ldi	r19, 0x66	; 102
    2f64:	46 e6       	ldi	r20, 0x66	; 102
    2f66:	50 e4       	ldi	r21, 0x40	; 64
    2f68:	0e 94 3e 29 	call	0x527c	; 0x527c <__mulsf3>
    2f6c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    2f70:	79 83       	std	Y+1, r23	; 0x01
    2f72:	68 83       	st	Y, r22
		
		//prevcount = count;
		spdo_CountPrev = *spdo_Count;
    2f74:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <spdo_Count>
    2f78:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <spdo_Count+0x1>
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <spdo_CountPrev+0x1>
    2f84:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <spdo_CountPrev>
		
		count = 0;
    2f88:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <count.1627+0x1>
    2f8c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <count.1627>
	}
	
    2f90:	ff 91       	pop	r31
    2f92:	ef 91       	pop	r30
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	bf 91       	pop	r27
    2f9a:	af 91       	pop	r26
    2f9c:	9f 91       	pop	r25
    2f9e:	8f 91       	pop	r24
    2fa0:	7f 91       	pop	r23
    2fa2:	6f 91       	pop	r22
    2fa4:	5f 91       	pop	r21
    2fa6:	4f 91       	pop	r20
    2fa8:	3f 91       	pop	r19
    2faa:	2f 91       	pop	r18
    2fac:	0f 90       	pop	r0
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	0f 90       	pop	r0
    2fb2:	1f 90       	pop	r1
    2fb4:	18 95       	reti

00002fb6 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    2fb6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2fba:	88 e4       	ldi	r24, 0x48	; 72
    2fbc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2fc0:	08 95       	ret

00002fc2 <i2c_start_wait>:
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	ec eb       	ldi	r30, 0xBC	; 188
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	44 ea       	ldi	r20, 0xA4	; 164
    2fcc:	a9 eb       	ldi	r26, 0xB9	; 185
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	cb eb       	ldi	r28, 0xBB	; 187
    2fd2:	d0 e0       	ldi	r29, 0x00	; 0
    2fd4:	54 e8       	ldi	r21, 0x84	; 132
    2fd6:	64 e9       	ldi	r22, 0x94	; 148
    2fd8:	40 83       	st	Z, r20
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	90 81       	ld	r25, Z
    2fe0:	99 23       	and	r25, r25
    2fe2:	34 f0       	brlt	.+12     	; 0x2ff0 <i2c_start_wait+0x2e>
    2fe4:	2f 5f       	subi	r18, 0xFF	; 255
    2fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe8:	21 15       	cp	r18, r1
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	39 07       	cpc	r19, r25
    2fee:	b9 f7       	brne	.-18     	; 0x2fde <i2c_start_wait+0x1c>
    2ff0:	9c 91       	ld	r25, X
    2ff2:	98 7f       	andi	r25, 0xF8	; 248
    2ff4:	98 30       	cpi	r25, 0x08	; 8
    2ff6:	11 f0       	breq	.+4      	; 0x2ffc <i2c_start_wait+0x3a>
    2ff8:	90 31       	cpi	r25, 0x10	; 16
    2ffa:	71 f7       	brne	.-36     	; 0x2fd8 <i2c_start_wait+0x16>
    2ffc:	88 83       	st	Y, r24
    2ffe:	50 83       	st	Z, r21
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	90 81       	ld	r25, Z
    3006:	99 23       	and	r25, r25
    3008:	34 f0       	brlt	.+12     	; 0x3016 <i2c_start_wait+0x54>
    300a:	2f 5f       	subi	r18, 0xFF	; 255
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	21 15       	cp	r18, r1
    3010:	91 e0       	ldi	r25, 0x01	; 1
    3012:	39 07       	cpc	r19, r25
    3014:	b9 f7       	brne	.-18     	; 0x3004 <i2c_start_wait+0x42>
    3016:	9c 91       	ld	r25, X
    3018:	98 7f       	andi	r25, 0xF8	; 248
    301a:	90 32       	cpi	r25, 0x20	; 32
    301c:	11 f0       	breq	.+4      	; 0x3022 <i2c_start_wait+0x60>
    301e:	98 35       	cpi	r25, 0x58	; 88
    3020:	69 f4       	brne	.+26     	; 0x303c <i2c_start_wait+0x7a>
    3022:	60 83       	st	Z, r22
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	90 81       	ld	r25, Z
    302a:	94 ff       	sbrs	r25, 4
    302c:	d5 cf       	rjmp	.-86     	; 0x2fd8 <i2c_start_wait+0x16>
    302e:	2f 5f       	subi	r18, 0xFF	; 255
    3030:	3f 4f       	sbci	r19, 0xFF	; 255
    3032:	21 15       	cp	r18, r1
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	39 07       	cpc	r19, r25
    3038:	b9 f7       	brne	.-18     	; 0x3028 <i2c_start_wait+0x66>
    303a:	ce cf       	rjmp	.-100    	; 0x2fd8 <i2c_start_wait+0x16>
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	08 95       	ret

00003042 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3042:	84 e9       	ldi	r24, 0x94	; 148
    3044:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	ec eb       	ldi	r30, 0xBC	; 188
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	20 81       	ld	r18, Z
    3052:	24 ff       	sbrs	r18, 4
    3054:	05 c0       	rjmp	.+10     	; 0x3060 <i2c_stop+0x1e>
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	81 15       	cp	r24, r1
    305a:	21 e0       	ldi	r18, 0x01	; 1
    305c:	92 07       	cpc	r25, r18
    305e:	c1 f7       	brne	.-16     	; 0x3050 <i2c_stop+0xe>
    3060:	08 95       	ret

00003062 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3062:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
    3066:	84 e8       	ldi	r24, 0x84	; 132
    3068:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    306c:	8f ef       	ldi	r24, 0xFF	; 255
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a0 e0       	ldi	r26, 0x00	; 0
    3072:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    3074:	ec eb       	ldi	r30, 0xBC	; 188
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	20 81       	ld	r18, Z
    307a:	22 23       	and	r18, r18
    307c:	2c f0       	brlt	.+10     	; 0x3088 <i2c_write+0x26>
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	a1 09       	sbc	r26, r1
    3082:	b1 09       	sbc	r27, r1
    3084:	c8 f7       	brcc	.-14     	; 0x3078 <i2c_write+0x16>
    3086:	04 c0       	rjmp	.+8      	; 0x3090 <i2c_write+0x2e>
	if(i2c_timer == 0)
    3088:	89 2b       	or	r24, r25
    308a:	8a 2b       	or	r24, r26
    308c:	8b 2b       	or	r24, r27
    308e:	41 f0       	breq	.+16     	; 0x30a0 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3090:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    3094:	98 7f       	andi	r25, 0xF8	; 248
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	98 32       	cpi	r25, 0x28	; 40
    309a:	19 f4       	brne	.+6      	; 0x30a2 <i2c_write+0x40>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	08 95       	ret
    30a0:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    30a2:	08 95       	ret

000030a4 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    30a4:	df 92       	push	r13
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	7c 01       	movw	r14, r24
    30b4:	16 2f       	mov	r17, r22
    30b6:	c4 2f       	mov	r28, r20
    30b8:	d2 2e       	mov	r13, r18
    30ba:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    30bc:	04 2f       	mov	r16, r20
    30be:	0d 0f       	add	r16, r29
    30c0:	26 2f       	mov	r18, r22
    30c2:	2d 0d       	add	r18, r13
    30c4:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    30c8:	88 23       	and	r24, r24
    30ca:	61 f0       	breq	.+24     	; 0x30e4 <u8g2_DrawBox+0x40>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    30cc:	dd 23       	and	r29, r29
    30ce:	51 f0       	breq	.+20     	; 0x30e4 <u8g2_DrawBox+0x40>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    30d0:	00 e0       	ldi	r16, 0x00	; 0
    30d2:	2d 2d       	mov	r18, r13
    30d4:	4c 2f       	mov	r20, r28
    30d6:	61 2f       	mov	r22, r17
    30d8:	c7 01       	movw	r24, r14
    30da:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
    y++;    
    30de:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
    30e0:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    30e2:	b1 f7       	brne	.-20     	; 0x30d0 <u8g2_DrawBox+0x2c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	ef 90       	pop	r14
    30f0:	df 90       	pop	r13
    30f2:	08 95       	ret

000030f4 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    30f4:	cf 92       	push	r12
    30f6:	df 92       	push	r13
    30f8:	ef 92       	push	r14
    30fa:	ff 92       	push	r15
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	7c 01       	movw	r14, r24
    3106:	d6 2f       	mov	r29, r22
    3108:	c4 2f       	mov	r28, r20
    310a:	d2 2e       	mov	r13, r18
    310c:	10 2f       	mov	r17, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    310e:	c6 2e       	mov	r12, r22
    3110:	c2 0e       	add	r12, r18
    3112:	04 2f       	mov	r16, r20
    3114:	01 0f       	add	r16, r17
    3116:	2c 2d       	mov	r18, r12
    3118:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    311c:	88 23       	and	r24, r24
    311e:	19 f1       	breq	.+70     	; 0x3166 <u8g2_DrawFrame+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    3120:	00 e0       	ldi	r16, 0x00	; 0
    3122:	2d 2d       	mov	r18, r13
    3124:	4c 2f       	mov	r20, r28
    3126:	6d 2f       	mov	r22, r29
    3128:	c7 01       	movw	r24, r14
    312a:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
  if (h >= 2) {
    312e:	12 30       	cpi	r17, 0x02	; 2
    3130:	d0 f0       	brcs	.+52     	; 0x3166 <u8g2_DrawFrame+0x72>
    h-=2;
    3132:	12 50       	subi	r17, 0x02	; 2
    y++;
    3134:	cf 5f       	subi	r28, 0xFF	; 255
    if (h > 0) {
    3136:	11 23       	and	r17, r17
    3138:	79 f0       	breq	.+30     	; 0x3158 <u8g2_DrawFrame+0x64>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    313a:	01 e0       	ldi	r16, 0x01	; 1
    313c:	21 2f       	mov	r18, r17
    313e:	4c 2f       	mov	r20, r28
    3140:	6d 2f       	mov	r22, r29
    3142:	c7 01       	movw	r24, r14
    3144:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    3148:	6f ef       	ldi	r22, 0xFF	; 255
    314a:	6c 0d       	add	r22, r12
    314c:	21 2f       	mov	r18, r17
    314e:	4c 2f       	mov	r20, r28
    3150:	c7 01       	movw	r24, r14
    3152:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
      y+=h;
    3156:	c1 0f       	add	r28, r17
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    3158:	00 e0       	ldi	r16, 0x00	; 0
    315a:	2d 2d       	mov	r18, r13
    315c:	4c 2f       	mov	r20, r28
    315e:	6d 2f       	mov	r22, r29
    3160:	c7 01       	movw	r24, r14
    3162:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
  }
}
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	0f 91       	pop	r16
    316e:	ff 90       	pop	r15
    3170:	ef 90       	pop	r14
    3172:	df 90       	pop	r13
    3174:	cf 90       	pop	r12
    3176:	08 95       	ret

00003178 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    3178:	7f 92       	push	r7
    317a:	8f 92       	push	r8
    317c:	9f 92       	push	r9
    317e:	af 92       	push	r10
    3180:	bf 92       	push	r11
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	6c 01       	movw	r12, r24
    3194:	16 2f       	mov	r17, r22
    3196:	f4 2e       	mov	r15, r20
    3198:	b2 2e       	mov	r11, r18
    319a:	c0 2f       	mov	r28, r16
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    319c:	a4 2e       	mov	r10, r20
    319e:	a0 0e       	add	r10, r16
    31a0:	d6 2f       	mov	r29, r22
    31a2:	d2 0f       	add	r29, r18
    31a4:	0a 2d       	mov	r16, r10
    31a6:	2d 2f       	mov	r18, r29
    31a8:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    31ac:	88 23       	and	r24, r24
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <u8g2_DrawRBox+0x3a>
    31b0:	49 c0       	rjmp	.+146    	; 0x3244 <u8g2_DrawRBox+0xcc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    31b2:	81 2e       	mov	r8, r17
    31b4:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    31b6:	9f 2c       	mov	r9, r15
    31b8:	9e 0c       	add	r9, r14
    31ba:	8e 2d       	mov	r24, r14
    31bc:	80 95       	com	r24
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
    31be:	d8 0f       	add	r29, r24
  
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;
    31c0:	a8 0e       	add	r10, r24

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    31c2:	02 e0       	ldi	r16, 0x02	; 2
    31c4:	2e 2d       	mov	r18, r14
    31c6:	49 2d       	mov	r20, r9
    31c8:	68 2d       	mov	r22, r8
    31ca:	c6 01       	movw	r24, r12
    31cc:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    31d0:	01 e0       	ldi	r16, 0x01	; 1
    31d2:	2e 2d       	mov	r18, r14
    31d4:	49 2d       	mov	r20, r9
    31d6:	6d 2f       	mov	r22, r29
    31d8:	c6 01       	movw	r24, r12
    31da:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    31de:	04 e0       	ldi	r16, 0x04	; 4
    31e0:	2e 2d       	mov	r18, r14
    31e2:	4a 2d       	mov	r20, r10
    31e4:	68 2d       	mov	r22, r8
    31e6:	c6 01       	movw	r24, r12
    31e8:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    31ec:	08 e0       	ldi	r16, 0x08	; 8
    31ee:	2e 2d       	mov	r18, r14
    31f0:	4a 2d       	mov	r20, r10
    31f2:	6d 2f       	mov	r22, r29
    31f4:	c6 01       	movw	r24, r12
    31f6:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    31fa:	2b 2d       	mov	r18, r11
    31fc:	2e 19       	sub	r18, r14
    ww -= r;
    31fe:	2e 19       	sub	r18, r14
    xl++;
    yu++;
    
    if ( ww >= 3 )
    3200:	23 30       	cpi	r18, 0x03	; 3
    3202:	98 f0       	brcs	.+38     	; 0x322a <u8g2_DrawRBox+0xb2>
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
    3204:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    3206:	de ef       	ldi	r29, 0xFE	; 254
    3208:	d2 0f       	add	r29, r18
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
    320a:	77 24       	eor	r7, r7
    320c:	73 94       	inc	r7
    320e:	7e 0c       	add	r7, r14
    3210:	07 2d       	mov	r16, r7
    3212:	2d 2f       	mov	r18, r29
    3214:	4f 2d       	mov	r20, r15
    3216:	68 2d       	mov	r22, r8
    3218:	c6 01       	movw	r24, r12
    321a:	0e 94 52 18 	call	0x30a4	; 0x30a4 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
    321e:	2d 2f       	mov	r18, r29
    3220:	4a 2d       	mov	r20, r10
    3222:	68 2d       	mov	r22, r8
    3224:	c6 01       	movw	r24, r12
    3226:	0e 94 52 18 	call	0x30a4	; 0x30a4 <u8g2_DrawBox>
    }
    
    hh = h;
    hh -= r;
    322a:	ce 19       	sub	r28, r14
    hh -= r;
    322c:	ce 19       	sub	r28, r14
    //h--;
    if ( hh >= 3 )
    322e:	c3 30       	cpi	r28, 0x03	; 3
    3230:	48 f0       	brcs	.+18     	; 0x3244 <u8g2_DrawRBox+0xcc>
    {
      hh -= 2;
      u8g2_DrawBox(u8g2, x, yu, w, hh);
    3232:	0e ef       	ldi	r16, 0xFE	; 254
    3234:	0c 0f       	add	r16, r28
    3236:	41 e0       	ldi	r20, 0x01	; 1
    3238:	49 0d       	add	r20, r9
    323a:	2b 2d       	mov	r18, r11
    323c:	61 2f       	mov	r22, r17
    323e:	c6 01       	movw	r24, r12
    3240:	0e 94 52 18 	call	0x30a4	; 0x30a4 <u8g2_DrawBox>
    }
  }
}
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	ff 90       	pop	r15
    324e:	ef 90       	pop	r14
    3250:	df 90       	pop	r13
    3252:	cf 90       	pop	r12
    3254:	bf 90       	pop	r11
    3256:	af 90       	pop	r10
    3258:	9f 90       	pop	r9
    325a:	8f 90       	pop	r8
    325c:	7f 90       	pop	r7
    325e:	08 95       	ret

00003260 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
    3260:	8f 92       	push	r8
    3262:	9f 92       	push	r9
    3264:	af 92       	push	r10
    3266:	bf 92       	push	r11
    3268:	cf 92       	push	r12
    326a:	df 92       	push	r13
    326c:	ef 92       	push	r14
    326e:	ff 92       	push	r15
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	ec 01       	movw	r28, r24
    327a:	16 2f       	mov	r17, r22
    327c:	f4 2e       	mov	r15, r20
    327e:	c2 2e       	mov	r12, r18
    3280:	b0 2e       	mov	r11, r16
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    3282:	a4 2e       	mov	r10, r20
    3284:	a0 0e       	add	r10, r16
    3286:	d6 2e       	mov	r13, r22
    3288:	d2 0e       	add	r13, r18
    328a:	0a 2d       	mov	r16, r10
    328c:	2d 2d       	mov	r18, r13
    328e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    3292:	88 23       	and	r24, r24
    3294:	09 f4       	brne	.+2      	; 0x3298 <u8g2_DrawRFrame+0x38>
    3296:	52 c0       	rjmp	.+164    	; 0x333c <u8g2_DrawRFrame+0xdc>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
    3298:	81 2e       	mov	r8, r17
    329a:	8e 0c       	add	r8, r14
  yu = y;
  yu += r;
    329c:	9f 2c       	mov	r9, r15
    329e:	9e 0c       	add	r9, r14
    32a0:	8e 2d       	mov	r24, r14
    32a2:	80 95       	com	r24
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
    32a4:	d8 0e       	add	r13, r24
    
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;
    32a6:	a8 0e       	add	r10, r24

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
    32a8:	02 e0       	ldi	r16, 0x02	; 2
    32aa:	2e 2d       	mov	r18, r14
    32ac:	49 2d       	mov	r20, r9
    32ae:	68 2d       	mov	r22, r8
    32b0:	ce 01       	movw	r24, r28
    32b2:	0e 94 09 1b 	call	0x3612	; 0x3612 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
    32b6:	01 e0       	ldi	r16, 0x01	; 1
    32b8:	2e 2d       	mov	r18, r14
    32ba:	49 2d       	mov	r20, r9
    32bc:	6d 2d       	mov	r22, r13
    32be:	ce 01       	movw	r24, r28
    32c0:	0e 94 09 1b 	call	0x3612	; 0x3612 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
    32c4:	04 e0       	ldi	r16, 0x04	; 4
    32c6:	2e 2d       	mov	r18, r14
    32c8:	4a 2d       	mov	r20, r10
    32ca:	68 2d       	mov	r22, r8
    32cc:	ce 01       	movw	r24, r28
    32ce:	0e 94 09 1b 	call	0x3612	; 0x3612 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
    32d2:	08 e0       	ldi	r16, 0x08	; 8
    32d4:	2e 2d       	mov	r18, r14
    32d6:	4a 2d       	mov	r20, r10
    32d8:	6d 2d       	mov	r22, r13
    32da:	ce 01       	movw	r24, r28
    32dc:	0e 94 09 1b 	call	0x3612	; 0x3612 <u8g2_DrawCircle>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    32e0:	2c 2d       	mov	r18, r12
    32e2:	2e 19       	sub	r18, r14
    ww -= r;
    32e4:	2e 19       	sub	r18, r14
    hh = h;
    hh -= r;
    32e6:	0b 2d       	mov	r16, r11
    32e8:	0e 19       	sub	r16, r14
    hh -= r;
    32ea:	0e 19       	sub	r16, r14
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
    32ec:	23 30       	cpi	r18, 0x03	; 3
    32ee:	a0 f0       	brcs	.+40     	; 0x3318 <u8g2_DrawRFrame+0xb8>
    ww -= r;
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    32f0:	83 94       	inc	r8
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
    32f2:	0f 2e       	mov	r0, r31
    32f4:	fe ef       	ldi	r31, 0xFE	; 254
    32f6:	ef 2e       	mov	r14, r31
    32f8:	f0 2d       	mov	r31, r0
    32fa:	e2 0e       	add	r14, r18
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
    32fc:	2e 2d       	mov	r18, r14
    32fe:	4f 2d       	mov	r20, r15
    3300:	68 2d       	mov	r22, r8
    3302:	ce 01       	movw	r24, r28
    3304:	0e 94 93 20 	call	0x4126	; 0x4126 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    3308:	4f ef       	ldi	r20, 0xFF	; 255
    330a:	4b 0d       	add	r20, r11
    330c:	4f 0d       	add	r20, r15
    330e:	2e 2d       	mov	r18, r14
    3310:	68 2d       	mov	r22, r8
    3312:	ce 01       	movw	r24, r28
    3314:	0e 94 93 20 	call	0x4126	; 0x4126 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
    3318:	03 30       	cpi	r16, 0x03	; 3
    331a:	80 f0       	brcs	.+32     	; 0x333c <u8g2_DrawRFrame+0xdc>
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
    331c:	93 94       	inc	r9
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
    331e:	02 50       	subi	r16, 0x02	; 2
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
    3320:	20 2f       	mov	r18, r16
    3322:	49 2d       	mov	r20, r9
    3324:	61 2f       	mov	r22, r17
    3326:	ce 01       	movw	r24, r28
    3328:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
    332c:	6f ef       	ldi	r22, 0xFF	; 255
    332e:	6c 0d       	add	r22, r12
    3330:	61 0f       	add	r22, r17
    3332:	20 2f       	mov	r18, r16
    3334:	49 2d       	mov	r20, r9
    3336:	ce 01       	movw	r24, r28
    3338:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    }
  }
}
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ff 90       	pop	r15
    3346:	ef 90       	pop	r14
    3348:	df 90       	pop	r13
    334a:	cf 90       	pop	r12
    334c:	bf 90       	pop	r11
    334e:	af 90       	pop	r10
    3350:	9f 90       	pop	r9
    3352:	8f 90       	pop	r8
    3354:	08 95       	ret

00003356 <u8g2_send_buffer>:
/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}
    3356:	af 92       	push	r10
    3358:	bf 92       	push	r11
    335a:	cf 92       	push	r12
    335c:	df 92       	push	r13
    335e:	ef 92       	push	r14
    3360:	ff 92       	push	r15
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	cf 93       	push	r28
    3368:	df 93       	push	r29
    336a:	7c 01       	movw	r14, r24
    336c:	dc 01       	movw	r26, r24
    336e:	94 96       	adiw	r26, 0x24	; 36
    3370:	bc 90       	ld	r11, X
    3372:	94 97       	sbiw	r26, 0x24	; 36
    3374:	95 96       	adiw	r26, 0x25	; 37
    3376:	dc 91       	ld	r29, X
    3378:	95 97       	sbiw	r26, 0x25	; 37
    337a:	ed 91       	ld	r30, X+
    337c:	fc 91       	ld	r31, X
    337e:	a1 88       	ldd	r10, Z+17	; 0x11
    3380:	cd 2f       	mov	r28, r29
    3382:	c1 2c       	mov	r12, r1
    3384:	d1 2c       	mov	r13, r1
    3386:	d7 01       	movw	r26, r14
    3388:	ed 91       	ld	r30, X+
    338a:	fc 91       	ld	r31, X
    338c:	11 97       	sbiw	r26, 0x01	; 1
    338e:	20 89       	ldd	r18, Z+16	; 0x10
    3390:	92 96       	adiw	r26, 0x22	; 34
    3392:	0d 91       	ld	r16, X+
    3394:	1c 91       	ld	r17, X
    3396:	93 97       	sbiw	r26, 0x23	; 35
    3398:	42 2f       	mov	r20, r18
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	44 0f       	add	r20, r20
    339e:	55 1f       	adc	r21, r21
    33a0:	44 0f       	add	r20, r20
    33a2:	55 1f       	adc	r21, r21
    33a4:	44 0f       	add	r20, r20
    33a6:	55 1f       	adc	r21, r21
    33a8:	4c 9d       	mul	r20, r12
    33aa:	c0 01       	movw	r24, r0
    33ac:	4d 9d       	mul	r20, r13
    33ae:	90 0d       	add	r25, r0
    33b0:	5c 9d       	mul	r21, r12
    33b2:	90 0d       	add	r25, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	08 0f       	add	r16, r24
    33b8:	19 1f       	adc	r17, r25
    33ba:	4c 2f       	mov	r20, r28
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	c7 01       	movw	r24, r14
    33c0:	0e 94 2e 24 	call	0x485c	; 0x485c <u8x8_DrawTile>
    33c4:	cf 5f       	subi	r28, 0xFF	; 255
    33c6:	8c 2f       	mov	r24, r28
    33c8:	8d 1b       	sub	r24, r29
    33ca:	8b 15       	cp	r24, r11
    33cc:	28 f4       	brcc	.+10     	; 0x33d8 <u8g2_send_buffer+0x82>
    33ce:	bf ef       	ldi	r27, 0xFF	; 255
    33d0:	cb 1a       	sub	r12, r27
    33d2:	db 0a       	sbc	r13, r27
    33d4:	ca 15       	cp	r28, r10
    33d6:	b8 f2       	brcs	.-82     	; 0x3386 <u8g2_send_buffer+0x30>
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	ff 90       	pop	r15
    33e2:	ef 90       	pop	r14
    33e4:	df 90       	pop	r13
    33e6:	cf 90       	pop	r12
    33e8:	bf 90       	pop	r11
    33ea:	af 90       	pop	r10
    33ec:	08 95       	ret

000033ee <u8g2_ClearBuffer>:
    33ee:	fc 01       	movw	r30, r24
    33f0:	a0 81       	ld	r26, Z
    33f2:	b1 81       	ldd	r27, Z+1	; 0x01
    33f4:	50 96       	adiw	r26, 0x10	; 16
    33f6:	9c 91       	ld	r25, X
    33f8:	44 a1       	ldd	r20, Z+36	; 0x24
    33fa:	94 9f       	mul	r25, r20
    33fc:	a0 01       	movw	r20, r0
    33fe:	11 24       	eor	r1, r1
    3400:	44 0f       	add	r20, r20
    3402:	55 1f       	adc	r21, r21
    3404:	44 0f       	add	r20, r20
    3406:	55 1f       	adc	r21, r21
    3408:	44 0f       	add	r20, r20
    340a:	55 1f       	adc	r21, r21
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	82 a1       	ldd	r24, Z+34	; 0x22
    3412:	93 a1       	ldd	r25, Z+35	; 0x23
    3414:	0e 94 e7 29 	call	0x53ce	; 0x53ce <memset>
    3418:	08 95       	ret

0000341a <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	ec 01       	movw	r28, r24
  u8g2->tile_curr_row = row;
    3420:	6d a3       	std	Y+37, r22	; 0x25
  u8g2->cb->update_dimension(u8g2);
    3422:	e8 a1       	ldd	r30, Y+32	; 0x20
    3424:	f9 a1       	ldd	r31, Y+33	; 0x21
    3426:	01 90       	ld	r0, Z+
    3428:	f0 81       	ld	r31, Z
    342a:	e0 2d       	mov	r30, r0
    342c:	09 95       	icall
  u8g2->cb->update_page_win(u8g2);
    342e:	e8 a1       	ldd	r30, Y+32	; 0x20
    3430:	f9 a1       	ldd	r31, Y+33	; 0x21
    3432:	02 80       	ldd	r0, Z+2	; 0x02
    3434:	f3 81       	ldd	r31, Z+3	; 0x03
    3436:	e0 2d       	mov	r30, r0
    3438:	ce 01       	movw	r24, r28
    343a:	09 95       	icall
}
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	08 95       	ret

00003442 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	ec 01       	movw	r28, r24
  if ( u8g2->is_auto_page_clear )
    3448:	fc 01       	movw	r30, r24
    344a:	ec 59       	subi	r30, 0x9C	; 156
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 81       	ld	r24, Z
    3450:	88 23       	and	r24, r24
    3452:	19 f0       	breq	.+6      	; 0x345a <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
    3454:	ce 01       	movw	r24, r28
    3456:	0e 94 f7 19 	call	0x33ee	; 0x33ee <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	ce 01       	movw	r24, r28
    345e:	0e 94 0d 1a 	call	0x341a	; 0x341a <u8g2_SetBufferCurrTileRow>
}
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	08 95       	ret

00003468 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	ec 01       	movw	r28, r24
  uint8_t row;
  u8g2_send_buffer(u8g2);
    3470:	0e 94 ab 19 	call	0x3356	; 0x3356 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
    3474:	1d a1       	ldd	r17, Y+37	; 0x25
  row += u8g2->tile_buf_height;
    3476:	8c a1       	ldd	r24, Y+36	; 0x24
    3478:	18 0f       	add	r17, r24
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    347a:	e8 81       	ld	r30, Y
    347c:	f9 81       	ldd	r31, Y+1	; 0x01
    347e:	81 89       	ldd	r24, Z+17	; 0x11
    3480:	18 17       	cp	r17, r24
    3482:	28 f0       	brcs	.+10     	; 0x348e <u8g2_NextPage+0x26>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    3484:	ce 01       	movw	r24, r28
    3486:	0e 94 72 24 	call	0x48e4	; 0x48e4 <u8x8_RefreshDisplay>
    return 0;
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	0e c0       	rjmp	.+28     	; 0x34aa <u8g2_NextPage+0x42>
  }
  if ( u8g2->is_auto_page_clear )
    348e:	fe 01       	movw	r30, r28
    3490:	ec 59       	subi	r30, 0x9C	; 156
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 81       	ld	r24, Z
    3496:	88 23       	and	r24, r24
    3498:	19 f0       	breq	.+6      	; 0x34a0 <u8g2_NextPage+0x38>
  {
    u8g2_ClearBuffer(u8g2);
    349a:	ce 01       	movw	r24, r28
    349c:	0e 94 f7 19 	call	0x33ee	; 0x33ee <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    34a0:	61 2f       	mov	r22, r17
    34a2:	ce 01       	movw	r24, r28
    34a4:	0e 94 0d 1a 	call	0x341a	; 0x341a <u8g2_SetBufferCurrTileRow>
  return 1;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
}
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	08 95       	ret

000034b2 <u8g2_draw_circle_section>:
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
    }
}
    34b2:	cf 92       	push	r12
    34b4:	df 92       	push	r13
    34b6:	ef 92       	push	r14
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	6c 01       	movw	r12, r24
    34c2:	d6 2f       	mov	r29, r22
    34c4:	14 2f       	mov	r17, r20
    34c6:	c2 2f       	mov	r28, r18
    34c8:	e0 fe       	sbrs	r14, 0
    34ca:	0d c0       	rjmp	.+26     	; 0x34e6 <u8g2_draw_circle_section+0x34>
    34cc:	40 2f       	mov	r20, r16
    34ce:	41 1b       	sub	r20, r17
    34d0:	62 2f       	mov	r22, r18
    34d2:	6d 0f       	add	r22, r29
    34d4:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    34d8:	40 2f       	mov	r20, r16
    34da:	4d 1b       	sub	r20, r29
    34dc:	61 2f       	mov	r22, r17
    34de:	6c 0f       	add	r22, r28
    34e0:	c6 01       	movw	r24, r12
    34e2:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    34e6:	e1 fe       	sbrs	r14, 1
    34e8:	0e c0       	rjmp	.+28     	; 0x3506 <u8g2_draw_circle_section+0x54>
    34ea:	40 2f       	mov	r20, r16
    34ec:	41 1b       	sub	r20, r17
    34ee:	6c 2f       	mov	r22, r28
    34f0:	6d 1b       	sub	r22, r29
    34f2:	c6 01       	movw	r24, r12
    34f4:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    34f8:	40 2f       	mov	r20, r16
    34fa:	4d 1b       	sub	r20, r29
    34fc:	6c 2f       	mov	r22, r28
    34fe:	61 1b       	sub	r22, r17
    3500:	c6 01       	movw	r24, r12
    3502:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    3506:	e3 fe       	sbrs	r14, 3
    3508:	0e c0       	rjmp	.+28     	; 0x3526 <u8g2_draw_circle_section+0x74>
    350a:	40 2f       	mov	r20, r16
    350c:	41 0f       	add	r20, r17
    350e:	6c 2f       	mov	r22, r28
    3510:	6d 0f       	add	r22, r29
    3512:	c6 01       	movw	r24, r12
    3514:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    3518:	40 2f       	mov	r20, r16
    351a:	4d 0f       	add	r20, r29
    351c:	61 2f       	mov	r22, r17
    351e:	6c 0f       	add	r22, r28
    3520:	c6 01       	movw	r24, r12
    3522:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    3526:	e2 fe       	sbrs	r14, 2
    3528:	0e c0       	rjmp	.+28     	; 0x3546 <u8g2_draw_circle_section+0x94>
    352a:	40 2f       	mov	r20, r16
    352c:	41 0f       	add	r20, r17
    352e:	6c 2f       	mov	r22, r28
    3530:	6d 1b       	sub	r22, r29
    3532:	c6 01       	movw	r24, r12
    3534:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    3538:	40 2f       	mov	r20, r16
    353a:	4d 0f       	add	r20, r29
    353c:	6c 2f       	mov	r22, r28
    353e:	61 1b       	sub	r22, r17
    3540:	c6 01       	movw	r24, r12
    3542:	0e 94 9f 20 	call	0x413e	; 0x413e <u8g2_DrawPixel>
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	ef 90       	pop	r14
    3550:	df 90       	pop	r13
    3552:	cf 90       	pop	r12
    3554:	08 95       	ret

00003556 <u8g2_draw_disc_section>:
    3556:	cf 92       	push	r12
    3558:	df 92       	push	r13
    355a:	ef 92       	push	r14
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	6c 01       	movw	r12, r24
    3566:	c6 2f       	mov	r28, r22
    3568:	14 2f       	mov	r17, r20
    356a:	d2 2f       	mov	r29, r18
    356c:	e0 fe       	sbrs	r14, 0
    356e:	11 c0       	rjmp	.+34     	; 0x3592 <u8g2_draw_disc_section+0x3c>
    3570:	21 e0       	ldi	r18, 0x01	; 1
    3572:	24 0f       	add	r18, r20
    3574:	40 2f       	mov	r20, r16
    3576:	41 1b       	sub	r20, r17
    3578:	6d 2f       	mov	r22, r29
    357a:	6c 0f       	add	r22, r28
    357c:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    3580:	21 e0       	ldi	r18, 0x01	; 1
    3582:	2c 0f       	add	r18, r28
    3584:	40 2f       	mov	r20, r16
    3586:	4c 1b       	sub	r20, r28
    3588:	61 2f       	mov	r22, r17
    358a:	6d 0f       	add	r22, r29
    358c:	c6 01       	movw	r24, r12
    358e:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    3592:	e1 fe       	sbrs	r14, 1
    3594:	12 c0       	rjmp	.+36     	; 0x35ba <u8g2_draw_disc_section+0x64>
    3596:	21 e0       	ldi	r18, 0x01	; 1
    3598:	21 0f       	add	r18, r17
    359a:	40 2f       	mov	r20, r16
    359c:	41 1b       	sub	r20, r17
    359e:	6d 2f       	mov	r22, r29
    35a0:	6c 1b       	sub	r22, r28
    35a2:	c6 01       	movw	r24, r12
    35a4:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    35a8:	21 e0       	ldi	r18, 0x01	; 1
    35aa:	2c 0f       	add	r18, r28
    35ac:	40 2f       	mov	r20, r16
    35ae:	4c 1b       	sub	r20, r28
    35b0:	6d 2f       	mov	r22, r29
    35b2:	61 1b       	sub	r22, r17
    35b4:	c6 01       	movw	r24, r12
    35b6:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    35ba:	e3 fe       	sbrs	r14, 3
    35bc:	10 c0       	rjmp	.+32     	; 0x35de <u8g2_draw_disc_section+0x88>
    35be:	21 e0       	ldi	r18, 0x01	; 1
    35c0:	21 0f       	add	r18, r17
    35c2:	40 2f       	mov	r20, r16
    35c4:	6d 2f       	mov	r22, r29
    35c6:	6c 0f       	add	r22, r28
    35c8:	c6 01       	movw	r24, r12
    35ca:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    35ce:	21 e0       	ldi	r18, 0x01	; 1
    35d0:	2c 0f       	add	r18, r28
    35d2:	40 2f       	mov	r20, r16
    35d4:	61 2f       	mov	r22, r17
    35d6:	6d 0f       	add	r22, r29
    35d8:	c6 01       	movw	r24, r12
    35da:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    35de:	e2 fe       	sbrs	r14, 2
    35e0:	10 c0       	rjmp	.+32     	; 0x3602 <u8g2_draw_disc_section+0xac>
    35e2:	21 e0       	ldi	r18, 0x01	; 1
    35e4:	21 0f       	add	r18, r17
    35e6:	6d 2f       	mov	r22, r29
    35e8:	6c 1b       	sub	r22, r28
    35ea:	40 2f       	mov	r20, r16
    35ec:	c6 01       	movw	r24, r12
    35ee:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    35f2:	21 e0       	ldi	r18, 0x01	; 1
    35f4:	2c 0f       	add	r18, r28
    35f6:	6d 2f       	mov	r22, r29
    35f8:	61 1b       	sub	r22, r17
    35fa:	40 2f       	mov	r20, r16
    35fc:	c6 01       	movw	r24, r12
    35fe:	0e 94 99 20 	call	0x4132	; 0x4132 <u8g2_DrawVLine>
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	ef 90       	pop	r14
    360c:	df 90       	pop	r13
    360e:	cf 90       	pop	r12
    3610:	08 95       	ret

00003612 <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    3612:	8f 92       	push	r8
    3614:	9f 92       	push	r9
    3616:	af 92       	push	r10
    3618:	bf 92       	push	r11
    361a:	cf 92       	push	r12
    361c:	df 92       	push	r13
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	5c 01       	movw	r10, r24
    362c:	c6 2e       	mov	r12, r22
    362e:	94 2e       	mov	r9, r20
    3630:	c2 2f       	mov	r28, r18
    3632:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    3634:	01 e0       	ldi	r16, 0x01	; 1
    3636:	02 0f       	add	r16, r18
    3638:	04 0f       	add	r16, r20
    363a:	21 e0       	ldi	r18, 0x01	; 1
    363c:	26 0f       	add	r18, r22
    363e:	2c 0f       	add	r18, r28
    3640:	4c 1b       	sub	r20, r28
    3642:	6c 1b       	sub	r22, r28
    3644:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    3648:	88 23       	and	r24, r24
    364a:	41 f1       	breq	.+80     	; 0x369c <u8g2_DrawCircle+0x8a>
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    364c:	d1 e0       	ldi	r29, 0x01	; 1
    364e:	dc 1b       	sub	r29, r28
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    3650:	dc 2e       	mov	r13, r28
    3652:	d1 94       	neg	r13
    3654:	dd 0c       	add	r13, r13
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    3656:	e8 2c       	mov	r14, r8
    3658:	09 2d       	mov	r16, r9
    365a:	2c 2d       	mov	r18, r12
    365c:	4c 2f       	mov	r20, r28
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	c5 01       	movw	r24, r10
    3662:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <u8g2_draw_circle_section>
    
    while ( x < y )
    3666:	cc 23       	and	r28, r28
    3668:	c9 f0       	breq	.+50     	; 0x369c <u8g2_DrawCircle+0x8a>
    366a:	0f 2e       	mov	r0, r31
    366c:	f3 e0       	ldi	r31, 0x03	; 3
    366e:	ff 2e       	mov	r15, r31
    3670:	f0 2d       	mov	r31, r0
    3672:	10 e0       	ldi	r17, 0x00	; 0
    {
      if (f >= 0) 
    3674:	dd 23       	and	r29, r29
    3676:	24 f0       	brlt	.+8      	; 0x3680 <u8g2_DrawCircle+0x6e>
      {
        y--;
    3678:	c1 50       	subi	r28, 0x01	; 1
        ddF_y += 2;
    367a:	d3 94       	inc	r13
    367c:	d3 94       	inc	r13
        f += ddF_y;
    367e:	dd 0d       	add	r29, r13
      }
      x++;
    3680:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;
    3682:	df 0d       	add	r29, r15

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    3684:	e8 2c       	mov	r14, r8
    3686:	09 2d       	mov	r16, r9
    3688:	2c 2d       	mov	r18, r12
    368a:	4c 2f       	mov	r20, r28
    368c:	61 2f       	mov	r22, r17
    368e:	c5 01       	movw	r24, r10
    3690:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <u8g2_draw_circle_section>
    3694:	f3 94       	inc	r15
    3696:	f3 94       	inc	r15
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    3698:	1c 17       	cp	r17, r28
    369a:	60 f3       	brcs	.-40     	; 0x3674 <u8g2_DrawCircle+0x62>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    369c:	df 91       	pop	r29
    369e:	cf 91       	pop	r28
    36a0:	1f 91       	pop	r17
    36a2:	0f 91       	pop	r16
    36a4:	ff 90       	pop	r15
    36a6:	ef 90       	pop	r14
    36a8:	df 90       	pop	r13
    36aa:	cf 90       	pop	r12
    36ac:	bf 90       	pop	r11
    36ae:	af 90       	pop	r10
    36b0:	9f 90       	pop	r9
    36b2:	8f 90       	pop	r8
    36b4:	08 95       	ret

000036b6 <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	5c 01       	movw	r10, r24
    36d0:	c6 2e       	mov	r12, r22
    36d2:	94 2e       	mov	r9, r20
    36d4:	c2 2f       	mov	r28, r18
    36d6:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    36d8:	01 e0       	ldi	r16, 0x01	; 1
    36da:	02 0f       	add	r16, r18
    36dc:	04 0f       	add	r16, r20
    36de:	21 e0       	ldi	r18, 0x01	; 1
    36e0:	26 0f       	add	r18, r22
    36e2:	2c 0f       	add	r18, r28
    36e4:	4c 1b       	sub	r20, r28
    36e6:	6c 1b       	sub	r22, r28
    36e8:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    36ec:	88 23       	and	r24, r24
    36ee:	41 f1       	breq	.+80     	; 0x3740 <u8g2_DrawDisc+0x8a>
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
  f -= rad;
    36f0:	d1 e0       	ldi	r29, 0x01	; 1
    36f2:	dc 1b       	sub	r29, r28
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
  ddF_y *= 2;
    36f4:	dc 2e       	mov	r13, r28
    36f6:	d1 94       	neg	r13
    36f8:	dd 0c       	add	r13, r13
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
    36fa:	e8 2c       	mov	r14, r8
    36fc:	09 2d       	mov	r16, r9
    36fe:	2c 2d       	mov	r18, r12
    3700:	4c 2f       	mov	r20, r28
    3702:	60 e0       	ldi	r22, 0x00	; 0
    3704:	c5 01       	movw	r24, r10
    3706:	0e 94 ab 1a 	call	0x3556	; 0x3556 <u8g2_draw_disc_section>
  
  while ( x < y )
    370a:	cc 23       	and	r28, r28
    370c:	c9 f0       	breq	.+50     	; 0x3740 <u8g2_DrawDisc+0x8a>
    370e:	0f 2e       	mov	r0, r31
    3710:	f3 e0       	ldi	r31, 0x03	; 3
    3712:	ff 2e       	mov	r15, r31
    3714:	f0 2d       	mov	r31, r0
    3716:	10 e0       	ldi	r17, 0x00	; 0
  {
    if (f >= 0) 
    3718:	dd 23       	and	r29, r29
    371a:	24 f0       	brlt	.+8      	; 0x3724 <u8g2_DrawDisc+0x6e>
    {
      y--;
    371c:	c1 50       	subi	r28, 0x01	; 1
      ddF_y += 2;
    371e:	d3 94       	inc	r13
    3720:	d3 94       	inc	r13
      f += ddF_y;
    3722:	dd 0d       	add	r29, r13
    }
    x++;
    3724:	1f 5f       	subi	r17, 0xFF	; 255
    ddF_x += 2;
    f += ddF_x;
    3726:	df 0d       	add	r29, r15

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
    3728:	e8 2c       	mov	r14, r8
    372a:	09 2d       	mov	r16, r9
    372c:	2c 2d       	mov	r18, r12
    372e:	4c 2f       	mov	r20, r28
    3730:	61 2f       	mov	r22, r17
    3732:	c5 01       	movw	r24, r10
    3734:	0e 94 ab 1a 	call	0x3556	; 0x3556 <u8g2_draw_disc_section>
    3738:	f3 94       	inc	r15
    373a:	f3 94       	inc	r15
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
  
  while ( x < y )
    373c:	1c 17       	cp	r17, r28
    373e:	60 f3       	brcs	.-40     	; 0x3718 <u8g2_DrawDisc+0x62>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	1f 91       	pop	r17
    3746:	0f 91       	pop	r16
    3748:	ff 90       	pop	r15
    374a:	ef 90       	pop	r14
    374c:	df 90       	pop	r13
    374e:	cf 90       	pop	r12
    3750:	bf 90       	pop	r11
    3752:	af 90       	pop	r10
    3754:	9f 90       	pop	r9
    3756:	8f 90       	pop	r8
    3758:	08 95       	ret

0000375a <u8g2_m_16_8_2>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
    375a:	22 e0       	ldi	r18, 0x02	; 2
    375c:	fc 01       	movw	r30, r24
    375e:	20 83       	st	Z, r18
  return buf;
  #endif
}
    3760:	85 ed       	ldi	r24, 0xD5	; 213
    3762:	93 e0       	ldi	r25, 0x03	; 3
    3764:	08 95       	ret

00003766 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>:
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    3766:	cf 92       	push	r12
    3768:	df 92       	push	r13
    376a:	ef 92       	push	r14
    376c:	ff 92       	push	r15
    376e:	0f 93       	push	r16
    3770:	1f 93       	push	r17
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	1f 92       	push	r1
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	7c 01       	movw	r14, r24
    377e:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    3780:	89 01       	movw	r16, r18
    3782:	9a 01       	movw	r18, r20
    3784:	43 e7       	ldi	r20, 0x73	; 115
    3786:	53 e2       	ldi	r21, 0x23	; 35
    3788:	66 e0       	ldi	r22, 0x06	; 6
    378a:	75 e2       	ldi	r23, 0x25	; 37
    378c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <u8x8_Setup>
  buf = u8g2_m_16_8_2(&tile_buf_height);
    3790:	ce 01       	movw	r24, r28
    3792:	01 96       	adiw	r24, 0x01	; 1
    3794:	0e 94 ad 1b 	call	0x375a	; 0x375a <u8g2_m_16_8_2>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    3798:	86 01       	movw	r16, r12
    379a:	20 ef       	ldi	r18, 0xF0	; 240
    379c:	30 e2       	ldi	r19, 0x20	; 32
    379e:	49 81       	ldd	r20, Y+1	; 0x01
    37a0:	bc 01       	movw	r22, r24
    37a2:	c7 01       	movw	r24, r14
    37a4:	0e 94 e7 21 	call	0x43ce	; 0x43ce <u8g2_SetupBuffer>
}
    37a8:	0f 90       	pop	r0
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
    37b2:	ff 90       	pop	r15
    37b4:	ef 90       	pop	r14
    37b6:	df 90       	pop	r13
    37b8:	cf 90       	pop	r12
    37ba:	08 95       	ret

000037bc <u8g2_font_get_word>:
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  return u8g2_string_width(u8g2, str);
}
    37bc:	fc 01       	movw	r30, r24
    37be:	e6 0f       	add	r30, r22
    37c0:	f1 1d       	adc	r31, r1
    37c2:	84 91       	lpm	r24, Z
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	98 2f       	mov	r25, r24
    37c8:	88 27       	eor	r24, r24
    37ca:	31 96       	adiw	r30, 0x01	; 1
    37cc:	e4 91       	lpm	r30, Z
    37ce:	8e 0f       	add	r24, r30
    37d0:	91 1d       	adc	r25, r1
    37d2:	08 95       	ret

000037d4 <u8g2_font_calc_vref_font>:
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	08 95       	ret

000037d8 <u8g2_read_font_info>:
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	ec 01       	movw	r28, r24
    37e2:	8b 01       	movw	r16, r22
    37e4:	fb 01       	movw	r30, r22
    37e6:	84 91       	lpm	r24, Z
    37e8:	88 83       	st	Y, r24
    37ea:	31 96       	adiw	r30, 0x01	; 1
    37ec:	e4 91       	lpm	r30, Z
    37ee:	e9 83       	std	Y+1, r30	; 0x01
    37f0:	fb 01       	movw	r30, r22
    37f2:	32 96       	adiw	r30, 0x02	; 2
    37f4:	e4 91       	lpm	r30, Z
    37f6:	ea 83       	std	Y+2, r30	; 0x02
    37f8:	fb 01       	movw	r30, r22
    37fa:	33 96       	adiw	r30, 0x03	; 3
    37fc:	e4 91       	lpm	r30, Z
    37fe:	eb 83       	std	Y+3, r30	; 0x03
    3800:	fb 01       	movw	r30, r22
    3802:	34 96       	adiw	r30, 0x04	; 4
    3804:	e4 91       	lpm	r30, Z
    3806:	ec 83       	std	Y+4, r30	; 0x04
    3808:	fb 01       	movw	r30, r22
    380a:	35 96       	adiw	r30, 0x05	; 5
    380c:	e4 91       	lpm	r30, Z
    380e:	ed 83       	std	Y+5, r30	; 0x05
    3810:	fb 01       	movw	r30, r22
    3812:	36 96       	adiw	r30, 0x06	; 6
    3814:	e4 91       	lpm	r30, Z
    3816:	ee 83       	std	Y+6, r30	; 0x06
    3818:	fb 01       	movw	r30, r22
    381a:	37 96       	adiw	r30, 0x07	; 7
    381c:	e4 91       	lpm	r30, Z
    381e:	ef 83       	std	Y+7, r30	; 0x07
    3820:	fb 01       	movw	r30, r22
    3822:	38 96       	adiw	r30, 0x08	; 8
    3824:	e4 91       	lpm	r30, Z
    3826:	e8 87       	std	Y+8, r30	; 0x08
    3828:	fb 01       	movw	r30, r22
    382a:	39 96       	adiw	r30, 0x09	; 9
    382c:	e4 91       	lpm	r30, Z
    382e:	e9 87       	std	Y+9, r30	; 0x09
    3830:	fb 01       	movw	r30, r22
    3832:	3a 96       	adiw	r30, 0x0a	; 10
    3834:	e4 91       	lpm	r30, Z
    3836:	ea 87       	std	Y+10, r30	; 0x0a
    3838:	fb 01       	movw	r30, r22
    383a:	3b 96       	adiw	r30, 0x0b	; 11
    383c:	e4 91       	lpm	r30, Z
    383e:	eb 87       	std	Y+11, r30	; 0x0b
    3840:	fb 01       	movw	r30, r22
    3842:	3c 96       	adiw	r30, 0x0c	; 12
    3844:	e4 91       	lpm	r30, Z
    3846:	ec 87       	std	Y+12, r30	; 0x0c
    3848:	fb 01       	movw	r30, r22
    384a:	3d 96       	adiw	r30, 0x0d	; 13
    384c:	e4 91       	lpm	r30, Z
    384e:	ed 87       	std	Y+13, r30	; 0x0d
    3850:	fb 01       	movw	r30, r22
    3852:	3e 96       	adiw	r30, 0x0e	; 14
    3854:	e4 91       	lpm	r30, Z
    3856:	ee 87       	std	Y+14, r30	; 0x0e
    3858:	fb 01       	movw	r30, r22
    385a:	3f 96       	adiw	r30, 0x0f	; 15
    385c:	e4 91       	lpm	r30, Z
    385e:	ef 87       	std	Y+15, r30	; 0x0f
    3860:	fb 01       	movw	r30, r22
    3862:	70 96       	adiw	r30, 0x10	; 16
    3864:	e4 91       	lpm	r30, Z
    3866:	e8 8b       	std	Y+16, r30	; 0x10
    3868:	61 e1       	ldi	r22, 0x11	; 17
    386a:	c8 01       	movw	r24, r16
    386c:	0e 94 de 1b 	call	0x37bc	; 0x37bc <u8g2_font_get_word>
    3870:	9a 8b       	std	Y+18, r25	; 0x12
    3872:	89 8b       	std	Y+17, r24	; 0x11
    3874:	63 e1       	ldi	r22, 0x13	; 19
    3876:	c8 01       	movw	r24, r16
    3878:	0e 94 de 1b 	call	0x37bc	; 0x37bc <u8g2_font_get_word>
    387c:	9c 8b       	std	Y+20, r25	; 0x14
    387e:	8b 8b       	std	Y+19, r24	; 0x13
    3880:	65 e1       	ldi	r22, 0x15	; 21
    3882:	c8 01       	movw	r24, r16
    3884:	0e 94 de 1b 	call	0x37bc	; 0x37bc <u8g2_font_get_word>
    3888:	9e 8b       	std	Y+22, r25	; 0x16
    388a:	8d 8b       	std	Y+21, r24	; 0x15
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	08 95       	ret

00003896 <u8g2_font_decode_get_unsigned_bits>:
    3896:	dc 01       	movw	r26, r24
    3898:	18 96       	adiw	r26, 0x08	; 8
    389a:	9c 91       	ld	r25, X
    389c:	18 97       	sbiw	r26, 0x08	; 8
    389e:	ed 91       	ld	r30, X+
    38a0:	fc 91       	ld	r31, X
    38a2:	11 97       	sbiw	r26, 0x01	; 1
    38a4:	24 91       	lpm	r18, Z
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	09 2e       	mov	r0, r25
    38aa:	02 c0       	rjmp	.+4      	; 0x38b0 <u8g2_font_decode_get_unsigned_bits+0x1a>
    38ac:	35 95       	asr	r19
    38ae:	27 95       	ror	r18
    38b0:	0a 94       	dec	r0
    38b2:	e2 f7       	brpl	.-8      	; 0x38ac <u8g2_font_decode_get_unsigned_bits+0x16>
    38b4:	89 2f       	mov	r24, r25
    38b6:	86 0f       	add	r24, r22
    38b8:	88 30       	cpi	r24, 0x08	; 8
    38ba:	10 f4       	brcc	.+4      	; 0x38c0 <u8g2_font_decode_get_unsigned_bits+0x2a>
    38bc:	e2 2f       	mov	r30, r18
    38be:	0f c0       	rjmp	.+30     	; 0x38de <u8g2_font_decode_get_unsigned_bits+0x48>
    38c0:	31 96       	adiw	r30, 0x01	; 1
    38c2:	11 96       	adiw	r26, 0x01	; 1
    38c4:	fc 93       	st	X, r31
    38c6:	ee 93       	st	-X, r30
    38c8:	e4 91       	lpm	r30, Z
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	38 e0       	ldi	r19, 0x08	; 8
    38ce:	39 1b       	sub	r19, r25
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <u8g2_font_decode_get_unsigned_bits+0x40>
    38d2:	ee 0f       	add	r30, r30
    38d4:	ff 1f       	adc	r31, r31
    38d6:	3a 95       	dec	r19
    38d8:	e2 f7       	brpl	.-8      	; 0x38d2 <u8g2_font_decode_get_unsigned_bits+0x3c>
    38da:	e2 2b       	or	r30, r18
    38dc:	88 50       	subi	r24, 0x08	; 8
    38de:	18 96       	adiw	r26, 0x08	; 8
    38e0:	8c 93       	st	X, r24
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <u8g2_font_decode_get_unsigned_bits+0x56>
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	6a 95       	dec	r22
    38ee:	e2 f7       	brpl	.-8      	; 0x38e8 <u8g2_font_decode_get_unsigned_bits+0x52>
    38f0:	81 50       	subi	r24, 0x01	; 1
    38f2:	8e 23       	and	r24, r30
    38f4:	08 95       	ret

000038f6 <u8g2_font_setup_decode>:
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	cf 93       	push	r28
    38fc:	df 93       	push	r29
    38fe:	ec 01       	movw	r28, r24
    3900:	8c 01       	movw	r16, r24
    3902:	07 5c       	subi	r16, 0xC7	; 199
    3904:	1f 4f       	sbci	r17, 0xFF	; 255
    3906:	7a af       	std	Y+58, r23	; 0x3a
    3908:	69 af       	std	Y+57, r22	; 0x39
    390a:	fc 01       	movw	r30, r24
    390c:	ef 5b       	subi	r30, 0xBF	; 191
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	10 82       	st	Z, r1
    3912:	39 96       	adiw	r30, 0x09	; 9
    3914:	60 81       	ld	r22, Z
    3916:	c8 01       	movw	r24, r16
    3918:	0e 94 4b 1c 	call	0x3896	; 0x3896 <u8g2_font_decode_get_unsigned_bits>
    391c:	8f af       	std	Y+63, r24	; 0x3f
    391e:	fe 01       	movw	r30, r28
    3920:	e5 5b       	subi	r30, 0xB5	; 181
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	60 81       	ld	r22, Z
    3926:	c8 01       	movw	r24, r16
    3928:	0e 94 4b 1c 	call	0x3896	; 0x3896 <u8g2_font_decode_get_unsigned_bits>
    392c:	fe 01       	movw	r30, r28
    392e:	e0 5c       	subi	r30, 0xC0	; 192
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 83       	st	Z, r24
    3934:	b3 96       	adiw	r30, 0x23	; 35
    3936:	80 81       	ld	r24, Z
    3938:	b0 97       	sbiw	r30, 0x20	; 32
    393a:	80 83       	st	Z, r24
    393c:	cc 5b       	subi	r28, 0xBC	; 188
    393e:	df 4f       	sbci	r29, 0xFF	; 255
    3940:	91 e0       	ldi	r25, 0x01	; 1
    3942:	81 11       	cpse	r24, r1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	98 83       	st	Y, r25
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	08 95       	ret

00003952 <u8g2_font_decode_get_signed_bits>:
    3952:	cf 93       	push	r28
    3954:	c6 2f       	mov	r28, r22
    3956:	0e 94 4b 1c 	call	0x3896	; 0x3896 <u8g2_font_decode_get_unsigned_bits>
    395a:	c1 50       	subi	r28, 0x01	; 1
    395c:	21 e0       	ldi	r18, 0x01	; 1
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <u8g2_font_decode_get_signed_bits+0x14>
    3962:	22 0f       	add	r18, r18
    3964:	33 1f       	adc	r19, r19
    3966:	ca 95       	dec	r28
    3968:	e2 f7       	brpl	.-8      	; 0x3962 <u8g2_font_decode_get_signed_bits+0x10>
    396a:	82 1b       	sub	r24, r18
    396c:	cf 91       	pop	r28
    396e:	08 95       	ret

00003970 <u8g2_add_vector_y>:
    3970:	21 30       	cpi	r18, 0x01	; 1
    3972:	31 f0       	breq	.+12     	; 0x3980 <u8g2_add_vector_y+0x10>
    3974:	18 f0       	brcs	.+6      	; 0x397c <u8g2_add_vector_y+0xc>
    3976:	22 30       	cpi	r18, 0x02	; 2
    3978:	29 f0       	breq	.+10     	; 0x3984 <u8g2_add_vector_y+0x14>
    397a:	06 c0       	rjmp	.+12     	; 0x3988 <u8g2_add_vector_y+0x18>
    397c:	84 0f       	add	r24, r20
    397e:	08 95       	ret
    3980:	86 0f       	add	r24, r22
    3982:	08 95       	ret
    3984:	84 1b       	sub	r24, r20
    3986:	08 95       	ret
    3988:	86 1b       	sub	r24, r22
    398a:	08 95       	ret

0000398c <u8g2_add_vector_x>:
    398c:	21 30       	cpi	r18, 0x01	; 1
    398e:	31 f0       	breq	.+12     	; 0x399c <u8g2_add_vector_x+0x10>
    3990:	18 f0       	brcs	.+6      	; 0x3998 <u8g2_add_vector_x+0xc>
    3992:	22 30       	cpi	r18, 0x02	; 2
    3994:	29 f0       	breq	.+10     	; 0x39a0 <u8g2_add_vector_x+0x14>
    3996:	06 c0       	rjmp	.+12     	; 0x39a4 <u8g2_add_vector_x+0x18>
    3998:	86 0f       	add	r24, r22
    399a:	08 95       	ret
    399c:	84 1b       	sub	r24, r20
    399e:	08 95       	ret
    39a0:	86 1b       	sub	r24, r22
    39a2:	08 95       	ret
    39a4:	84 0f       	add	r24, r20
    39a6:	08 95       	ret

000039a8 <u8g2_font_decode_len>:
    39a8:	2f 92       	push	r2
    39aa:	3f 92       	push	r3
    39ac:	4f 92       	push	r4
    39ae:	5f 92       	push	r5
    39b0:	6f 92       	push	r6
    39b2:	7f 92       	push	r7
    39b4:	8f 92       	push	r8
    39b6:	9f 92       	push	r9
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	00 d0       	rcall	.+0      	; 0x39ce <u8g2_font_decode_len+0x26>
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <u8g2_font_decode_len+0x28>
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <u8g2_font_decode_len+0x2a>
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	7c 01       	movw	r14, r24
    39d8:	6e 83       	std	Y+6, r22	; 0x06
    39da:	34 2e       	mov	r3, r20
    39dc:	fc 01       	movw	r30, r24
    39de:	75 ac       	ldd	r7, Z+61	; 0x3d
    39e0:	16 ad       	ldd	r17, Z+62	; 0x3e
    39e2:	6c 01       	movw	r12, r24
    39e4:	f5 e4       	ldi	r31, 0x45	; 69
    39e6:	cf 0e       	add	r12, r31
    39e8:	d1 1c       	adc	r13, r1
    39ea:	5c 01       	movw	r10, r24
    39ec:	82 e4       	ldi	r24, 0x42	; 66
    39ee:	a8 0e       	add	r10, r24
    39f0:	b1 1c       	adc	r11, r1
    39f2:	47 01       	movw	r8, r14
    39f4:	93 e6       	ldi	r25, 0x63	; 99
    39f6:	89 0e       	add	r8, r25
    39f8:	91 1c       	adc	r9, r1
    39fa:	f7 01       	movw	r30, r14
    39fc:	ec 5b       	subi	r30, 0xBC	; 188
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	fc 83       	std	Y+4, r31	; 0x04
    3a02:	eb 83       	std	Y+3, r30	; 0x03
    3a04:	c7 01       	movw	r24, r14
    3a06:	8d 5b       	subi	r24, 0xBD	; 189
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	9a 83       	std	Y+2, r25	; 0x02
    3a0c:	89 83       	std	Y+1, r24	; 0x01
    3a0e:	f7 01       	movw	r30, r14
    3a10:	f7 ad       	ldd	r31, Z+63	; 0x3f
    3a12:	f7 19       	sub	r31, r7
    3a14:	fd 83       	std	Y+5, r31	; 0x05
    3a16:	5e 80       	ldd	r5, Y+6	; 0x06
    3a18:	f5 15       	cp	r31, r5
    3a1a:	08 f4       	brcc	.+2      	; 0x3a1e <u8g2_font_decode_len+0x76>
    3a1c:	5f 2e       	mov	r5, r31
    3a1e:	f7 01       	movw	r30, r14
    3a20:	64 ac       	ldd	r6, Z+60	; 0x3c
    3a22:	f6 01       	movw	r30, r12
    3a24:	00 81       	ld	r16, Z
    3a26:	21 2e       	mov	r2, r17
    3a28:	20 2f       	mov	r18, r16
    3a2a:	41 2f       	mov	r20, r17
    3a2c:	67 2d       	mov	r22, r7
    3a2e:	f7 01       	movw	r30, r14
    3a30:	83 ad       	ldd	r24, Z+59	; 0x3b
    3a32:	0e 94 c6 1c 	call	0x398c	; 0x398c <u8g2_add_vector_x>
    3a36:	48 2e       	mov	r4, r24
    3a38:	20 2f       	mov	r18, r16
    3a3a:	41 2f       	mov	r20, r17
    3a3c:	67 2d       	mov	r22, r7
    3a3e:	86 2d       	mov	r24, r6
    3a40:	0e 94 b8 1c 	call	0x3970	; 0x3970 <u8g2_add_vector_y>
    3a44:	33 20       	and	r3, r3
    3a46:	61 f0       	breq	.+24     	; 0x3a60 <u8g2_font_decode_len+0xb8>
    3a48:	e9 81       	ldd	r30, Y+1	; 0x01
    3a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4c:	90 81       	ld	r25, Z
    3a4e:	f4 01       	movw	r30, r8
    3a50:	90 83       	st	Z, r25
    3a52:	25 2d       	mov	r18, r5
    3a54:	48 2f       	mov	r20, r24
    3a56:	64 2d       	mov	r22, r4
    3a58:	c7 01       	movw	r24, r14
    3a5a:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
    3a5e:	0f c0       	rjmp	.+30     	; 0x3a7e <u8g2_font_decode_len+0xd6>
    3a60:	f5 01       	movw	r30, r10
    3a62:	90 81       	ld	r25, Z
    3a64:	91 11       	cpse	r25, r1
    3a66:	0b c0       	rjmp	.+22     	; 0x3a7e <u8g2_font_decode_len+0xd6>
    3a68:	eb 81       	ldd	r30, Y+3	; 0x03
    3a6a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a6c:	90 81       	ld	r25, Z
    3a6e:	f4 01       	movw	r30, r8
    3a70:	90 83       	st	Z, r25
    3a72:	25 2d       	mov	r18, r5
    3a74:	48 2f       	mov	r20, r24
    3a76:	64 2d       	mov	r22, r4
    3a78:	c7 01       	movw	r24, r14
    3a7a:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
    3a7e:	fe 81       	ldd	r31, Y+6	; 0x06
    3a80:	8d 81       	ldd	r24, Y+5	; 0x05
    3a82:	f8 17       	cp	r31, r24
    3a84:	28 f0       	brcs	.+10     	; 0x3a90 <u8g2_font_decode_len+0xe8>
    3a86:	f8 1b       	sub	r31, r24
    3a88:	fe 83       	std	Y+6, r31	; 0x06
    3a8a:	1f 5f       	subi	r17, 0xFF	; 255
    3a8c:	71 2c       	mov	r7, r1
    3a8e:	bf cf       	rjmp	.-130    	; 0x3a0e <u8g2_font_decode_len+0x66>
    3a90:	8e 81       	ldd	r24, Y+6	; 0x06
    3a92:	87 0d       	add	r24, r7
    3a94:	f7 01       	movw	r30, r14
    3a96:	85 af       	std	Z+61, r24	; 0x3d
    3a98:	26 ae       	std	Z+62, r2	; 0x3e
    3a9a:	26 96       	adiw	r28, 0x06	; 6
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	df 90       	pop	r13
    3ab4:	cf 90       	pop	r12
    3ab6:	bf 90       	pop	r11
    3ab8:	af 90       	pop	r10
    3aba:	9f 90       	pop	r9
    3abc:	8f 90       	pop	r8
    3abe:	7f 90       	pop	r7
    3ac0:	6f 90       	pop	r6
    3ac2:	5f 90       	pop	r5
    3ac4:	4f 90       	pop	r4
    3ac6:	3f 90       	pop	r3
    3ac8:	2f 90       	pop	r2
    3aca:	08 95       	ret

00003acc <u8g2_font_decode_glyph>:
    3acc:	8f 92       	push	r8
    3ace:	9f 92       	push	r9
    3ad0:	af 92       	push	r10
    3ad2:	bf 92       	push	r11
    3ad4:	cf 92       	push	r12
    3ad6:	df 92       	push	r13
    3ad8:	ef 92       	push	r14
    3ada:	ff 92       	push	r15
    3adc:	0f 93       	push	r16
    3ade:	1f 93       	push	r17
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	ec 01       	movw	r28, r24
    3ae6:	7c 01       	movw	r14, r24
    3ae8:	89 e3       	ldi	r24, 0x39	; 57
    3aea:	e8 0e       	add	r14, r24
    3aec:	f1 1c       	adc	r15, r1
    3aee:	ce 01       	movw	r24, r28
    3af0:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <u8g2_font_setup_decode>
    3af4:	fe 01       	movw	r30, r28
    3af6:	e0 5c       	subi	r30, 0xC0	; 192
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	90 80       	ld	r9, Z
    3afc:	3c 96       	adiw	r30, 0x0c	; 12
    3afe:	60 81       	ld	r22, Z
    3b00:	c7 01       	movw	r24, r14
    3b02:	0e 94 a9 1c 	call	0x3952	; 0x3952 <u8g2_font_decode_get_signed_bits>
    3b06:	b8 2e       	mov	r11, r24
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e3 5b       	subi	r30, 0xB3	; 179
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	60 81       	ld	r22, Z
    3b10:	c7 01       	movw	r24, r14
    3b12:	0e 94 a9 1c 	call	0x3952	; 0x3952 <u8g2_font_decode_get_signed_bits>
    3b16:	18 2f       	mov	r17, r24
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e2 5b       	subi	r30, 0xB2	; 178
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	60 81       	ld	r22, Z
    3b20:	c7 01       	movw	r24, r14
    3b22:	0e 94 a9 1c 	call	0x3952	; 0x3952 <u8g2_font_decode_get_signed_bits>
    3b26:	88 2e       	mov	r8, r24
    3b28:	df ac       	ldd	r13, Y+63	; 0x3f
    3b2a:	1d 14       	cp	r1, r13
    3b2c:	0c f0       	brlt	.+2      	; 0x3b30 <u8g2_font_decode_glyph+0x64>
    3b2e:	79 c0       	rjmp	.+242    	; 0x3c22 <u8g2_font_decode_glyph+0x156>
    3b30:	fe 01       	movw	r30, r28
    3b32:	eb 5b       	subi	r30, 0xBB	; 187
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	00 81       	ld	r16, Z
    3b38:	19 0d       	add	r17, r9
    3b3a:	11 95       	neg	r17
    3b3c:	20 2f       	mov	r18, r16
    3b3e:	41 2f       	mov	r20, r17
    3b40:	6b 2d       	mov	r22, r11
    3b42:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b44:	0e 94 c6 1c 	call	0x398c	; 0x398c <u8g2_add_vector_x>
    3b48:	c8 2e       	mov	r12, r24
    3b4a:	8b af       	std	Y+59, r24	; 0x3b
    3b4c:	20 2f       	mov	r18, r16
    3b4e:	41 2f       	mov	r20, r17
    3b50:	6b 2d       	mov	r22, r11
    3b52:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b54:	0e 94 b8 1c 	call	0x3970	; 0x3970 <u8g2_add_vector_y>
    3b58:	8c af       	std	Y+60, r24	; 0x3c
    3b5a:	01 30       	cpi	r16, 0x01	; 1
    3b5c:	59 f0       	breq	.+22     	; 0x3b74 <u8g2_font_decode_glyph+0xa8>
    3b5e:	28 f0       	brcs	.+10     	; 0x3b6a <u8g2_font_decode_glyph+0x9e>
    3b60:	02 30       	cpi	r16, 0x02	; 2
    3b62:	91 f0       	breq	.+36     	; 0x3b88 <u8g2_font_decode_glyph+0xbc>
    3b64:	03 30       	cpi	r16, 0x03	; 3
    3b66:	d9 f0       	breq	.+54     	; 0x3b9e <u8g2_font_decode_glyph+0xd2>
    3b68:	23 c0       	rjmp	.+70     	; 0x3bb0 <u8g2_font_decode_glyph+0xe4>
    3b6a:	2d 2d       	mov	r18, r13
    3b6c:	2c 0d       	add	r18, r12
    3b6e:	09 2d       	mov	r16, r9
    3b70:	08 0f       	add	r16, r24
    3b72:	20 c0       	rjmp	.+64     	; 0x3bb4 <u8g2_font_decode_glyph+0xe8>
    3b74:	9c 2d       	mov	r25, r12
    3b76:	99 19       	sub	r25, r9
    3b78:	21 e0       	ldi	r18, 0x01	; 1
    3b7a:	2c 0d       	add	r18, r12
    3b7c:	0d 2d       	mov	r16, r13
    3b7e:	08 0f       	add	r16, r24
    3b80:	cc 24       	eor	r12, r12
    3b82:	c3 94       	inc	r12
    3b84:	c9 0e       	add	r12, r25
    3b86:	16 c0       	rjmp	.+44     	; 0x3bb4 <u8g2_font_decode_glyph+0xe8>
    3b88:	91 e0       	ldi	r25, 0x01	; 1
    3b8a:	39 2f       	mov	r19, r25
    3b8c:	3d 19       	sub	r19, r13
    3b8e:	21 e0       	ldi	r18, 0x01	; 1
    3b90:	2c 0d       	add	r18, r12
    3b92:	99 19       	sub	r25, r9
    3b94:	01 e0       	ldi	r16, 0x01	; 1
    3b96:	08 0f       	add	r16, r24
    3b98:	89 0f       	add	r24, r25
    3b9a:	c3 0e       	add	r12, r19
    3b9c:	0b c0       	rjmp	.+22     	; 0x3bb4 <u8g2_font_decode_glyph+0xe8>
    3b9e:	29 2d       	mov	r18, r9
    3ba0:	2c 0d       	add	r18, r12
    3ba2:	98 2f       	mov	r25, r24
    3ba4:	9d 19       	sub	r25, r13
    3ba6:	01 e0       	ldi	r16, 0x01	; 1
    3ba8:	08 0f       	add	r16, r24
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	89 0f       	add	r24, r25
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <u8g2_font_decode_glyph+0xe8>
    3bb0:	08 2f       	mov	r16, r24
    3bb2:	2c 2d       	mov	r18, r12
    3bb4:	48 2f       	mov	r20, r24
    3bb6:	6c 2d       	mov	r22, r12
    3bb8:	ce 01       	movw	r24, r28
    3bba:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    3bbe:	88 23       	and	r24, r24
    3bc0:	81 f1       	breq	.+96     	; 0x3c22 <u8g2_font_decode_glyph+0x156>
    3bc2:	1d ae       	std	Y+61, r1	; 0x3d
    3bc4:	1e ae       	std	Y+62, r1	; 0x3e
    3bc6:	5e 01       	movw	r10, r28
    3bc8:	e8 e4       	ldi	r30, 0x48	; 72
    3bca:	ae 0e       	add	r10, r30
    3bcc:	b1 1c       	adc	r11, r1
    3bce:	6e 01       	movw	r12, r28
    3bd0:	f9 e4       	ldi	r31, 0x49	; 73
    3bd2:	cf 0e       	add	r12, r31
    3bd4:	d1 1c       	adc	r13, r1
    3bd6:	f5 01       	movw	r30, r10
    3bd8:	60 81       	ld	r22, Z
    3bda:	c7 01       	movw	r24, r14
    3bdc:	0e 94 4b 1c 	call	0x3896	; 0x3896 <u8g2_font_decode_get_unsigned_bits>
    3be0:	08 2f       	mov	r16, r24
    3be2:	f6 01       	movw	r30, r12
    3be4:	60 81       	ld	r22, Z
    3be6:	c7 01       	movw	r24, r14
    3be8:	0e 94 4b 1c 	call	0x3896	; 0x3896 <u8g2_font_decode_get_unsigned_bits>
    3bec:	18 2f       	mov	r17, r24
    3bee:	40 e0       	ldi	r20, 0x00	; 0
    3bf0:	60 2f       	mov	r22, r16
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <u8g2_font_decode_len>
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	61 2f       	mov	r22, r17
    3bfc:	ce 01       	movw	r24, r28
    3bfe:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <u8g2_font_decode_len>
    3c02:	61 e0       	ldi	r22, 0x01	; 1
    3c04:	c7 01       	movw	r24, r14
    3c06:	0e 94 4b 1c 	call	0x3896	; 0x3896 <u8g2_font_decode_get_unsigned_bits>
    3c0a:	81 11       	cpse	r24, r1
    3c0c:	f0 cf       	rjmp	.-32     	; 0x3bee <u8g2_font_decode_glyph+0x122>
    3c0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c10:	89 15       	cp	r24, r9
    3c12:	0c f3       	brlt	.-62     	; 0x3bd6 <u8g2_font_decode_glyph+0x10a>
    3c14:	fe 01       	movw	r30, r28
    3c16:	ed 59       	subi	r30, 0x9D	; 157
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	cd 5b       	subi	r28, 0xBD	; 189
    3c1c:	df 4f       	sbci	r29, 0xFF	; 255
    3c1e:	88 81       	ld	r24, Y
    3c20:	80 83       	st	Z, r24
    3c22:	88 2d       	mov	r24, r8
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	1f 91       	pop	r17
    3c2a:	0f 91       	pop	r16
    3c2c:	ff 90       	pop	r15
    3c2e:	ef 90       	pop	r14
    3c30:	df 90       	pop	r13
    3c32:	cf 90       	pop	r12
    3c34:	bf 90       	pop	r11
    3c36:	af 90       	pop	r10
    3c38:	9f 90       	pop	r9
    3c3a:	8f 90       	pop	r8
    3c3c:	08 95       	ret

00003c3e <u8g2_font_get_glyph_data>:
    3c3e:	ef 92       	push	r14
    3c40:	ff 92       	push	r15
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	c5 a9       	ldd	r28, Z+53	; 0x35
    3c4e:	d6 a9       	ldd	r29, Z+54	; 0x36
    3c50:	67 96       	adiw	r28, 0x17	; 23
    3c52:	6f 3f       	cpi	r22, 0xFF	; 255
    3c54:	71 05       	cpc	r23, r1
    3c56:	11 f0       	breq	.+4      	; 0x3c5c <u8g2_font_get_glyph_data+0x1e>
    3c58:	08 f0       	brcs	.+2      	; 0x3c5c <u8g2_font_get_glyph_data+0x1e>
    3c5a:	36 c0       	rjmp	.+108    	; 0x3cc8 <u8g2_font_get_glyph_data+0x8a>
    3c5c:	61 36       	cpi	r22, 0x61	; 97
    3c5e:	71 05       	cpc	r23, r1
    3c60:	38 f0       	brcs	.+14     	; 0x3c70 <u8g2_font_get_glyph_data+0x32>
    3c62:	e7 5a       	subi	r30, 0xA7	; 167
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	c8 0f       	add	r28, r24
    3c6c:	d9 1f       	adc	r29, r25
    3c6e:	0a c0       	rjmp	.+20     	; 0x3c84 <u8g2_font_get_glyph_data+0x46>
    3c70:	61 34       	cpi	r22, 0x41	; 65
    3c72:	71 05       	cpc	r23, r1
    3c74:	38 f0       	brcs	.+14     	; 0x3c84 <u8g2_font_get_glyph_data+0x46>
    3c76:	fc 01       	movw	r30, r24
    3c78:	e9 5a       	subi	r30, 0xA9	; 169
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	80 81       	ld	r24, Z
    3c7e:	91 81       	ldd	r25, Z+1	; 0x01
    3c80:	c8 0f       	add	r28, r24
    3c82:	d9 1f       	adc	r29, r25
    3c84:	ce 01       	movw	r24, r28
    3c86:	01 96       	adiw	r24, 0x01	; 1
    3c88:	fc 01       	movw	r30, r24
    3c8a:	24 91       	lpm	r18, Z
    3c8c:	22 23       	and	r18, r18
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <u8g2_font_get_glyph_data+0x54>
    3c90:	5a c0       	rjmp	.+180    	; 0x3d46 <u8g2_font_get_glyph_data+0x108>
    3c92:	fe 01       	movw	r30, r28
    3c94:	24 91       	lpm	r18, Z
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	62 17       	cp	r22, r18
    3c9a:	73 07       	cpc	r23, r19
    3c9c:	51 f4       	brne	.+20     	; 0x3cb2 <u8g2_font_get_glyph_data+0x74>
    3c9e:	06 c0       	rjmp	.+12     	; 0x3cac <u8g2_font_get_glyph_data+0x6e>
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	24 91       	lpm	r18, Z
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	62 17       	cp	r22, r18
    3ca8:	73 07       	cpc	r23, r19
    3caa:	19 f4       	brne	.+6      	; 0x3cb2 <u8g2_font_get_glyph_data+0x74>
    3cac:	ce 01       	movw	r24, r28
    3cae:	02 96       	adiw	r24, 0x02	; 2
    3cb0:	52 c0       	rjmp	.+164    	; 0x3d56 <u8g2_font_get_glyph_data+0x118>
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	84 91       	lpm	r24, Z
    3cb6:	c8 0f       	add	r28, r24
    3cb8:	d1 1d       	adc	r29, r1
    3cba:	ce 01       	movw	r24, r28
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	24 91       	lpm	r18, Z
    3cc2:	21 11       	cpse	r18, r1
    3cc4:	ed cf       	rjmp	.-38     	; 0x3ca0 <u8g2_font_get_glyph_data+0x62>
    3cc6:	42 c0       	rjmp	.+132    	; 0x3d4c <u8g2_font_get_glyph_data+0x10e>
    3cc8:	8b 01       	movw	r16, r22
    3cca:	fc 01       	movw	r30, r24
    3ccc:	e5 5a       	subi	r30, 0xA5	; 165
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	80 81       	ld	r24, Z
    3cd2:	91 81       	ldd	r25, Z+1	; 0x01
    3cd4:	c8 0f       	add	r28, r24
    3cd6:	d9 1f       	adc	r29, r25
    3cd8:	7e 01       	movw	r14, r28
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	c7 01       	movw	r24, r14
    3cde:	0e 94 de 1b 	call	0x37bc	; 0x37bc <u8g2_font_get_word>
    3ce2:	c8 0f       	add	r28, r24
    3ce4:	d9 1f       	adc	r29, r25
    3ce6:	62 e0       	ldi	r22, 0x02	; 2
    3ce8:	c7 01       	movw	r24, r14
    3cea:	0e 94 de 1b 	call	0x37bc	; 0x37bc <u8g2_font_get_word>
    3cee:	f4 e0       	ldi	r31, 0x04	; 4
    3cf0:	ef 0e       	add	r14, r31
    3cf2:	f1 1c       	adc	r15, r1
    3cf4:	80 17       	cp	r24, r16
    3cf6:	91 07       	cpc	r25, r17
    3cf8:	80 f3       	brcs	.-32     	; 0x3cda <u8g2_font_get_glyph_data+0x9c>
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	84 91       	lpm	r24, Z
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	98 2f       	mov	r25, r24
    3d02:	88 27       	eor	r24, r24
    3d04:	31 96       	adiw	r30, 0x01	; 1
    3d06:	e4 91       	lpm	r30, Z
    3d08:	8e 2b       	or	r24, r30
    3d0a:	00 97       	sbiw	r24, 0x00	; 0
    3d0c:	11 f1       	breq	.+68     	; 0x3d52 <u8g2_font_get_glyph_data+0x114>
    3d0e:	08 17       	cp	r16, r24
    3d10:	19 07       	cpc	r17, r25
    3d12:	39 f4       	brne	.+14     	; 0x3d22 <u8g2_font_get_glyph_data+0xe4>
    3d14:	03 c0       	rjmp	.+6      	; 0x3d1c <u8g2_font_get_glyph_data+0xde>
    3d16:	08 17       	cp	r16, r24
    3d18:	19 07       	cpc	r17, r25
    3d1a:	19 f4       	brne	.+6      	; 0x3d22 <u8g2_font_get_glyph_data+0xe4>
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	03 96       	adiw	r24, 0x03	; 3
    3d20:	1a c0       	rjmp	.+52     	; 0x3d56 <u8g2_font_get_glyph_data+0x118>
    3d22:	fe 01       	movw	r30, r28
    3d24:	32 96       	adiw	r30, 0x02	; 2
    3d26:	e4 91       	lpm	r30, Z
    3d28:	ce 0f       	add	r28, r30
    3d2a:	d1 1d       	adc	r29, r1
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	84 91       	lpm	r24, Z
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	98 2f       	mov	r25, r24
    3d34:	88 27       	eor	r24, r24
    3d36:	31 96       	adiw	r30, 0x01	; 1
    3d38:	e4 91       	lpm	r30, Z
    3d3a:	8e 2b       	or	r24, r30
    3d3c:	00 97       	sbiw	r24, 0x00	; 0
    3d3e:	59 f7       	brne	.-42     	; 0x3d16 <u8g2_font_get_glyph_data+0xd8>
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	08 c0       	rjmp	.+16     	; 0x3d56 <u8g2_font_get_glyph_data+0x118>
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	05 c0       	rjmp	.+10     	; 0x3d56 <u8g2_font_get_glyph_data+0x118>
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <u8g2_font_get_glyph_data+0x118>
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	1f 91       	pop	r17
    3d5c:	0f 91       	pop	r16
    3d5e:	ff 90       	pop	r15
    3d60:	ef 90       	pop	r14
    3d62:	08 95       	ret

00003d64 <u8g2_GetGlyphWidth>:
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	ec 01       	movw	r28, r24
    3d6e:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <u8g2_font_get_glyph_data>
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	f1 f0       	breq	.+60     	; 0x3db2 <u8g2_GetGlyphWidth+0x4e>
    3d76:	bc 01       	movw	r22, r24
    3d78:	ce 01       	movw	r24, r28
    3d7a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <u8g2_font_setup_decode>
    3d7e:	8e 01       	movw	r16, r28
    3d80:	07 5c       	subi	r16, 0xC7	; 199
    3d82:	1f 4f       	sbci	r17, 0xFF	; 255
    3d84:	fe 01       	movw	r30, r28
    3d86:	e4 5b       	subi	r30, 0xB4	; 180
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	60 81       	ld	r22, Z
    3d8c:	c8 01       	movw	r24, r16
    3d8e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <u8g2_font_decode_get_signed_bits>
    3d92:	fe 01       	movw	r30, r28
    3d94:	ef 59       	subi	r30, 0x9F	; 159
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 83       	st	Z, r24
    3d9a:	74 97       	sbiw	r30, 0x14	; 20
    3d9c:	60 81       	ld	r22, Z
    3d9e:	c8 01       	movw	r24, r16
    3da0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <u8g2_font_decode_get_signed_bits>
    3da4:	c2 5b       	subi	r28, 0xB2	; 178
    3da6:	df 4f       	sbci	r29, 0xFF	; 255
    3da8:	68 81       	ld	r22, Y
    3daa:	c8 01       	movw	r24, r16
    3dac:	0e 94 a9 1c 	call	0x3952	; 0x3952 <u8g2_font_decode_get_signed_bits>
    3db0:	01 c0       	rjmp	.+2      	; 0x3db4 <u8g2_GetGlyphWidth+0x50>
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	08 95       	ret

00003dbe <u8g2_string_width>:
    3dbe:	ef 92       	push	r14
    3dc0:	ff 92       	push	r15
    3dc2:	0f 93       	push	r16
    3dc4:	1f 93       	push	r17
    3dc6:	cf 93       	push	r28
    3dc8:	df 93       	push	r29
    3dca:	ec 01       	movw	r28, r24
    3dcc:	e6 2e       	mov	r14, r22
    3dce:	f7 2e       	mov	r15, r23
    3dd0:	1f ae       	std	Y+63, r1	; 0x3f
    3dd2:	0e 94 21 22 	call	0x4442	; 0x4442 <u8x8_utf8_init>
    3dd6:	0e 2d       	mov	r16, r14
    3dd8:	1f 2d       	mov	r17, r15
    3dda:	e1 2c       	mov	r14, r1
    3ddc:	f1 2c       	mov	r15, r1
    3dde:	f8 01       	movw	r30, r16
    3de0:	61 91       	ld	r22, Z+
    3de2:	8f 01       	movw	r16, r30
    3de4:	ea 81       	ldd	r30, Y+2	; 0x02
    3de6:	fb 81       	ldd	r31, Y+3	; 0x03
    3de8:	ce 01       	movw	r24, r28
    3dea:	09 95       	icall
    3dec:	8f 3f       	cpi	r24, 0xFF	; 255
    3dee:	ff ef       	ldi	r31, 0xFF	; 255
    3df0:	9f 07       	cpc	r25, r31
    3df2:	59 f0       	breq	.+22     	; 0x3e0a <u8g2_string_width+0x4c>
    3df4:	8e 3f       	cpi	r24, 0xFE	; 254
    3df6:	2f ef       	ldi	r18, 0xFF	; 255
    3df8:	92 07       	cpc	r25, r18
    3dfa:	89 f3       	breq	.-30     	; 0x3dde <u8g2_string_width+0x20>
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	ce 01       	movw	r24, r28
    3e00:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <u8g2_GetGlyphWidth>
    3e04:	e8 2e       	mov	r14, r24
    3e06:	f8 0e       	add	r15, r24
    3e08:	ea cf       	rjmp	.-44     	; 0x3dde <u8g2_string_width+0x20>
    3e0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e0c:	88 23       	and	r24, r24
    3e0e:	31 f0       	breq	.+12     	; 0x3e1c <u8g2_string_width+0x5e>
    3e10:	cf 59       	subi	r28, 0x9F	; 159
    3e12:	df 4f       	sbci	r29, 0xFF	; 255
    3e14:	98 81       	ld	r25, Y
    3e16:	89 0f       	add	r24, r25
    3e18:	f8 0e       	add	r15, r24
    3e1a:	fe 18       	sub	r15, r14
    3e1c:	8f 2d       	mov	r24, r15
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	ff 90       	pop	r15
    3e28:	ef 90       	pop	r14
    3e2a:	08 95       	ret

00003e2c <u8g2_DrawGlyph>:
    3e2c:	ef 92       	push	r14
    3e2e:	ff 92       	push	r15
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	ec 01       	movw	r28, r24
    3e3a:	06 2f       	mov	r16, r22
    3e3c:	14 2f       	mov	r17, r20
    3e3e:	79 01       	movw	r14, r18
    3e40:	fc 01       	movw	r30, r24
    3e42:	eb 5b       	subi	r30, 0xBB	; 187
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	80 81       	ld	r24, Z
    3e48:	81 30       	cpi	r24, 0x01	; 1
    3e4a:	61 f0       	breq	.+24     	; 0x3e64 <u8g2_DrawGlyph+0x38>
    3e4c:	28 f0       	brcs	.+10     	; 0x3e58 <u8g2_DrawGlyph+0x2c>
    3e4e:	82 30       	cpi	r24, 0x02	; 2
    3e50:	79 f0       	breq	.+30     	; 0x3e70 <u8g2_DrawGlyph+0x44>
    3e52:	83 30       	cpi	r24, 0x03	; 3
    3e54:	99 f0       	breq	.+38     	; 0x3e7c <u8g2_DrawGlyph+0x50>
    3e56:	17 c0       	rjmp	.+46     	; 0x3e86 <u8g2_DrawGlyph+0x5a>
    3e58:	ef a9       	ldd	r30, Y+55	; 0x37
    3e5a:	f8 ad       	ldd	r31, Y+56	; 0x38
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	09 95       	icall
    3e60:	18 0f       	add	r17, r24
    3e62:	11 c0       	rjmp	.+34     	; 0x3e86 <u8g2_DrawGlyph+0x5a>
    3e64:	ef a9       	ldd	r30, Y+55	; 0x37
    3e66:	f8 ad       	ldd	r31, Y+56	; 0x38
    3e68:	ce 01       	movw	r24, r28
    3e6a:	09 95       	icall
    3e6c:	08 1b       	sub	r16, r24
    3e6e:	0b c0       	rjmp	.+22     	; 0x3e86 <u8g2_DrawGlyph+0x5a>
    3e70:	ef a9       	ldd	r30, Y+55	; 0x37
    3e72:	f8 ad       	ldd	r31, Y+56	; 0x38
    3e74:	ce 01       	movw	r24, r28
    3e76:	09 95       	icall
    3e78:	18 1b       	sub	r17, r24
    3e7a:	05 c0       	rjmp	.+10     	; 0x3e86 <u8g2_DrawGlyph+0x5a>
    3e7c:	ef a9       	ldd	r30, Y+55	; 0x37
    3e7e:	f8 ad       	ldd	r31, Y+56	; 0x38
    3e80:	ce 01       	movw	r24, r28
    3e82:	09 95       	icall
    3e84:	08 0f       	add	r16, r24
    3e86:	0b af       	std	Y+59, r16	; 0x3b
    3e88:	1c af       	std	Y+60, r17	; 0x3c
    3e8a:	b7 01       	movw	r22, r14
    3e8c:	ce 01       	movw	r24, r28
    3e8e:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <u8g2_font_get_glyph_data>
    3e92:	00 97       	sbiw	r24, 0x00	; 0
    3e94:	29 f0       	breq	.+10     	; 0x3ea0 <u8g2_DrawGlyph+0x74>
    3e96:	bc 01       	movw	r22, r24
    3e98:	ce 01       	movw	r24, r28
    3e9a:	0e 94 66 1d 	call	0x3acc	; 0x3acc <u8g2_font_decode_glyph>
    3e9e:	01 c0       	rjmp	.+2      	; 0x3ea2 <u8g2_DrawGlyph+0x76>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	ff 90       	pop	r15
    3eac:	ef 90       	pop	r14
    3eae:	08 95       	ret

00003eb0 <u8g2_draw_string>:
    3eb0:	bf 92       	push	r11
    3eb2:	cf 92       	push	r12
    3eb4:	df 92       	push	r13
    3eb6:	ef 92       	push	r14
    3eb8:	ff 92       	push	r15
    3eba:	0f 93       	push	r16
    3ebc:	1f 93       	push	r17
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	ec 01       	movw	r28, r24
    3ec4:	b6 2e       	mov	r11, r22
    3ec6:	c4 2e       	mov	r12, r20
    3ec8:	e2 2e       	mov	r14, r18
    3eca:	f3 2e       	mov	r15, r19
    3ecc:	0e 94 21 22 	call	0x4442	; 0x4442 <u8x8_utf8_init>
    3ed0:	0e 2d       	mov	r16, r14
    3ed2:	1f 2d       	mov	r17, r15
    3ed4:	d1 2c       	mov	r13, r1
    3ed6:	7e 01       	movw	r14, r28
    3ed8:	25 e4       	ldi	r18, 0x45	; 69
    3eda:	e2 0e       	add	r14, r18
    3edc:	f1 1c       	adc	r15, r1
    3ede:	f8 01       	movw	r30, r16
    3ee0:	61 91       	ld	r22, Z+
    3ee2:	8f 01       	movw	r16, r30
    3ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ee8:	ce 01       	movw	r24, r28
    3eea:	09 95       	icall
    3eec:	8f 3f       	cpi	r24, 0xFF	; 255
    3eee:	ff ef       	ldi	r31, 0xFF	; 255
    3ef0:	9f 07       	cpc	r25, r31
    3ef2:	e9 f0       	breq	.+58     	; 0x3f2e <u8g2_draw_string+0x7e>
    3ef4:	8e 3f       	cpi	r24, 0xFE	; 254
    3ef6:	2f ef       	ldi	r18, 0xFF	; 255
    3ef8:	92 07       	cpc	r25, r18
    3efa:	89 f3       	breq	.-30     	; 0x3ede <u8g2_draw_string+0x2e>
    3efc:	9c 01       	movw	r18, r24
    3efe:	4c 2d       	mov	r20, r12
    3f00:	6b 2d       	mov	r22, r11
    3f02:	ce 01       	movw	r24, r28
    3f04:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <u8g2_DrawGlyph>
    3f08:	f7 01       	movw	r30, r14
    3f0a:	90 81       	ld	r25, Z
    3f0c:	91 30       	cpi	r25, 0x01	; 1
    3f0e:	41 f0       	breq	.+16     	; 0x3f20 <u8g2_draw_string+0x70>
    3f10:	28 f0       	brcs	.+10     	; 0x3f1c <u8g2_draw_string+0x6c>
    3f12:	92 30       	cpi	r25, 0x02	; 2
    3f14:	39 f0       	breq	.+14     	; 0x3f24 <u8g2_draw_string+0x74>
    3f16:	93 30       	cpi	r25, 0x03	; 3
    3f18:	39 f0       	breq	.+14     	; 0x3f28 <u8g2_draw_string+0x78>
    3f1a:	07 c0       	rjmp	.+14     	; 0x3f2a <u8g2_draw_string+0x7a>
    3f1c:	b8 0e       	add	r11, r24
    3f1e:	05 c0       	rjmp	.+10     	; 0x3f2a <u8g2_draw_string+0x7a>
    3f20:	c8 0e       	add	r12, r24
    3f22:	03 c0       	rjmp	.+6      	; 0x3f2a <u8g2_draw_string+0x7a>
    3f24:	b8 1a       	sub	r11, r24
    3f26:	01 c0       	rjmp	.+2      	; 0x3f2a <u8g2_draw_string+0x7a>
    3f28:	c8 1a       	sub	r12, r24
    3f2a:	d8 0e       	add	r13, r24
    3f2c:	d8 cf       	rjmp	.-80     	; 0x3ede <u8g2_draw_string+0x2e>
    3f2e:	8d 2d       	mov	r24, r13
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	ff 90       	pop	r15
    3f3a:	ef 90       	pop	r14
    3f3c:	df 90       	pop	r13
    3f3e:	cf 90       	pop	r12
    3f40:	bf 90       	pop	r11
    3f42:	08 95       	ret

00003f44 <u8g2_DrawStr>:
    3f44:	e4 e1       	ldi	r30, 0x14	; 20
    3f46:	f2 e2       	ldi	r31, 0x22	; 34
    3f48:	dc 01       	movw	r26, r24
    3f4a:	13 96       	adiw	r26, 0x03	; 3
    3f4c:	fc 93       	st	X, r31
    3f4e:	ee 93       	st	-X, r30
    3f50:	12 97       	sbiw	r26, 0x02	; 2
    3f52:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <u8g2_draw_string>
    3f56:	08 95       	ret

00003f58 <u8g2_UpdateRefHeight>:
    3f58:	fc 01       	movw	r30, r24
    3f5a:	25 a9       	ldd	r18, Z+53	; 0x35
    3f5c:	36 a9       	ldd	r19, Z+54	; 0x36
    3f5e:	23 2b       	or	r18, r19
    3f60:	e9 f1       	breq	.+122    	; 0x3fdc <u8g2_UpdateRefHeight+0x84>
    3f62:	ed 5a       	subi	r30, 0xAD	; 173
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	20 81       	ld	r18, Z
    3f68:	3c 96       	adiw	r30, 0x0c	; 12
    3f6a:	20 83       	st	Z, r18
    3f6c:	3b 97       	sbiw	r30, 0x0b	; 11
    3f6e:	40 81       	ld	r20, Z
    3f70:	3c 96       	adiw	r30, 0x0c	; 12
    3f72:	40 83       	st	Z, r20
    3f74:	32 97       	sbiw	r30, 0x02	; 2
    3f76:	30 81       	ld	r19, Z
    3f78:	33 23       	and	r19, r19
    3f7a:	81 f1       	breq	.+96     	; 0x3fdc <u8g2_UpdateRefHeight+0x84>
    3f7c:	31 30       	cpi	r19, 0x01	; 1
    3f7e:	79 f4       	brne	.+30     	; 0x3f9e <u8g2_UpdateRefHeight+0x46>
    3f80:	39 97       	sbiw	r30, 0x09	; 9
    3f82:	30 81       	ld	r19, Z
    3f84:	23 17       	cp	r18, r19
    3f86:	14 f4       	brge	.+4      	; 0x3f8c <u8g2_UpdateRefHeight+0x34>
    3f88:	3a 96       	adiw	r30, 0x0a	; 10
    3f8a:	30 83       	st	Z, r19
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	ea 5a       	subi	r30, 0xAA	; 170
    3f90:	ff 4f       	sbci	r31, 0xFF	; 255
    3f92:	20 81       	ld	r18, Z
    3f94:	24 17       	cp	r18, r20
    3f96:	14 f5       	brge	.+68     	; 0x3fdc <u8g2_UpdateRefHeight+0x84>
    3f98:	3a 96       	adiw	r30, 0x0a	; 10
    3f9a:	20 83       	st	Z, r18
    3f9c:	08 95       	ret
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	e0 5b       	subi	r30, 0xB0	; 176
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	e0 81       	ld	r30, Z
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	ae 5a       	subi	r26, 0xAE	; 174
    3faa:	bf 4f       	sbci	r27, 0xFF	; 255
    3fac:	5c 91       	ld	r21, X
    3fae:	02 2e       	mov	r0, r18
    3fb0:	00 0c       	add	r0, r0
    3fb2:	33 0b       	sbc	r19, r19
    3fb4:	65 2f       	mov	r22, r21
    3fb6:	05 2e       	mov	r0, r21
    3fb8:	00 0c       	add	r0, r0
    3fba:	77 0b       	sbc	r23, r23
    3fbc:	6e 0f       	add	r22, r30
    3fbe:	71 1d       	adc	r23, r1
    3fc0:	e7 fd       	sbrc	r30, 7
    3fc2:	7a 95       	dec	r23
    3fc4:	26 17       	cp	r18, r22
    3fc6:	37 07       	cpc	r19, r23
    3fc8:	1c f4       	brge	.+6      	; 0x3fd0 <u8g2_UpdateRefHeight+0x78>
    3fca:	1d 96       	adiw	r26, 0x0d	; 13
    3fcc:	e5 0f       	add	r30, r21
    3fce:	ec 93       	st	X, r30
    3fd0:	54 17       	cp	r21, r20
    3fd2:	24 f4       	brge	.+8      	; 0x3fdc <u8g2_UpdateRefHeight+0x84>
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	e0 5a       	subi	r30, 0xA0	; 160
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	50 83       	st	Z, r21
    3fdc:	08 95       	ret

00003fde <u8g2_SetFontPosBaseline>:
    3fde:	2a ee       	ldi	r18, 0xEA	; 234
    3fe0:	3b e1       	ldi	r19, 0x1B	; 27
    3fe2:	fc 01       	movw	r30, r24
    3fe4:	30 af       	std	Z+56, r19	; 0x38
    3fe6:	27 ab       	std	Z+55, r18	; 0x37
    3fe8:	08 95       	ret

00003fea <u8g2_SetFont>:
    3fea:	cf 93       	push	r28
    3fec:	df 93       	push	r29
    3fee:	fc 01       	movw	r30, r24
    3ff0:	25 a9       	ldd	r18, Z+53	; 0x35
    3ff2:	36 a9       	ldd	r19, Z+54	; 0x36
    3ff4:	26 17       	cp	r18, r22
    3ff6:	37 07       	cpc	r19, r23
    3ff8:	51 f0       	breq	.+20     	; 0x400e <u8g2_SetFont+0x24>
    3ffa:	ec 01       	movw	r28, r24
    3ffc:	76 ab       	std	Z+54, r23	; 0x36
    3ffe:	65 ab       	std	Z+53, r22	; 0x35
    4000:	8a 5b       	subi	r24, 0xBA	; 186
    4002:	9f 4f       	sbci	r25, 0xFF	; 255
    4004:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <u8g2_read_font_info>
    4008:	ce 01       	movw	r24, r28
    400a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <u8g2_UpdateRefHeight>
    400e:	df 91       	pop	r29
    4010:	cf 91       	pop	r28
    4012:	08 95       	ret

00004014 <u8g2_GetStrWidth>:
    4014:	24 e1       	ldi	r18, 0x14	; 20
    4016:	32 e2       	ldi	r19, 0x22	; 34
    4018:	fc 01       	movw	r30, r24
    401a:	33 83       	std	Z+3, r19	; 0x03
    401c:	22 83       	std	Z+2, r18	; 0x02
    401e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <u8g2_string_width>
    4022:	08 95       	ret

00004024 <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    4024:	8b 5b       	subi	r24, 0xBB	; 187
    4026:	9f 4f       	sbci	r25, 0xFF	; 255
    4028:	fc 01       	movw	r30, r24
    402a:	60 83       	st	Z, r22
    402c:	08 95       	ret

0000402e <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    402e:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    4030:	dc 01       	movw	r26, r24
    4032:	98 96       	adiw	r26, 0x28	; 40
    4034:	3c 91       	ld	r19, X
    4036:	98 97       	sbiw	r26, 0x28	; 40
    4038:	43 1b       	sub	r20, r19
    403a:	5e 96       	adiw	r26, 0x1e	; 30
    403c:	ed 91       	ld	r30, X+
    403e:	fc 91       	ld	r31, X
    4040:	5f 97       	sbiw	r26, 0x1f	; 31
    4042:	09 95       	icall
}
    4044:	0f 91       	pop	r16
    4046:	08 95       	ret

00004048 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    4048:	0f 93       	push	r16
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    404a:	fc 01       	movw	r30, r24
    404c:	e3 5a       	subi	r30, 0xA3	; 163
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	30 81       	ld	r19, Z
    4052:	33 23       	and	r19, r19
    4054:	09 f4       	brne	.+2      	; 0x4058 <u8g2_DrawHVLine+0x10>
    4056:	65 c0       	rjmp	.+202    	; 0x4122 <u8g2_DrawHVLine+0xda>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    4058:	22 23       	and	r18, r18
    405a:	09 f4       	brne	.+2      	; 0x405e <u8g2_DrawHVLine+0x16>
    405c:	62 c0       	rjmp	.+196    	; 0x4122 <u8g2_DrawHVLine+0xda>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    405e:	22 30       	cpi	r18, 0x02	; 2
    4060:	58 f0       	brcs	.+22     	; 0x4078 <u8g2_DrawHVLine+0x30>
      {
	if ( dir == 2 )
    4062:	02 30       	cpi	r16, 0x02	; 2
    4064:	19 f4       	brne	.+6      	; 0x406c <u8g2_DrawHVLine+0x24>
    4066:	6f 5f       	subi	r22, 0xFF	; 255
	{
	  x -= len;
	  x++;
    4068:	62 1b       	sub	r22, r18
    406a:	0a c0       	rjmp	.+20     	; 0x4080 <u8g2_DrawHVLine+0x38>
	}
	else if ( dir == 3 )
    406c:	03 30       	cpi	r16, 0x03	; 3
    406e:	21 f4       	brne	.+8      	; 0x4078 <u8g2_DrawHVLine+0x30>
    4070:	4f 5f       	subi	r20, 0xFF	; 255
	{
	  y -= len;
	  y++;
    4072:	42 1b       	sub	r20, r18
	}
      }
      dir &= 1;  
    4074:	51 e0       	ldi	r21, 0x01	; 1
    4076:	2d c0       	rjmp	.+90     	; 0x40d2 <u8g2_DrawHVLine+0x8a>
      
      /* clip against the user window */
      if ( dir == 0 )
    4078:	50 2f       	mov	r21, r16
    407a:	51 70       	andi	r21, 0x01	; 1
    407c:	00 fd       	sbrc	r16, 0
    407e:	29 c0       	rjmp	.+82     	; 0x40d2 <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
    4080:	dc 01       	movw	r26, r24
    4082:	9f 96       	adiw	r26, 0x2f	; 47
    4084:	3c 91       	ld	r19, X
    4086:	9f 97       	sbiw	r26, 0x2f	; 47
    4088:	43 17       	cp	r20, r19
    408a:	08 f4       	brcc	.+2      	; 0x408e <u8g2_DrawHVLine+0x46>
    408c:	4a c0       	rjmp	.+148    	; 0x4122 <u8g2_DrawHVLine+0xda>
	  return;
	if ( y >= u8g2->user_y1 )
    408e:	d0 96       	adiw	r26, 0x30	; 48
    4090:	3c 91       	ld	r19, X
    4092:	d0 97       	sbiw	r26, 0x30	; 48
    4094:	43 17       	cp	r20, r19
    4096:	08 f0       	brcs	.+2      	; 0x409a <u8g2_DrawHVLine+0x52>
    4098:	44 c0       	rjmp	.+136    	; 0x4122 <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    409a:	9e 96       	adiw	r26, 0x2e	; 46
    409c:	3c 91       	ld	r19, X
    409e:	9e 97       	sbiw	r26, 0x2e	; 46
    40a0:	9d 96       	adiw	r26, 0x2d	; 45
    40a2:	5c 91       	ld	r21, X
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    40a4:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    40a6:	26 17       	cp	r18, r22
    40a8:	30 f4       	brcc	.+12     	; 0x40b6 <u8g2_DrawHVLine+0x6e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    40aa:	63 17       	cp	r22, r19
    40ac:	18 f4       	brcc	.+6      	; 0x40b4 <u8g2_DrawHVLine+0x6c>
    {
      b = d;
      b--;
    40ae:	2f ef       	ldi	r18, 0xFF	; 255
    40b0:	23 0f       	add	r18, r19
    40b2:	03 c0       	rjmp	.+6      	; 0x40ba <u8g2_DrawHVLine+0x72>
    }
    else
    {
      a = c;
    40b4:	65 2f       	mov	r22, r21
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    40b6:	63 17       	cp	r22, r19
    40b8:	a0 f5       	brcc	.+104    	; 0x4122 <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    40ba:	52 17       	cp	r21, r18
    40bc:	90 f5       	brcc	.+100    	; 0x4122 <u8g2_DrawHVLine+0xda>
    40be:	65 17       	cp	r22, r21
    40c0:	08 f4       	brcc	.+2      	; 0x40c4 <u8g2_DrawHVLine+0x7c>
    40c2:	65 2f       	mov	r22, r21
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    40c4:	23 17       	cp	r18, r19
    40c6:	08 f4       	brcc	.+2      	; 0x40ca <u8g2_DrawHVLine+0x82>
    40c8:	32 2f       	mov	r19, r18
    40ca:	23 2f       	mov	r18, r19
    40cc:	26 1b       	sub	r18, r22
    40ce:	50 e0       	ldi	r21, 0x00	; 0
    40d0:	1e c0       	rjmp	.+60     	; 0x410e <u8g2_DrawHVLine+0xc6>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    40d2:	fc 01       	movw	r30, r24
    40d4:	35 a5       	ldd	r19, Z+45	; 0x2d
    40d6:	63 17       	cp	r22, r19
    40d8:	20 f1       	brcs	.+72     	; 0x4122 <u8g2_DrawHVLine+0xda>
	  return;
	if ( x >= u8g2->user_x1 )
    40da:	36 a5       	ldd	r19, Z+46	; 0x2e
    40dc:	63 17       	cp	r22, r19
    40de:	08 f5       	brcc	.+66     	; 0x4122 <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    40e0:	30 a9       	ldd	r19, Z+48	; 0x30
    40e2:	77 a5       	ldd	r23, Z+47	; 0x2f
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    40e4:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    40e6:	24 17       	cp	r18, r20
    40e8:	30 f4       	brcc	.+12     	; 0x40f6 <u8g2_DrawHVLine+0xae>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    40ea:	43 17       	cp	r20, r19
    40ec:	18 f4       	brcc	.+6      	; 0x40f4 <u8g2_DrawHVLine+0xac>
    {
      b = d;
      b--;
    40ee:	2f ef       	ldi	r18, 0xFF	; 255
    40f0:	23 0f       	add	r18, r19
    40f2:	03 c0       	rjmp	.+6      	; 0x40fa <u8g2_DrawHVLine+0xb2>
    }
    else
    {
      a = c;
    40f4:	47 2f       	mov	r20, r23
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    40f6:	43 17       	cp	r20, r19
    40f8:	a0 f4       	brcc	.+40     	; 0x4122 <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
    40fa:	72 17       	cp	r23, r18
    40fc:	90 f4       	brcc	.+36     	; 0x4122 <u8g2_DrawHVLine+0xda>
    40fe:	47 17       	cp	r20, r23
    4100:	08 f4       	brcc	.+2      	; 0x4104 <u8g2_DrawHVLine+0xbc>
    4102:	47 2f       	mov	r20, r23
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    4104:	23 17       	cp	r18, r19
    4106:	08 f4       	brcc	.+2      	; 0x410a <u8g2_DrawHVLine+0xc2>
    4108:	32 2f       	mov	r19, r18
    410a:	23 2f       	mov	r18, r19
    410c:	24 1b       	sub	r18, r20
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    410e:	dc 01       	movw	r26, r24
    4110:	90 96       	adiw	r26, 0x20	; 32
    4112:	ed 91       	ld	r30, X+
    4114:	fc 91       	ld	r31, X
    4116:	91 97       	sbiw	r26, 0x21	; 33
    4118:	04 80       	ldd	r0, Z+4	; 0x04
    411a:	f5 81       	ldd	r31, Z+5	; 0x05
    411c:	e0 2d       	mov	r30, r0
    411e:	05 2f       	mov	r16, r21
    4120:	09 95       	icall
    }
}
    4122:	0f 91       	pop	r16
    4124:	08 95       	ret

00004126 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    4126:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    4128:	00 e0       	ldi	r16, 0x00	; 0
    412a:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
}
    412e:	0f 91       	pop	r16
    4130:	08 95       	ret

00004132 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    4132:	0f 93       	push	r16
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
    4134:	01 e0       	ldi	r16, 0x01	; 1
    4136:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
}
    413a:	0f 91       	pop	r16
    413c:	08 95       	ret

0000413e <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    413e:	0f 93       	push	r16
    4140:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    4142:	87 a5       	ldd	r24, Z+47	; 0x2f
    4144:	48 17       	cp	r20, r24
    4146:	70 f0       	brcs	.+28     	; 0x4164 <u8g2_DrawPixel+0x26>
    return;
  if ( y >= u8g2->user_y1 )
    4148:	80 a9       	ldd	r24, Z+48	; 0x30
    414a:	48 17       	cp	r20, r24
    414c:	58 f4       	brcc	.+22     	; 0x4164 <u8g2_DrawPixel+0x26>
    return;
  if ( x < u8g2->user_x0 )
    414e:	85 a5       	ldd	r24, Z+45	; 0x2d
    4150:	68 17       	cp	r22, r24
    4152:	40 f0       	brcs	.+16     	; 0x4164 <u8g2_DrawPixel+0x26>
    return;
  if ( x >= u8g2->user_x1 )
    4154:	86 a5       	ldd	r24, Z+46	; 0x2e
    4156:	68 17       	cp	r22, r24
    4158:	28 f4       	brcc	.+10     	; 0x4164 <u8g2_DrawPixel+0x26>
    415a:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    415c:	00 e0       	ldi	r16, 0x00	; 0
    415e:	21 e0       	ldi	r18, 0x01	; 1
    4160:	0e 94 24 20 	call	0x4048	; 0x4048 <u8g2_DrawHVLine>
}
    4164:	0f 91       	pop	r16
    4166:	08 95       	ret

00004168 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    4168:	63 30       	cpi	r22, 0x03	; 3
    416a:	28 f4       	brcc	.+10     	; 0x4176 <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    416c:	fc 01       	movw	r30, r24
    416e:	ed 59       	subi	r30, 0x9D	; 157
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	60 83       	st	Z, r22
    4174:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    4176:	fc 01       	movw	r30, r24
    4178:	ed 59       	subi	r30, 0x9D	; 157
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	21 e0       	ldi	r18, 0x01	; 1
    417e:	20 83       	st	Z, r18
    4180:	08 95       	ret

00004182 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    4182:	46 17       	cp	r20, r22
    4184:	38 f4       	brcc	.+14     	; 0x4194 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
    4186:	82 17       	cp	r24, r18
    4188:	60 f0       	brcs	.+24     	; 0x41a2 <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	24 17       	cp	r18, r20
    418e:	60 f0       	brcs	.+24     	; 0x41a8 <u8g2_is_intersection_decision_tree+0x26>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    4194:	82 17       	cp	r24, r18
    4196:	38 f4       	brcc	.+14     	; 0x41a6 <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	24 17       	cp	r18, r20
    419c:	28 f0       	brcs	.+10     	; 0x41a8 <u8g2_is_intersection_decision_tree+0x26>
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	08 95       	ret
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    41a8:	08 95       	ret

000041aa <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    41aa:	ff 92       	push	r15
    41ac:	0f 93       	push	r16
    41ae:	1f 93       	push	r17
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	ec 01       	movw	r28, r24
    41b6:	16 2f       	mov	r17, r22
    41b8:	f2 2e       	mov	r15, r18
    41ba:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    41bc:	68 a9       	ldd	r22, Y+48	; 0x30
    41be:	8f a5       	ldd	r24, Y+47	; 0x2f
    41c0:	0e 94 c1 20 	call	0x4182	; 0x4182 <u8g2_is_intersection_decision_tree>
    41c4:	88 23       	and	r24, r24
    41c6:	31 f0       	breq	.+12     	; 0x41d4 <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    41c8:	2f 2d       	mov	r18, r15
    41ca:	41 2f       	mov	r20, r17
    41cc:	6e a5       	ldd	r22, Y+46	; 0x2e
    41ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    41d0:	0e 94 c1 20 	call	0x4182	; 0x4182 <u8g2_is_intersection_decision_tree>
}
    41d4:	df 91       	pop	r29
    41d6:	cf 91       	pop	r28
    41d8:	1f 91       	pop	r17
    41da:	0f 91       	pop	r16
    41dc:	ff 90       	pop	r15
    41de:	08 95       	ret

000041e0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    41e0:	ef 92       	push	r14
    41e2:	ff 92       	push	r15
    41e4:	0f 93       	push	r16
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    41ec:	34 2f       	mov	r19, r20
    41ee:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	03 2e       	mov	r0, r19
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    41f8:	88 0f       	add	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	0a 94       	dec	r0
    41fe:	e2 f7       	brpl	.-8      	; 0x41f8 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    4200:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4202:	f7 01       	movw	r30, r14
    4204:	ed 59       	subi	r30, 0x9D	; 157
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	50 81       	ld	r21, Z
    420a:	52 30       	cpi	r21, 0x02	; 2
    420c:	20 f4       	brcc	.+8      	; 0x4216 <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    420e:	51 30       	cpi	r21, 0x01	; 1
    4210:	21 f0       	breq	.+8      	; 0x421a <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    4212:	78 2f       	mov	r23, r24
    4214:	04 c0       	rjmp	.+8      	; 0x421e <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	02 c0       	rjmp	.+4      	; 0x421e <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    421a:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    421c:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    421e:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    4220:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    4222:	d7 01       	movw	r26, r14
    4224:	92 96       	adiw	r26, 0x22	; 34
    4226:	8d 91       	ld	r24, X+
    4228:	9c 91       	ld	r25, X
    422a:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    422c:	ed 91       	ld	r30, X+
    422e:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    4230:	d0 89       	ldd	r29, Z+16	; 0x10
    4232:	d4 9f       	mul	r29, r20
    4234:	f0 01       	movw	r30, r0
    4236:	d5 9f       	mul	r29, r21
    4238:	f0 0d       	add	r31, r0
    423a:	11 24       	eor	r1, r1
    423c:	e6 0f       	add	r30, r22
    423e:	f1 1d       	adc	r31, r1
    4240:	e8 0f       	add	r30, r24
    4242:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    4244:	01 11       	cpse	r16, r1
    4246:	07 c0       	rjmp	.+14     	; 0x4256 <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    4248:	80 81       	ld	r24, Z
    424a:	87 2b       	or	r24, r23
    424c:	8c 27       	eor	r24, r28
    424e:	81 93       	st	Z+, r24
	ptr++;
	len--;
    4250:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    4252:	d1 f7       	brne	.-12     	; 0x4248 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    4254:	22 c0       	rjmp	.+68     	; 0x429a <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    4256:	a7 01       	movw	r20, r14
    4258:	4d 59       	subi	r20, 0x9D	; 157
    425a:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    425c:	90 81       	ld	r25, Z
    425e:	97 2b       	or	r25, r23
    4260:	9c 27       	eor	r25, r28
    4262:	90 83       	st	Z, r25
      
      bit_pos++;
    4264:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    4266:	37 70       	andi	r19, 0x07	; 7

      len--;
    4268:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    426a:	31 11       	cpse	r19, r1
    426c:	0e c0       	rjmp	.+28     	; 0x428a <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    426e:	d7 01       	movw	r26, r14
    4270:	96 96       	adiw	r26, 0x26	; 38
    4272:	8c 91       	ld	r24, X
    4274:	e8 0f       	add	r30, r24
    4276:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    4278:	da 01       	movw	r26, r20
    427a:	8c 91       	ld	r24, X
    427c:	82 30       	cpi	r24, 0x02	; 2
    427e:	40 f4       	brcc	.+16     	; 0x4290 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    4280:	81 30       	cpi	r24, 0x01	; 1
    4282:	41 f0       	breq	.+16     	; 0x4294 <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    4284:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    4286:	71 e0       	ldi	r23, 0x01	; 1
    4288:	06 c0       	rjmp	.+12     	; 0x4296 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    428a:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    428c:	cc 0f       	add	r28, r28
    428e:	03 c0       	rjmp	.+6      	; 0x4296 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    4290:	c1 e0       	ldi	r28, 0x01	; 1
    4292:	01 c0       	rjmp	.+2      	; 0x4296 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    4294:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    4296:	21 11       	cpse	r18, r1
    4298:	e1 cf       	rjmp	.-62     	; 0x425c <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	08 95       	ret

000042a6 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    42a6:	fc 01       	movw	r30, r24
    42a8:	a0 81       	ld	r26, Z
    42aa:	b1 81       	ldd	r27, Z+1	; 0x01
    42ac:	84 a1       	ldd	r24, Z+36	; 0x24
    42ae:	98 2f       	mov	r25, r24
    42b0:	99 0f       	add	r25, r25
    42b2:	99 0f       	add	r25, r25
    42b4:	99 0f       	add	r25, r25
    42b6:	97 a3       	std	Z+39, r25	; 0x27
    42b8:	50 96       	adiw	r26, 0x10	; 16
    42ba:	9c 91       	ld	r25, X
    42bc:	50 97       	sbiw	r26, 0x10	; 16
    42be:	90 32       	cpi	r25, 0x20	; 32
    42c0:	08 f0       	brcs	.+2      	; 0x42c4 <u8g2_update_dimension_common+0x1e>
    42c2:	9f e1       	ldi	r25, 0x1F	; 31
    42c4:	99 0f       	add	r25, r25
    42c6:	99 0f       	add	r25, r25
    42c8:	99 0f       	add	r25, r25
    42ca:	96 a3       	std	Z+38, r25	; 0x26
    42cc:	45 a1       	ldd	r20, Z+37	; 0x25
    42ce:	94 2f       	mov	r25, r20
    42d0:	99 0f       	add	r25, r25
    42d2:	99 0f       	add	r25, r25
    42d4:	99 0f       	add	r25, r25
    42d6:	90 a7       	std	Z+40, r25	; 0x28
    42d8:	51 96       	adiw	r26, 0x11	; 17
    42da:	5c 91       	ld	r21, X
    42dc:	51 97       	sbiw	r26, 0x11	; 17
    42de:	24 2f       	mov	r18, r20
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	28 0f       	add	r18, r24
    42e4:	31 1d       	adc	r19, r1
    42e6:	65 2f       	mov	r22, r21
    42e8:	70 e0       	ldi	r23, 0x00	; 0
    42ea:	62 17       	cp	r22, r18
    42ec:	73 07       	cpc	r23, r19
    42ee:	14 f4       	brge	.+4      	; 0x42f4 <u8g2_update_dimension_common+0x4e>
    42f0:	85 2f       	mov	r24, r21
    42f2:	84 1b       	sub	r24, r20
    42f4:	91 a7       	std	Z+41, r25	; 0x29
    42f6:	88 0f       	add	r24, r24
    42f8:	88 0f       	add	r24, r24
    42fa:	88 0f       	add	r24, r24
    42fc:	89 0f       	add	r24, r25
    42fe:	82 a7       	std	Z+42, r24	; 0x2a
    4300:	80 ef       	ldi	r24, 0xF0	; 240
    4302:	83 a7       	std	Z+43, r24	; 0x2b
    4304:	54 96       	adiw	r26, 0x14	; 20
    4306:	8d 91       	ld	r24, X+
    4308:	9c 91       	ld	r25, X
    430a:	55 97       	sbiw	r26, 0x15	; 21
    430c:	81 3f       	cpi	r24, 0xF1	; 241
    430e:	91 05       	cpc	r25, r1
    4310:	08 f4       	brcc	.+2      	; 0x4314 <u8g2_update_dimension_common+0x6e>
    4312:	83 a7       	std	Z+43, r24	; 0x2b
    4314:	56 96       	adiw	r26, 0x16	; 22
    4316:	8c 91       	ld	r24, X
    4318:	84 a7       	std	Z+44, r24	; 0x2c
    431a:	08 95       	ret

0000431c <u8g2_update_dimension_r0>:
    431c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <u8g2_update_dimension_common>
    4320:	08 95       	ret

00004322 <u8g2_apply_clip_window>:
    4322:	0f 93       	push	r16
    4324:	cf 93       	push	r28
    4326:	df 93       	push	r29
    4328:	ec 01       	movw	r28, r24
    432a:	0c a9       	ldd	r16, Y+52	; 0x34
    432c:	2a a9       	ldd	r18, Y+50	; 0x32
    432e:	4b a9       	ldd	r20, Y+51	; 0x33
    4330:	69 a9       	ldd	r22, Y+49	; 0x31
    4332:	0e 94 d5 20 	call	0x41aa	; 0x41aa <u8g2_IsIntersection>
    4336:	81 11       	cpse	r24, r1
    4338:	04 c0       	rjmp	.+8      	; 0x4342 <u8g2_apply_clip_window+0x20>
    433a:	c3 5a       	subi	r28, 0xA3	; 163
    433c:	df 4f       	sbci	r29, 0xFF	; 255
    433e:	18 82       	st	Y, r1
    4340:	19 c0       	rjmp	.+50     	; 0x4374 <u8g2_apply_clip_window+0x52>
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	fe 01       	movw	r30, r28
    4346:	e3 5a       	subi	r30, 0xA3	; 163
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	80 83       	st	Z, r24
    434c:	89 a9       	ldd	r24, Y+49	; 0x31
    434e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4350:	98 17       	cp	r25, r24
    4352:	08 f4       	brcc	.+2      	; 0x4356 <u8g2_apply_clip_window+0x34>
    4354:	8d a7       	std	Y+45, r24	; 0x2d
    4356:	8a a9       	ldd	r24, Y+50	; 0x32
    4358:	9e a5       	ldd	r25, Y+46	; 0x2e
    435a:	89 17       	cp	r24, r25
    435c:	08 f4       	brcc	.+2      	; 0x4360 <u8g2_apply_clip_window+0x3e>
    435e:	8e a7       	std	Y+46, r24	; 0x2e
    4360:	8b a9       	ldd	r24, Y+51	; 0x33
    4362:	9f a5       	ldd	r25, Y+47	; 0x2f
    4364:	98 17       	cp	r25, r24
    4366:	08 f4       	brcc	.+2      	; 0x436a <u8g2_apply_clip_window+0x48>
    4368:	8f a7       	std	Y+47, r24	; 0x2f
    436a:	8c a9       	ldd	r24, Y+52	; 0x34
    436c:	98 a9       	ldd	r25, Y+48	; 0x30
    436e:	89 17       	cp	r24, r25
    4370:	08 f4       	brcc	.+2      	; 0x4374 <u8g2_apply_clip_window+0x52>
    4372:	88 ab       	std	Y+48, r24	; 0x30
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	0f 91       	pop	r16
    437a:	08 95       	ret

0000437c <u8g2_update_page_win_r0>:
    437c:	fc 01       	movw	r30, r24
    437e:	15 a6       	std	Z+45, r1	; 0x2d
    4380:	83 a5       	ldd	r24, Z+43	; 0x2b
    4382:	86 a7       	std	Z+46, r24	; 0x2e
    4384:	81 a5       	ldd	r24, Z+41	; 0x29
    4386:	87 a7       	std	Z+47, r24	; 0x2f
    4388:	82 a5       	ldd	r24, Z+42	; 0x2a
    438a:	80 ab       	std	Z+48, r24	; 0x30
    438c:	cf 01       	movw	r24, r30
    438e:	0e 94 91 21 	call	0x4322	; 0x4322 <u8g2_apply_clip_window>
    4392:	08 95       	ret

00004394 <u8g2_draw_l90_r0>:
    4394:	0f 93       	push	r16
    4396:	0e 94 17 20 	call	0x402e	; 0x402e <u8g2_draw_hv_line_2dir>
    439a:	0f 91       	pop	r16
    439c:	08 95       	ret

0000439e <u8g2_SetMaxClipWindow>:
    439e:	dc 01       	movw	r26, r24
    43a0:	d1 96       	adiw	r26, 0x31	; 49
    43a2:	1c 92       	st	X, r1
    43a4:	d1 97       	sbiw	r26, 0x31	; 49
    43a6:	d3 96       	adiw	r26, 0x33	; 51
    43a8:	1c 92       	st	X, r1
    43aa:	d3 97       	sbiw	r26, 0x33	; 51
    43ac:	8f ef       	ldi	r24, 0xFF	; 255
    43ae:	d2 96       	adiw	r26, 0x32	; 50
    43b0:	8c 93       	st	X, r24
    43b2:	d2 97       	sbiw	r26, 0x32	; 50
    43b4:	d4 96       	adiw	r26, 0x34	; 52
    43b6:	8c 93       	st	X, r24
    43b8:	d4 97       	sbiw	r26, 0x34	; 52
    43ba:	90 96       	adiw	r26, 0x20	; 32
    43bc:	ed 91       	ld	r30, X+
    43be:	fc 91       	ld	r31, X
    43c0:	91 97       	sbiw	r26, 0x21	; 33
    43c2:	02 80       	ldd	r0, Z+2	; 0x02
    43c4:	f3 81       	ldd	r31, Z+3	; 0x03
    43c6:	e0 2d       	mov	r30, r0
    43c8:	cd 01       	movw	r24, r26
    43ca:	09 95       	icall
    43cc:	08 95       	ret

000043ce <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    43ce:	0f 93       	push	r16
    43d0:	1f 93       	push	r17
    43d2:	cf 93       	push	r28
    43d4:	df 93       	push	r29
    43d6:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    43d8:	1e aa       	std	Y+54, r1	; 0x36
    43da:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    43dc:	3f 8f       	std	Y+31, r19	; 0x1f
    43de:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    43e0:	7b a3       	std	Y+35, r23	; 0x23
    43e2:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    43e4:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    43e6:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    43e8:	fc 01       	movw	r30, r24
    43ea:	ee 5b       	subi	r30, 0xBE	; 190
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    43f0:	b0 96       	adiw	r30, 0x20	; 32
    43f2:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    43f4:	31 96       	adiw	r30, 0x01	; 1
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    43fa:	31 96       	adiw	r30, 0x01	; 1
    43fc:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    43fe:	19 a3       	std	Y+33, r17	; 0x21
    4400:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    4402:	d8 01       	movw	r26, r16
    4404:	ed 91       	ld	r30, X+
    4406:	fc 91       	ld	r31, X
    4408:	ce 01       	movw	r24, r28
    440a:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    440c:	ce 01       	movw	r24, r28
    440e:	0e 94 cf 21 	call	0x439e	; 0x439e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    4412:	ce 01       	movw	r24, r28
    4414:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    4418:	cb 5b       	subi	r28, 0xBB	; 187
    441a:	df 4f       	sbci	r29, 0xFF	; 255
    441c:	18 82       	st	Y, r1
#endif
}
    441e:	df 91       	pop	r29
    4420:	cf 91       	pop	r28
    4422:	1f 91       	pop	r17
    4424:	0f 91       	pop	r16
    4426:	08 95       	ret

00004428 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    4428:	66 23       	and	r22, r22
    442a:	29 f0       	breq	.+10     	; 0x4436 <u8x8_ascii_next+0xe>
    442c:	6a 30       	cpi	r22, 0x0A	; 10
    442e:	31 f0       	breq	.+12     	; 0x443c <u8x8_ascii_next+0x14>
    4430:	86 2f       	mov	r24, r22
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	08 95       	ret
    4436:	8f ef       	ldi	r24, 0xFF	; 255
    4438:	9f ef       	ldi	r25, 0xFF	; 255
    443a:	08 95       	ret
    443c:	8f ef       	ldi	r24, 0xFF	; 255
    443e:	9f ef       	ldi	r25, 0xFF	; 255
    4440:	08 95       	ret

00004442 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    4442:	fc 01       	movw	r30, r24
    4444:	10 8e       	std	Z+24, r1	; 0x18
    4446:	08 95       	ret

00004448 <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
	uint8_t *data;
	switch(msg){
    4450:	68 31       	cpi	r22, 0x18	; 24
    4452:	19 f1       	breq	.+70     	; 0x449a <u8x8_byte_avr_hw_i2c+0x52>
    4454:	28 f4       	brcc	.+10     	; 0x4460 <u8x8_byte_avr_hw_i2c+0x18>
    4456:	64 31       	cpi	r22, 0x14	; 20
    4458:	e1 f0       	breq	.+56     	; 0x4492 <u8x8_byte_avr_hw_i2c+0x4a>
    445a:	67 31       	cpi	r22, 0x17	; 23
    445c:	39 f0       	breq	.+14     	; 0x446c <u8x8_byte_avr_hw_i2c+0x24>
    445e:	27 c0       	rjmp	.+78     	; 0x44ae <u8x8_byte_avr_hw_i2c+0x66>
    4460:	69 31       	cpi	r22, 0x19	; 25
    4462:	09 f1       	breq	.+66     	; 0x44a6 <u8x8_byte_avr_hw_i2c+0x5e>
    4464:	60 32       	cpi	r22, 0x20	; 32
    4466:	19 f5       	brne	.+70     	; 0x44ae <u8x8_byte_avr_hw_i2c+0x66>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	24 c0       	rjmp	.+72     	; 0x44b4 <u8x8_byte_avr_hw_i2c+0x6c>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    446c:	8f ef       	ldi	r24, 0xFF	; 255
    446e:	84 0f       	add	r24, r20
    4470:	44 23       	and	r20, r20
    4472:	f9 f0       	breq	.+62     	; 0x44b2 <u8x8_byte_avr_hw_i2c+0x6a>
    4474:	e9 01       	movw	r28, r18
    4476:	08 2f       	mov	r16, r24
    4478:	10 e0       	ldi	r17, 0x00	; 0
    447a:	0f 5f       	subi	r16, 0xFF	; 255
    447c:	1f 4f       	sbci	r17, 0xFF	; 255
    447e:	02 0f       	add	r16, r18
    4480:	13 1f       	adc	r17, r19
				i2c_write(*data++);
    4482:	89 91       	ld	r24, Y+
    4484:	0e 94 31 18 	call	0x3062	; 0x3062 <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    4488:	0c 17       	cp	r16, r28
    448a:	1d 07       	cpc	r17, r29
    448c:	d1 f7       	brne	.-12     	; 0x4482 <u8x8_byte_avr_hw_i2c+0x3a>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	11 c0       	rjmp	.+34     	; 0x44b4 <u8x8_byte_avr_hw_i2c+0x6c>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    4492:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    4496:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    4498:	0d c0       	rjmp	.+26     	; 0x44b4 <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    449a:	fc 01       	movw	r30, r24
    449c:	86 89       	ldd	r24, Z+22	; 0x16
    449e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    44a2:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    44a4:	07 c0       	rjmp	.+14     	; 0x44b4 <u8x8_byte_avr_hw_i2c+0x6c>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    44a6:	0e 94 21 18 	call	0x3042	; 0x3042 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    44aa:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    44ac:	03 c0       	rjmp	.+6      	; 0x44b4 <u8x8_byte_avr_hw_i2c+0x6c>
		default:
			return 0;
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	01 c0       	rjmp	.+2      	; 0x44b4 <u8x8_byte_avr_hw_i2c+0x6c>
	}
	return 1;
    44b2:	81 e0       	ldi	r24, 0x01	; 1
}
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	08 95       	ret

000044be <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    44be:	6a 32       	cpi	r22, 0x2A	; 42
    44c0:	51 f0       	breq	.+20     	; 0x44d6 <u8x8_avr_delay+0x18>
    44c2:	18 f4       	brcc	.+6      	; 0x44ca <u8x8_avr_delay+0xc>
    44c4:	69 32       	cpi	r22, 0x29	; 41
    44c6:	59 f0       	breq	.+22     	; 0x44de <u8x8_avr_delay+0x20>
    44c8:	33 c0       	rjmp	.+102    	; 0x4530 <u8x8_avr_delay+0x72>
    44ca:	6b 32       	cpi	r22, 0x2B	; 43
    44cc:	61 f0       	breq	.+24     	; 0x44e6 <u8x8_avr_delay+0x28>
    44ce:	6c 32       	cpi	r22, 0x2C	; 44
    44d0:	79 f5       	brne	.+94     	; 0x4530 <u8x8_avr_delay+0x72>
			break;
		default:
			return 0;
	}

	return 1;
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	08 95       	ret
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    44d6:	41 11       	cpse	r20, r1
    44d8:	19 c0       	rjmp	.+50     	; 0x450c <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    44de:	41 11       	cpse	r20, r1
    44e0:	1d c0       	rjmp	.+58     	; 0x451c <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    44e6:	24 2f       	mov	r18, r20
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	a4 e6       	ldi	r26, 0x64	; 100
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	0e 94 cd 29 	call	0x539a	; 0x539a <__umulhisi3>
    44f2:	20 ea       	ldi	r18, 0xA0	; 160
    44f4:	3f e0       	ldi	r19, 0x0F	; 15
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	0e 94 ab 29 	call	0x5356	; 0x5356 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    44fe:	23 32       	cpi	r18, 0x23	; 35
    4500:	c8 f4       	brcc	.+50     	; 0x4534 <u8x8_avr_delay+0x76>
				break;

			__asm__ __volatile__ (
    4502:	82 2f       	mov	r24, r18
    4504:	01 97       	sbiw	r24, 0x01	; 1
    4506:	f1 f7       	brne	.-4      	; 0x4504 <u8x8_avr_delay+0x46>
			break;
		default:
			return 0;
	}

	return 1;
    4508:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    450a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    450c:	83 e0       	ldi	r24, 0x03	; 3
    450e:	8a 95       	dec	r24
    4510:	f1 f7       	brne	.-4      	; 0x450e <u8x8_avr_delay+0x50>
    4512:	00 00       	nop
    4514:	41 50       	subi	r20, 0x01	; 1
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    4516:	d1 f7       	brne	.-12     	; 0x450c <u8x8_avr_delay+0x4e>
			break;
		default:
			return 0;
	}

	return 1;
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    451c:	89 ef       	ldi	r24, 0xF9	; 249
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	01 97       	sbiw	r24, 0x01	; 1
    4522:	f1 f7       	brne	.-4      	; 0x4520 <u8x8_avr_delay+0x62>
    4524:	00 c0       	rjmp	.+0      	; 0x4526 <u8x8_avr_delay+0x68>
    4526:	00 00       	nop
    4528:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    452a:	c1 f7       	brne	.-16     	; 0x451c <u8x8_avr_delay+0x5e>
			break;
		default:
			return 0;
	}

	return 1;
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    4530:	80 e0       	ldi	r24, 0x00	; 0
    4532:	08 95       	ret
	}

	return 1;
    4534:	81 e0       	ldi	r24, 0x01	; 1
}
    4536:	08 95       	ret

00004538 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    4538:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    453a:	dc 01       	movw	r26, r24
    453c:	18 96       	adiw	r26, 0x08	; 8
    453e:	ed 91       	ld	r30, X+
    4540:	fc 91       	ld	r31, X
    4542:	19 97       	sbiw	r26, 0x09	; 9
    4544:	46 2f       	mov	r20, r22
    4546:	67 e1       	ldi	r22, 0x17	; 23
    4548:	09 95       	icall
}
    454a:	08 95       	ret

0000454c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	1f 92       	push	r1
    4552:	cd b7       	in	r28, 0x3d	; 61
    4554:	de b7       	in	r29, 0x3e	; 62
    4556:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    4558:	ae 01       	movw	r20, r28
    455a:	4f 5f       	subi	r20, 0xFF	; 255
    455c:	5f 4f       	sbci	r21, 0xFF	; 255
    455e:	61 e0       	ldi	r22, 0x01	; 1
    4560:	0e 94 9c 22 	call	0x4538	; 0x4538 <u8x8_byte_SendBytes>
}
    4564:	0f 90       	pop	r0
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	08 95       	ret

0000456c <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    456c:	dc 01       	movw	r26, r24
    456e:	18 96       	adiw	r26, 0x08	; 8
    4570:	ed 91       	ld	r30, X+
    4572:	fc 91       	ld	r31, X
    4574:	19 97       	sbiw	r26, 0x09	; 9
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	40 e0       	ldi	r20, 0x00	; 0
    457c:	68 e1       	ldi	r22, 0x18	; 24
    457e:	09 95       	icall
}
    4580:	08 95       	ret

00004582 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    4582:	dc 01       	movw	r26, r24
    4584:	18 96       	adiw	r26, 0x08	; 8
    4586:	ed 91       	ld	r30, X+
    4588:	fc 91       	ld	r31, X
    458a:	19 97       	sbiw	r26, 0x09	; 9
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 e0       	ldi	r20, 0x00	; 0
    4592:	69 e1       	ldi	r22, 0x19	; 25
    4594:	09 95       	icall
}
    4596:	08 95       	ret

00004598 <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    4598:	ef 92       	push	r14
    459a:	ff 92       	push	r15
    459c:	1f 93       	push	r17
    459e:	cf 93       	push	r28
    45a0:	df 93       	push	r29
    45a2:	ec 01       	movw	r28, r24
    45a4:	16 2f       	mov	r17, r22
    45a6:	7a 01       	movw	r14, r20
    45a8:	0e 94 b6 22 	call	0x456c	; 0x456c <u8x8_byte_StartTransfer>
    45ac:	60 e4       	ldi	r22, 0x40	; 64
    45ae:	ce 01       	movw	r24, r28
    45b0:	0e 94 a6 22 	call	0x454c	; 0x454c <u8x8_byte_SendByte>
    45b4:	e8 85       	ldd	r30, Y+8	; 0x08
    45b6:	f9 85       	ldd	r31, Y+9	; 0x09
    45b8:	97 01       	movw	r18, r14
    45ba:	41 2f       	mov	r20, r17
    45bc:	67 e1       	ldi	r22, 0x17	; 23
    45be:	ce 01       	movw	r24, r28
    45c0:	09 95       	icall
    45c2:	ce 01       	movw	r24, r28
    45c4:	0e 94 c1 22 	call	0x4582	; 0x4582 <u8x8_byte_EndTransfer>
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	ff 90       	pop	r15
    45d0:	ef 90       	pop	r14
    45d2:	08 95       	ret

000045d4 <u8x8_cad_SendCmd>:
    45d4:	46 2f       	mov	r20, r22
    45d6:	dc 01       	movw	r26, r24
    45d8:	16 96       	adiw	r26, 0x06	; 6
    45da:	ed 91       	ld	r30, X+
    45dc:	fc 91       	ld	r31, X
    45de:	17 97       	sbiw	r26, 0x07	; 7
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	65 e1       	ldi	r22, 0x15	; 21
    45e6:	09 95       	icall
    45e8:	08 95       	ret

000045ea <u8x8_cad_SendArg>:
    45ea:	46 2f       	mov	r20, r22
    45ec:	dc 01       	movw	r26, r24
    45ee:	16 96       	adiw	r26, 0x06	; 6
    45f0:	ed 91       	ld	r30, X+
    45f2:	fc 91       	ld	r31, X
    45f4:	17 97       	sbiw	r26, 0x07	; 7
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	66 e1       	ldi	r22, 0x16	; 22
    45fc:	09 95       	icall
    45fe:	08 95       	ret

00004600 <u8x8_cad_SendData>:
    4600:	9a 01       	movw	r18, r20
    4602:	dc 01       	movw	r26, r24
    4604:	16 96       	adiw	r26, 0x06	; 6
    4606:	ed 91       	ld	r30, X+
    4608:	fc 91       	ld	r31, X
    460a:	17 97       	sbiw	r26, 0x07	; 7
    460c:	46 2f       	mov	r20, r22
    460e:	67 e1       	ldi	r22, 0x17	; 23
    4610:	09 95       	icall
    4612:	08 95       	ret

00004614 <u8x8_cad_StartTransfer>:
    4614:	dc 01       	movw	r26, r24
    4616:	16 96       	adiw	r26, 0x06	; 6
    4618:	ed 91       	ld	r30, X+
    461a:	fc 91       	ld	r31, X
    461c:	17 97       	sbiw	r26, 0x07	; 7
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	40 e0       	ldi	r20, 0x00	; 0
    4624:	68 e1       	ldi	r22, 0x18	; 24
    4626:	09 95       	icall
    4628:	08 95       	ret

0000462a <u8x8_cad_EndTransfer>:
    462a:	dc 01       	movw	r26, r24
    462c:	16 96       	adiw	r26, 0x06	; 6
    462e:	ed 91       	ld	r30, X+
    4630:	fc 91       	ld	r31, X
    4632:	17 97       	sbiw	r26, 0x07	; 7
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	40 e0       	ldi	r20, 0x00	; 0
    463a:	69 e1       	ldi	r22, 0x19	; 25
    463c:	09 95       	icall
    463e:	08 95       	ret

00004640 <u8x8_cad_SendSequence>:
    4640:	ef 92       	push	r14
    4642:	ff 92       	push	r15
    4644:	0f 93       	push	r16
    4646:	1f 93       	push	r17
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
    464c:	1f 92       	push	r1
    464e:	cd b7       	in	r28, 0x3d	; 61
    4650:	de b7       	in	r29, 0x3e	; 62
    4652:	7c 01       	movw	r14, r24
    4654:	8b 01       	movw	r16, r22
    4656:	d8 01       	movw	r26, r16
    4658:	6c 91       	ld	r22, X
    465a:	67 31       	cpi	r22, 0x17	; 23
    465c:	c1 f0       	breq	.+48     	; 0x468e <u8x8_cad_SendSequence+0x4e>
    465e:	18 f4       	brcc	.+6      	; 0x4666 <u8x8_cad_SendSequence+0x26>
    4660:	65 31       	cpi	r22, 0x15	; 21
    4662:	30 f4       	brcc	.+12     	; 0x4670 <u8x8_cad_SendSequence+0x30>
    4664:	38 c0       	rjmp	.+112    	; 0x46d6 <u8x8_cad_SendSequence+0x96>
    4666:	6a 31       	cpi	r22, 0x1A	; 26
    4668:	f8 f0       	brcs	.+62     	; 0x46a8 <u8x8_cad_SendSequence+0x68>
    466a:	6e 3f       	cpi	r22, 0xFE	; 254
    466c:	51 f1       	breq	.+84     	; 0x46c2 <u8x8_cad_SendSequence+0x82>
    466e:	33 c0       	rjmp	.+102    	; 0x46d6 <u8x8_cad_SendSequence+0x96>
    4670:	f8 01       	movw	r30, r16
    4672:	41 81       	ldd	r20, Z+1	; 0x01
    4674:	49 83       	std	Y+1, r20	; 0x01
    4676:	d7 01       	movw	r26, r14
    4678:	16 96       	adiw	r26, 0x06	; 6
    467a:	ed 91       	ld	r30, X+
    467c:	fc 91       	ld	r31, X
    467e:	17 97       	sbiw	r26, 0x07	; 7
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	c7 01       	movw	r24, r14
    4686:	09 95       	icall
    4688:	0e 5f       	subi	r16, 0xFE	; 254
    468a:	1f 4f       	sbci	r17, 0xFF	; 255
    468c:	e4 cf       	rjmp	.-56     	; 0x4656 <u8x8_cad_SendSequence+0x16>
    468e:	f8 01       	movw	r30, r16
    4690:	81 81       	ldd	r24, Z+1	; 0x01
    4692:	89 83       	std	Y+1, r24	; 0x01
    4694:	ae 01       	movw	r20, r28
    4696:	4f 5f       	subi	r20, 0xFF	; 255
    4698:	5f 4f       	sbci	r21, 0xFF	; 255
    469a:	61 e0       	ldi	r22, 0x01	; 1
    469c:	c7 01       	movw	r24, r14
    469e:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_cad_SendData>
    46a2:	0e 5f       	subi	r16, 0xFE	; 254
    46a4:	1f 4f       	sbci	r17, 0xFF	; 255
    46a6:	d7 cf       	rjmp	.-82     	; 0x4656 <u8x8_cad_SendSequence+0x16>
    46a8:	0f 5f       	subi	r16, 0xFF	; 255
    46aa:	1f 4f       	sbci	r17, 0xFF	; 255
    46ac:	d7 01       	movw	r26, r14
    46ae:	16 96       	adiw	r26, 0x06	; 6
    46b0:	ed 91       	ld	r30, X+
    46b2:	fc 91       	ld	r31, X
    46b4:	17 97       	sbiw	r26, 0x07	; 7
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	c7 01       	movw	r24, r14
    46be:	09 95       	icall
    46c0:	ca cf       	rjmp	.-108    	; 0x4656 <u8x8_cad_SendSequence+0x16>
    46c2:	f8 01       	movw	r30, r16
    46c4:	41 81       	ldd	r20, Z+1	; 0x01
    46c6:	49 83       	std	Y+1, r20	; 0x01
    46c8:	69 e2       	ldi	r22, 0x29	; 41
    46ca:	c7 01       	movw	r24, r14
    46cc:	0e 94 29 25 	call	0x4a52	; 0x4a52 <u8x8_gpio_call>
    46d0:	0e 5f       	subi	r16, 0xFE	; 254
    46d2:	1f 4f       	sbci	r17, 0xFF	; 255
    46d4:	c0 cf       	rjmp	.-128    	; 0x4656 <u8x8_cad_SendSequence+0x16>
    46d6:	0f 90       	pop	r0
    46d8:	df 91       	pop	r29
    46da:	cf 91       	pop	r28
    46dc:	1f 91       	pop	r17
    46de:	0f 91       	pop	r16
    46e0:	ff 90       	pop	r15
    46e2:	ef 90       	pop	r14
    46e4:	08 95       	ret

000046e6 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    46e6:	ef 92       	push	r14
    46e8:	ff 92       	push	r15
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    46ee:	cf 93       	push	r28
    46f0:	7c 01       	movw	r14, r24
    46f2:	c4 2f       	mov	r28, r20
    46f4:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    46f6:	66 31       	cpi	r22, 0x16	; 22
    46f8:	29 f1       	breq	.+74     	; 0x4744 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    46fa:	30 f4       	brcc	.+12     	; 0x4708 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    46fc:	64 31       	cpi	r22, 0x14	; 20
    46fe:	09 f4       	brne	.+2      	; 0x4702 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    4700:	42 c0       	rjmp	.+132    	; 0x4786 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    4702:	65 31       	cpi	r22, 0x15	; 21
    4704:	49 f0       	breq	.+18     	; 0x4718 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    4706:	62 c0       	rjmp	.+196    	; 0x47cc <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    4708:	68 31       	cpi	r22, 0x18	; 24
    470a:	09 f4       	brne	.+2      	; 0x470e <u8x8_cad_ssd13xx_fast_i2c+0x28>
    470c:	50 c0       	rjmp	.+160    	; 0x47ae <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    470e:	f8 f0       	brcs	.+62     	; 0x474e <u8x8_cad_ssd13xx_fast_i2c+0x68>
    4710:	69 31       	cpi	r22, 0x19	; 25
    4712:	09 f4       	brne	.+2      	; 0x4716 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    4714:	50 c0       	rjmp	.+160    	; 0x47b6 <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    4716:	5a c0       	rjmp	.+180    	; 0x47cc <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    4718:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <in_transfer.3298>
    471c:	88 23       	and	r24, r24
    471e:	19 f0       	breq	.+6      	; 0x4726 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    4720:	c7 01       	movw	r24, r14
    4722:	0e 94 c1 22 	call	0x4582	; 0x4582 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    4726:	c7 01       	movw	r24, r14
    4728:	0e 94 b6 22 	call	0x456c	; 0x456c <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    472c:	60 e0       	ldi	r22, 0x00	; 0
    472e:	c7 01       	movw	r24, r14
    4730:	0e 94 a6 22 	call	0x454c	; 0x454c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    4734:	6c 2f       	mov	r22, r28
    4736:	c7 01       	movw	r24, r14
    4738:	0e 94 a6 22 	call	0x454c	; 0x454c <u8x8_byte_SendByte>
      in_transfer = 1;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <in_transfer.3298>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    4742:	45 c0       	rjmp	.+138    	; 0x47ce <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    4744:	64 2f       	mov	r22, r20
    4746:	0e 94 a6 22 	call	0x454c	; 0x454c <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    474a:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    474c:	40 c0       	rjmp	.+128    	; 0x47ce <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    474e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <in_transfer.3298>
    4752:	88 23       	and	r24, r24
    4754:	19 f0       	breq	.+6      	; 0x475c <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    4756:	c7 01       	movw	r24, r14
    4758:	0e 94 c1 22 	call	0x4582	; 0x4582 <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    475c:	c9 31       	cpi	r28, 0x19	; 25
    475e:	50 f0       	brcs	.+20     	; 0x4774 <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    4760:	a8 01       	movw	r20, r16
    4762:	68 e1       	ldi	r22, 0x18	; 24
    4764:	c7 01       	movw	r24, r14
    4766:	0e 94 cc 22 	call	0x4598	; 0x4598 <u8x8_i2c_data_transfer>
	arg_int-=24;
    476a:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    476c:	08 5e       	subi	r16, 0xE8	; 232
    476e:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    4770:	c9 31       	cpi	r28, 0x19	; 25
    4772:	b0 f7       	brcc	.-20     	; 0x4760 <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    4774:	a8 01       	movw	r20, r16
    4776:	6c 2f       	mov	r22, r28
    4778:	c7 01       	movw	r24, r14
    477a:	0e 94 cc 22 	call	0x4598	; 0x4598 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    477e:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    4782:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    4784:	24 c0       	rjmp	.+72     	; 0x47ce <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    4786:	dc 01       	movw	r26, r24
    4788:	56 96       	adiw	r26, 0x16	; 22
    478a:	8c 91       	ld	r24, X
    478c:	56 97       	sbiw	r26, 0x16	; 22
    478e:	8f 3f       	cpi	r24, 0xFF	; 255
    4790:	19 f4       	brne	.+6      	; 0x4798 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    4792:	88 e7       	ldi	r24, 0x78	; 120
    4794:	56 96       	adiw	r26, 0x16	; 22
    4796:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    4798:	d7 01       	movw	r26, r14
    479a:	18 96       	adiw	r26, 0x08	; 8
    479c:	ed 91       	ld	r30, X+
    479e:	fc 91       	ld	r31, X
    47a0:	19 97       	sbiw	r26, 0x09	; 9
    47a2:	98 01       	movw	r18, r16
    47a4:	4c 2f       	mov	r20, r28
    47a6:	64 e1       	ldi	r22, 0x14	; 20
    47a8:	c7 01       	movw	r24, r14
    47aa:	09 95       	icall
    47ac:	10 c0       	rjmp	.+32     	; 0x47ce <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    47ae:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <in_transfer.3298>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    47b4:	0c c0       	rjmp	.+24     	; 0x47ce <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    47b6:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <in_transfer.3298>
    47ba:	88 23       	and	r24, r24
    47bc:	19 f0       	breq	.+6      	; 0x47c4 <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    47be:	c7 01       	movw	r24, r14
    47c0:	0e 94 c1 22 	call	0x4582	; 0x4582 <u8x8_byte_EndTransfer>
      in_transfer = 0;
    47c4:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <in_transfer.3298>
      break;
    default:
      return 0;
  }
  return 1;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    47ca:	01 c0       	rjmp	.+2      	; 0x47ce <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    47cc:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    47ce:	cf 91       	pop	r28
    47d0:	1f 91       	pop	r17
    47d2:	0f 91       	pop	r16
    47d4:	ff 90       	pop	r15
    47d6:	ef 90       	pop	r14
    47d8:	08 95       	ret

000047da <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    47da:	fc 01       	movw	r30, r24
    47dc:	71 83       	std	Z+1, r23	; 0x01
    47de:	60 83       	st	Z, r22
    47e0:	fb 01       	movw	r30, r22
    47e2:	22 89       	ldd	r18, Z+18	; 0x12
    47e4:	fc 01       	movw	r30, r24
    47e6:	24 8b       	std	Z+20, r18	; 0x14
    47e8:	08 95       	ret

000047ea <u8x8_d_helper_display_init>:
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	ec 01       	movw	r28, r24
    47f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    47f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e0       	ldi	r20, 0x00	; 0
    47fa:	68 e2       	ldi	r22, 0x28	; 40
    47fc:	09 95       	icall
    47fe:	ee 81       	ldd	r30, Y+6	; 0x06
    4800:	ff 81       	ldd	r31, Y+7	; 0x07
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	40 e0       	ldi	r20, 0x00	; 0
    4808:	64 e1       	ldi	r22, 0x14	; 20
    480a:	ce 01       	movw	r24, r28
    480c:	09 95       	icall
    480e:	41 e0       	ldi	r20, 0x01	; 1
    4810:	6b e4       	ldi	r22, 0x4B	; 75
    4812:	ce 01       	movw	r24, r28
    4814:	0e 94 29 25 	call	0x4a52	; 0x4a52 <u8x8_gpio_call>
    4818:	e8 81       	ld	r30, Y
    481a:	f9 81       	ldd	r31, Y+1	; 0x01
    481c:	44 81       	ldd	r20, Z+4	; 0x04
    481e:	69 e2       	ldi	r22, 0x29	; 41
    4820:	ce 01       	movw	r24, r28
    4822:	0e 94 29 25 	call	0x4a52	; 0x4a52 <u8x8_gpio_call>
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	6b e4       	ldi	r22, 0x4B	; 75
    482a:	ce 01       	movw	r24, r28
    482c:	0e 94 29 25 	call	0x4a52	; 0x4a52 <u8x8_gpio_call>
    4830:	e8 81       	ld	r30, Y
    4832:	f9 81       	ldd	r31, Y+1	; 0x01
    4834:	44 81       	ldd	r20, Z+4	; 0x04
    4836:	69 e2       	ldi	r22, 0x29	; 41
    4838:	ce 01       	movw	r24, r28
    483a:	0e 94 29 25 	call	0x4a52	; 0x4a52 <u8x8_gpio_call>
    483e:	41 e0       	ldi	r20, 0x01	; 1
    4840:	6b e4       	ldi	r22, 0x4B	; 75
    4842:	ce 01       	movw	r24, r28
    4844:	0e 94 29 25 	call	0x4a52	; 0x4a52 <u8x8_gpio_call>
    4848:	e8 81       	ld	r30, Y
    484a:	f9 81       	ldd	r31, Y+1	; 0x01
    484c:	45 81       	ldd	r20, Z+5	; 0x05
    484e:	69 e2       	ldi	r22, 0x29	; 41
    4850:	ce 01       	movw	r24, r28
    4852:	0e 94 29 25 	call	0x4a52	; 0x4a52 <u8x8_gpio_call>
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	08 95       	ret

0000485c <u8x8_DrawTile>:
    485c:	0f 93       	push	r16
    485e:	1f 93       	push	r17
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	00 d0       	rcall	.+0      	; 0x4866 <u8x8_DrawTile+0xa>
    4866:	00 d0       	rcall	.+0      	; 0x4868 <u8x8_DrawTile+0xc>
    4868:	1f 92       	push	r1
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
    486e:	6c 83       	std	Y+4, r22	; 0x04
    4870:	4d 83       	std	Y+5, r20	; 0x05
    4872:	2b 83       	std	Y+3, r18	; 0x03
    4874:	1a 83       	std	Y+2, r17	; 0x02
    4876:	09 83       	std	Y+1, r16	; 0x01
    4878:	dc 01       	movw	r26, r24
    487a:	14 96       	adiw	r26, 0x04	; 4
    487c:	ed 91       	ld	r30, X+
    487e:	fc 91       	ld	r31, X
    4880:	15 97       	sbiw	r26, 0x05	; 5
    4882:	9e 01       	movw	r18, r28
    4884:	2f 5f       	subi	r18, 0xFF	; 255
    4886:	3f 4f       	sbci	r19, 0xFF	; 255
    4888:	41 e0       	ldi	r20, 0x01	; 1
    488a:	6f e0       	ldi	r22, 0x0F	; 15
    488c:	09 95       	icall
    488e:	0f 90       	pop	r0
    4890:	0f 90       	pop	r0
    4892:	0f 90       	pop	r0
    4894:	0f 90       	pop	r0
    4896:	0f 90       	pop	r0
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	08 95       	ret

000048a2 <u8x8_SetupMemory>:
    48a2:	dc 01       	movw	r26, r24
    48a4:	14 96       	adiw	r26, 0x04	; 4
    48a6:	ed 91       	ld	r30, X+
    48a8:	fc 91       	ld	r31, X
    48aa:	15 97       	sbiw	r26, 0x05	; 5
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	40 e0       	ldi	r20, 0x00	; 0
    48b2:	69 e0       	ldi	r22, 0x09	; 9
    48b4:	09 95       	icall
    48b6:	08 95       	ret

000048b8 <u8x8_InitDisplay>:
    48b8:	dc 01       	movw	r26, r24
    48ba:	14 96       	adiw	r26, 0x04	; 4
    48bc:	ed 91       	ld	r30, X+
    48be:	fc 91       	ld	r31, X
    48c0:	15 97       	sbiw	r26, 0x05	; 5
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e0       	ldi	r20, 0x00	; 0
    48c8:	6a e0       	ldi	r22, 0x0A	; 10
    48ca:	09 95       	icall
    48cc:	08 95       	ret

000048ce <u8x8_SetPowerSave>:
    48ce:	46 2f       	mov	r20, r22
    48d0:	dc 01       	movw	r26, r24
    48d2:	14 96       	adiw	r26, 0x04	; 4
    48d4:	ed 91       	ld	r30, X+
    48d6:	fc 91       	ld	r31, X
    48d8:	15 97       	sbiw	r26, 0x05	; 5
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	6b e0       	ldi	r22, 0x0B	; 11
    48e0:	09 95       	icall
    48e2:	08 95       	ret

000048e4 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    48e4:	dc 01       	movw	r26, r24
    48e6:	14 96       	adiw	r26, 0x04	; 4
    48e8:	ed 91       	ld	r30, X+
    48ea:	fc 91       	ld	r31, X
    48ec:	15 97       	sbiw	r26, 0x05	; 5
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	40 e0       	ldi	r20, 0x00	; 0
    48f4:	60 e1       	ldi	r22, 0x10	; 16
    48f6:	09 95       	icall
    48f8:	08 95       	ret

000048fa <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    48fa:	ef 92       	push	r14
    48fc:	ff 92       	push	r15
    48fe:	0f 93       	push	r16
    4900:	1f 93       	push	r17
    4902:	cf 93       	push	r28
    4904:	df 93       	push	r29
    4906:	8c 01       	movw	r16, r24
    4908:	c4 2f       	mov	r28, r20
    490a:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    490c:	6d 30       	cpi	r22, 0x0D	; 13
    490e:	b9 f0       	breq	.+46     	; 0x493e <u8x8_d_ssd1306_sh1106_generic+0x44>
    4910:	18 f4       	brcc	.+6      	; 0x4918 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    4912:	6b 30       	cpi	r22, 0x0B	; 11
    4914:	31 f0       	breq	.+12     	; 0x4922 <u8x8_d_ssd1306_sh1106_generic+0x28>
    4916:	72 c0       	rjmp	.+228    	; 0x49fc <u8x8_d_ssd1306_sh1106_generic+0x102>
    4918:	6e 30       	cpi	r22, 0x0E	; 14
    491a:	69 f1       	breq	.+90     	; 0x4976 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    491c:	6f 30       	cpi	r22, 0x0F	; 15
    491e:	d1 f1       	breq	.+116    	; 0x4994 <u8x8_d_ssd1306_sh1106_generic+0x9a>
    4920:	6d c0       	rjmp	.+218    	; 0x49fc <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    4922:	41 11       	cpse	r20, r1
    4924:	06 c0       	rjmp	.+12     	; 0x4932 <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    4926:	62 eb       	ldi	r22, 0xB2	; 178
    4928:	72 e0       	ldi	r23, 0x02	; 2
    492a:	0e 94 20 23 	call	0x4640	; 0x4640 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	66 c0       	rjmp	.+204    	; 0x49fe <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    4932:	6d ea       	ldi	r22, 0xAD	; 173
    4934:	72 e0       	ldi	r23, 0x02	; 2
    4936:	0e 94 20 23 	call	0x4640	; 0x4640 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	60 c0       	rjmp	.+192    	; 0x49fe <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    493e:	41 11       	cpse	r20, r1
    4940:	0d c0       	rjmp	.+26     	; 0x495c <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    4942:	66 ea       	ldi	r22, 0xA6	; 166
    4944:	72 e0       	ldi	r23, 0x02	; 2
    4946:	0e 94 20 23 	call	0x4640	; 0x4640 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    494a:	d8 01       	movw	r26, r16
    494c:	ed 91       	ld	r30, X+
    494e:	fc 91       	ld	r31, X
    4950:	11 97       	sbiw	r26, 0x01	; 1
    4952:	82 89       	ldd	r24, Z+18	; 0x12
    4954:	54 96       	adiw	r26, 0x14	; 20
    4956:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	51 c0       	rjmp	.+162    	; 0x49fe <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    495c:	6f e9       	ldi	r22, 0x9F	; 159
    495e:	72 e0       	ldi	r23, 0x02	; 2
    4960:	0e 94 20 23 	call	0x4640	; 0x4640 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    4964:	d8 01       	movw	r26, r16
    4966:	ed 91       	ld	r30, X+
    4968:	fc 91       	ld	r31, X
    496a:	11 97       	sbiw	r26, 0x01	; 1
    496c:	83 89       	ldd	r24, Z+19	; 0x13
    496e:	54 96       	adiw	r26, 0x14	; 20
    4970:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	44 c0       	rjmp	.+136    	; 0x49fe <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    4976:	0e 94 0a 23 	call	0x4614	; 0x4614 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    497a:	61 e8       	ldi	r22, 0x81	; 129
    497c:	c8 01       	movw	r24, r16
    497e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    4982:	6c 2f       	mov	r22, r28
    4984:	c8 01       	movw	r24, r16
    4986:	0e 94 f5 22 	call	0x45ea	; 0x45ea <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    498a:	c8 01       	movw	r24, r16
    498c:	0e 94 15 23 	call	0x462a	; 0x462a <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4990:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    4992:	35 c0       	rjmp	.+106    	; 0x49fe <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    4994:	0e 94 0a 23 	call	0x4614	; 0x4614 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    4998:	f7 01       	movw	r30, r14
    499a:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    499c:	dd 0f       	add	r29, r29
    499e:	dd 0f       	add	r29, r29
    49a0:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    49a2:	d8 01       	movw	r26, r16
    49a4:	54 96       	adiw	r26, 0x14	; 20
    49a6:	8c 91       	ld	r24, X
    49a8:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    49aa:	60 e4       	ldi	r22, 0x40	; 64
    49ac:	c8 01       	movw	r24, r16
    49ae:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    49b2:	6d 2f       	mov	r22, r29
    49b4:	62 95       	swap	r22
    49b6:	6f 70       	andi	r22, 0x0F	; 15
    49b8:	60 61       	ori	r22, 0x10	; 16
    49ba:	c8 01       	movw	r24, r16
    49bc:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    49c0:	6d 2f       	mov	r22, r29
    49c2:	6f 70       	andi	r22, 0x0F	; 15
    49c4:	c8 01       	movw	r24, r16
    49c6:	0e 94 f5 22 	call	0x45ea	; 0x45ea <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    49ca:	f7 01       	movw	r30, r14
    49cc:	64 81       	ldd	r22, Z+4	; 0x04
    49ce:	60 6b       	ori	r22, 0xB0	; 176
    49d0:	c8 01       	movw	r24, r16
    49d2:	0e 94 f5 22 	call	0x45ea	; 0x45ea <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    49d6:	d7 01       	movw	r26, r14
    49d8:	4d 91       	ld	r20, X+
    49da:	5c 91       	ld	r21, X
    49dc:	11 97       	sbiw	r26, 0x01	; 1
    49de:	12 96       	adiw	r26, 0x02	; 2
    49e0:	6c 91       	ld	r22, X
    49e2:	66 0f       	add	r22, r22
    49e4:	66 0f       	add	r22, r22
    49e6:	66 0f       	add	r22, r22
    49e8:	c8 01       	movw	r24, r16
    49ea:	0e 94 00 23 	call	0x4600	; 0x4600 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    49ee:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    49f0:	91 f7       	brne	.-28     	; 0x49d6 <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    49f2:	c8 01       	movw	r24, r16
    49f4:	0e 94 15 23 	call	0x462a	; 0x462a <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    49f8:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    49fa:	01 c0       	rjmp	.+2      	; 0x49fe <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    49fc:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    49fe:	df 91       	pop	r29
    4a00:	cf 91       	pop	r28
    4a02:	1f 91       	pop	r17
    4a04:	0f 91       	pop	r16
    4a06:	ff 90       	pop	r15
    4a08:	ef 90       	pop	r14
    4a0a:	08 95       	ret

00004a0c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    4a0c:	0f 93       	push	r16
    4a0e:	1f 93       	push	r17
    4a10:	cf 93       	push	r28
    4a12:	8c 01       	movw	r16, r24
    4a14:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    4a16:	0e 94 7d 24 	call	0x48fa	; 0x48fa <u8x8_d_ssd1306_sh1106_generic>
    4a1a:	81 11       	cpse	r24, r1
    4a1c:	15 c0       	rjmp	.+42     	; 0x4a48 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    4a1e:	c9 30       	cpi	r28, 0x09	; 9
    4a20:	61 f0       	breq	.+24     	; 0x4a3a <u8x8_d_ssd1306_128x64_noname+0x2e>
    4a22:	ca 30       	cpi	r28, 0x0A	; 10
    4a24:	91 f4       	brne	.+36     	; 0x4a4a <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    4a26:	c8 01       	movw	r24, r16
    4a28:	0e 94 f5 23 	call	0x47ea	; 0x47ea <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    4a2c:	67 eb       	ldi	r22, 0xB7	; 183
    4a2e:	72 e0       	ldi	r23, 0x02	; 2
    4a30:	c8 01       	movw	r24, r16
    4a32:	0e 94 20 23 	call	0x4640	; 0x4640 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    4a36:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    4a38:	08 c0       	rjmp	.+16     	; 0x4a4a <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    4a3a:	67 e8       	ldi	r22, 0x87	; 135
    4a3c:	72 e0       	ldi	r23, 0x02	; 2
    4a3e:	c8 01       	movw	r24, r16
    4a40:	0e 94 ed 23 	call	0x47da	; 0x47da <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    4a44:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    4a46:	01 c0       	rjmp	.+2      	; 0x4a4a <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    4a48:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    4a4a:	cf 91       	pop	r28
    4a4c:	1f 91       	pop	r17
    4a4e:	0f 91       	pop	r16
    4a50:	08 95       	ret

00004a52 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    4a52:	dc 01       	movw	r26, r24
    4a54:	1a 96       	adiw	r26, 0x0a	; 10
    4a56:	ed 91       	ld	r30, X+
    4a58:	fc 91       	ld	r31, X
    4a5a:	1b 97       	sbiw	r26, 0x0b	; 11
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	09 95       	icall
    4a62:	08 95       	ret

00004a64 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	08 95       	ret

00004a68 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    4a68:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    4a6a:	11 82       	std	Z+1, r1	; 0x01
    4a6c:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    4a6e:	82 e3       	ldi	r24, 0x32	; 50
    4a70:	95 e2       	ldi	r25, 0x25	; 37
    4a72:	95 83       	std	Z+5, r25	; 0x05
    4a74:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    4a76:	97 83       	std	Z+7, r25	; 0x07
    4a78:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    4a7a:	91 87       	std	Z+9, r25	; 0x09
    4a7c:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    4a7e:	93 87       	std	Z+11, r25	; 0x0b
    4a80:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    4a82:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    4a84:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    4a86:	14 86       	std	Z+12, r1	; 0x0c
    4a88:	15 86       	std	Z+13, r1	; 0x0d
    4a8a:	16 86       	std	Z+14, r1	; 0x0e
    4a8c:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    4a8e:	8f ef       	ldi	r24, 0xFF	; 255
    4a90:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    4a92:	82 8f       	std	Z+26, r24	; 0x1a
    4a94:	08 95       	ret

00004a96 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    4a96:	af 92       	push	r10
    4a98:	bf 92       	push	r11
    4a9a:	cf 92       	push	r12
    4a9c:	df 92       	push	r13
    4a9e:	ef 92       	push	r14
    4aa0:	ff 92       	push	r15
    4aa2:	0f 93       	push	r16
    4aa4:	1f 93       	push	r17
    4aa6:	cf 93       	push	r28
    4aa8:	df 93       	push	r29
    4aaa:	ec 01       	movw	r28, r24
    4aac:	5b 01       	movw	r10, r22
    4aae:	6a 01       	movw	r12, r20
    4ab0:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    4ab2:	0e 94 34 25 	call	0x4a68	; 0x4a68 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    4ab6:	bd 82       	std	Y+5, r11	; 0x05
    4ab8:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    4aba:	df 82       	std	Y+7, r13	; 0x07
    4abc:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    4abe:	f9 86       	std	Y+9, r15	; 0x09
    4ac0:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    4ac2:	1b 87       	std	Y+11, r17	; 0x0b
    4ac4:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    4ac6:	ce 01       	movw	r24, r28
    4ac8:	0e 94 51 24 	call	0x48a2	; 0x48a2 <u8x8_SetupMemory>
}
    4acc:	df 91       	pop	r29
    4ace:	cf 91       	pop	r28
    4ad0:	1f 91       	pop	r17
    4ad2:	0f 91       	pop	r16
    4ad4:	ff 90       	pop	r15
    4ad6:	ef 90       	pop	r14
    4ad8:	df 90       	pop	r13
    4ada:	cf 90       	pop	r12
    4adc:	bf 90       	pop	r11
    4ade:	af 90       	pop	r10
    4ae0:	08 95       	ret

00004ae2 <USART_Init>:
	while ((str[t] = USART_RxChar()) != '\n')
	{
		t++;
	}
	str[t] = '\0';
}
    4ae2:	e1 ec       	ldi	r30, 0xC1	; 193
    4ae4:	f0 e0       	ldi	r31, 0x00	; 0
    4ae6:	20 81       	ld	r18, Z
    4ae8:	28 61       	ori	r18, 0x18	; 24
    4aea:	20 83       	st	Z, r18
    4aec:	e2 ec       	ldi	r30, 0xC2	; 194
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	20 81       	ld	r18, Z
    4af2:	27 60       	ori	r18, 0x07	; 7
    4af4:	20 83       	st	Z, r18
    4af6:	dc 01       	movw	r26, r24
    4af8:	cb 01       	movw	r24, r22
    4afa:	88 0f       	add	r24, r24
    4afc:	99 1f       	adc	r25, r25
    4afe:	aa 1f       	adc	r26, r26
    4b00:	bb 1f       	adc	r27, r27
    4b02:	88 0f       	add	r24, r24
    4b04:	99 1f       	adc	r25, r25
    4b06:	aa 1f       	adc	r26, r26
    4b08:	bb 1f       	adc	r27, r27
    4b0a:	9c 01       	movw	r18, r24
    4b0c:	ad 01       	movw	r20, r26
    4b0e:	22 0f       	add	r18, r18
    4b10:	33 1f       	adc	r19, r19
    4b12:	44 1f       	adc	r20, r20
    4b14:	55 1f       	adc	r21, r21
    4b16:	22 0f       	add	r18, r18
    4b18:	33 1f       	adc	r19, r19
    4b1a:	44 1f       	adc	r20, r20
    4b1c:	55 1f       	adc	r21, r21
    4b1e:	60 e0       	ldi	r22, 0x00	; 0
    4b20:	74 e2       	ldi	r23, 0x24	; 36
    4b22:	84 ef       	ldi	r24, 0xF4	; 244
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	0e 94 ab 29 	call	0x5356	; 0x5356 <__udivmodsi4>
    4b2a:	8f ef       	ldi	r24, 0xFF	; 255
    4b2c:	82 0f       	add	r24, r18
    4b2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    4b32:	da 01       	movw	r26, r20
    4b34:	c9 01       	movw	r24, r18
    4b36:	01 97       	sbiw	r24, 0x01	; 1
    4b38:	a1 09       	sbc	r26, r1
    4b3a:	b1 09       	sbc	r27, r1
    4b3c:	89 2f       	mov	r24, r25
    4b3e:	9a 2f       	mov	r25, r26
    4b40:	ab 2f       	mov	r26, r27
    4b42:	bb 27       	eor	r27, r27
    4b44:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    4b48:	08 95       	ret

00004b4a <initBluetooth>:
    4b4a:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <pSettings_BL+0x1>
    4b4e:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <pSettings_BL>
    4b52:	50 93 7b 05 	sts	0x057B, r21	; 0x80057b <BL_STEER+0x1>
    4b56:	40 93 7a 05 	sts	0x057A, r20	; 0x80057a <BL_STEER>
    4b5a:	70 93 79 05 	sts	0x0579, r23	; 0x800579 <BL_SPEED+0x1>
    4b5e:	60 93 78 05 	sts	0x0578, r22	; 0x800578 <BL_SPEED>
    4b62:	e8 e6       	ldi	r30, 0x68	; 104
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	80 81       	ld	r24, Z
    4b68:	84 60       	ori	r24, 0x04	; 4
    4b6a:	80 83       	st	Z, r24
    4b6c:	ed e6       	ldi	r30, 0x6D	; 109
    4b6e:	f0 e0       	ldi	r31, 0x00	; 0
    4b70:	80 81       	ld	r24, Z
    4b72:	81 60       	ori	r24, 0x01	; 1
    4b74:	80 83       	st	Z, r24
    4b76:	60 e8       	ldi	r22, 0x80	; 128
    4b78:	75 e2       	ldi	r23, 0x25	; 37
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <USART_Init>
    4b82:	08 95       	ret

00004b84 <USART_RxChar>:
    4b84:	e0 ec       	ldi	r30, 0xC0	; 192
    4b86:	f0 e0       	ldi	r31, 0x00	; 0
    4b88:	80 81       	ld	r24, Z
    4b8a:	88 23       	and	r24, r24
    4b8c:	ec f7       	brge	.-6      	; 0x4b88 <USART_RxChar+0x4>
    4b8e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    4b92:	08 95       	ret

00004b94 <USART_TxChar>:
    4b94:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    4b98:	e0 ec       	ldi	r30, 0xC0	; 192
    4b9a:	f0 e0       	ldi	r31, 0x00	; 0
    4b9c:	80 81       	ld	r24, Z
    4b9e:	85 ff       	sbrs	r24, 5
    4ba0:	fd cf       	rjmp	.-6      	; 0x4b9c <USART_TxChar+0x8>
    4ba2:	08 95       	ret

00004ba4 <USART_ReceiveValue>:

void USART_ReceiveValue(char *hex)
{
    4ba4:	cf 92       	push	r12
    4ba6:	df 92       	push	r13
    4ba8:	ef 92       	push	r14
    4baa:	ff 92       	push	r15
    4bac:	1f 93       	push	r17
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
    4bb2:	cd b7       	in	r28, 0x3d	; 61
    4bb4:	de b7       	in	r29, 0x3e	; 62
    4bb6:	2a 97       	sbiw	r28, 0x0a	; 10
    4bb8:	0f b6       	in	r0, 0x3f	; 63
    4bba:	f8 94       	cli
    4bbc:	de bf       	out	0x3e, r29	; 62
    4bbe:	0f be       	out	0x3f, r0	; 63
    4bc0:	cd bf       	out	0x3d, r28	; 61
    4bc2:	6c 01       	movw	r12, r24
	uint8_t t = 0;
    4bc4:	10 e0       	ldi	r17, 0x00	; 0
	char Buff[10];
	
	while ((Buff[t] = USART_RxChar()) != '\n')
    4bc6:	01 c0       	rjmp	.+2      	; 0x4bca <USART_ReceiveValue+0x26>
	{
		t++;
    4bc8:	1f 5f       	subi	r17, 0xFF	; 255
void USART_ReceiveValue(char *hex)
{
	uint8_t t = 0;
	char Buff[10];
	
	while ((Buff[t] = USART_RxChar()) != '\n')
    4bca:	e1 2e       	mov	r14, r17
    4bcc:	f1 2c       	mov	r15, r1
    4bce:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <USART_RxChar>
    4bd2:	e1 e0       	ldi	r30, 0x01	; 1
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	ec 0f       	add	r30, r28
    4bd8:	fd 1f       	adc	r31, r29
    4bda:	ee 0d       	add	r30, r14
    4bdc:	ff 1d       	adc	r31, r15
    4bde:	80 83       	st	Z, r24
    4be0:	8a 30       	cpi	r24, 0x0A	; 10
    4be2:	91 f7       	brne	.-28     	; 0x4bc8 <USART_ReceiveValue+0x24>
	{
		t++;
	}
	Buff[t] = '\0';
    4be4:	fe 01       	movw	r30, r28
    4be6:	ee 0d       	add	r30, r14
    4be8:	ff 1d       	adc	r31, r15
    4bea:	11 82       	std	Z+1, r1	; 0x01
	*hex = Buff[0];
    4bec:	89 81       	ldd	r24, Y+1	; 0x01
    4bee:	f6 01       	movw	r30, r12
    4bf0:	80 83       	st	Z, r24
}
    4bf2:	2a 96       	adiw	r28, 0x0a	; 10
    4bf4:	0f b6       	in	r0, 0x3f	; 63
    4bf6:	f8 94       	cli
    4bf8:	de bf       	out	0x3e, r29	; 62
    4bfa:	0f be       	out	0x3f, r0	; 63
    4bfc:	cd bf       	out	0x3d, r28	; 61
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	1f 91       	pop	r17
    4c04:	ff 90       	pop	r15
    4c06:	ef 90       	pop	r14
    4c08:	df 90       	pop	r13
    4c0a:	cf 90       	pop	r12
    4c0c:	08 95       	ret

00004c0e <USART_SendString>:

void USART_SendString(char *str)									/* Send string of USART data function */
{
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
    4c14:	88 81       	ld	r24, Y
    4c16:	88 23       	and	r24, r24
    4c18:	31 f0       	breq	.+12     	; 0x4c26 <USART_SendString+0x18>
    4c1a:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);										/* Send each char of string till the NULL */
    4c1c:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <USART_TxChar>
}

void USART_SendString(char *str)									/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
    4c20:	89 91       	ld	r24, Y+
    4c22:	81 11       	cpse	r24, r1
    4c24:	fb cf       	rjmp	.-10     	; 0x4c1c <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);										/* Send each char of string till the NULL */
		i++;
	}
}
    4c26:	df 91       	pop	r29
    4c28:	cf 91       	pop	r28
    4c2a:	08 95       	ret

00004c2c <USART_BluetoothChanger>:

void USART_BluetoothChanger(char Data_in){			/* When certain values are received the car does something*/
    4c2c:	0f 93       	push	r16
    4c2e:	1f 93       	push	r17
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	2f 97       	sbiw	r28, 0x0f	; 15
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	f8 94       	cli
    4c3e:	de bf       	out	0x3e, r29	; 62
    4c40:	0f be       	out	0x3f, r0	; 63
    4c42:	cd bf       	out	0x3d, r28	; 61
	if(Data_in == BL_LED_ON)
    4c44:	9f ef       	ldi	r25, 0xFF	; 255
    4c46:	98 0f       	add	r25, r24
    4c48:	92 30       	cpi	r25, 0x02	; 2
    4c4a:	08 f4       	brcc	.+2      	; 0x4c4e <USART_BluetoothChanger+0x22>
    4c4c:	69 c1       	rjmp	.+722    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	else if(Data_in == BL_LED_OFF)
	{
		/* Turn OFF LED */
		//USART_SendString("LED4_OFF");
	}
	else if(Data_in == BL_FORWARD)
    4c4e:	83 30       	cpi	r24, 0x03	; 3
    4c50:	99 f4       	brne	.+38     	; 0x4c78 <USART_BluetoothChanger+0x4c>
	{

		//USART_SendString("Driving forwards");
		//SetDriveForward();
		*BL_SPEED += *(pSettings_BL+1);
    4c52:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <BL_SPEED>
    4c56:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <BL_SPEED+0x1>
    4c5a:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <pSettings_BL>
    4c5e:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4c62:	20 81       	ld	r18, Z
    4c64:	31 81       	ldd	r19, Z+1	; 0x01
    4c66:	12 96       	adiw	r26, 0x02	; 2
    4c68:	8d 91       	ld	r24, X+
    4c6a:	9c 91       	ld	r25, X
    4c6c:	13 97       	sbiw	r26, 0x03	; 3
    4c6e:	82 0f       	add	r24, r18
    4c70:	93 1f       	adc	r25, r19
    4c72:	91 83       	std	Z+1, r25	; 0x01
    4c74:	80 83       	st	Z, r24
    4c76:	54 c1       	rjmp	.+680    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else if(Data_in == BL_STOP)
    4c78:	81 31       	cpi	r24, 0x11	; 17
    4c7a:	69 f4       	brne	.+26     	; 0x4c96 <USART_BluetoothChanger+0x6a>
	{
		//USART_SendString("STOP driving");
		//SetDriveForward();
		*BL_SPEED = 0;
    4c7c:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <BL_SPEED>
    4c80:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <BL_SPEED+0x1>
    4c84:	11 82       	std	Z+1, r1	; 0x01
    4c86:	10 82       	st	Z, r1
		*BL_STEER = 0;
    4c88:	e0 91 7a 05 	lds	r30, 0x057A	; 0x80057a <BL_STEER>
    4c8c:	f0 91 7b 05 	lds	r31, 0x057B	; 0x80057b <BL_STEER+0x1>
    4c90:	11 82       	std	Z+1, r1	; 0x01
    4c92:	10 82       	st	Z, r1
    4c94:	45 c1       	rjmp	.+650    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else if(Data_in == BL_BACKWARD)
    4c96:	84 30       	cpi	r24, 0x04	; 4
    4c98:	99 f4       	brne	.+38     	; 0x4cc0 <USART_BluetoothChanger+0x94>
	{
		//USART_SendString("Driving backwards");
		//SetDriveBackward();
		*BL_SPEED -= *(pSettings_BL+1);
    4c9a:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <BL_SPEED>
    4c9e:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <BL_SPEED+0x1>
    4ca2:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <pSettings_BL>
    4ca6:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4caa:	80 81       	ld	r24, Z
    4cac:	91 81       	ldd	r25, Z+1	; 0x01
    4cae:	12 96       	adiw	r26, 0x02	; 2
    4cb0:	2d 91       	ld	r18, X+
    4cb2:	3c 91       	ld	r19, X
    4cb4:	13 97       	sbiw	r26, 0x03	; 3
    4cb6:	82 1b       	sub	r24, r18
    4cb8:	93 0b       	sbc	r25, r19
    4cba:	91 83       	std	Z+1, r25	; 0x01
    4cbc:	80 83       	st	Z, r24
    4cbe:	30 c1       	rjmp	.+608    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else if(Data_in == BL_LEFT)
    4cc0:	86 30       	cpi	r24, 0x06	; 6
    4cc2:	59 f4       	brne	.+22     	; 0x4cda <USART_BluetoothChanger+0xae>
	{
		//USART_SendString("Steering Left");
		*BL_STEER -= 100;
    4cc4:	e0 91 7a 05 	lds	r30, 0x057A	; 0x80057a <BL_STEER>
    4cc8:	f0 91 7b 05 	lds	r31, 0x057B	; 0x80057b <BL_STEER+0x1>
    4ccc:	80 81       	ld	r24, Z
    4cce:	91 81       	ldd	r25, Z+1	; 0x01
    4cd0:	84 56       	subi	r24, 0x64	; 100
    4cd2:	91 09       	sbc	r25, r1
    4cd4:	91 83       	std	Z+1, r25	; 0x01
    4cd6:	80 83       	st	Z, r24
    4cd8:	23 c1       	rjmp	.+582    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else if(Data_in == BL_RIGHT)
    4cda:	87 30       	cpi	r24, 0x07	; 7
    4cdc:	59 f4       	brne	.+22     	; 0x4cf4 <USART_BluetoothChanger+0xc8>
	{
		//USART_SendString("Steering Right");
		*BL_STEER += 100;
    4cde:	e0 91 7a 05 	lds	r30, 0x057A	; 0x80057a <BL_STEER>
    4ce2:	f0 91 7b 05 	lds	r31, 0x057B	; 0x80057b <BL_STEER+0x1>
    4ce6:	80 81       	ld	r24, Z
    4ce8:	91 81       	ldd	r25, Z+1	; 0x01
    4cea:	8c 59       	subi	r24, 0x9C	; 156
    4cec:	9f 4f       	sbci	r25, 0xFF	; 255
    4cee:	91 83       	std	Z+1, r25	; 0x01
    4cf0:	80 83       	st	Z, r24
    4cf2:	16 c1       	rjmp	.+556    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else if(Data_in == BL_ModeUp)
    4cf4:	8d 30       	cpi	r24, 0x0D	; 13
    4cf6:	f1 f4       	brne	.+60     	; 0x4d34 <USART_BluetoothChanger+0x108>
	{
		*(pSettings_BL+0) += 1;
    4cf8:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4cfc:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4d00:	80 81       	ld	r24, Z
    4d02:	91 81       	ldd	r25, Z+1	; 0x01
    4d04:	01 96       	adiw	r24, 0x01	; 1
    4d06:	91 83       	std	Z+1, r25	; 0x01
    4d08:	80 83       	st	Z, r24
		char text[8];
		USART_SendString("Mode Up:> ");
    4d0a:	8c ee       	ldi	r24, 0xEC	; 236
    4d0c:	92 e0       	ldi	r25, 0x02	; 2
    4d0e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		itoa(*(pSettings_BL+0), text, 10);
    4d12:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4d16:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4d1a:	4a e0       	ldi	r20, 0x0A	; 10
    4d1c:	be 01       	movw	r22, r28
    4d1e:	6f 5f       	subi	r22, 0xFF	; 255
    4d20:	7f 4f       	sbci	r23, 0xFF	; 255
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
		USART_SendString(text);
    4d2a:	ce 01       	movw	r24, r28
    4d2c:	01 96       	adiw	r24, 0x01	; 1
    4d2e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
    4d32:	f6 c0       	rjmp	.+492    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
		
	}
	else if(Data_in == BL_ModeDown)
    4d34:	8c 30       	cpi	r24, 0x0C	; 12
    4d36:	f1 f4       	brne	.+60     	; 0x4d74 <USART_BluetoothChanger+0x148>
	{
		*(pSettings_BL+0) -= 1;
    4d38:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4d3c:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	91 83       	std	Z+1, r25	; 0x01
    4d48:	80 83       	st	Z, r24
		char text[8];
		USART_SendString("Mode down:> ");
    4d4a:	87 ef       	ldi	r24, 0xF7	; 247
    4d4c:	92 e0       	ldi	r25, 0x02	; 2
    4d4e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		itoa(*(pSettings_BL+0), text, 10);
    4d52:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4d56:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4d5a:	4a e0       	ldi	r20, 0x0A	; 10
    4d5c:	be 01       	movw	r22, r28
    4d5e:	6f 5f       	subi	r22, 0xFF	; 255
    4d60:	7f 4f       	sbci	r23, 0xFF	; 255
    4d62:	80 81       	ld	r24, Z
    4d64:	91 81       	ldd	r25, Z+1	; 0x01
    4d66:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
		USART_SendString(text);
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	01 96       	adiw	r24, 0x01	; 1
    4d6e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
    4d72:	d6 c0       	rjmp	.+428    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
		
	}
	//speed up down
	else if(Data_in == BL_speedup)
    4d74:	88 30       	cpi	r24, 0x08	; 8
    4d76:	f1 f4       	brne	.+60     	; 0x4db4 <USART_BluetoothChanger+0x188>
	{
		*(pSettings_BL+1) += 25;
    4d78:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4d7c:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4d80:	82 81       	ldd	r24, Z+2	; 0x02
    4d82:	93 81       	ldd	r25, Z+3	; 0x03
    4d84:	49 96       	adiw	r24, 0x19	; 25
    4d86:	93 83       	std	Z+3, r25	; 0x03
    4d88:	82 83       	std	Z+2, r24	; 0x02
		char text[8];
		USART_SendString("Speed Up:> ");
    4d8a:	88 e0       	ldi	r24, 0x08	; 8
    4d8c:	93 e0       	ldi	r25, 0x03	; 3
    4d8e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		itoa(*(pSettings_BL+1), text, 10);
    4d92:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4d96:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4d9a:	4a e0       	ldi	r20, 0x0A	; 10
    4d9c:	be 01       	movw	r22, r28
    4d9e:	6f 5f       	subi	r22, 0xFF	; 255
    4da0:	7f 4f       	sbci	r23, 0xFF	; 255
    4da2:	82 81       	ldd	r24, Z+2	; 0x02
    4da4:	93 81       	ldd	r25, Z+3	; 0x03
    4da6:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
		USART_SendString(text);
    4daa:	ce 01       	movw	r24, r28
    4dac:	01 96       	adiw	r24, 0x01	; 1
    4dae:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
    4db2:	b6 c0       	rjmp	.+364    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
		
	}
	else if(Data_in == BL_speeddown)
    4db4:	89 30       	cpi	r24, 0x09	; 9
    4db6:	f1 f4       	brne	.+60     	; 0x4df4 <USART_BluetoothChanger+0x1c8>
	{
		*(pSettings_BL+1) -= 25;
    4db8:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4dbc:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4dc0:	82 81       	ldd	r24, Z+2	; 0x02
    4dc2:	93 81       	ldd	r25, Z+3	; 0x03
    4dc4:	49 97       	sbiw	r24, 0x19	; 25
    4dc6:	93 83       	std	Z+3, r25	; 0x03
    4dc8:	82 83       	std	Z+2, r24	; 0x02
		char text[8];
		USART_SendString("Speed down:> ");
    4dca:	88 e1       	ldi	r24, 0x18	; 24
    4dcc:	93 e0       	ldi	r25, 0x03	; 3
    4dce:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		itoa(*(pSettings_BL+1), text, 10);
    4dd2:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4dd6:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4dda:	4a e0       	ldi	r20, 0x0A	; 10
    4ddc:	be 01       	movw	r22, r28
    4dde:	6f 5f       	subi	r22, 0xFF	; 255
    4de0:	7f 4f       	sbci	r23, 0xFF	; 255
    4de2:	82 81       	ldd	r24, Z+2	; 0x02
    4de4:	93 81       	ldd	r25, Z+3	; 0x03
    4de6:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
		USART_SendString(text);
    4dea:	ce 01       	movw	r24, r28
    4dec:	01 96       	adiw	r24, 0x01	; 1
    4dee:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
    4df2:	96 c0       	rjmp	.+300    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
		
		
	}else if(Data_in == BL_minspeedup)
    4df4:	82 31       	cpi	r24, 0x12	; 18
    4df6:	f1 f4       	brne	.+60     	; 0x4e34 <USART_BluetoothChanger+0x208>
	{
		*(pSettings_BL+3) += 25;
    4df8:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4dfc:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4e00:	86 81       	ldd	r24, Z+6	; 0x06
    4e02:	97 81       	ldd	r25, Z+7	; 0x07
    4e04:	49 96       	adiw	r24, 0x19	; 25
    4e06:	97 83       	std	Z+7, r25	; 0x07
    4e08:	86 83       	std	Z+6, r24	; 0x06
		char text[8];
		USART_SendString("Min Speed Up:> ");
    4e0a:	84 e0       	ldi	r24, 0x04	; 4
    4e0c:	93 e0       	ldi	r25, 0x03	; 3
    4e0e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		itoa(*(pSettings_BL+3), text, 10);
    4e12:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4e16:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4e1a:	4a e0       	ldi	r20, 0x0A	; 10
    4e1c:	be 01       	movw	r22, r28
    4e1e:	6f 5f       	subi	r22, 0xFF	; 255
    4e20:	7f 4f       	sbci	r23, 0xFF	; 255
    4e22:	86 81       	ldd	r24, Z+6	; 0x06
    4e24:	97 81       	ldd	r25, Z+7	; 0x07
    4e26:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
		USART_SendString(text);
    4e2a:	ce 01       	movw	r24, r28
    4e2c:	01 96       	adiw	r24, 0x01	; 1
    4e2e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
    4e32:	76 c0       	rjmp	.+236    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
		
	}
	else if(Data_in == BL_minspeeddown)
    4e34:	8b 30       	cpi	r24, 0x0B	; 11
    4e36:	f1 f4       	brne	.+60     	; 0x4e74 <USART_BluetoothChanger+0x248>
	{
		*(pSettings_BL+3) -= 25;
    4e38:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4e3c:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4e40:	86 81       	ldd	r24, Z+6	; 0x06
    4e42:	97 81       	ldd	r25, Z+7	; 0x07
    4e44:	49 97       	sbiw	r24, 0x19	; 25
    4e46:	97 83       	std	Z+7, r25	; 0x07
    4e48:	86 83       	std	Z+6, r24	; 0x06
		char text[8];
		USART_SendString("Min Speed down:> ");
    4e4a:	84 e1       	ldi	r24, 0x14	; 20
    4e4c:	93 e0       	ldi	r25, 0x03	; 3
    4e4e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		itoa(*(pSettings_BL+3), text, 10);
    4e52:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4e56:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4e5a:	4a e0       	ldi	r20, 0x0A	; 10
    4e5c:	be 01       	movw	r22, r28
    4e5e:	6f 5f       	subi	r22, 0xFF	; 255
    4e60:	7f 4f       	sbci	r23, 0xFF	; 255
    4e62:	86 81       	ldd	r24, Z+6	; 0x06
    4e64:	97 81       	ldd	r25, Z+7	; 0x07
    4e66:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
		USART_SendString(text);
    4e6a:	ce 01       	movw	r24, r28
    4e6c:	01 96       	adiw	r24, 0x01	; 1
    4e6e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
    4e72:	56 c0       	rjmp	.+172    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
		
	}
	
	else if(Data_in == BL_Mode0)
    4e74:	8e 30       	cpi	r24, 0x0E	; 14
    4e76:	59 f4       	brne	.+22     	; 0x4e8e <USART_BluetoothChanger+0x262>
	{
		USART_SendString("Mode 0:> Remote");
    4e78:	86 e2       	ldi	r24, 0x26	; 38
    4e7a:	93 e0       	ldi	r25, 0x03	; 3
    4e7c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		*(pSettings_BL+0) = 0;
    4e80:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4e84:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4e88:	11 82       	std	Z+1, r1	; 0x01
    4e8a:	10 82       	st	Z, r1
    4e8c:	49 c0       	rjmp	.+146    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else if(Data_in == BL_Mode1)
    4e8e:	8f 30       	cpi	r24, 0x0F	; 15
    4e90:	69 f4       	brne	.+26     	; 0x4eac <USART_BluetoothChanger+0x280>
	{
		USART_SendString("Mode 1:> Autonomous");
    4e92:	86 e3       	ldi	r24, 0x36	; 54
    4e94:	93 e0       	ldi	r25, 0x03	; 3
    4e96:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		*(pSettings_BL+0) = 1;
    4e9a:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4e9e:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	91 83       	std	Z+1, r25	; 0x01
    4ea8:	80 83       	st	Z, r24
    4eaa:	3a c0       	rjmp	.+116    	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else if(Data_in == BL_Mode2)
    4eac:	80 31       	cpi	r24, 0x10	; 16
    4eae:	69 f4       	brne	.+26     	; 0x4eca <USART_BluetoothChanger+0x29e>
	{
		USART_SendString("Mode 2:> Autonomous");
    4eb0:	8a e4       	ldi	r24, 0x4A	; 74
    4eb2:	93 e0       	ldi	r25, 0x03	; 3
    4eb4:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
		*(pSettings_BL+0) = 3;
    4eb8:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <pSettings_BL>
    4ebc:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <pSettings_BL+0x1>
    4ec0:	83 e0       	ldi	r24, 0x03	; 3
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	80 83       	st	Z, r24
    4ec8:	2b c0       	rjmp	.+86     	; 0x4f20 <USART_BluetoothChanger+0x2f4>
	}
	else{
		char buffer_tmp[BL_BUFFERSIZE] = "RX:> ";
    4eca:	96 e0       	ldi	r25, 0x06	; 6
    4ecc:	e2 e3       	ldi	r30, 0x32	; 50
    4ece:	f1 e0       	ldi	r31, 0x01	; 1
    4ed0:	8e 01       	movw	r16, r28
    4ed2:	0f 5f       	subi	r16, 0xFF	; 255
    4ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed6:	d8 01       	movw	r26, r16
    4ed8:	01 90       	ld	r0, Z+
    4eda:	0d 92       	st	X+, r0
    4edc:	9a 95       	dec	r25
    4ede:	e1 f7       	brne	.-8      	; 0x4ed8 <USART_BluetoothChanger+0x2ac>
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	37 96       	adiw	r30, 0x07	; 7
    4ee4:	94 e0       	ldi	r25, 0x04	; 4
    4ee6:	df 01       	movw	r26, r30
    4ee8:	1d 92       	st	X+, r1
    4eea:	9a 95       	dec	r25
    4eec:	e9 f7       	brne	.-6      	; 0x4ee8 <USART_BluetoothChanger+0x2bc>
    4eee:	40 e1       	ldi	r20, 0x10	; 16
    4ef0:	be 01       	movw	r22, r28
    4ef2:	65 5f       	subi	r22, 0xF5	; 245
    4ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__itoa_ncheck>
		char buff2[5];
		itoa(Data_in, buff2, 16);
		strcat(buffer_tmp, buff2);
    4efc:	be 01       	movw	r22, r28
    4efe:	65 5f       	subi	r22, 0xF5	; 245
    4f00:	7f 4f       	sbci	r23, 0xFF	; 255
    4f02:	c8 01       	movw	r24, r16
    4f04:	0e 94 ee 29 	call	0x53dc	; 0x53dc <strcat>
		strcat(buffer_tmp, "\n");
    4f08:	f8 01       	movw	r30, r16
    4f0a:	01 90       	ld	r0, Z+
    4f0c:	00 20       	and	r0, r0
    4f0e:	e9 f7       	brne	.-6      	; 0x4f0a <USART_BluetoothChanger+0x2de>
    4f10:	31 97       	sbiw	r30, 0x01	; 1
    4f12:	8a e0       	ldi	r24, 0x0A	; 10
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	91 83       	std	Z+1, r25	; 0x01
    4f18:	80 83       	st	Z, r24
		USART_SendString(buffer_tmp);
    4f1a:	c8 01       	movw	r24, r16
    4f1c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <USART_SendString>
	}
	
    4f20:	2f 96       	adiw	r28, 0x0f	; 15
    4f22:	0f b6       	in	r0, 0x3f	; 63
    4f24:	f8 94       	cli
    4f26:	de bf       	out	0x3e, r29	; 62
    4f28:	0f be       	out	0x3f, r0	; 63
    4f2a:	cd bf       	out	0x3d, r28	; 61
    4f2c:	df 91       	pop	r29
    4f2e:	cf 91       	pop	r28
    4f30:	1f 91       	pop	r17
    4f32:	0f 91       	pop	r16
    4f34:	08 95       	ret

00004f36 <__subsf3>:
    4f36:	50 58       	subi	r21, 0x80	; 128

00004f38 <__addsf3>:
    4f38:	bb 27       	eor	r27, r27
    4f3a:	aa 27       	eor	r26, r26
    4f3c:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__addsf3x>
    4f40:	0c 94 04 29 	jmp	0x5208	; 0x5208 <__fp_round>
    4f44:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__fp_pscA>
    4f48:	38 f0       	brcs	.+14     	; 0x4f58 <__addsf3+0x20>
    4f4a:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__fp_pscB>
    4f4e:	20 f0       	brcs	.+8      	; 0x4f58 <__addsf3+0x20>
    4f50:	39 f4       	brne	.+14     	; 0x4f60 <__addsf3+0x28>
    4f52:	9f 3f       	cpi	r25, 0xFF	; 255
    4f54:	19 f4       	brne	.+6      	; 0x4f5c <__addsf3+0x24>
    4f56:	26 f4       	brtc	.+8      	; 0x4f60 <__addsf3+0x28>
    4f58:	0c 94 f3 28 	jmp	0x51e6	; 0x51e6 <__fp_nan>
    4f5c:	0e f4       	brtc	.+2      	; 0x4f60 <__addsf3+0x28>
    4f5e:	e0 95       	com	r30
    4f60:	e7 fb       	bst	r30, 7
    4f62:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__fp_inf>

00004f66 <__addsf3x>:
    4f66:	e9 2f       	mov	r30, r25
    4f68:	0e 94 15 29 	call	0x522a	; 0x522a <__fp_split3>
    4f6c:	58 f3       	brcs	.-42     	; 0x4f44 <__addsf3+0xc>
    4f6e:	ba 17       	cp	r27, r26
    4f70:	62 07       	cpc	r22, r18
    4f72:	73 07       	cpc	r23, r19
    4f74:	84 07       	cpc	r24, r20
    4f76:	95 07       	cpc	r25, r21
    4f78:	20 f0       	brcs	.+8      	; 0x4f82 <__addsf3x+0x1c>
    4f7a:	79 f4       	brne	.+30     	; 0x4f9a <__addsf3x+0x34>
    4f7c:	a6 f5       	brtc	.+104    	; 0x4fe6 <__addsf3x+0x80>
    4f7e:	0c 94 37 29 	jmp	0x526e	; 0x526e <__fp_zero>
    4f82:	0e f4       	brtc	.+2      	; 0x4f86 <__addsf3x+0x20>
    4f84:	e0 95       	com	r30
    4f86:	0b 2e       	mov	r0, r27
    4f88:	ba 2f       	mov	r27, r26
    4f8a:	a0 2d       	mov	r26, r0
    4f8c:	0b 01       	movw	r0, r22
    4f8e:	b9 01       	movw	r22, r18
    4f90:	90 01       	movw	r18, r0
    4f92:	0c 01       	movw	r0, r24
    4f94:	ca 01       	movw	r24, r20
    4f96:	a0 01       	movw	r20, r0
    4f98:	11 24       	eor	r1, r1
    4f9a:	ff 27       	eor	r31, r31
    4f9c:	59 1b       	sub	r21, r25
    4f9e:	99 f0       	breq	.+38     	; 0x4fc6 <__addsf3x+0x60>
    4fa0:	59 3f       	cpi	r21, 0xF9	; 249
    4fa2:	50 f4       	brcc	.+20     	; 0x4fb8 <__addsf3x+0x52>
    4fa4:	50 3e       	cpi	r21, 0xE0	; 224
    4fa6:	68 f1       	brcs	.+90     	; 0x5002 <__addsf3x+0x9c>
    4fa8:	1a 16       	cp	r1, r26
    4faa:	f0 40       	sbci	r31, 0x00	; 0
    4fac:	a2 2f       	mov	r26, r18
    4fae:	23 2f       	mov	r18, r19
    4fb0:	34 2f       	mov	r19, r20
    4fb2:	44 27       	eor	r20, r20
    4fb4:	58 5f       	subi	r21, 0xF8	; 248
    4fb6:	f3 cf       	rjmp	.-26     	; 0x4f9e <__addsf3x+0x38>
    4fb8:	46 95       	lsr	r20
    4fba:	37 95       	ror	r19
    4fbc:	27 95       	ror	r18
    4fbe:	a7 95       	ror	r26
    4fc0:	f0 40       	sbci	r31, 0x00	; 0
    4fc2:	53 95       	inc	r21
    4fc4:	c9 f7       	brne	.-14     	; 0x4fb8 <__addsf3x+0x52>
    4fc6:	7e f4       	brtc	.+30     	; 0x4fe6 <__addsf3x+0x80>
    4fc8:	1f 16       	cp	r1, r31
    4fca:	ba 0b       	sbc	r27, r26
    4fcc:	62 0b       	sbc	r22, r18
    4fce:	73 0b       	sbc	r23, r19
    4fd0:	84 0b       	sbc	r24, r20
    4fd2:	ba f0       	brmi	.+46     	; 0x5002 <__addsf3x+0x9c>
    4fd4:	91 50       	subi	r25, 0x01	; 1
    4fd6:	a1 f0       	breq	.+40     	; 0x5000 <__addsf3x+0x9a>
    4fd8:	ff 0f       	add	r31, r31
    4fda:	bb 1f       	adc	r27, r27
    4fdc:	66 1f       	adc	r22, r22
    4fde:	77 1f       	adc	r23, r23
    4fe0:	88 1f       	adc	r24, r24
    4fe2:	c2 f7       	brpl	.-16     	; 0x4fd4 <__addsf3x+0x6e>
    4fe4:	0e c0       	rjmp	.+28     	; 0x5002 <__addsf3x+0x9c>
    4fe6:	ba 0f       	add	r27, r26
    4fe8:	62 1f       	adc	r22, r18
    4fea:	73 1f       	adc	r23, r19
    4fec:	84 1f       	adc	r24, r20
    4fee:	48 f4       	brcc	.+18     	; 0x5002 <__addsf3x+0x9c>
    4ff0:	87 95       	ror	r24
    4ff2:	77 95       	ror	r23
    4ff4:	67 95       	ror	r22
    4ff6:	b7 95       	ror	r27
    4ff8:	f7 95       	ror	r31
    4ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    4ffc:	08 f0       	brcs	.+2      	; 0x5000 <__addsf3x+0x9a>
    4ffe:	b0 cf       	rjmp	.-160    	; 0x4f60 <__addsf3+0x28>
    5000:	93 95       	inc	r25
    5002:	88 0f       	add	r24, r24
    5004:	08 f0       	brcs	.+2      	; 0x5008 <__addsf3x+0xa2>
    5006:	99 27       	eor	r25, r25
    5008:	ee 0f       	add	r30, r30
    500a:	97 95       	ror	r25
    500c:	87 95       	ror	r24
    500e:	08 95       	ret

00005010 <__divsf3>:
    5010:	0e 94 1c 28 	call	0x5038	; 0x5038 <__divsf3x>
    5014:	0c 94 04 29 	jmp	0x5208	; 0x5208 <__fp_round>
    5018:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__fp_pscB>
    501c:	58 f0       	brcs	.+22     	; 0x5034 <__divsf3+0x24>
    501e:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__fp_pscA>
    5022:	40 f0       	brcs	.+16     	; 0x5034 <__divsf3+0x24>
    5024:	29 f4       	brne	.+10     	; 0x5030 <__divsf3+0x20>
    5026:	5f 3f       	cpi	r21, 0xFF	; 255
    5028:	29 f0       	breq	.+10     	; 0x5034 <__divsf3+0x24>
    502a:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__fp_inf>
    502e:	51 11       	cpse	r21, r1
    5030:	0c 94 38 29 	jmp	0x5270	; 0x5270 <__fp_szero>
    5034:	0c 94 f3 28 	jmp	0x51e6	; 0x51e6 <__fp_nan>

00005038 <__divsf3x>:
    5038:	0e 94 15 29 	call	0x522a	; 0x522a <__fp_split3>
    503c:	68 f3       	brcs	.-38     	; 0x5018 <__divsf3+0x8>

0000503e <__divsf3_pse>:
    503e:	99 23       	and	r25, r25
    5040:	b1 f3       	breq	.-20     	; 0x502e <__divsf3+0x1e>
    5042:	55 23       	and	r21, r21
    5044:	91 f3       	breq	.-28     	; 0x502a <__divsf3+0x1a>
    5046:	95 1b       	sub	r25, r21
    5048:	55 0b       	sbc	r21, r21
    504a:	bb 27       	eor	r27, r27
    504c:	aa 27       	eor	r26, r26
    504e:	62 17       	cp	r22, r18
    5050:	73 07       	cpc	r23, r19
    5052:	84 07       	cpc	r24, r20
    5054:	38 f0       	brcs	.+14     	; 0x5064 <__divsf3_pse+0x26>
    5056:	9f 5f       	subi	r25, 0xFF	; 255
    5058:	5f 4f       	sbci	r21, 0xFF	; 255
    505a:	22 0f       	add	r18, r18
    505c:	33 1f       	adc	r19, r19
    505e:	44 1f       	adc	r20, r20
    5060:	aa 1f       	adc	r26, r26
    5062:	a9 f3       	breq	.-22     	; 0x504e <__divsf3_pse+0x10>
    5064:	35 d0       	rcall	.+106    	; 0x50d0 <__divsf3_pse+0x92>
    5066:	0e 2e       	mov	r0, r30
    5068:	3a f0       	brmi	.+14     	; 0x5078 <__divsf3_pse+0x3a>
    506a:	e0 e8       	ldi	r30, 0x80	; 128
    506c:	32 d0       	rcall	.+100    	; 0x50d2 <__divsf3_pse+0x94>
    506e:	91 50       	subi	r25, 0x01	; 1
    5070:	50 40       	sbci	r21, 0x00	; 0
    5072:	e6 95       	lsr	r30
    5074:	00 1c       	adc	r0, r0
    5076:	ca f7       	brpl	.-14     	; 0x506a <__divsf3_pse+0x2c>
    5078:	2b d0       	rcall	.+86     	; 0x50d0 <__divsf3_pse+0x92>
    507a:	fe 2f       	mov	r31, r30
    507c:	29 d0       	rcall	.+82     	; 0x50d0 <__divsf3_pse+0x92>
    507e:	66 0f       	add	r22, r22
    5080:	77 1f       	adc	r23, r23
    5082:	88 1f       	adc	r24, r24
    5084:	bb 1f       	adc	r27, r27
    5086:	26 17       	cp	r18, r22
    5088:	37 07       	cpc	r19, r23
    508a:	48 07       	cpc	r20, r24
    508c:	ab 07       	cpc	r26, r27
    508e:	b0 e8       	ldi	r27, 0x80	; 128
    5090:	09 f0       	breq	.+2      	; 0x5094 <__divsf3_pse+0x56>
    5092:	bb 0b       	sbc	r27, r27
    5094:	80 2d       	mov	r24, r0
    5096:	bf 01       	movw	r22, r30
    5098:	ff 27       	eor	r31, r31
    509a:	93 58       	subi	r25, 0x83	; 131
    509c:	5f 4f       	sbci	r21, 0xFF	; 255
    509e:	3a f0       	brmi	.+14     	; 0x50ae <__divsf3_pse+0x70>
    50a0:	9e 3f       	cpi	r25, 0xFE	; 254
    50a2:	51 05       	cpc	r21, r1
    50a4:	78 f0       	brcs	.+30     	; 0x50c4 <__divsf3_pse+0x86>
    50a6:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__fp_inf>
    50aa:	0c 94 38 29 	jmp	0x5270	; 0x5270 <__fp_szero>
    50ae:	5f 3f       	cpi	r21, 0xFF	; 255
    50b0:	e4 f3       	brlt	.-8      	; 0x50aa <__divsf3_pse+0x6c>
    50b2:	98 3e       	cpi	r25, 0xE8	; 232
    50b4:	d4 f3       	brlt	.-12     	; 0x50aa <__divsf3_pse+0x6c>
    50b6:	86 95       	lsr	r24
    50b8:	77 95       	ror	r23
    50ba:	67 95       	ror	r22
    50bc:	b7 95       	ror	r27
    50be:	f7 95       	ror	r31
    50c0:	9f 5f       	subi	r25, 0xFF	; 255
    50c2:	c9 f7       	brne	.-14     	; 0x50b6 <__divsf3_pse+0x78>
    50c4:	88 0f       	add	r24, r24
    50c6:	91 1d       	adc	r25, r1
    50c8:	96 95       	lsr	r25
    50ca:	87 95       	ror	r24
    50cc:	97 f9       	bld	r25, 7
    50ce:	08 95       	ret
    50d0:	e1 e0       	ldi	r30, 0x01	; 1
    50d2:	66 0f       	add	r22, r22
    50d4:	77 1f       	adc	r23, r23
    50d6:	88 1f       	adc	r24, r24
    50d8:	bb 1f       	adc	r27, r27
    50da:	62 17       	cp	r22, r18
    50dc:	73 07       	cpc	r23, r19
    50de:	84 07       	cpc	r24, r20
    50e0:	ba 07       	cpc	r27, r26
    50e2:	20 f0       	brcs	.+8      	; 0x50ec <__divsf3_pse+0xae>
    50e4:	62 1b       	sub	r22, r18
    50e6:	73 0b       	sbc	r23, r19
    50e8:	84 0b       	sbc	r24, r20
    50ea:	ba 0b       	sbc	r27, r26
    50ec:	ee 1f       	adc	r30, r30
    50ee:	88 f7       	brcc	.-30     	; 0x50d2 <__divsf3_pse+0x94>
    50f0:	e0 95       	com	r30
    50f2:	08 95       	ret

000050f4 <__fixsfsi>:
    50f4:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    50f8:	68 94       	set
    50fa:	b1 11       	cpse	r27, r1
    50fc:	0c 94 38 29 	jmp	0x5270	; 0x5270 <__fp_szero>
    5100:	08 95       	ret

00005102 <__fixunssfsi>:
    5102:	0e 94 1d 29 	call	0x523a	; 0x523a <__fp_splitA>
    5106:	88 f0       	brcs	.+34     	; 0x512a <__fixunssfsi+0x28>
    5108:	9f 57       	subi	r25, 0x7F	; 127
    510a:	98 f0       	brcs	.+38     	; 0x5132 <__fixunssfsi+0x30>
    510c:	b9 2f       	mov	r27, r25
    510e:	99 27       	eor	r25, r25
    5110:	b7 51       	subi	r27, 0x17	; 23
    5112:	b0 f0       	brcs	.+44     	; 0x5140 <__fixunssfsi+0x3e>
    5114:	e1 f0       	breq	.+56     	; 0x514e <__fixunssfsi+0x4c>
    5116:	66 0f       	add	r22, r22
    5118:	77 1f       	adc	r23, r23
    511a:	88 1f       	adc	r24, r24
    511c:	99 1f       	adc	r25, r25
    511e:	1a f0       	brmi	.+6      	; 0x5126 <__fixunssfsi+0x24>
    5120:	ba 95       	dec	r27
    5122:	c9 f7       	brne	.-14     	; 0x5116 <__fixunssfsi+0x14>
    5124:	14 c0       	rjmp	.+40     	; 0x514e <__fixunssfsi+0x4c>
    5126:	b1 30       	cpi	r27, 0x01	; 1
    5128:	91 f0       	breq	.+36     	; 0x514e <__fixunssfsi+0x4c>
    512a:	0e 94 37 29 	call	0x526e	; 0x526e <__fp_zero>
    512e:	b1 e0       	ldi	r27, 0x01	; 1
    5130:	08 95       	ret
    5132:	0c 94 37 29 	jmp	0x526e	; 0x526e <__fp_zero>
    5136:	67 2f       	mov	r22, r23
    5138:	78 2f       	mov	r23, r24
    513a:	88 27       	eor	r24, r24
    513c:	b8 5f       	subi	r27, 0xF8	; 248
    513e:	39 f0       	breq	.+14     	; 0x514e <__fixunssfsi+0x4c>
    5140:	b9 3f       	cpi	r27, 0xF9	; 249
    5142:	cc f3       	brlt	.-14     	; 0x5136 <__fixunssfsi+0x34>
    5144:	86 95       	lsr	r24
    5146:	77 95       	ror	r23
    5148:	67 95       	ror	r22
    514a:	b3 95       	inc	r27
    514c:	d9 f7       	brne	.-10     	; 0x5144 <__fixunssfsi+0x42>
    514e:	3e f4       	brtc	.+14     	; 0x515e <__fixunssfsi+0x5c>
    5150:	90 95       	com	r25
    5152:	80 95       	com	r24
    5154:	70 95       	com	r23
    5156:	61 95       	neg	r22
    5158:	7f 4f       	sbci	r23, 0xFF	; 255
    515a:	8f 4f       	sbci	r24, 0xFF	; 255
    515c:	9f 4f       	sbci	r25, 0xFF	; 255
    515e:	08 95       	ret

00005160 <__floatunsisf>:
    5160:	e8 94       	clt
    5162:	09 c0       	rjmp	.+18     	; 0x5176 <__floatsisf+0x12>

00005164 <__floatsisf>:
    5164:	97 fb       	bst	r25, 7
    5166:	3e f4       	brtc	.+14     	; 0x5176 <__floatsisf+0x12>
    5168:	90 95       	com	r25
    516a:	80 95       	com	r24
    516c:	70 95       	com	r23
    516e:	61 95       	neg	r22
    5170:	7f 4f       	sbci	r23, 0xFF	; 255
    5172:	8f 4f       	sbci	r24, 0xFF	; 255
    5174:	9f 4f       	sbci	r25, 0xFF	; 255
    5176:	99 23       	and	r25, r25
    5178:	a9 f0       	breq	.+42     	; 0x51a4 <__floatsisf+0x40>
    517a:	f9 2f       	mov	r31, r25
    517c:	96 e9       	ldi	r25, 0x96	; 150
    517e:	bb 27       	eor	r27, r27
    5180:	93 95       	inc	r25
    5182:	f6 95       	lsr	r31
    5184:	87 95       	ror	r24
    5186:	77 95       	ror	r23
    5188:	67 95       	ror	r22
    518a:	b7 95       	ror	r27
    518c:	f1 11       	cpse	r31, r1
    518e:	f8 cf       	rjmp	.-16     	; 0x5180 <__floatsisf+0x1c>
    5190:	fa f4       	brpl	.+62     	; 0x51d0 <__floatsisf+0x6c>
    5192:	bb 0f       	add	r27, r27
    5194:	11 f4       	brne	.+4      	; 0x519a <__floatsisf+0x36>
    5196:	60 ff       	sbrs	r22, 0
    5198:	1b c0       	rjmp	.+54     	; 0x51d0 <__floatsisf+0x6c>
    519a:	6f 5f       	subi	r22, 0xFF	; 255
    519c:	7f 4f       	sbci	r23, 0xFF	; 255
    519e:	8f 4f       	sbci	r24, 0xFF	; 255
    51a0:	9f 4f       	sbci	r25, 0xFF	; 255
    51a2:	16 c0       	rjmp	.+44     	; 0x51d0 <__floatsisf+0x6c>
    51a4:	88 23       	and	r24, r24
    51a6:	11 f0       	breq	.+4      	; 0x51ac <__floatsisf+0x48>
    51a8:	96 e9       	ldi	r25, 0x96	; 150
    51aa:	11 c0       	rjmp	.+34     	; 0x51ce <__floatsisf+0x6a>
    51ac:	77 23       	and	r23, r23
    51ae:	21 f0       	breq	.+8      	; 0x51b8 <__floatsisf+0x54>
    51b0:	9e e8       	ldi	r25, 0x8E	; 142
    51b2:	87 2f       	mov	r24, r23
    51b4:	76 2f       	mov	r23, r22
    51b6:	05 c0       	rjmp	.+10     	; 0x51c2 <__floatsisf+0x5e>
    51b8:	66 23       	and	r22, r22
    51ba:	71 f0       	breq	.+28     	; 0x51d8 <__floatsisf+0x74>
    51bc:	96 e8       	ldi	r25, 0x86	; 134
    51be:	86 2f       	mov	r24, r22
    51c0:	70 e0       	ldi	r23, 0x00	; 0
    51c2:	60 e0       	ldi	r22, 0x00	; 0
    51c4:	2a f0       	brmi	.+10     	; 0x51d0 <__floatsisf+0x6c>
    51c6:	9a 95       	dec	r25
    51c8:	66 0f       	add	r22, r22
    51ca:	77 1f       	adc	r23, r23
    51cc:	88 1f       	adc	r24, r24
    51ce:	da f7       	brpl	.-10     	; 0x51c6 <__floatsisf+0x62>
    51d0:	88 0f       	add	r24, r24
    51d2:	96 95       	lsr	r25
    51d4:	87 95       	ror	r24
    51d6:	97 f9       	bld	r25, 7
    51d8:	08 95       	ret

000051da <__fp_inf>:
    51da:	97 f9       	bld	r25, 7
    51dc:	9f 67       	ori	r25, 0x7F	; 127
    51de:	80 e8       	ldi	r24, 0x80	; 128
    51e0:	70 e0       	ldi	r23, 0x00	; 0
    51e2:	60 e0       	ldi	r22, 0x00	; 0
    51e4:	08 95       	ret

000051e6 <__fp_nan>:
    51e6:	9f ef       	ldi	r25, 0xFF	; 255
    51e8:	80 ec       	ldi	r24, 0xC0	; 192
    51ea:	08 95       	ret

000051ec <__fp_pscA>:
    51ec:	00 24       	eor	r0, r0
    51ee:	0a 94       	dec	r0
    51f0:	16 16       	cp	r1, r22
    51f2:	17 06       	cpc	r1, r23
    51f4:	18 06       	cpc	r1, r24
    51f6:	09 06       	cpc	r0, r25
    51f8:	08 95       	ret

000051fa <__fp_pscB>:
    51fa:	00 24       	eor	r0, r0
    51fc:	0a 94       	dec	r0
    51fe:	12 16       	cp	r1, r18
    5200:	13 06       	cpc	r1, r19
    5202:	14 06       	cpc	r1, r20
    5204:	05 06       	cpc	r0, r21
    5206:	08 95       	ret

00005208 <__fp_round>:
    5208:	09 2e       	mov	r0, r25
    520a:	03 94       	inc	r0
    520c:	00 0c       	add	r0, r0
    520e:	11 f4       	brne	.+4      	; 0x5214 <__fp_round+0xc>
    5210:	88 23       	and	r24, r24
    5212:	52 f0       	brmi	.+20     	; 0x5228 <__fp_round+0x20>
    5214:	bb 0f       	add	r27, r27
    5216:	40 f4       	brcc	.+16     	; 0x5228 <__fp_round+0x20>
    5218:	bf 2b       	or	r27, r31
    521a:	11 f4       	brne	.+4      	; 0x5220 <__fp_round+0x18>
    521c:	60 ff       	sbrs	r22, 0
    521e:	04 c0       	rjmp	.+8      	; 0x5228 <__fp_round+0x20>
    5220:	6f 5f       	subi	r22, 0xFF	; 255
    5222:	7f 4f       	sbci	r23, 0xFF	; 255
    5224:	8f 4f       	sbci	r24, 0xFF	; 255
    5226:	9f 4f       	sbci	r25, 0xFF	; 255
    5228:	08 95       	ret

0000522a <__fp_split3>:
    522a:	57 fd       	sbrc	r21, 7
    522c:	90 58       	subi	r25, 0x80	; 128
    522e:	44 0f       	add	r20, r20
    5230:	55 1f       	adc	r21, r21
    5232:	59 f0       	breq	.+22     	; 0x524a <__fp_splitA+0x10>
    5234:	5f 3f       	cpi	r21, 0xFF	; 255
    5236:	71 f0       	breq	.+28     	; 0x5254 <__fp_splitA+0x1a>
    5238:	47 95       	ror	r20

0000523a <__fp_splitA>:
    523a:	88 0f       	add	r24, r24
    523c:	97 fb       	bst	r25, 7
    523e:	99 1f       	adc	r25, r25
    5240:	61 f0       	breq	.+24     	; 0x525a <__fp_splitA+0x20>
    5242:	9f 3f       	cpi	r25, 0xFF	; 255
    5244:	79 f0       	breq	.+30     	; 0x5264 <__fp_splitA+0x2a>
    5246:	87 95       	ror	r24
    5248:	08 95       	ret
    524a:	12 16       	cp	r1, r18
    524c:	13 06       	cpc	r1, r19
    524e:	14 06       	cpc	r1, r20
    5250:	55 1f       	adc	r21, r21
    5252:	f2 cf       	rjmp	.-28     	; 0x5238 <__fp_split3+0xe>
    5254:	46 95       	lsr	r20
    5256:	f1 df       	rcall	.-30     	; 0x523a <__fp_splitA>
    5258:	08 c0       	rjmp	.+16     	; 0x526a <__fp_splitA+0x30>
    525a:	16 16       	cp	r1, r22
    525c:	17 06       	cpc	r1, r23
    525e:	18 06       	cpc	r1, r24
    5260:	99 1f       	adc	r25, r25
    5262:	f1 cf       	rjmp	.-30     	; 0x5246 <__fp_splitA+0xc>
    5264:	86 95       	lsr	r24
    5266:	71 05       	cpc	r23, r1
    5268:	61 05       	cpc	r22, r1
    526a:	08 94       	sec
    526c:	08 95       	ret

0000526e <__fp_zero>:
    526e:	e8 94       	clt

00005270 <__fp_szero>:
    5270:	bb 27       	eor	r27, r27
    5272:	66 27       	eor	r22, r22
    5274:	77 27       	eor	r23, r23
    5276:	cb 01       	movw	r24, r22
    5278:	97 f9       	bld	r25, 7
    527a:	08 95       	ret

0000527c <__mulsf3>:
    527c:	0e 94 51 29 	call	0x52a2	; 0x52a2 <__mulsf3x>
    5280:	0c 94 04 29 	jmp	0x5208	; 0x5208 <__fp_round>
    5284:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__fp_pscA>
    5288:	38 f0       	brcs	.+14     	; 0x5298 <__mulsf3+0x1c>
    528a:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__fp_pscB>
    528e:	20 f0       	brcs	.+8      	; 0x5298 <__mulsf3+0x1c>
    5290:	95 23       	and	r25, r21
    5292:	11 f0       	breq	.+4      	; 0x5298 <__mulsf3+0x1c>
    5294:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__fp_inf>
    5298:	0c 94 f3 28 	jmp	0x51e6	; 0x51e6 <__fp_nan>
    529c:	11 24       	eor	r1, r1
    529e:	0c 94 38 29 	jmp	0x5270	; 0x5270 <__fp_szero>

000052a2 <__mulsf3x>:
    52a2:	0e 94 15 29 	call	0x522a	; 0x522a <__fp_split3>
    52a6:	70 f3       	brcs	.-36     	; 0x5284 <__mulsf3+0x8>

000052a8 <__mulsf3_pse>:
    52a8:	95 9f       	mul	r25, r21
    52aa:	c1 f3       	breq	.-16     	; 0x529c <__mulsf3+0x20>
    52ac:	95 0f       	add	r25, r21
    52ae:	50 e0       	ldi	r21, 0x00	; 0
    52b0:	55 1f       	adc	r21, r21
    52b2:	62 9f       	mul	r22, r18
    52b4:	f0 01       	movw	r30, r0
    52b6:	72 9f       	mul	r23, r18
    52b8:	bb 27       	eor	r27, r27
    52ba:	f0 0d       	add	r31, r0
    52bc:	b1 1d       	adc	r27, r1
    52be:	63 9f       	mul	r22, r19
    52c0:	aa 27       	eor	r26, r26
    52c2:	f0 0d       	add	r31, r0
    52c4:	b1 1d       	adc	r27, r1
    52c6:	aa 1f       	adc	r26, r26
    52c8:	64 9f       	mul	r22, r20
    52ca:	66 27       	eor	r22, r22
    52cc:	b0 0d       	add	r27, r0
    52ce:	a1 1d       	adc	r26, r1
    52d0:	66 1f       	adc	r22, r22
    52d2:	82 9f       	mul	r24, r18
    52d4:	22 27       	eor	r18, r18
    52d6:	b0 0d       	add	r27, r0
    52d8:	a1 1d       	adc	r26, r1
    52da:	62 1f       	adc	r22, r18
    52dc:	73 9f       	mul	r23, r19
    52de:	b0 0d       	add	r27, r0
    52e0:	a1 1d       	adc	r26, r1
    52e2:	62 1f       	adc	r22, r18
    52e4:	83 9f       	mul	r24, r19
    52e6:	a0 0d       	add	r26, r0
    52e8:	61 1d       	adc	r22, r1
    52ea:	22 1f       	adc	r18, r18
    52ec:	74 9f       	mul	r23, r20
    52ee:	33 27       	eor	r19, r19
    52f0:	a0 0d       	add	r26, r0
    52f2:	61 1d       	adc	r22, r1
    52f4:	23 1f       	adc	r18, r19
    52f6:	84 9f       	mul	r24, r20
    52f8:	60 0d       	add	r22, r0
    52fa:	21 1d       	adc	r18, r1
    52fc:	82 2f       	mov	r24, r18
    52fe:	76 2f       	mov	r23, r22
    5300:	6a 2f       	mov	r22, r26
    5302:	11 24       	eor	r1, r1
    5304:	9f 57       	subi	r25, 0x7F	; 127
    5306:	50 40       	sbci	r21, 0x00	; 0
    5308:	9a f0       	brmi	.+38     	; 0x5330 <__mulsf3_pse+0x88>
    530a:	f1 f0       	breq	.+60     	; 0x5348 <__mulsf3_pse+0xa0>
    530c:	88 23       	and	r24, r24
    530e:	4a f0       	brmi	.+18     	; 0x5322 <__mulsf3_pse+0x7a>
    5310:	ee 0f       	add	r30, r30
    5312:	ff 1f       	adc	r31, r31
    5314:	bb 1f       	adc	r27, r27
    5316:	66 1f       	adc	r22, r22
    5318:	77 1f       	adc	r23, r23
    531a:	88 1f       	adc	r24, r24
    531c:	91 50       	subi	r25, 0x01	; 1
    531e:	50 40       	sbci	r21, 0x00	; 0
    5320:	a9 f7       	brne	.-22     	; 0x530c <__mulsf3_pse+0x64>
    5322:	9e 3f       	cpi	r25, 0xFE	; 254
    5324:	51 05       	cpc	r21, r1
    5326:	80 f0       	brcs	.+32     	; 0x5348 <__mulsf3_pse+0xa0>
    5328:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__fp_inf>
    532c:	0c 94 38 29 	jmp	0x5270	; 0x5270 <__fp_szero>
    5330:	5f 3f       	cpi	r21, 0xFF	; 255
    5332:	e4 f3       	brlt	.-8      	; 0x532c <__mulsf3_pse+0x84>
    5334:	98 3e       	cpi	r25, 0xE8	; 232
    5336:	d4 f3       	brlt	.-12     	; 0x532c <__mulsf3_pse+0x84>
    5338:	86 95       	lsr	r24
    533a:	77 95       	ror	r23
    533c:	67 95       	ror	r22
    533e:	b7 95       	ror	r27
    5340:	f7 95       	ror	r31
    5342:	e7 95       	ror	r30
    5344:	9f 5f       	subi	r25, 0xFF	; 255
    5346:	c1 f7       	brne	.-16     	; 0x5338 <__mulsf3_pse+0x90>
    5348:	fe 2b       	or	r31, r30
    534a:	88 0f       	add	r24, r24
    534c:	91 1d       	adc	r25, r1
    534e:	96 95       	lsr	r25
    5350:	87 95       	ror	r24
    5352:	97 f9       	bld	r25, 7
    5354:	08 95       	ret

00005356 <__udivmodsi4>:
    5356:	a1 e2       	ldi	r26, 0x21	; 33
    5358:	1a 2e       	mov	r1, r26
    535a:	aa 1b       	sub	r26, r26
    535c:	bb 1b       	sub	r27, r27
    535e:	fd 01       	movw	r30, r26
    5360:	0d c0       	rjmp	.+26     	; 0x537c <__udivmodsi4_ep>

00005362 <__udivmodsi4_loop>:
    5362:	aa 1f       	adc	r26, r26
    5364:	bb 1f       	adc	r27, r27
    5366:	ee 1f       	adc	r30, r30
    5368:	ff 1f       	adc	r31, r31
    536a:	a2 17       	cp	r26, r18
    536c:	b3 07       	cpc	r27, r19
    536e:	e4 07       	cpc	r30, r20
    5370:	f5 07       	cpc	r31, r21
    5372:	20 f0       	brcs	.+8      	; 0x537c <__udivmodsi4_ep>
    5374:	a2 1b       	sub	r26, r18
    5376:	b3 0b       	sbc	r27, r19
    5378:	e4 0b       	sbc	r30, r20
    537a:	f5 0b       	sbc	r31, r21

0000537c <__udivmodsi4_ep>:
    537c:	66 1f       	adc	r22, r22
    537e:	77 1f       	adc	r23, r23
    5380:	88 1f       	adc	r24, r24
    5382:	99 1f       	adc	r25, r25
    5384:	1a 94       	dec	r1
    5386:	69 f7       	brne	.-38     	; 0x5362 <__udivmodsi4_loop>
    5388:	60 95       	com	r22
    538a:	70 95       	com	r23
    538c:	80 95       	com	r24
    538e:	90 95       	com	r25
    5390:	9b 01       	movw	r18, r22
    5392:	ac 01       	movw	r20, r24
    5394:	bd 01       	movw	r22, r26
    5396:	cf 01       	movw	r24, r30
    5398:	08 95       	ret

0000539a <__umulhisi3>:
    539a:	a2 9f       	mul	r26, r18
    539c:	b0 01       	movw	r22, r0
    539e:	b3 9f       	mul	r27, r19
    53a0:	c0 01       	movw	r24, r0
    53a2:	a3 9f       	mul	r26, r19
    53a4:	70 0d       	add	r23, r0
    53a6:	81 1d       	adc	r24, r1
    53a8:	11 24       	eor	r1, r1
    53aa:	91 1d       	adc	r25, r1
    53ac:	b2 9f       	mul	r27, r18
    53ae:	70 0d       	add	r23, r0
    53b0:	81 1d       	adc	r24, r1
    53b2:	11 24       	eor	r1, r1
    53b4:	91 1d       	adc	r25, r1
    53b6:	08 95       	ret

000053b8 <__muluhisi3>:
    53b8:	0e 94 cd 29 	call	0x539a	; 0x539a <__umulhisi3>
    53bc:	a5 9f       	mul	r26, r21
    53be:	90 0d       	add	r25, r0
    53c0:	b4 9f       	mul	r27, r20
    53c2:	90 0d       	add	r25, r0
    53c4:	a4 9f       	mul	r26, r20
    53c6:	80 0d       	add	r24, r0
    53c8:	91 1d       	adc	r25, r1
    53ca:	11 24       	eor	r1, r1
    53cc:	08 95       	ret

000053ce <memset>:
    53ce:	dc 01       	movw	r26, r24
    53d0:	01 c0       	rjmp	.+2      	; 0x53d4 <memset+0x6>
    53d2:	6d 93       	st	X+, r22
    53d4:	41 50       	subi	r20, 0x01	; 1
    53d6:	50 40       	sbci	r21, 0x00	; 0
    53d8:	e0 f7       	brcc	.-8      	; 0x53d2 <memset+0x4>
    53da:	08 95       	ret

000053dc <strcat>:
    53dc:	fb 01       	movw	r30, r22
    53de:	dc 01       	movw	r26, r24
    53e0:	0d 90       	ld	r0, X+
    53e2:	00 20       	and	r0, r0
    53e4:	e9 f7       	brne	.-6      	; 0x53e0 <strcat+0x4>
    53e6:	11 97       	sbiw	r26, 0x01	; 1
    53e8:	01 90       	ld	r0, Z+
    53ea:	0d 92       	st	X+, r0
    53ec:	00 20       	and	r0, r0
    53ee:	e1 f7       	brne	.-8      	; 0x53e8 <strcat+0xc>
    53f0:	08 95       	ret

000053f2 <__itoa_ncheck>:
    53f2:	bb 27       	eor	r27, r27
    53f4:	4a 30       	cpi	r20, 0x0A	; 10
    53f6:	31 f4       	brne	.+12     	; 0x5404 <__itoa_ncheck+0x12>
    53f8:	99 23       	and	r25, r25
    53fa:	22 f4       	brpl	.+8      	; 0x5404 <__itoa_ncheck+0x12>
    53fc:	bd e2       	ldi	r27, 0x2D	; 45
    53fe:	90 95       	com	r25
    5400:	81 95       	neg	r24
    5402:	9f 4f       	sbci	r25, 0xFF	; 255
    5404:	0c 94 05 2a 	jmp	0x540a	; 0x540a <__utoa_common>

00005408 <__utoa_ncheck>:
    5408:	bb 27       	eor	r27, r27

0000540a <__utoa_common>:
    540a:	fb 01       	movw	r30, r22
    540c:	55 27       	eor	r21, r21
    540e:	aa 27       	eor	r26, r26
    5410:	88 0f       	add	r24, r24
    5412:	99 1f       	adc	r25, r25
    5414:	aa 1f       	adc	r26, r26
    5416:	a4 17       	cp	r26, r20
    5418:	10 f0       	brcs	.+4      	; 0x541e <__utoa_common+0x14>
    541a:	a4 1b       	sub	r26, r20
    541c:	83 95       	inc	r24
    541e:	50 51       	subi	r21, 0x10	; 16
    5420:	b9 f7       	brne	.-18     	; 0x5410 <__utoa_common+0x6>
    5422:	a0 5d       	subi	r26, 0xD0	; 208
    5424:	aa 33       	cpi	r26, 0x3A	; 58
    5426:	08 f0       	brcs	.+2      	; 0x542a <__utoa_common+0x20>
    5428:	a9 5d       	subi	r26, 0xD9	; 217
    542a:	a1 93       	st	Z+, r26
    542c:	00 97       	sbiw	r24, 0x00	; 0
    542e:	79 f7       	brne	.-34     	; 0x540e <__utoa_common+0x4>
    5430:	b1 11       	cpse	r27, r1
    5432:	b1 93       	st	Z+, r27
    5434:	11 92       	st	Z+, r1
    5436:	cb 01       	movw	r24, r22
    5438:	0c 94 1e 2a 	jmp	0x543c	; 0x543c <strrev>

0000543c <strrev>:
    543c:	dc 01       	movw	r26, r24
    543e:	fc 01       	movw	r30, r24
    5440:	67 2f       	mov	r22, r23
    5442:	71 91       	ld	r23, Z+
    5444:	77 23       	and	r23, r23
    5446:	e1 f7       	brne	.-8      	; 0x5440 <strrev+0x4>
    5448:	32 97       	sbiw	r30, 0x02	; 2
    544a:	04 c0       	rjmp	.+8      	; 0x5454 <strrev+0x18>
    544c:	7c 91       	ld	r23, X
    544e:	6d 93       	st	X+, r22
    5450:	70 83       	st	Z, r23
    5452:	62 91       	ld	r22, -Z
    5454:	ae 17       	cp	r26, r30
    5456:	bf 07       	cpc	r27, r31
    5458:	c8 f3       	brcs	.-14     	; 0x544c <strrev+0x10>
    545a:	08 95       	ret

0000545c <_exit>:
    545c:	f8 94       	cli

0000545e <__stop_program>:
    545e:	ff cf       	rjmp	.-2      	; 0x545e <__stop_program>
